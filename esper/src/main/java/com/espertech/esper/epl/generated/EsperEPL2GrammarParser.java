// $ANTLR 3.1.1 EsperEPL2Grammar.g 2010-08-03 15:40:33

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=171;
    public static final int FLOAT_SUFFIX=326;
    public static final int STAR=269;
    public static final int NUMERIC_PARAM_LIST=111;
    public static final int MOD=287;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=153;
    public static final int CREATE_COL_TYPE_LIST=226;
    public static final int BSR=308;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=177;
    public static final int TIMEPERIOD_MILLISECONDS=95;
    public static final int FULL_OUTERJOIN_EXPR=157;
    public static final int MATCHREC_PATTERN_CONCAT=251;
    public static final int INC=301;
    public static final int LNOT=297;
    public static final int RPAREN=266;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=274;
    public static final int BSR_ASSIGN=309;
    public static final int CAST_EXPR=206;
    public static final int MATCHES=106;
    public static final int STREAM_EXPR=152;
    public static final int TIMEPERIOD_SECONDS=92;
    public static final int NOT_EQUAL=279;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=120;
    public static final int LAST_AGGREG=233;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=114;
    public static final int FOLLOWED_BY=291;
    public static final int HOUR_PART=182;
    public static final int RBRACK=268;
    public static final int MATCHREC_PATTERN_NESTED=253;
    public static final int MATCH_UNTIL_RANGE_CLOSED=224;
    public static final int GE=283;
    public static final int METHOD_JOIN_EXPR=220;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=119;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=118;
    public static final int MINUS_ASSIGN=302;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=130;
    public static final int NUM_DOUBLE=247;
    public static final int INSERTINTO_STREAM_NAME=194;
    public static final int LCURLY=288;
    public static final int TIMEPERIOD_MILLISEC=93;
    public static final int UNARY_MINUS=178;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=192;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=128;
    public static final int WS=318;
    public static final int EMAILAT=317;
    public static final int SUBSELECT_GROUP_EXPR=198;
    public static final int ON_SELECT_INSERT_EXPR=215;
    public static final int ESCAPECHAR=292;
    public static final int EXPRCOL=175;
    public static final int SL_COMMENT=319;
    public static final int NULL_TYPE=246;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=222;
    public static final int GT=281;
    public static final int BNOT=298;
    public static final int WHERE_EXPR=139;
    public static final int END=33;
    public static final int LAND=315;
    public static final int INNERJOIN_EXPR=154;
    public static final int NOT_REGEXP=189;
    public static final int MATCH_UNTIL_EXPR=221;
    public static final int EVENT_PROP_EXPR=161;
    public static final int LBRACK=267;
    public static final int VIEW_EXPR=136;
    public static final int ANNOTATION=229;
    public static final int LONG_TYPE=241;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=121;
    public static final int MATCHREC_PATTERN=249;
    public static final int TIMEPERIOD_SEC=90;
    public static final int TICKED_STRING_LITERAL=293;
    public static final int ON_SELECT_EXPR=213;
    public static final int MINUTE_PART=183;
    public static final int PATTERN_NOT_EXPR=117;
    public static final int SQL_NE=278;
    public static final int SUM=18;
    public static final int HexDigit=324;
    public static final int UPDATE_EXPR=234;
    public static final int LPAREN=265;
    public static final int IN_SUBSELECT_EXPR=200;
    public static final int AT=82;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=96;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=255;
    public static final int NOT_IN_RANGE=196;
    public static final int OFFSET=100;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int PREVIOUS=69;
    public static final int SECOND_PART=184;
    public static final int MATCH_RECOGNIZE=102;
    public static final int IDENT=262;
    public static final int DATABASE_JOIN_EXPR=138;
    public static final int BXOR=277;
    public static final int PLUS=271;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=84;
    public static final int CREATE_SCHEMA_EXPR=236;
    public static final int EXISTS=71;
    public static final int EVENT_PROP_INDEXED=164;
    public static final int CREATE_INDEX_EXPR=207;
    public static final int TIMEPERIOD_MILLISECOND=94;
    public static final int EVAL_NOTEQUALS_EXPR=145;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=223;
    public static final int CREATE_VARIABLE_EXPR=219;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=256;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=115;
    public static final int RIGHT_OUTERJOIN_EXPR=156;
    public static final int NUMBERSETSTAR=228;
    public static final int LAST_OPERATOR=203;
    public static final int PATTERN_FILTER_EXPR=116;
    public static final int EVAL_AND_EXPR=142;
    public static final int LEFT_OUTERJOIN_EXPR=155;
    public static final int EPL_EXPR=248;
    public static final int GROUP_BY_EXPR=158;
    public static final int SET=79;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=74;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=162;
    public static final int MINUS=285;
    public static final int SEMI=316;
    public static final int STAR_ASSIGN=304;
    public static final int VARIANT_LIST=239;
    public static final int FIRST_AGGREG=232;
    public static final int COLON=273;
    public static final int EVAL_EQUALS_GROUP_EXPR=146;
    public static final int BAND_ASSIGN=314;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=172;
    public static final int VALUE_NULL=98;
    public static final int NOT_IN_SET=186;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=165;
    public static final int SL=310;
    public static final int NOT_IN_SUBSELECT_EXPR=201;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=134;
    public static final int SR=306;
    public static final int RCURLY=289;
    public static final int PLUS_ASSIGN=300;
    public static final int EXISTS_SUBSELECT_EXPR=199;
    public static final int DAY_PART=181;
    public static final int EVENT_FILTER_IN=129;
    public static final int DIV=286;
    public static final int OBJECT_PARAM_ORDERED_EXPR=113;
    public static final int OctalEscape=323;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=185;
    public static final int PRIOR=70;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=99;
    public static final int SELECTION_EXPR=149;
    public static final int LOR=284;
    public static final int CAST=75;
    public static final int LW=73;
    public static final int WILDCARD_SELECT=193;
    public static final int EXPONENT=325;
    public static final int LT=280;
    public static final int PATTERN_INCL_EXPR=137;
    public static final int WHILE=109;
    public static final int ORDER_BY_EXPR=159;
    public static final int BOOL_TYPE=245;
    public static final int MOD_ASSIGN=305;
    public static final int ANNOTATION_ARRAY=230;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=202;
    public static final int EQUALS=263;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=299;
    public static final int SL_ASSIGN=311;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=254;
    public static final int WEEKDAY=72;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=214;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=180;
    public static final int CREATE_COL_TYPE=227;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=97;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=147;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=242;
    public static final int TIMEPERIOD_SECOND=91;
    public static final int COALESCE=22;
    public static final int EVENT_FILTER_BETWEEN=131;
    public static final int ANNOTATION_VALUE=231;
    public static final int SUBSELECT_EXPR=197;
    public static final int NUMERIC_PARAM_RANGE=110;
    public static final int CONCAT=176;
    public static final int CLASS_IDENT=133;
    public static final int MATCHREC_PATTERN_ALTER=252;
    public static final int ON_EXPR=210;
    public static final int CREATE_WINDOW_EXPR=208;
    public static final int PROPERTY_SELECTION_STREAM=123;
    public static final int ON_DELETE_EXPR=212;
    public static final int NUM_LONG=294;
    public static final int ON=41;
    public static final int TIME_PERIOD=179;
    public static final int DOUBLE_TYPE=243;
    public static final int DELETE=77;
    public static final int INT_TYPE=240;
    public static final int MATCHREC_PARTITION=260;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=141;
    public static final int ORDER_ELEMENT_EXPR=160;
    public static final int TIMEPERIOD_HOURS=87;
    public static final int VARIABLE=80;
    public static final int SUBSTITUTION=205;
    public static final int UNTIL=81;
    public static final int STRING_TYPE=244;
    public static final int NUM_INT=290;
    public static final int MATCHREC_DEFINE_ITEM=257;
    public static final int ON_SET_EXPR=218;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=238;
    public static final int NUM_FLOAT=295;
    public static final int ON_EXPR_FROM=217;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=321;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=122;
    public static final int WEEKDAY_OPERATOR=204;
    public static final int DEC=303;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=312;
    public static final int NUMERIC_PARAM_FREQUENCY=112;
    public static final int SNAPSHOT=78;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=170;
    public static final int EVENT_FILTER_PARAM=126;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=167;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=101;
    public static final int FOR=108;
    public static final int ON_STREAM=211;
    public static final int DEFINE=104;
    public static final int TIMEPERIOD_DAYS=85;
    public static final int EVENT_FILTER_RANGE=127;
    public static final int ML_COMMENT=320;
    public static final int INDEX=83;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=166;
    public static final int BOR_ASSIGN=313;
    public static final int COMMA=261;
    public static final int IS=42;
    public static final int PARTITION=105;
    public static final int WHEN_LIMIT_EXPR=173;
    public static final int TIMEPERIOD_LIMIT_EXPR=169;
    public static final int SOME=49;
    public static final int EQUAL=296;
    public static final int BOR=270;
    public static final int MATCHREC_MEASURE_ITEM=259;
    public static final int TIMEPERIOD_HOUR=86;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=132;
    public static final int IN_RANGE=195;
    public static final int DOT=264;
    public static final int MATCHREC_MEASURES=258;
    public static final int CURRENT_TIMESTAMP=76;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=124;
    public static final int INSERTINTO_EXPR=174;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=140;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=225;
    public static final int EVAL_EQUALS_EXPR=144;
    public static final int TIMEPERIOD_MINUTES=89;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=188;
    public static final int EVENT_LIMIT_EXPR=168;
    public static final int TIMEPERIOD_MINUTE=88;
    public static final int NOT_BETWEEN=187;
    public static final int EVAL_OR_EXPR=143;
    public static final int ON_SELECT_INSERT_OUTPUT=216;
    public static final int MEASURES=103;
    public static final int AFTER=107;
    public static final int BAND=276;
    public static final int MATCHREC_PATTERN_ATOM=250;
    public static final int QUOTED_STRING_LITERAL=275;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=272;
    public static final int OBSERVER_EXPR=135;
    public static final int CREATE_SCHEMA_EXPR_QUAL=237;
    public static final int EVENT_FILTER_IDENT=125;
    public static final int EVENT_PROP_MAPPED=163;
    public static final int UnicodeEscape=322;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=190;
    public static final int SELECTION_ELEMENT_EXPR=150;
    public static final int CREATE_WINDOW_SELECT_EXPR=209;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=235;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=151;
    public static final int SR_ASSIGN=307;
    public static final int LE=282;
    public static final int DBFROM_CLAUSE=191;
    public static final int EVAL_IDENT=148;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:525:1: startPatternExpressionRule : ( annotationNoEnum )* patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:526:2: ( ( annotationNoEnum )* patternExpression EOF )
            // EsperEPL2Grammar.g:526:4: ( annotationNoEnum )* patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:526:4: ( annotationNoEnum )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // EsperEPL2Grammar.g:526:4: annotationNoEnum
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1606);
            	    annotationNoEnum1=annotationNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1611);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1615); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:531:1: startEPLExpressionRule : ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:532:2: ( ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) )
            // EsperEPL2Grammar.g:532:4: ( annotationEnum )* eplExpression EOF
            {
            // EsperEPL2Grammar.g:532:4: ( annotationEnum )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // EsperEPL2Grammar.g:532:4: annotationEnum
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1629);
            	    annotationEnum4=annotationEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1635);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: eplExpression, annotationEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 535:3: -> ^( EPL_EXPR ( annotationEnum )* eplExpression )
            {
                // EsperEPL2Grammar.g:535:6: ^( EPL_EXPR ( annotationEnum )* eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                // EsperEPL2Grammar.g:535:17: ( annotationEnum )*
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());

                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:538:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:539:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:539:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1665);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1669); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationNoEnum"
    // EsperEPL2Grammar.g:546:1: annotationNoEnum : '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;

        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;


        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:547:5: ( '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) )
            // EsperEPL2Grammar.g:547:9: '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);

            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1691);
            classIdentifier10=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            // EsperEPL2Grammar.g:547:29: ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==IDENT) ) {
                    int LA4_9 = input.LA(3);

                    if ( (LA4_9==EQUALS) ) {
                        int LA4_30 = input.LA(4);

                        if ( ((LA4_30>=BOOLEAN_TRUE && LA4_30<=VALUE_NULL)||LA4_30==NUM_DOUBLE||LA4_30==PLUS||(LA4_30>=STRING_LITERAL && LA4_30<=QUOTED_STRING_LITERAL)||LA4_30==MINUS||LA4_30==LCURLY||LA4_30==NUM_INT||(LA4_30>=NUM_LONG && LA4_30<=NUM_FLOAT)||LA4_30==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:547:31: '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')'
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);

                    // EsperEPL2Grammar.g:547:35: ( elementValuePairsNoEnum | elementValueNoEnum )?
                    int alt3=3;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            // EsperEPL2Grammar.g:547:37: elementValuePairsNoEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1699);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:547:63: elementValueNoEnum
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1703);
                            elementValueNoEnum13=elementValueNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());

                            }
                            break;

                    }

                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1708); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, elementValueNoEnum, elementValuePairsNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 548:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
            {
                // EsperEPL2Grammar.g:548:5: ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:548:34: ( elementValuePairsNoEnum )?
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());

                }
                stream_elementValuePairsNoEnum.reset();
                // EsperEPL2Grammar.g:548:59: ( elementValueNoEnum )?
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationNoEnum"

    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationEnum"
    // EsperEPL2Grammar.g:551:1: annotationEnum : '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;

        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;


        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:552:5: ( '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) )
            // EsperEPL2Grammar.g:552:9: '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);

            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1751);
            classIdentifier16=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            // EsperEPL2Grammar.g:552:29: ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:552:31: '(' ( elementValuePairsEnum | elementValueEnum )? ')'
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1755); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);

                    // EsperEPL2Grammar.g:552:35: ( elementValuePairsEnum | elementValueEnum )?
                    int alt5=3;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);

                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==DOT||LA5_1==RPAREN) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            // EsperEPL2Grammar.g:552:37: elementValuePairsEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1759);
                            elementValuePairsEnum18=elementValuePairsEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:552:61: elementValueEnum
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1763);
                            elementValueEnum19=elementValueEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());

                            }
                            break;

                    }

                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1768); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValuePairsEnum, classIdentifier, elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 553:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
            {
                // EsperEPL2Grammar.g:553:5: ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:553:34: ( elementValuePairsEnum )?
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());

                }
                stream_elementValuePairsEnum.reset();
                // EsperEPL2Grammar.g:553:57: ( elementValueEnum )?
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationEnum"

    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsNoEnum"
    // EsperEPL2Grammar.g:556:1: elementValuePairsNoEnum : elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;

        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;


        CommonTree COMMA22_tree=null;

        try {
            // EsperEPL2Grammar.g:557:5: ( elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* )
            // EsperEPL2Grammar.g:557:9: elementValuePairNoEnum ( COMMA elementValuePairNoEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1809);
            elementValuePairNoEnum21=elementValuePairNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            // EsperEPL2Grammar.g:557:32: ( COMMA elementValuePairNoEnum )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // EsperEPL2Grammar.g:557:33: COMMA elementValuePairNoEnum
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1812); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1815);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsNoEnum"

    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsEnum"
    // EsperEPL2Grammar.g:560:1: elementValuePairsEnum : elementValuePairEnum ( COMMA elementValuePairEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;

        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;


        CommonTree COMMA25_tree=null;

        try {
            // EsperEPL2Grammar.g:561:5: ( elementValuePairEnum ( COMMA elementValuePairEnum )* )
            // EsperEPL2Grammar.g:561:9: elementValuePairEnum ( COMMA elementValuePairEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1836);
            elementValuePairEnum24=elementValuePairEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            // EsperEPL2Grammar.g:561:30: ( COMMA elementValuePairEnum )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // EsperEPL2Grammar.g:561:31: COMMA elementValuePairEnum
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1839); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1842);
            	    elementValuePairEnum26=elementValuePairEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsEnum"

    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairNoEnum"
    // EsperEPL2Grammar.g:564:1: elementValuePairNoEnum : i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;


        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:565:5: (i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) )
            // EsperEPL2Grammar.g:565:9: i= IDENT '=' elementValueNoEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1865); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1867); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);

            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1869);
            elementValueNoEnum28=elementValueNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());


            // AST REWRITE
            // elements: i, elementValueNoEnum
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 566:2: -> ^( ANNOTATION_VALUE $i elementValueNoEnum )
            {
                // EsperEPL2Grammar.g:566:5: ^( ANNOTATION_VALUE $i elementValueNoEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairNoEnum"

    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairEnum"
    // EsperEPL2Grammar.g:569:1: elementValuePairEnum : i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;


        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:570:5: (i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) )
            // EsperEPL2Grammar.g:570:9: i= IDENT '=' elementValueEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1908); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);

            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1910);
            elementValueEnum30=elementValueEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());


            // AST REWRITE
            // elements: elementValueEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 571:2: -> ^( ANNOTATION_VALUE $i elementValueEnum )
            {
                // EsperEPL2Grammar.g:571:5: ^( ANNOTATION_VALUE $i elementValueEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairEnum"

    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueNoEnum"
    // EsperEPL2Grammar.g:574:1: elementValueNoEnum : ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant );
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;

        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;

        EsperEPL2GrammarParser.constant_return constant33 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            // EsperEPL2Grammar.g:575:5: ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant )
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:575:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1941);
                    annotationEnum31=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:576:9: ( elementValueArrayNoEnum )
                    {
                    // EsperEPL2Grammar.g:576:9: ( elementValueArrayNoEnum )
                    // EsperEPL2Grammar.g:576:10: elementValueArrayNoEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1952);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayNoEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 576:35: -> elementValueArrayNoEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:577:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueNoEnum1965);
                    constant33=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueNoEnum"

    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueEnum"
    // EsperEPL2Grammar.g:580:1: elementValueEnum : ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier );
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;

        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;

        EsperEPL2GrammarParser.constant_return constant36 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            // EsperEPL2Grammar.g:581:5: ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier )
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // EsperEPL2Grammar.g:581:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum1988);
                    annotationEnum34=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:582:9: ( elementValueArrayEnum )
                    {
                    // EsperEPL2Grammar.g:582:9: ( elementValueArrayEnum )
                    // EsperEPL2Grammar.g:582:10: elementValueArrayEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum1999);
                    elementValueArrayEnum35=elementValueArrayEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 582:33: -> elementValueArrayEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:583:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueEnum2012);
                    constant36=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:584:7: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2020);
                    classIdentifier37=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueEnum"

    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayNoEnum"
    // EsperEPL2Grammar.g:587:1: elementValueArrayNoEnum : '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;


        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:588:5: ( '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) )
            // EsperEPL2Grammar.g:588:9: '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}'
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);

            // EsperEPL2Grammar.g:588:13: ( elementValueNoEnum ( ',' elementValueNoEnum )* )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:588:14: elementValueNoEnum ( ',' elementValueNoEnum )*
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2043);
                    elementValueNoEnum39=elementValueNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    // EsperEPL2Grammar.g:588:33: ( ',' elementValueNoEnum )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:588:34: ',' elementValueNoEnum
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2046); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);

                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2048);
                    	    elementValueNoEnum41=elementValueNoEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:588:61: ( ',' )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // EsperEPL2Grammar.g:588:62: ','
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);


                    }
                    break;

            }

            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2059); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);



            // AST REWRITE
            // elements: elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 589:2: -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
            {
                // EsperEPL2Grammar.g:589:5: ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:589:24: ( elementValueNoEnum )*
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayNoEnum"

    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayEnum"
    // EsperEPL2Grammar.g:592:1: elementValueArrayEnum : '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;


        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:593:5: ( '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) )
            // EsperEPL2Grammar.g:593:9: '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}'
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);

            // EsperEPL2Grammar.g:593:13: ( elementValueEnum ( ',' elementValueEnum )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:593:14: elementValueEnum ( ',' elementValueEnum )*
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2091);
                    elementValueEnum45=elementValueEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    // EsperEPL2Grammar.g:593:31: ( ',' elementValueEnum )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }


                        }


                        switch (alt14) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:593:32: ',' elementValueEnum
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2094); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);

                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2096);
                    	    elementValueEnum47=elementValueEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:593:57: ( ',' )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:593:58: ','
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);


                    }
                    break;

            }

            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);



            // AST REWRITE
            // elements: elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 594:2: -> ^( ANNOTATION_ARRAY ( elementValueEnum )* )
            {
                // EsperEPL2Grammar.g:594:5: ^( ANNOTATION_ARRAY ( elementValueEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:594:24: ( elementValueEnum )*
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayEnum"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:600:1: eplExpression : ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr ) ( forExpr )? ;
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;

        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr52 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr53 = null;

        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr54 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr55 = null;

        EsperEPL2GrammarParser.updateExpr_return updateExpr56 = null;

        EsperEPL2GrammarParser.forExpr_return forExpr57 = null;



        try {
            // EsperEPL2Grammar.g:601:2: ( ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr ) ( forExpr )? )
            // EsperEPL2Grammar.g:601:4: ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr ) ( forExpr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:601:4: ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr )
            int alt17=7;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt17=2;
                    }
                    break;
                case INDEX:
                    {
                    alt17=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt17=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt17=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);

                    throw nvae;
                }

                }
                break;
            case ON:
                {
                alt17=6;
                }
                break;
            case UPDATE:
                {
                alt17=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:601:5: selectExpr
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2140);
                    selectExpr50=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:602:4: createWindowExpr
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2145);
                    createWindowExpr51=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:603:4: createIndexExpr
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2150);
                    createIndexExpr52=createIndexExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr52.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:604:4: createVariableExpr
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2155);
                    createVariableExpr53=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr53.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:605:4: createSchemaExpr
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2160);
                    createSchemaExpr54=createSchemaExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr54.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:606:4: onExpr
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2165);
                    onExpr55=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr55.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:607:4: updateExpr
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2170);
                    updateExpr56=updateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr56.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:607:16: ( forExpr )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==FOR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:607:16: forExpr
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2173);
                    forExpr57=forExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr57.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:610:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT58=null;
        Token SELECT60=null;
        Token FROM62=null;
        Token WHERE65=null;
        Token GROUP67=null;
        Token BY68=null;
        Token HAVING70=null;
        Token OUTPUT72=null;
        Token ORDER74=null;
        Token BY75=null;
        Token ROW_LIMIT_EXPR77=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr59 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause61 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause63 = null;

        EsperEPL2GrammarParser.matchRecog_return matchRecog64 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause66 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr69 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause71 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit73 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr76 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit78 = null;


        CommonTree INSERT58_tree=null;
        CommonTree SELECT60_tree=null;
        CommonTree FROM62_tree=null;
        CommonTree WHERE65_tree=null;
        CommonTree GROUP67_tree=null;
        CommonTree BY68_tree=null;
        CommonTree HAVING70_tree=null;
        CommonTree OUTPUT72_tree=null;
        CommonTree ORDER74_tree=null;
        CommonTree BY75_tree=null;
        CommonTree ROW_LIMIT_EXPR77_tree=null;

        try {
            // EsperEPL2Grammar.g:611:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:611:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:611:4: ( INSERT insertIntoExpr )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==INSERT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:611:5: INSERT insertIntoExpr
                    {
                    INSERT58=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2187); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2190);
                    insertIntoExpr59=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr59.getTree());

                    }
                    break;

            }

            SELECT60=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2196); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2199);
            selectClause61=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause61.getTree());
            FROM62=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2203); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2206);
            fromClause63=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause63.getTree());
            // EsperEPL2Grammar.g:614:3: ( matchRecog )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==MATCH_RECOGNIZE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:614:3: matchRecog
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2210);
                    matchRecog64=matchRecog();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog64.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:615:3: ( WHERE whereClause )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==WHERE) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:615:4: WHERE whereClause
                    {
                    WHERE65=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2216); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2219);
                    whereClause66=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause66.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:616:3: ( GROUP BY groupByListExpr )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==GROUP) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:616:4: GROUP BY groupByListExpr
                    {
                    GROUP67=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2226); if (state.failed) return retval;
                    BY68=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2229); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2232);
                    groupByListExpr69=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr69.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:617:3: ( HAVING havingClause )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==HAVING) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:617:4: HAVING havingClause
                    {
                    HAVING70=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2239); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2242);
                    havingClause71=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause71.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:618:3: ( OUTPUT outputLimit )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==OUTPUT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:618:4: OUTPUT outputLimit
                    {
                    OUTPUT72=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2249); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2252);
                    outputLimit73=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit73.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:619:3: ( ORDER BY orderByListExpr )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ORDER) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:619:4: ORDER BY orderByListExpr
                    {
                    ORDER74=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2259); if (state.failed) return retval;
                    BY75=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2262); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2265);
                    orderByListExpr76=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr76.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:620:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==ROW_LIMIT_EXPR) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // EsperEPL2Grammar.g:620:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR77=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2272); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2275);
                    rowLimit78=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit78.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:623:1: onExpr : ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr ) -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON79=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr80 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr81 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr82 = null;

        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr83 = null;

        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert84 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr85 = null;

        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr86 = null;


        CommonTree ON79_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            // EsperEPL2Grammar.g:624:2: ( ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr ) -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? ) )
            // EsperEPL2Grammar.g:624:4: ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr )
            {
            ON79=(Token)match(input,ON,FOLLOW_ON_in_onExpr2290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON79);

            pushFollow(FOLLOW_onStreamExpr_in_onExpr2292);
            onStreamExpr80=onStreamExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr80.getTree());
            // EsperEPL2Grammar.g:625:3: ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr )
            int alt30=4;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt30=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt30=2;
                }
                break;
            case SET:
                {
                alt30=3;
                }
                break;
            case UPDATE:
                {
                alt30=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }

            switch (alt30) {
                case 1 :
                    // EsperEPL2Grammar.g:625:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2297);
                    onDeleteExpr81=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr81.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:625:19: onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2301);
                    onSelectExpr82=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr82.getTree());
                    // EsperEPL2Grammar.g:625:32: ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==INSERT) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // EsperEPL2Grammar.g:625:33: ( onSelectInsertExpr )+ ( outputClauseInsert )?
                            {
                            // EsperEPL2Grammar.g:625:33: ( onSelectInsertExpr )+
                            int cnt27=0;
                            loop27:
                            do {
                                int alt27=2;
                                int LA27_0 = input.LA(1);

                                if ( (LA27_0==INSERT) ) {
                                    alt27=1;
                                }


                                switch (alt27) {
                            	case 1 :
                            	    // EsperEPL2Grammar.g:625:33: onSelectInsertExpr
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2304);
                            	    onSelectInsertExpr83=onSelectInsertExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr83.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt27 >= 1 ) break loop27;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(27, input);
                                        throw eee;
                                }
                                cnt27++;
                            } while (true);

                            // EsperEPL2Grammar.g:625:53: ( outputClauseInsert )?
                            int alt28=2;
                            int LA28_0 = input.LA(1);

                            if ( (LA28_0==OUTPUT) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    // EsperEPL2Grammar.g:625:53: outputClauseInsert
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2307);
                                    outputClauseInsert84=outputClauseInsert();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert84.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:625:77: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2314);
                    onSetExpr85=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr85.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:625:89: onUpdateExpr
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2318);
                    onUpdateExpr86=onUpdateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr86.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onSelectInsertExpr, onDeleteExpr, onUpdateExpr, onSelectExpr, onStreamExpr, outputClauseInsert, onSetExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 626:3: -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? )
            {
                // EsperEPL2Grammar.g:626:6: ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                // EsperEPL2Grammar.g:626:29: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:626:43: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:626:57: ( onSelectInsertExpr )*
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());

                }
                stream_onSelectInsertExpr.reset();
                // EsperEPL2Grammar.g:626:77: ( outputClauseInsert )?
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());

                }
                stream_outputClauseInsert.reset();
                // EsperEPL2Grammar.g:626:97: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();
                // EsperEPL2Grammar.g:626:108: ( onUpdateExpr )?
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());

                }
                stream_onUpdateExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onStreamExpr"
    // EsperEPL2Grammar.g:629:1: onStreamExpr : ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ) ;
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS89=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression87 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression88 = null;


        CommonTree i_tree=null;
        CommonTree AS89_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:630:2: ( ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ) )
            // EsperEPL2Grammar.g:630:4: ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )?
            {
            // EsperEPL2Grammar.g:630:4: ( eventFilterExpression | patternInclusionExpression )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==IDENT||LA31_0==TICKED_STRING_LITERAL) ) {
                alt31=1;
            }
            else if ( (LA31_0==PATTERN) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // EsperEPL2Grammar.g:630:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2361);
                    eventFilterExpression87=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression87.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:630:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2365);
                    patternInclusionExpression88=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression88.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:630:57: ( AS i= IDENT | i= IDENT )?
            int alt32=3;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:630:58: AS i= IDENT
                    {
                    AS89=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2369); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS89);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2373); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:630:71: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2379); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: patternInclusionExpression, i, eventFilterExpression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 631:3: -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? )
            {
                // EsperEPL2Grammar.g:631:6: ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);

                // EsperEPL2Grammar.g:631:18: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:631:41: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:631:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onStreamExpr"

    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updateExpr"
    // EsperEPL2Grammar.g:634:1: updateExpr : UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token UPDATE90=null;
        Token ISTREAM91=null;
        Token AS93=null;
        Token SET94=null;
        Token COMMA96=null;
        Token WHERE98=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier92 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment95 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment97 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause99 = null;


        CommonTree i_tree=null;
        CommonTree UPDATE90_tree=null;
        CommonTree ISTREAM91_tree=null;
        CommonTree AS93_tree=null;
        CommonTree SET94_tree=null;
        CommonTree COMMA96_tree=null;
        CommonTree WHERE98_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:635:2: ( UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:635:4: UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE90=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE90);

            ISTREAM91=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM91);

            pushFollow(FOLLOW_classIdentifier_in_updateExpr2414);
            classIdentifier92=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier92.getTree());
            // EsperEPL2Grammar.g:635:35: ( AS i= IDENT | i= IDENT )?
            int alt33=3;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==AS) ) {
                alt33=1;
            }
            else if ( (LA33_0==IDENT) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    // EsperEPL2Grammar.g:635:36: AS i= IDENT
                    {
                    AS93=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2417); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS93);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2421); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:635:49: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET94=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET94);

            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2435);
            onSetAssignment95=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment95.getTree());
            // EsperEPL2Grammar.g:636:23: ( COMMA onSetAssignment )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==COMMA) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // EsperEPL2Grammar.g:636:24: COMMA onSetAssignment
            	    {
            	    COMMA96=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2438); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA96);

            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2440);
            	    onSetAssignment97=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment97.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);

            // EsperEPL2Grammar.g:637:3: ( WHERE whereClause )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==WHERE) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // EsperEPL2Grammar.g:637:4: WHERE whereClause
                    {
                    WHERE98=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2448); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE98);

                    pushFollow(FOLLOW_whereClause_in_updateExpr2450);
                    whereClause99=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause99.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, whereClause, onSetAssignment, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 638:3: -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:638:6: ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:638:36: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:638:57: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "updateExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:641:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT100=null;
        Token SELECT102=null;
        Token DISTINCT103=null;
        Token WHERE106=null;
        Token GROUP108=null;
        Token BY109=null;
        Token HAVING111=null;
        Token ORDER113=null;
        Token BY114=null;
        Token ROW_LIMIT_EXPR116=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr101 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList104 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom105 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause107 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr110 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause112 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr115 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit117 = null;


        CommonTree INSERT100_tree=null;
        CommonTree SELECT102_tree=null;
        CommonTree DISTINCT103_tree=null;
        CommonTree WHERE106_tree=null;
        CommonTree GROUP108_tree=null;
        CommonTree BY109_tree=null;
        CommonTree HAVING111_tree=null;
        CommonTree ORDER113_tree=null;
        CommonTree BY114_tree=null;
        CommonTree ROW_LIMIT_EXPR116_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:644:2: ( ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? ) )
            // EsperEPL2Grammar.g:644:4: ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            // EsperEPL2Grammar.g:644:4: ( INSERT insertIntoExpr )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==INSERT) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:644:5: INSERT insertIntoExpr
                    {
                    INSERT100=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2498); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT100);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2500);
                    insertIntoExpr101=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr101.getTree());

                    }
                    break;

            }

            SELECT102=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT102);

            // EsperEPL2Grammar.g:645:10: ( DISTINCT )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==DISTINCT) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:645:10: DISTINCT
                    {
                    DISTINCT103=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT103);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_onSelectExpr2511);
            selectionList104=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList104.getTree());
            // EsperEPL2Grammar.g:646:3: ( onExprFrom )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==FROM) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:646:3: onExprFrom
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2515);
                    onExprFrom105=onExprFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom105.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:647:3: ( WHERE whereClause )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==WHERE) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // EsperEPL2Grammar.g:647:4: WHERE whereClause
                    {
                    WHERE106=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE106);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2523);
                    whereClause107=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause107.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:648:3: ( GROUP BY groupByListExpr )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==GROUP) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // EsperEPL2Grammar.g:648:4: GROUP BY groupByListExpr
                    {
                    GROUP108=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP108);

                    BY109=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2534); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY109);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2536);
                    groupByListExpr110=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr110.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:649:3: ( HAVING havingClause )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==HAVING) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // EsperEPL2Grammar.g:649:4: HAVING havingClause
                    {
                    HAVING111=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2543); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING111);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2545);
                    havingClause112=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause112.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:650:3: ( ORDER BY orderByListExpr )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ORDER) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // EsperEPL2Grammar.g:650:4: ORDER BY orderByListExpr
                    {
                    ORDER113=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER113);

                    BY114=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY114);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2556);
                    orderByListExpr115=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr115.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:651:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ROW_LIMIT_EXPR) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:651:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR116=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR116);

                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr2565);
                    rowLimit117=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit117.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: groupByListExpr, whereClause, havingClause, onExprFrom, selectionList, DISTINCT, rowLimit, orderByListExpr, insertIntoExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 652:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? )
            {
                // EsperEPL2Grammar.g:652:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:652:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                // EsperEPL2Grammar.g:652:39: ( DISTINCT )?
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:652:63: ( onExprFrom )?
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());

                }
                stream_onExprFrom.reset();
                // EsperEPL2Grammar.g:652:75: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:652:88: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:652:105: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:652:119: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();
                // EsperEPL2Grammar.g:652:136: ( rowLimit )?
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());

                }
                stream_rowLimit.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onUpdateExpr"
    // EsperEPL2Grammar.g:655:1: onUpdateExpr : UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token UPDATE118=null;
        Token AS119=null;
        Token SET120=null;
        Token COMMA122=null;
        Token WHERE124=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment121 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment123 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause125 = null;


        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE118_tree=null;
        CommonTree AS119_tree=null;
        CommonTree SET120_tree=null;
        CommonTree COMMA122_tree=null;
        CommonTree WHERE124_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            // EsperEPL2Grammar.g:658:2: ( UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:658:4: UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE118=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr2625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE118);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:659:11: ( AS i= IDENT | i= IDENT )?
            int alt44=3;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==AS) ) {
                alt44=1;
            }
            else if ( (LA44_0==IDENT) ) {
                alt44=2;
            }
            switch (alt44) {
                case 1 :
                    // EsperEPL2Grammar.g:659:12: AS i= IDENT
                    {
                    AS119=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr2635); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS119);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2639); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:659:25: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET120=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr2651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET120);

            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2653);
            onSetAssignment121=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment121.getTree());
            // EsperEPL2Grammar.g:660:23: ( COMMA onSetAssignment )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==COMMA) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // EsperEPL2Grammar.g:660:24: COMMA onSetAssignment
            	    {
            	    COMMA122=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr2656); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA122);

            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2658);
            	    onSetAssignment123=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment123.getTree());

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);

            // EsperEPL2Grammar.g:661:3: ( WHERE whereClause )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==WHERE) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // EsperEPL2Grammar.g:661:4: WHERE whereClause
                    {
                    WHERE124=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr2665); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE124);

                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr2667);
                    whereClause125=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause125.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: n, i, onSetAssignment, whereClause
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 662:3: -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:662:6: ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);

                // EsperEPL2Grammar.g:662:23: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);

                adaptor.addChild(root_2, stream_n.nextNode());
                // EsperEPL2Grammar.g:662:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:662:63: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onUpdateExpr"

    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectInsertExpr"
    // EsperEPL2Grammar.g:665:1: onSelectInsertExpr : INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT126=null;
        Token SELECT128=null;
        Token WHERE130=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr127 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList129 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause131 = null;


        CommonTree INSERT126_tree=null;
        CommonTree SELECT128_tree=null;
        CommonTree WHERE130_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            // EsperEPL2Grammar.g:668:2: ( INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) )
            // EsperEPL2Grammar.g:668:4: INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )?
            {
            INSERT126=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT126);

            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2720);
            insertIntoExpr127=insertIntoExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr127.getTree());
            SELECT128=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr2724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT128);

            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr2726);
            selectionList129=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList129.getTree());
            // EsperEPL2Grammar.g:670:3: ( WHERE whereClause )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==WHERE) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // EsperEPL2Grammar.g:670:4: WHERE whereClause
                    {
                    WHERE130=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr2731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE130);

                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr2733);
                    whereClause131=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause131.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, selectionList, insertIntoExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 671:3: -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
            {
                // EsperEPL2Grammar.g:671:6: ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:671:59: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectInsertExpr"

    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputClauseInsert"
    // EsperEPL2Grammar.g:674:1: outputClauseInsert : OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) ;
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        Token a=null;
        Token OUTPUT132=null;

        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT132_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

        try {
            // EsperEPL2Grammar.g:675:2: ( OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) )
            // EsperEPL2Grammar.g:675:4: OUTPUT (f= FIRST | a= ALL )
            {
            OUTPUT132=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert2764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT132);

            // EsperEPL2Grammar.g:675:11: (f= FIRST | a= ALL )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==FIRST) ) {
                alt48=1;
            }
            else if ( (LA48_0==ALL) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // EsperEPL2Grammar.g:675:12: f= FIRST
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert2769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:675:22: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert2775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;

            }



            // AST REWRITE
            // elements: a, f
            // token labels: f, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 676:3: -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
            {
                // EsperEPL2Grammar.g:676:6: ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);

                // EsperEPL2Grammar.g:676:32: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());

                }
                stream_f.reset();
                // EsperEPL2Grammar.g:676:36: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputClauseInsert"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:679:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE133=null;
        Token WHERE135=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom134 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause136 = null;


        CommonTree DELETE133_tree=null;
        CommonTree WHERE135_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:682:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:682:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE133=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2817); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE133);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2821);
            onExprFrom134=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom134.getTree());
            // EsperEPL2Grammar.g:684:3: ( WHERE whereClause )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==WHERE) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // EsperEPL2Grammar.g:684:4: WHERE whereClause
                    {
                    WHERE135=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE135);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2828);
                    whereClause136=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause136.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, onExprFrom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 685:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:685:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:685:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:688:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET137=null;
        Token COMMA139=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment138 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment140 = null;


        CommonTree SET137_tree=null;
        CommonTree COMMA139_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:691:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:691:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET137=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET137);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2870);
            onSetAssignment138=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment138.getTree());
            // EsperEPL2Grammar.g:691:24: ( COMMA onSetAssignment )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==COMMA) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // EsperEPL2Grammar.g:691:25: COMMA onSetAssignment
            	    {
            	    COMMA139=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2873); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA139);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2875);
            	    onSetAssignment140=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment140.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 692:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:692:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:695:1: onSetAssignment : eventProperty EQUALS expression -> ^( ON_SET_EXPR_ITEM eventProperty expression ) ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS142=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty141 = null;

        EsperEPL2GrammarParser.expression_return expression143 = null;


        CommonTree EQUALS142_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:696:2: ( eventProperty EQUALS expression -> ^( ON_SET_EXPR_ITEM eventProperty expression ) )
            // EsperEPL2Grammar.g:696:4: eventProperty EQUALS expression
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment2900);
            eventProperty141=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty141.getTree());
            EQUALS142=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2902); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS142);

            pushFollow(FOLLOW_expression_in_onSetAssignment2904);
            expression143=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression143.getTree());


            // AST REWRITE
            // elements: expression, eventProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 697:3: -> ^( ON_SET_EXPR_ITEM eventProperty expression )
            {
                // EsperEPL2Grammar.g:697:6: ^( ON_SET_EXPR_ITEM eventProperty expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);

                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:700:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM144=null;
        Token AS145=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM144_tree=null;
        CommonTree AS145_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:701:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:701:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM144=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM144);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:701:17: ( AS i= IDENT | i= IDENT )?
            int alt51=3;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==AS) ) {
                alt51=1;
            }
            else if ( (LA51_0==IDENT) ) {
                alt51=2;
            }
            switch (alt51) {
                case 1 :
                    // EsperEPL2Grammar.g:701:18: AS i= IDENT
                    {
                    AS145=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS145);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:701:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2946); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, n
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 702:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:702:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:702:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:705:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE146=null;
        Token WINDOW147=null;
        Token DOT148=null;
        Token DOT150=null;
        Token AS152=null;
        Token LPAREN154=null;
        Token RPAREN156=null;
        Token WHERE157=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression149 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression151 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter153 = null;

        EsperEPL2GrammarParser.createColumnList_return createColumnList155 = null;

        EsperEPL2GrammarParser.expression_return expression158 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE146_tree=null;
        CommonTree WINDOW147_tree=null;
        CommonTree DOT148_tree=null;
        CommonTree DOT150_tree=null;
        CommonTree AS152_tree=null;
        CommonTree LPAREN154_tree=null;
        CommonTree RPAREN156_tree=null;
        CommonTree WHERE157_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            // EsperEPL2Grammar.g:706:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ) )
            // EsperEPL2Grammar.g:706:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE146=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2974); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE146);

            WINDOW147=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW147);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr2980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:706:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==DOT) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // EsperEPL2Grammar.g:706:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT148=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT148);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2985);
                    viewExpression149=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression149.getTree());
                    // EsperEPL2Grammar.g:706:46: ( DOT viewExpression )*
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);

                        if ( (LA52_0==DOT) ) {
                            alt52=1;
                        }


                        switch (alt52) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:706:47: DOT viewExpression
                    	    {
                    	    DOT150=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2988); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT150);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2990);
                    	    viewExpression151=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression151.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop52;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:706:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt54=3;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==RETAINUNION) ) {
                alt54=1;
            }
            else if ( (LA54_0==RETAININTERSECTION) ) {
                alt54=2;
            }
            switch (alt54) {
                case 1 :
                    // EsperEPL2Grammar.g:706:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr2999); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:706:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:706:110: ( AS )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==AS) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // EsperEPL2Grammar.g:706:110: AS
                    {
                    AS152=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS152);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:707:5: ( createWindowExprModelAfter | LPAREN createColumnList RPAREN )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==SELECT||LA56_0==IDENT||LA56_0==TICKED_STRING_LITERAL) ) {
                alt56=1;
            }
            else if ( (LA56_0==LPAREN) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // EsperEPL2Grammar.g:708:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3022);
                    createWindowExprModelAfter153=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter153.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:709:10: LPAREN createColumnList RPAREN
                    {
                    LPAREN154=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3037); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN154);

                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3039);
                    createColumnList155=createColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList155.getTree());
                    RPAREN156=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN156);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:711:5: (i1= INSERT ( WHERE expression )? )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==INSERT) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // EsperEPL2Grammar.g:711:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3058); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:711:16: ( WHERE expression )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==WHERE) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // EsperEPL2Grammar.g:711:17: WHERE expression
                            {
                            WHERE157=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3061); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE157);

                            pushFollow(FOLLOW_expression_in_createWindowExpr3063);
                            expression158=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression158.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: ri, createWindowExprModelAfter, expression, createColumnList, ri, INSERT, i, i, createColumnList, ru, viewExpression, viewExpression, ru, createWindowExprModelAfter
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 712:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:712:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:712:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:712:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:712:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:712:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:712:98: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();
                // EsperEPL2Grammar.g:713:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:713:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 714:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? )
            {
                // EsperEPL2Grammar.g:714:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:714:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:714:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:714:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:714:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:714:84: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:717:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT159=null;
        Token FROM161=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList160 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier162 = null;


        CommonTree SELECT159_tree=null;
        CommonTree FROM161_tree=null;

        try {
            // EsperEPL2Grammar.g:718:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:718:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:718:4: ( SELECT createSelectionList FROM )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==SELECT) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // EsperEPL2Grammar.g:718:5: SELECT createSelectionList FROM
                    {
                    SELECT159=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3150); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3153);
                    createSelectionList160=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList160.getTree());
                    FROM161=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3155); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3160);
            classIdentifier162=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier162.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createIndexExpr"
    // EsperEPL2Grammar.g:721:1: createIndexExpr : CREATE INDEX n= IDENT ON w= IDENT LPAREN columnList RPAREN -> ^( CREATE_INDEX_EXPR $n $w columnList ) ;
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token w=null;
        Token CREATE163=null;
        Token INDEX164=null;
        Token ON165=null;
        Token LPAREN166=null;
        Token RPAREN168=null;
        EsperEPL2GrammarParser.columnList_return columnList167 = null;


        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE163_tree=null;
        CommonTree INDEX164_tree=null;
        CommonTree ON165_tree=null;
        CommonTree LPAREN166_tree=null;
        CommonTree RPAREN168_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            // EsperEPL2Grammar.g:722:2: ( CREATE INDEX n= IDENT ON w= IDENT LPAREN columnList RPAREN -> ^( CREATE_INDEX_EXPR $n $w columnList ) )
            // EsperEPL2Grammar.g:722:4: CREATE INDEX n= IDENT ON w= IDENT LPAREN columnList RPAREN
            {
            CREATE163=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE163);

            INDEX164=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX164);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            ON165=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON165);

            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);

            LPAREN166=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN166);

            pushFollow(FOLLOW_columnList_in_createIndexExpr3189);
            columnList167=columnList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList167.getTree());
            RPAREN168=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3191); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN168);



            // AST REWRITE
            // elements: columnList, w, n
            // token labels: w, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 723:3: -> ^( CREATE_INDEX_EXPR $n $w columnList )
            {
                // EsperEPL2Grammar.g:723:6: ^( CREATE_INDEX_EXPR $n $w columnList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createIndexExpr"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:726:1: createVariableExpr : CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token CREATE169=null;
        Token VARIABLE170=null;
        Token EQUALS172=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier171 = null;

        EsperEPL2GrammarParser.expression_return expression173 = null;


        CommonTree n_tree=null;
        CommonTree CREATE169_tree=null;
        CommonTree VARIABLE170_tree=null;
        CommonTree EQUALS172_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:727:2: ( CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? ) )
            // EsperEPL2Grammar.g:727:4: CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )?
            {
            CREATE169=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE169);

            VARIABLE170=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE170);

            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3222);
            classIdentifier171=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier171.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3226); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:727:44: ( EQUALS expression )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==EQUALS) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // EsperEPL2Grammar.g:727:45: EQUALS expression
                    {
                    EQUALS172=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3229); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS172);

                    pushFollow(FOLLOW_expression_in_createVariableExpr3231);
                    expression173=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression173.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, classIdentifier, n
            // token labels: n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 728:3: -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? )
            {
                // EsperEPL2Grammar.g:728:6: ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:728:48: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createColumnList"
    // EsperEPL2Grammar.g:731:1: createColumnList : createColumnListElement ( COMMA createColumnListElement )* -> ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA175=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement174 = null;

        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement176 = null;


        CommonTree COMMA175_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            // EsperEPL2Grammar.g:734:2: ( createColumnListElement ( COMMA createColumnListElement )* -> ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ ) )
            // EsperEPL2Grammar.g:734:4: createColumnListElement ( COMMA createColumnListElement )*
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3273);
            createColumnListElement174=createColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement174.getTree());
            // EsperEPL2Grammar.g:734:28: ( COMMA createColumnListElement )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==COMMA) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // EsperEPL2Grammar.g:734:29: COMMA createColumnListElement
            	    {
            	    COMMA175=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3276); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA175);

            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3278);
            	    createColumnListElement176=createColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement176.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);



            // AST REWRITE
            // elements: createColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 735:3: -> ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:735:6: ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);

                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());

                }
                stream_createColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createColumnList"

    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createColumnListElement"
    // EsperEPL2Grammar.g:738:1: createColumnListElement : name= IDENT ( classIdentifier (b= LBRACK RBRACK )? ) -> ^( CREATE_COL_TYPE $name classIdentifier ( $b)? ) ;
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token b=null;
        Token RBRACK178=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier177 = null;


        CommonTree name_tree=null;
        CommonTree b_tree=null;
        CommonTree RBRACK178_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:739:2: (name= IDENT ( classIdentifier (b= LBRACK RBRACK )? ) -> ^( CREATE_COL_TYPE $name classIdentifier ( $b)? ) )
            // EsperEPL2Grammar.g:739:7: name= IDENT ( classIdentifier (b= LBRACK RBRACK )? )
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createColumnListElement3308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            // EsperEPL2Grammar.g:739:18: ( classIdentifier (b= LBRACK RBRACK )? )
            // EsperEPL2Grammar.g:739:19: classIdentifier (b= LBRACK RBRACK )?
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3311);
            classIdentifier177=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier177.getTree());
            // EsperEPL2Grammar.g:739:35: (b= LBRACK RBRACK )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==LBRACK) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // EsperEPL2Grammar.g:739:36: b= LBRACK RBRACK
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement3316); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);

                    RBRACK178=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement3318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK178);


                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: classIdentifier, b, name
            // token labels: b, name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 740:3: -> ^( CREATE_COL_TYPE $name classIdentifier ( $b)? )
            {
                // EsperEPL2Grammar.g:740:6: ^( CREATE_COL_TYPE $name classIdentifier ( $b)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:740:46: ( $b)?
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:743:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA180=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement179 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement181 = null;


        CommonTree COMMA180_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:746:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:746:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3362);
            createSelectionListElement179=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement179.getTree());
            // EsperEPL2Grammar.g:746:31: ( COMMA createSelectionListElement )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==COMMA) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // EsperEPL2Grammar.g:746:32: COMMA createSelectionListElement
            	    {
            	    COMMA180=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3365); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA180);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3367);
            	    createSelectionListElement181=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement181.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 747:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:747:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:750:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS183=null;
        Token AS185=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty182 = null;

        EsperEPL2GrammarParser.constant_return constant184 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS183_tree=null;
        CommonTree AS185_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:751:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt65=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt65=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt65=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt65=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }

            switch (alt65) {
                case 1 :
                    // EsperEPL2Grammar.g:751:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 752:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:753:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3408);
                    eventProperty182=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty182.getTree());
                    // EsperEPL2Grammar.g:753:18: ( AS i= IDENT )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==AS) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // EsperEPL2Grammar.g:753:19: AS i= IDENT
                            {
                            AS183=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3411); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS183);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3415); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: eventProperty, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 754:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:754:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:754:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:755:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3436);
                    constant184=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant184.getTree());
                    AS185=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3438); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS185);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3442); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: constant, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 756:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:756:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:756:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSchemaExpr"
    // EsperEPL2Grammar.g:759:1: createSchemaExpr : CREATE (keyword= IDENT )? SCHEMA name= IDENT ( AS )? ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? ) -> {$inherits != null}? ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) ) -> {$keyword != null}? ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) ) -> ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? ) ;
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE186=null;
        Token SCHEMA187=null;
        Token AS188=null;
        Token LPAREN190=null;
        Token RPAREN192=null;
        EsperEPL2GrammarParser.variantList_return variantList189 = null;

        EsperEPL2GrammarParser.createColumnList_return createColumnList191 = null;

        EsperEPL2GrammarParser.columnList_return columnList193 = null;


        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE186_tree=null;
        CommonTree SCHEMA187_tree=null;
        CommonTree AS188_tree=null;
        CommonTree LPAREN190_tree=null;
        CommonTree RPAREN192_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            // EsperEPL2Grammar.g:760:2: ( CREATE (keyword= IDENT )? SCHEMA name= IDENT ( AS )? ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? ) -> {$inherits != null}? ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) ) -> {$keyword != null}? ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) ) -> ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? ) )
            // EsperEPL2Grammar.g:760:4: CREATE (keyword= IDENT )? SCHEMA name= IDENT ( AS )? ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? )
            {
            CREATE186=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr3467); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE186);

            // EsperEPL2Grammar.g:760:18: (keyword= IDENT )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==IDENT) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // EsperEPL2Grammar.g:760:18: keyword= IDENT
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);


                    }
                    break;

            }

            SCHEMA187=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr3474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA187);

            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            // EsperEPL2Grammar.g:760:44: ( AS )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==AS) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // EsperEPL2Grammar.g:760:44: AS
                    {
                    AS188=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr3480); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS188);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:761:5: ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==IDENT||LA70_0==STAR||LA70_0==TICKED_STRING_LITERAL) ) {
                alt70=1;
            }
            else if ( (LA70_0==LPAREN) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // EsperEPL2Grammar.g:762:4: variantList
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr3493);
                    variantList189=variantList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList189.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:763:10: LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )?
                    {
                    LPAREN190=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr3504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN190);

                    // EsperEPL2Grammar.g:763:17: ( createColumnList )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==IDENT) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // EsperEPL2Grammar.g:763:17: createColumnList
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr3506);
                            createColumnList191=createColumnList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList191.getTree());

                            }
                            break;

                    }

                    RPAREN192=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr3509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN192);

                    // EsperEPL2Grammar.g:763:42: (inherits= IDENT columnList )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==IDENT) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // EsperEPL2Grammar.g:763:43: inherits= IDENT columnList
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3514); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);

                            pushFollow(FOLLOW_columnList_in_createSchemaExpr3516);
                            columnList193=columnList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList193.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: name, name, keyword, variantList, inherits, createColumnList, columnList, createColumnList, variantList, name
            // token labels: inherits, keyword, name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 765:3: -> {$inherits != null}? ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) )
            if (inherits != null) {
                // EsperEPL2Grammar.g:765:27: ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                // EsperEPL2Grammar.g:765:54: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();
                // EsperEPL2Grammar.g:765:72: ^( CREATE_SCHEMA_EXPR_INH $inherits columnList )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);

                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 766:3: -> {$keyword != null}? ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) )
            if (keyword != null) {
                // EsperEPL2Grammar.g:766:26: ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                // EsperEPL2Grammar.g:766:65: ^( CREATE_SCHEMA_EXPR_QUAL $keyword)
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);

                adaptor.addChild(root_2, stream_keyword.nextNode());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 767:3: -> ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? )
            {
                // EsperEPL2Grammar.g:767:6: ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                // EsperEPL2Grammar.g:767:33: ( variantList )?
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());

                }
                stream_variantList.reset();
                // EsperEPL2Grammar.g:767:46: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSchemaExpr"

    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variantList"
    // EsperEPL2Grammar.g:770:1: variantList : variantListElement ( COMMA variantListElement )* -> ^( VARIANT_LIST ( variantListElement )+ ) ;
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA195=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement194 = null;

        EsperEPL2GrammarParser.variantListElement_return variantListElement196 = null;


        CommonTree COMMA195_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            // EsperEPL2Grammar.g:771:2: ( variantListElement ( COMMA variantListElement )* -> ^( VARIANT_LIST ( variantListElement )+ ) )
            // EsperEPL2Grammar.g:771:4: variantListElement ( COMMA variantListElement )*
            {
            pushFollow(FOLLOW_variantListElement_in_variantList3605);
            variantListElement194=variantListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement194.getTree());
            // EsperEPL2Grammar.g:771:23: ( COMMA variantListElement )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // EsperEPL2Grammar.g:771:24: COMMA variantListElement
            	    {
            	    COMMA195=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList3608); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA195);

            	    pushFollow(FOLLOW_variantListElement_in_variantList3610);
            	    variantListElement196=variantListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement196.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);



            // AST REWRITE
            // elements: variantListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 772:3: -> ^( VARIANT_LIST ( variantListElement )+ )
            {
                // EsperEPL2Grammar.g:772:6: ^( VARIANT_LIST ( variantListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);

                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());

                }
                stream_variantListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variantList"

    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variantListElement"
    // EsperEPL2Grammar.g:775:1: variantListElement : ( STAR | classIdentifier );
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR197=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier198 = null;


        CommonTree STAR197_tree=null;

        try {
            // EsperEPL2Grammar.g:776:2: ( STAR | classIdentifier )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==STAR) ) {
                alt72=1;
            }
            else if ( (LA72_0==IDENT||LA72_0==TICKED_STRING_LITERAL) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // EsperEPL2Grammar.g:776:7: STAR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STAR197=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement3637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR197_tree = (CommonTree)adaptor.create(STAR197);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR197_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:777:4: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_variantListElement3643);
                    classIdentifier198=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier198.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variantListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:780:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( LPAREN columnList RPAREN )? -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO199=null;
        Token LPAREN200=null;
        Token RPAREN202=null;
        EsperEPL2GrammarParser.columnList_return columnList201 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO199_tree=null;
        CommonTree LPAREN200_tree=null;
        CommonTree RPAREN202_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:783:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( LPAREN columnList RPAREN )? -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? ) )
            // EsperEPL2Grammar.g:783:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( LPAREN columnList RPAREN )?
            {
            // EsperEPL2Grammar.g:783:4: (s= ISTREAM | s= RSTREAM )?
            int alt73=3;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==ISTREAM) ) {
                alt73=1;
            }
            else if ( (LA73_0==RSTREAM) ) {
                alt73=2;
            }
            switch (alt73) {
                case 1 :
                    // EsperEPL2Grammar.g:783:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:783:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3674); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO199=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO199);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:783:42: ( LPAREN columnList RPAREN )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==LPAREN) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // EsperEPL2Grammar.g:783:43: LPAREN columnList RPAREN
                    {
                    LPAREN200=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr3685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN200);

                    pushFollow(FOLLOW_columnList_in_insertIntoExpr3687);
                    columnList201=columnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList201.getTree());
                    RPAREN202=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr3689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN202);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, i, columnList
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 784:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? )
            {
                // EsperEPL2Grammar.g:784:6: ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:784:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:784:31: ( columnList )?
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());

                }
                stream_columnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "columnList"
    // EsperEPL2Grammar.g:787:1: columnList : IDENT ( COMMA IDENT )* -> ^( EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT203=null;
        Token COMMA204=null;
        Token IDENT205=null;

        CommonTree IDENT203_tree=null;
        CommonTree COMMA204_tree=null;
        CommonTree IDENT205_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");

        try {
            // EsperEPL2Grammar.g:788:2: ( IDENT ( COMMA IDENT )* -> ^( EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:788:5: IDENT ( COMMA IDENT )*
            {
            IDENT203=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT203);

            // EsperEPL2Grammar.g:788:11: ( COMMA IDENT )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // EsperEPL2Grammar.g:788:12: COMMA IDENT
            	    {
            	    COMMA204=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList3726); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA204);

            	    IDENT205=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3728); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT205);


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 789:3: -> ^( EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:789:6: ^( EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:789:16: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "columnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:792:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression206 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin207 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList208 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:795:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:795:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause3766);
            streamExpression206=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression206.getTree());
            // EsperEPL2Grammar.g:795:21: ( regularJoin | outerJoinList )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==EOF||LA76_0==WHERE||(LA76_0>=GROUP && LA76_0<=HAVING)||LA76_0==OUTPUT||LA76_0==ORDER||LA76_0==ROW_LIMIT_EXPR||LA76_0==MATCH_RECOGNIZE||LA76_0==FOR||LA76_0==COMMA) ) {
                alt76=1;
            }
            else if ( ((LA76_0>=INNER && LA76_0<=FULL)) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // EsperEPL2Grammar.g:795:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause3769);
                    regularJoin207=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin207.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:795:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause3773);
                    outerJoinList208=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList208.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:798:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA209=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression210 = null;


        CommonTree COMMA209_tree=null;

        try {
            // EsperEPL2Grammar.g:799:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:799:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:799:4: ( COMMA streamExpression )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // EsperEPL2Grammar.g:799:5: COMMA streamExpression
            	    {
            	    COMMA209=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin3787); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin3790);
            	    streamExpression210=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression210.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:802:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin211 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin212 = null;



        try {
            // EsperEPL2Grammar.g:803:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:803:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList3804);
            outerJoin211=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin211.getTree());
            // EsperEPL2Grammar.g:803:14: ( outerJoin )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( ((LA78_0>=INNER && LA78_0<=FULL)) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // EsperEPL2Grammar.g:803:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList3807);
            	    outerJoin212=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin212.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:806:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER213=null;
        Token JOIN214=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression215 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent216 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER213_tree=null;
        CommonTree JOIN214_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:809:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:809:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:809:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( ((LA81_0>=JOIN && LA81_0<=FULL)) ) {
                alt81=1;
            }
            else if ( (LA81_0==INNER) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    // EsperEPL2Grammar.g:810:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:810:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( ((LA80_0>=LEFT && LA80_0<=FULL)) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // EsperEPL2Grammar.g:810:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:810:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt79=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt79=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt79=2;
                                }
                                break;
                            case FULL:
                                {
                                alt79=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 79, 0, input);

                                throw nvae;
                            }

                            switch (alt79) {
                                case 1 :
                                    // EsperEPL2Grammar.g:810:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin3850); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:810:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin3854); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:810:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin3858); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER213=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin3861); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER213);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:811:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:811:14: (i= INNER )
                    // EsperEPL2Grammar.g:811:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin3882); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN214=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin3896); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN214);

            pushFollow(FOLLOW_streamExpression_in_outerJoin3898);
            streamExpression215=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression215.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin3900);
            outerJoinIdent216=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent216.getTree());


            // AST REWRITE
            // elements: outerJoinIdent, streamExpression, streamExpression, outerJoinIdent, outerJoinIdent, outerJoinIdent, streamExpression, streamExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 813:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:813:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 814:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:814:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 815:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:815:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 816:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:816:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:819:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON217=null;
        Token AND_EXPR219=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair218 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair220 = null;


        CommonTree ON217_tree=null;
        CommonTree AND_EXPR219_tree=null;

        try {
            // EsperEPL2Grammar.g:820:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:820:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON217=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent3965); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3968);
            outerJoinIdentPair218=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair218.getTree());
            // EsperEPL2Grammar.g:820:27: ( AND_EXPR outerJoinIdentPair )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==AND_EXPR) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // EsperEPL2Grammar.g:820:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR219=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent3971); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3974);
            	    outerJoinIdentPair220=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair220.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:823:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS222=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty221 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty223 = null;


        CommonTree EQUALS222_tree=null;

        try {
            // EsperEPL2Grammar.g:824:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:824:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3989);
            eventProperty221=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty221.getTree());
            EQUALS222=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair3991); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3994);
            eventProperty223=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty223.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:827:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression224 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:830:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:830:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4016);
            evalOrExpression224=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression224.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 831:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:831:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:834:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList225 = null;


        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:837:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) )
            // EsperEPL2Grammar.g:837:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList
            {
            // EsperEPL2Grammar.g:837:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt83=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt83=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt83=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt83=3;
                    }
                    break;
            }

            switch (alt83) {
                case 1 :
                    // EsperEPL2Grammar.g:837:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4052); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:837:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4058); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:837:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:837:43: (d= DISTINCT )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==DISTINCT) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // EsperEPL2Grammar.g:837:43: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4070); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause4073);
            selectionList225=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList225.getTree());


            // AST REWRITE
            // elements: d, s, selectionList
            // token labels: d, s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 838:3: -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
            {
                // EsperEPL2Grammar.g:838:6: ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:838:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:838:27: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:841:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA227=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement226 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement228 = null;


        CommonTree COMMA227_tree=null;

        try {
            // EsperEPL2Grammar.g:842:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:842:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList4104);
            selectionListElement226=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement226.getTree());
            // EsperEPL2Grammar.g:842:25: ( COMMA selectionListElement )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // EsperEPL2Grammar.g:842:26: COMMA selectionListElement
            	    {
            	    COMMA227=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4107); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4110);
            	    selectionListElement228=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement228.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:845:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS231=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector229 = null;

        EsperEPL2GrammarParser.expression_return expression230 = null;


        CommonTree s_tree=null;
        CommonTree AS231_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:847:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt87=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt87=1;
                }
                break;
            case IDENT:
                {
                int LA87_2 = input.LA(2);

                if ( (LA87_2==DOT) ) {
                    int LA87_63 = input.LA(3);

                    if ( (LA87_63==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt87=2;
                    }
                    else if ( (LA87_63==WINDOW||LA87_63==ESCAPE||LA87_63==EVERY_EXPR||(LA87_63>=SUM && LA87_63<=COUNT)||LA87_63==OUTER||(LA87_63>=JOIN && LA87_63<=FULL)||(LA87_63>=EVENTS && LA87_63<=LAST)||(LA87_63>=UNIDIRECTIONAL && LA87_63<=PRIOR)||(LA87_63>=WEEKDAY && LA87_63<=CAST)||LA87_63==SNAPSHOT||(LA87_63>=VARIABLE && LA87_63<=INDEX)||(LA87_63>=DEFINE && LA87_63<=MATCHES)||LA87_63==WHILE||LA87_63==IDENT||LA87_63==TICKED_STRING_LITERAL) ) {
                        alt87=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 87, 63, input);

                        throw nvae;
                    }
                }
                else if ( (LA87_2==EOF||(LA87_2>=IN_SET && LA87_2<=REGEXP)||(LA87_2>=OR_EXPR && LA87_2<=NOT_EXPR)||(LA87_2>=WHERE && LA87_2<=AS)||LA87_2==FROM||LA87_2==IS||(LA87_2>=GROUP && LA87_2<=HAVING)||LA87_2==OUTPUT||LA87_2==INSERT||LA87_2==ORDER||LA87_2==ROW_LIMIT_EXPR||LA87_2==FOR||LA87_2==COMMA||LA87_2==EQUALS||LA87_2==LPAREN||LA87_2==LBRACK||(LA87_2>=STAR && LA87_2<=QUESTION)||(LA87_2>=BAND && LA87_2<=MOD)||LA87_2==ESCAPECHAR) ) {
                    alt87=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt87=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    // EsperEPL2Grammar.g:847:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 847:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:848:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4152);
                    streamSelector229=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector229.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:849:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4157);
                    expression230=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression230.getTree());
                    // EsperEPL2Grammar.g:849:15: ( AS i= keywordAllowedIdent )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==AS) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // EsperEPL2Grammar.g:849:16: AS i= keywordAllowedIdent
                            {
                            AS231=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4160); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS231);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4164);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 850:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:850:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 851:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:851:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 852:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:852:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:855:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT232=null;
        Token STAR233=null;
        Token AS234=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT232_tree=null;
        CommonTree STAR233_tree=null;
        CommonTree AS234_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:856:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:856:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT232=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT232);

            STAR233=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR233);

            // EsperEPL2Grammar.g:856:21: ( AS i= IDENT )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==AS) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // EsperEPL2Grammar.g:856:22: AS i= IDENT
                    {
                    AS234=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4227); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS234);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4231); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 857:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:857:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:857:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:861:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT239=null;
        Token DOT241=null;
        Token AS243=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression235 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression236 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression237 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression238 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression240 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression242 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT239_tree=null;
        CommonTree DOT241_tree=null;
        CommonTree AS243_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:862:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:862:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:862:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt89=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA89_1 = input.LA(2);

                if ( (LA89_1==EOF||(LA89_1>=WHERE && LA89_1<=AS)||(LA89_1>=INNER && LA89_1<=ON)||(LA89_1>=GROUP && LA89_1<=HAVING)||LA89_1==OUTPUT||LA89_1==ORDER||(LA89_1>=UNIDIRECTIONAL && LA89_1<=RETAININTERSECTION)||LA89_1==ROW_LIMIT_EXPR||LA89_1==MATCH_RECOGNIZE||LA89_1==FOR||(LA89_1>=COMMA && LA89_1<=LPAREN)||LA89_1==LBRACK) ) {
                    alt89=1;
                }
                else if ( (LA89_1==COLON) ) {
                    alt89=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt89=1;
                }
                break;
            case PATTERN:
                {
                alt89=2;
                }
                break;
            case SQL:
                {
                alt89=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }

            switch (alt89) {
                case 1 :
                    // EsperEPL2Grammar.g:862:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4262);
                    eventFilterExpression235=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression235.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:862:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4266);
                    patternInclusionExpression236=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression236.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:862:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4270);
                    databaseJoinExpression237=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression237.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:862:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4274);
                    methodJoinExpression238=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression238.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:863:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==DOT) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // EsperEPL2Grammar.g:863:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT239=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT239);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression4283);
                    viewExpression240=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression240.getTree());
                    // EsperEPL2Grammar.g:863:23: ( DOT viewExpression )*
                    loop90:
                    do {
                        int alt90=2;
                        int LA90_0 = input.LA(1);

                        if ( (LA90_0==DOT) ) {
                            alt90=1;
                        }


                        switch (alt90) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:863:24: DOT viewExpression
                    	    {
                    	    DOT241=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4286); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT241);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4288);
                    	    viewExpression242=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression242.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop90;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:863:47: ( AS i= IDENT | i= IDENT )?
            int alt92=3;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==AS) ) {
                alt92=1;
            }
            else if ( (LA92_0==IDENT) ) {
                alt92=2;
            }
            switch (alt92) {
                case 1 :
                    // EsperEPL2Grammar.g:863:48: AS i= IDENT
                    {
                    AS243=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4295); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS243);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:863:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:863:71: (u= UNIDIRECTIONAL )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==UNIDIRECTIONAL) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // EsperEPL2Grammar.g:863:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:863:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt94=3;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==RETAINUNION) ) {
                alt94=1;
            }
            else if ( (LA94_0==RETAININTERSECTION) ) {
                alt94=2;
            }
            switch (alt94) {
                case 1 :
                    // EsperEPL2Grammar.g:863:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4319); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:863:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4323); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventFilterExpression, viewExpression, ri, u, i, methodJoinExpression, databaseJoinExpression, patternInclusionExpression, ru
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 864:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:864:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:864:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:864:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:864:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:864:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:865:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:865:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:865:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:865:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:865:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forExpr"
    // EsperEPL2Grammar.g:868:1: forExpr : FOR i= IDENT ( LPAREN ( expressionList )? RPAREN )? -> ^( FOR $i ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token FOR244=null;
        Token LPAREN245=null;
        Token RPAREN247=null;
        EsperEPL2GrammarParser.expressionList_return expressionList246 = null;


        CommonTree i_tree=null;
        CommonTree FOR244_tree=null;
        CommonTree LPAREN245_tree=null;
        CommonTree RPAREN247_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            // EsperEPL2Grammar.g:869:2: ( FOR i= IDENT ( LPAREN ( expressionList )? RPAREN )? -> ^( FOR $i ( expressionList )? ) )
            // EsperEPL2Grammar.g:869:4: FOR i= IDENT ( LPAREN ( expressionList )? RPAREN )?
            {
            FOR244=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr4379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR244);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr4383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:869:16: ( LPAREN ( expressionList )? RPAREN )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==LPAREN) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // EsperEPL2Grammar.g:869:17: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN245=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr4386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN245);

                    // EsperEPL2Grammar.g:869:24: ( expressionList )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==WINDOW||LA95_0==ESCAPE||(LA95_0>=NOT_EXPR && LA95_0<=EVERY_EXPR)||(LA95_0>=SUM && LA95_0<=COUNT)||LA95_0==CASE||LA95_0==OUTER||(LA95_0>=JOIN && LA95_0<=FULL)||(LA95_0>=EVENTS && LA95_0<=LAST)||(LA95_0>=UNIDIRECTIONAL && LA95_0<=CURRENT_TIMESTAMP)||LA95_0==SNAPSHOT||(LA95_0>=VARIABLE && LA95_0<=INDEX)||(LA95_0>=BOOLEAN_TRUE && LA95_0<=VALUE_NULL)||(LA95_0>=DEFINE && LA95_0<=MATCHES)||LA95_0==WHILE||LA95_0==NUM_DOUBLE||LA95_0==IDENT||LA95_0==LPAREN||(LA95_0>=PLUS && LA95_0<=QUESTION)||(LA95_0>=STRING_LITERAL && LA95_0<=QUOTED_STRING_LITERAL)||LA95_0==MINUS||LA95_0==LCURLY||LA95_0==NUM_INT||(LA95_0>=TICKED_STRING_LITERAL && LA95_0<=NUM_FLOAT)) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // EsperEPL2Grammar.g:869:24: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr4388);
                            expressionList246=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList246.getTree());

                            }
                            break;

                    }

                    RPAREN247=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr4391); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN247);


                    }
                    break;

            }



            // AST REWRITE
            // elements: FOR, expressionList, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 870:3: -> ^( FOR $i ( expressionList )? )
            {
                // EsperEPL2Grammar.g:870:6: ^( FOR $i ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:870:15: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forExpr"

    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecog"
    // EsperEPL2Grammar.g:882:1: matchRecog : MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) ;
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MATCH_RECOGNIZE248=null;
        Token LPAREN249=null;
        Token RPAREN257=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy250 = null;

        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures251 = null;

        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection252 = null;

        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip253 = null;

        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern254 = null;

        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval255 = null;

        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine256 = null;


        CommonTree MATCH_RECOGNIZE248_tree=null;
        CommonTree LPAREN249_tree=null;
        CommonTree RPAREN257_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            // EsperEPL2Grammar.g:883:2: ( MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) )
            // EsperEPL2Grammar.g:883:4: MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN
            {
            MATCH_RECOGNIZE248=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog4427); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE248);

            LPAREN249=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog4441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN249);

            // EsperEPL2Grammar.g:885:4: ( matchRecogPartitionBy )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==PARTITION) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // EsperEPL2Grammar.g:885:4: matchRecogPartitionBy
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog4447);
                    matchRecogPartitionBy250=matchRecogPartitionBy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy250.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog4454);
            matchRecogMeasures251=matchRecogMeasures();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures251.getTree());
            // EsperEPL2Grammar.g:887:4: ( matchRecogMatchesSelection )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==ALL) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // EsperEPL2Grammar.g:887:4: matchRecogMatchesSelection
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog4459);
                    matchRecogMatchesSelection252=matchRecogMatchesSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection252.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:888:4: ( matchRecogMatchesAfterSkip )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==AFTER) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // EsperEPL2Grammar.g:888:4: matchRecogMatchesAfterSkip
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4465);
                    matchRecogMatchesAfterSkip253=matchRecogMatchesAfterSkip();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip253.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog4471);
            matchRecogPattern254=matchRecogPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern254.getTree());
            // EsperEPL2Grammar.g:890:4: ( matchRecogMatchesInterval )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==IDENT) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // EsperEPL2Grammar.g:890:4: matchRecogMatchesInterval
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog4477);
                    matchRecogMatchesInterval255=matchRecogMatchesInterval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval255.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4483);
            matchRecogDefine256=matchRecogDefine();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine256.getTree());
            RPAREN257=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN257);



            // AST REWRITE
            // elements: matchRecogMeasures, matchRecogDefine, matchRecogPartitionBy, matchRecogMatchesSelection, MATCH_RECOGNIZE, matchRecogPattern, matchRecogMatchesAfterSkip, matchRecogMatchesInterval
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 893:3: -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
            {
                // EsperEPL2Grammar.g:893:6: ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);

                // EsperEPL2Grammar.g:893:24: ( matchRecogPartitionBy )?
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());

                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                // EsperEPL2Grammar.g:893:66: ( matchRecogMatchesSelection )?
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());

                }
                stream_matchRecogMatchesSelection.reset();
                // EsperEPL2Grammar.g:893:94: ( matchRecogMatchesAfterSkip )?
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());

                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                // EsperEPL2Grammar.g:893:140: ( matchRecogMatchesInterval )?
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());

                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecog"

    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPartitionBy"
    // EsperEPL2Grammar.g:896:1: matchRecogPartitionBy : PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PARTITION258=null;
        Token BY259=null;
        Token COMMA261=null;
        EsperEPL2GrammarParser.expression_return expression260 = null;

        EsperEPL2GrammarParser.expression_return expression262 = null;


        CommonTree PARTITION258_tree=null;
        CommonTree BY259_tree=null;
        CommonTree COMMA261_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:897:2: ( PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) )
            // EsperEPL2Grammar.g:897:4: PARTITION BY expression ( COMMA expression )*
            {
            PARTITION258=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION258);

            BY259=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY259);

            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4531);
            expression260=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression260.getTree());
            // EsperEPL2Grammar.g:897:28: ( COMMA expression )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==COMMA) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // EsperEPL2Grammar.g:897:29: COMMA expression
            	    {
            	    COMMA261=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4534); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA261);

            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4536);
            	    expression262=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression262.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 898:3: -> ^( MATCHREC_PARTITION ( expression )+ )
            {
                // EsperEPL2Grammar.g:898:6: ^( MATCHREC_PARTITION ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPartitionBy"

    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasures"
    // EsperEPL2Grammar.g:901:1: matchRecogMeasures : MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MEASURES263=null;
        Token COMMA265=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem264 = null;

        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem266 = null;


        CommonTree MEASURES263_tree=null;
        CommonTree COMMA265_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            // EsperEPL2Grammar.g:902:2: ( MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) )
            // EsperEPL2Grammar.g:902:4: MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )*
            {
            MEASURES263=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4565); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES263);

            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4567);
            matchRecogMeasureItem264=matchRecogMeasureItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem264.getTree());
            // EsperEPL2Grammar.g:902:35: ( COMMA matchRecogMeasureItem )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==COMMA) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // EsperEPL2Grammar.g:902:36: COMMA matchRecogMeasureItem
            	    {
            	    COMMA265=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4570); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA265);

            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4572);
            	    matchRecogMeasureItem266=matchRecogMeasureItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem266.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogMeasureItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 903:3: -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
            {
                // EsperEPL2Grammar.g:903:6: ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);

                // EsperEPL2Grammar.g:903:26: ( matchRecogMeasureItem )*
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());

                }
                stream_matchRecogMeasureItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasures"

    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasureItem"
    // EsperEPL2Grammar.g:906:1: matchRecogMeasureItem : expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS268=null;
        EsperEPL2GrammarParser.expression_return expression267 = null;


        CommonTree i_tree=null;
        CommonTree AS268_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:907:2: ( expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) )
            // EsperEPL2Grammar.g:907:4: expression ( AS (i= IDENT )? )?
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4597);
            expression267=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression267.getTree());
            // EsperEPL2Grammar.g:907:15: ( AS (i= IDENT )? )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==AS) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // EsperEPL2Grammar.g:907:16: AS (i= IDENT )?
                    {
                    AS268=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4600); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS268);

                    // EsperEPL2Grammar.g:907:19: (i= IDENT )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==IDENT) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // EsperEPL2Grammar.g:907:20: i= IDENT
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4605); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 908:3: -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
            {
                // EsperEPL2Grammar.g:908:6: ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:908:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasureItem"

    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesSelection"
    // EsperEPL2Grammar.g:911:1: matchRecogMatchesSelection : ALL MATCHES ;
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL269=null;
        Token MATCHES270=null;

        CommonTree ALL269_tree=null;
        CommonTree MATCHES270_tree=null;

        try {
            // EsperEPL2Grammar.g:912:2: ( ALL MATCHES )
            // EsperEPL2Grammar.g:912:4: ALL MATCHES
            {
            root_0 = (CommonTree)adaptor.nil();

            ALL269=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4636); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL269_tree = (CommonTree)adaptor.create(ALL269);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL269_tree, root_0);
            }
            MATCHES270=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4639); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesSelection"

    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPattern"
    // EsperEPL2Grammar.g:915:1: matchRecogPattern : PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) ;
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN271=null;
        Token LPAREN272=null;
        Token RPAREN274=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration273 = null;


        CommonTree PATTERN271_tree=null;
        CommonTree LPAREN272_tree=null;
        CommonTree RPAREN274_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:916:2: ( PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) )
            // EsperEPL2Grammar.g:916:4: PATTERN LPAREN matchRecogPatternAlteration RPAREN
            {
            PATTERN271=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN271);

            LPAREN272=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN272);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4658);
            matchRecogPatternAlteration273=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration273.getTree());
            RPAREN274=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN274);



            // AST REWRITE
            // elements: matchRecogPatternAlteration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 917:3: -> ^( MATCHREC_PATTERN matchRecogPatternAlteration )
            {
                // EsperEPL2Grammar.g:917:6: ^( MATCHREC_PATTERN matchRecogPatternAlteration )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPattern"

    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesAfterSkip"
    // EsperEPL2Grammar.g:920:1: matchRecogMatchesAfterSkip : AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AFTER275=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;


        CommonTree AFTER275_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            // EsperEPL2Grammar.g:921:2: ( AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) )
            // EsperEPL2Grammar.g:921:4: AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent
            {
            AFTER275=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER275);

            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4686);
            i1=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4690);
            i2=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4694);
            i3=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4698);
            i4=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4702);
            i5=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());


            // AST REWRITE
            // elements: i2, i1, i4, i5, i3
            // token labels: 
            // rule labels: retval, i5, i4, i3, i2, i1
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"token i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"token i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"token i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"token i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"token i1",i1!=null?i1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 922:3: -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
            {
                // EsperEPL2Grammar.g:922:6: ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);

                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesAfterSkip"

    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesInterval"
    // EsperEPL2Grammar.g:925:1: matchRecogMatchesInterval : i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod276 = null;


        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            // EsperEPL2Grammar.g:926:2: (i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) )
            // EsperEPL2Grammar.g:926:4: i= IDENT timePeriod
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval4738); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval4740);
            timePeriod276=timePeriod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod276.getTree());


            // AST REWRITE
            // elements: timePeriod, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 927:3: -> ^( MATCHREC_INTERVAL $i timePeriod )
            {
                // EsperEPL2Grammar.g:927:6: ^( MATCHREC_INTERVAL $i timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesInterval"

    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAlteration"
    // EsperEPL2Grammar.g:930:1: matchRecogPatternAlteration : matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat ;
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat277 = null;

        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat278 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            // EsperEPL2Grammar.g:931:2: ( matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat )
            // EsperEPL2Grammar.g:931:4: matchRecogPatternConcat (o= BOR matchRecogPatternConcat )*
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4766);
            matchRecogPatternConcat277=matchRecogPatternConcat();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat277.getTree());
            // EsperEPL2Grammar.g:931:28: (o= BOR matchRecogPatternConcat )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==BOR) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // EsperEPL2Grammar.g:931:29: o= BOR matchRecogPatternConcat
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration4771); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);

            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4773);
            	    matchRecogPatternConcat278=matchRecogPatternConcat();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat278.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternConcat, matchRecogPatternConcat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 932:3: -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:932:20: ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);

                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());

                }
                stream_matchRecogPatternConcat.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 933:3: -> matchRecogPatternConcat
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAlteration"

    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternConcat"
    // EsperEPL2Grammar.g:936:1: matchRecogPatternConcat : ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary279 = null;


        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            // EsperEPL2Grammar.g:937:2: ( ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) )
            // EsperEPL2Grammar.g:937:4: ( matchRecogPatternUnary )+
            {
            // EsperEPL2Grammar.g:937:4: ( matchRecogPatternUnary )+
            int cnt106=0;
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==IDENT||LA106_0==LPAREN) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // EsperEPL2Grammar.g:937:4: matchRecogPatternUnary
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4806);
            	    matchRecogPatternUnary279=matchRecogPatternUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary279.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt106 >= 1 ) break loop106;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(106, input);
                        throw eee;
                }
                cnt106++;
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 938:3: -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
            {
                // EsperEPL2Grammar.g:938:6: ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);

                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());

                }
                stream_matchRecogPatternUnary.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternConcat"

    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternUnary"
    // EsperEPL2Grammar.g:941:1: matchRecogPatternUnary : ( matchRecogPatternNested | matchRecogPatternAtom );
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested280 = null;

        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom281 = null;



        try {
            // EsperEPL2Grammar.g:942:2: ( matchRecogPatternNested | matchRecogPatternAtom )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==LPAREN) ) {
                alt107=1;
            }
            else if ( (LA107_0==IDENT) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    // EsperEPL2Grammar.g:942:5: matchRecogPatternNested
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4831);
                    matchRecogPatternNested280=matchRecogPatternNested();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested280.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:943:5: matchRecogPatternAtom
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4837);
                    matchRecogPatternAtom281=matchRecogPatternAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom281.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternUnary"

    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternNested"
    // EsperEPL2Grammar.g:946:1: matchRecogPatternNested : LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN282=null;
        Token RPAREN284=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration283 = null;


        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN282_tree=null;
        CommonTree RPAREN284_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:947:2: ( LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) )
            // EsperEPL2Grammar.g:947:5: LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )?
            {
            LPAREN282=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested4849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN282);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4851);
            matchRecogPatternAlteration283=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration283.getTree());
            RPAREN284=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested4853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN284);

            // EsperEPL2Grammar.g:947:47: (s= STAR | p= PLUS | q= QUESTION )?
            int alt108=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt108=1;
                    }
                    break;
                case PLUS:
                    {
                    alt108=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt108=3;
                    }
                    break;
            }

            switch (alt108) {
                case 1 :
                    // EsperEPL2Grammar.g:947:48: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested4858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:947:57: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested4864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:947:66: q= QUESTION
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested4870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);


                    }
                    break;

            }



            // AST REWRITE
            // elements: q, matchRecogPatternAlteration, p, s
            // token labels: s, q, p
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 948:3: -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
            {
                // EsperEPL2Grammar.g:948:6: ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                // EsperEPL2Grammar.g:948:60: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:948:64: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:948:68: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternNested"

    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAtom"
    // EsperEPL2Grammar.g:951:1: matchRecogPatternAtom : i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:952:2: (i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) )
            // EsperEPL2Grammar.g:952:4: i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom4909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:952:12: ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==STAR||(LA111_0>=PLUS && LA111_0<=QUESTION)) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // EsperEPL2Grammar.g:952:13: (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )?
                    {
                    // EsperEPL2Grammar.g:952:13: (s= STAR | p= PLUS | q= QUESTION )
                    int alt109=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt109=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt109=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt109=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 109, 0, input);

                        throw nvae;
                    }

                    switch (alt109) {
                        case 1 :
                            // EsperEPL2Grammar.g:952:14: s= STAR
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom4915); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:952:23: p= PLUS
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom4921); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:952:32: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4927); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:952:44: (reluctant= QUESTION )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==QUESTION) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // EsperEPL2Grammar.g:952:45: reluctant= QUESTION
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4933); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: p, reluctant, i, s, q
            // token labels: s, reluctant, q, p, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 953:3: -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
            {
                // EsperEPL2Grammar.g:953:6: ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:953:33: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:953:37: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:953:41: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();
                // EsperEPL2Grammar.g:953:45: ( $reluctant)?
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());

                }
                stream_reluctant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAtom"

    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefine"
    // EsperEPL2Grammar.g:956:1: matchRecogDefine : DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DEFINE285=null;
        Token COMMA287=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem286 = null;

        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem288 = null;


        CommonTree DEFINE285_tree=null;
        CommonTree COMMA287_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            // EsperEPL2Grammar.g:957:2: ( DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) )
            // EsperEPL2Grammar.g:957:4: DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )*
            {
            DEFINE285=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine4977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE285);

            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4979);
            matchRecogDefineItem286=matchRecogDefineItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem286.getTree());
            // EsperEPL2Grammar.g:957:32: ( COMMA matchRecogDefineItem )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // EsperEPL2Grammar.g:957:33: COMMA matchRecogDefineItem
            	    {
            	    COMMA287=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine4982); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA287);

            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4984);
            	    matchRecogDefineItem288=matchRecogDefineItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem288.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogDefineItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 958:3: -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
            {
                // EsperEPL2Grammar.g:958:6: ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);

                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());

                }
                stream_matchRecogDefineItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefine"

    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefineItem"
    // EsperEPL2Grammar.g:961:1: matchRecogDefineItem : i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS289=null;
        EsperEPL2GrammarParser.expression_return expression290 = null;


        CommonTree i_tree=null;
        CommonTree AS289_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:962:2: (i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) )
            // EsperEPL2Grammar.g:962:4: i= IDENT AS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            AS289=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5013); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS289);

            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5015);
            expression290=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression290.getTree());


            // AST REWRITE
            // elements: i, expression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 963:3: -> ^( MATCHREC_DEFINE_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:963:6: ^( MATCHREC_DEFINE_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefineItem"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:966:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN291=null;
        Token LBRACK292=null;
        Token RBRACK294=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression293 = null;


        CommonTree PATTERN291_tree=null;
        CommonTree LBRACK292_tree=null;
        CommonTree RBRACK294_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:967:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:967:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN291=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN291);

            LBRACK292=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK292);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5044);
            patternExpression293=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression293.getTree());
            RBRACK294=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK294);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 968:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:968:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:971:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL295=null;
        Token COLON296=null;
        Token LBRACK297=null;
        Token METADATASQL298=null;
        Token RBRACK299=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL295_tree=null;
        CommonTree COLON296_tree=null;
        CommonTree LBRACK297_tree=null;
        CommonTree METADATASQL298_tree=null;
        CommonTree RBRACK299_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:974:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:974:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL295=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL295);

            COLON296=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5081); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON296);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK297=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK297);

            // EsperEPL2Grammar.g:974:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==STRING_LITERAL) ) {
                alt113=1;
            }
            else if ( (LA113_0==QUOTED_STRING_LITERAL) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    // EsperEPL2Grammar.g:974:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:974:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:974:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==METADATASQL) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // EsperEPL2Grammar.g:974:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL298=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL298);

                    // EsperEPL2Grammar.g:974:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==STRING_LITERAL) ) {
                        alt114=1;
                    }
                    else if ( (LA114_0==QUOTED_STRING_LITERAL) ) {
                        alt114=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 114, 0, input);

                        throw nvae;
                    }
                    switch (alt114) {
                        case 1 :
                            // EsperEPL2Grammar.g:974:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5107); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:974:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5113); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK299=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5118); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK299);



            // AST REWRITE
            // elements: i, s2, s
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 975:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:975:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:975:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:978:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON300=null;
        Token LPAREN302=null;
        Token RPAREN304=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier301 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList303 = null;


        CommonTree i_tree=null;
        CommonTree COLON300_tree=null;
        CommonTree LPAREN302_tree=null;
        CommonTree RPAREN304_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:981:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:981:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON300=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON300);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5173);
            classIdentifier301=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier301.getTree());
            // EsperEPL2Grammar.g:981:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==LPAREN) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // EsperEPL2Grammar.g:981:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN302=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN302);

                    // EsperEPL2Grammar.g:981:49: ( expressionList )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==WINDOW||LA116_0==ESCAPE||(LA116_0>=NOT_EXPR && LA116_0<=EVERY_EXPR)||(LA116_0>=SUM && LA116_0<=COUNT)||LA116_0==CASE||LA116_0==OUTER||(LA116_0>=JOIN && LA116_0<=FULL)||(LA116_0>=EVENTS && LA116_0<=LAST)||(LA116_0>=UNIDIRECTIONAL && LA116_0<=CURRENT_TIMESTAMP)||LA116_0==SNAPSHOT||(LA116_0>=VARIABLE && LA116_0<=INDEX)||(LA116_0>=BOOLEAN_TRUE && LA116_0<=VALUE_NULL)||(LA116_0>=DEFINE && LA116_0<=MATCHES)||LA116_0==WHILE||LA116_0==NUM_DOUBLE||LA116_0==IDENT||LA116_0==LPAREN||(LA116_0>=PLUS && LA116_0<=QUESTION)||(LA116_0>=STRING_LITERAL && LA116_0<=QUOTED_STRING_LITERAL)||LA116_0==MINUS||LA116_0==LCURLY||LA116_0==NUM_INT||(LA116_0>=TICKED_STRING_LITERAL && LA116_0<=NUM_FLOAT)) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // EsperEPL2Grammar.g:981:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5178);
                            expressionList303=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList303.getTree());

                            }
                            break;

                    }

                    RPAREN304=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN304);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, i, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 982:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:982:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:982:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:985:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON305=null;
        Token LPAREN306=null;
        Token RPAREN308=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList307 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON305_tree=null;
        CommonTree LPAREN306_tree=null;
        CommonTree RPAREN308_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:988:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:988:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5234); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON305=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5236); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON305);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN306=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN306);

            // EsperEPL2Grammar.g:988:35: ( expressionWithTimeList )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==WINDOW||LA118_0==ESCAPE||(LA118_0>=NOT_EXPR && LA118_0<=EVERY_EXPR)||(LA118_0>=SUM && LA118_0<=COUNT)||LA118_0==CASE||LA118_0==OUTER||(LA118_0>=JOIN && LA118_0<=FULL)||(LA118_0>=EVENTS && LA118_0<=LAST)||(LA118_0>=UNIDIRECTIONAL && LA118_0<=CURRENT_TIMESTAMP)||LA118_0==SNAPSHOT||(LA118_0>=VARIABLE && LA118_0<=INDEX)||(LA118_0>=BOOLEAN_TRUE && LA118_0<=VALUE_NULL)||(LA118_0>=DEFINE && LA118_0<=MATCHES)||LA118_0==WHILE||LA118_0==NUM_DOUBLE||LA118_0==IDENT||LA118_0==LPAREN||LA118_0==LBRACK||LA118_0==STAR||(LA118_0>=PLUS && LA118_0<=QUESTION)||(LA118_0>=STRING_LITERAL && LA118_0<=QUOTED_STRING_LITERAL)||LA118_0==MINUS||LA118_0==LCURLY||LA118_0==NUM_INT||(LA118_0>=TICKED_STRING_LITERAL && LA118_0<=NUM_FLOAT)) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // EsperEPL2Grammar.g:988:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5244);
                    expressionWithTimeList307=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList307.getTree());

                    }
                    break;

            }

            RPAREN308=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN308);



            // AST REWRITE
            // elements: nm, ns, expressionWithTimeList
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 989:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:989:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:989:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:992:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA310=null;
        EsperEPL2GrammarParser.expression_return expression309 = null;

        EsperEPL2GrammarParser.expression_return expression311 = null;


        CommonTree COMMA310_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:995:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:995:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5286);
            expression309=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression309.getTree());
            // EsperEPL2Grammar.g:995:15: ( COMMA expression )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==COMMA) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // EsperEPL2Grammar.g:995:16: COMMA expression
            	    {
            	    COMMA310=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5289); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA310);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr5291);
            	    expression311=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression311.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 996:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:996:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:999:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA313=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement312 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement314 = null;


        CommonTree COMMA313_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:1002:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:1002:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5326);
            orderByListElement312=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement312.getTree());
            // EsperEPL2Grammar.g:1002:23: ( COMMA orderByListElement )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==COMMA) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1002:24: COMMA orderByListElement
            	    {
            	    COMMA313=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr5329); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA313);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5331);
            	    orderByListElement314=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement314.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1003:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:1003:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:1006:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression315 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1007:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:1007:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement5356);
            expression315=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression315.getTree());
            // EsperEPL2Grammar.g:1007:15: (d= ASC | d= DESC )?
            int alt121=3;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==ASC) ) {
                alt121=1;
            }
            else if ( (LA121_0==DESC) ) {
                alt121=2;
            }
            switch (alt121) {
                case 1 :
                    // EsperEPL2Grammar.g:1007:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement5361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1007:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement5365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: d, expression
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1008:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:1008:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1008:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:1011:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression316 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:1014:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:1014:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause5403);
            evalOrExpression316=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression316.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1015:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:1015:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:1018:1: outputLimit : ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN322=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter317 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod318 = null;

        EsperEPL2GrammarParser.number_return number319 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet320 = null;

        EsperEPL2GrammarParser.expression_return expression321 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr323 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN322_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:1021:2: ( ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) )
            // EsperEPL2Grammar.g:1021:9: ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            {
            // EsperEPL2Grammar.g:1021:9: ( outputLimitAfter )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==AFTER) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // EsperEPL2Grammar.g:1021:9: outputLimitAfter
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit5441);
                    outputLimitAfter317=outputLimitAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter317.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1022:10: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt123=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt123=1;
                    }
                    break;
                case FIRST:
                    {
                    alt123=2;
                    }
                    break;
                case LAST:
                    {
                    alt123=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt123=4;
                    }
                    break;
            }

            switch (alt123) {
                case 1 :
                    // EsperEPL2Grammar.g:1022:11: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit5456); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1022:17: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit5460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1022:25: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit5464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1022:32: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit5468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1023:10: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            int alt127=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt127=1;
                }
                break;
            case AT:
                {
                alt127=2;
                }
                break;
            case WHEN:
                {
                alt127=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt127=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // EsperEPL2Grammar.g:1024:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:1024:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:1024:14: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5499); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:1025:7: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==NUM_INT) ) {
                        int LA125_1 = input.LA(2);

                        if ( (LA125_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==NUM_LONG) ) {
                        int LA125_2 = input.LA(2);

                        if ( (LA125_2==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==NUM_FLOAT) ) {
                        int LA125_3 = input.LA(2);

                        if ( (LA125_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==NUM_DOUBLE) ) {
                        int LA125_4 = input.LA(2);

                        if ( (LA125_4==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==IDENT) ) {
                        int LA125_5 = input.LA(2);

                        if ( (LA125_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt125=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);

                        throw nvae;
                    }
                    switch (alt125) {
                        case 1 :
                            // EsperEPL2Grammar.g:1026:9: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5525);
                            timePeriod318=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod318.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1027:9: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:1027:9: ( number | i= IDENT )
                            int alt124=2;
                            int LA124_0 = input.LA(1);

                            if ( (LA124_0==NUM_DOUBLE||LA124_0==NUM_INT||(LA124_0>=NUM_LONG && LA124_0<=NUM_FLOAT)) ) {
                                alt124=1;
                            }
                            else if ( (LA124_0==IDENT) ) {
                                alt124=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 124, 0, input);

                                throw nvae;
                            }
                            switch (alt124) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1027:10: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5536);
                                    number319=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number319.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1027:19: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5542); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1027:28: (e= EVENTS )
                            // EsperEPL2Grammar.g:1027:29: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5548); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1031:5: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:1031:5: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:1031:7: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5579); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5581);
                    crontabLimitParameterSet320=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet320.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1033:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:1033:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:1033:7: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit5600);
                    expression321=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression321.getTree());
                    // EsperEPL2Grammar.g:1033:26: ( THEN onSetExpr )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==THEN) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // EsperEPL2Grammar.g:1033:27: THEN onSetExpr
                            {
                            THEN322=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5603); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN322);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5605);
                            onSetExpr323=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr323.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1035:10: 
                    {
                    }
                    break;

            }



            // AST REWRITE
            // elements: onSetExpr, outputLimitAfter, outputLimitAfter, k, k, outputLimitAfter, timePeriod, k, crontabLimitParameterSet, outputLimitAfter, i, number, k, outputLimitAfter, expression
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1036:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:1036:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1036:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:1036:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1036:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1036:73: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1037:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
            if (ev != null) {
                // EsperEPL2Grammar.g:1037:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1037:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                // EsperEPL2Grammar.g:1037:63: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1038:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
            if (at != null) {
                // EsperEPL2Grammar.g:1038:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1038:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                // EsperEPL2Grammar.g:1038:74: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1039:6: -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
            if (wh != null) {
                // EsperEPL2Grammar.g:1039:24: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1039:42: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1039:57: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();
                // EsperEPL2Grammar.g:1039:68: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1040:6: -> ^( AFTER_LIMIT_EXPR outputLimitAfter )
            {
                // EsperEPL2Grammar.g:1040:9: ^( AFTER_LIMIT_EXPR outputLimitAfter )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimitAfter"
    // EsperEPL2Grammar.g:1043:1: outputLimitAfter : a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) ;
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token EVENTS326=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod324 = null;

        EsperEPL2GrammarParser.number_return number325 = null;


        CommonTree a_tree=null;
        CommonTree EVENTS326_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1044:2: (a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) )
            // EsperEPL2Grammar.g:1044:6: a= AFTER ( timePeriod | number EVENTS )
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter5755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);

            // EsperEPL2Grammar.g:1044:14: ( timePeriod | number EVENTS )
            int alt128=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA128_1 = input.LA(2);

                if ( (LA128_1==EVENTS) ) {
                    alt128=2;
                }
                else if ( (LA128_1==MIN||(LA128_1>=TIMEPERIOD_DAY && LA128_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt128=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA128_2 = input.LA(2);

                if ( (LA128_2==MIN||(LA128_2>=TIMEPERIOD_DAY && LA128_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt128=1;
                }
                else if ( (LA128_2==EVENTS) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA128_3 = input.LA(2);

                if ( (LA128_3==MIN||(LA128_3>=TIMEPERIOD_DAY && LA128_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt128=1;
                }
                else if ( (LA128_3==EVENTS) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA128_4 = input.LA(2);

                if ( (LA128_4==MIN||(LA128_4>=TIMEPERIOD_DAY && LA128_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt128=1;
                }
                else if ( (LA128_4==EVENTS) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt128=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }

            switch (alt128) {
                case 1 :
                    // EsperEPL2Grammar.g:1044:15: timePeriod
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter5758);
                    timePeriod324=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod324.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1044:28: number EVENTS
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter5762);
                    number325=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number325.getTree());
                    EVENTS326=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter5764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS326);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, timePeriod, AFTER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1045:6: -> ^( AFTER ( timePeriod )? ( number )? )
            {
                // EsperEPL2Grammar.g:1045:9: ^( AFTER ( timePeriod )? ( number )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);

                // EsperEPL2Grammar.g:1045:17: ( timePeriod )?
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());

                }
                stream_timePeriod.reset();
                // EsperEPL2Grammar.g:1045:29: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimitAfter"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:1048:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:1051:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:1051:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:1051:6: (n1= numberconstant | i1= IDENT )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==NUM_DOUBLE||LA129_0==PLUS||LA129_0==MINUS||LA129_0==NUM_INT||(LA129_0>=NUM_LONG && LA129_0<=NUM_FLOAT)) ) {
                alt129=1;
            }
            else if ( (LA129_0==IDENT) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    // EsperEPL2Grammar.g:1051:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit5810);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1051:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1051:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==OFFSET||LA132_0==COMMA) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // EsperEPL2Grammar.g:1051:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:1051:38: (c= COMMA | o= OFFSET )
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==COMMA) ) {
                        alt130=1;
                    }
                    else if ( (LA130_0==OFFSET) ) {
                        alt130=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 130, 0, input);

                        throw nvae;
                    }
                    switch (alt130) {
                        case 1 :
                            // EsperEPL2Grammar.g:1051:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit5823); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1051:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit5829); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1051:59: (n2= numberconstant | i2= IDENT )
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==NUM_DOUBLE||LA131_0==PLUS||LA131_0==MINUS||LA131_0==NUM_INT||(LA131_0>=NUM_LONG && LA131_0<=NUM_FLOAT)) ) {
                        alt131=1;
                    }
                    else if ( (LA131_0==IDENT) ) {
                        alt131=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 131, 0, input);

                        throw nvae;
                    }
                    switch (alt131) {
                        case 1 :
                            // EsperEPL2Grammar.g:1051:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit5835);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1051:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5841); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: n2, i1, c, o, n1, i2
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1052:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:1052:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1052:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:1052:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:1052:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:1052:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:1052:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:1052:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:1055:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN327=null;
        Token COMMA329=null;
        Token COMMA331=null;
        Token COMMA333=null;
        Token COMMA335=null;
        Token COMMA337=null;
        Token RPAREN339=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime328 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime330 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime332 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime334 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime336 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime338 = null;


        CommonTree LPAREN327_tree=null;
        CommonTree COMMA329_tree=null;
        CommonTree COMMA331_tree=null;
        CommonTree COMMA333_tree=null;
        CommonTree COMMA335_tree=null;
        CommonTree COMMA337_tree=null;
        CommonTree RPAREN339_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:1056:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:1056:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN327=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet5893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN327);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5895);
            expressionWithTime328=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime328.getTree());
            COMMA329=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5897); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA329);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5899);
            expressionWithTime330=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime330.getTree());
            COMMA331=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA331);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5903);
            expressionWithTime332=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime332.getTree());
            COMMA333=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5905); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA333);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5907);
            expressionWithTime334=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime334.getTree());
            COMMA335=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA335);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5911);
            expressionWithTime336=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime336.getTree());
            // EsperEPL2Grammar.g:1056:130: ( COMMA expressionWithTime )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==COMMA) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // EsperEPL2Grammar.g:1056:131: COMMA expressionWithTime
                    {
                    COMMA337=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA337);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5916);
                    expressionWithTime338=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime338.getTree());

                    }
                    break;

            }

            RPAREN339=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet5920); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN339);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1057:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:1057:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:1057:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:1060:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN340=null;
        Token THEN342=null;
        EsperEPL2GrammarParser.expression_return expression341 = null;

        EsperEPL2GrammarParser.expression_return expression343 = null;


        CommonTree WHEN340_tree=null;
        CommonTree THEN342_tree=null;

        try {
            // EsperEPL2Grammar.g:1061:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:1061:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1061:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:1061:5: WHEN expression THEN expression
            {
            WHEN340=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause5950); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5953);
            expression341=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression341.getTree());
            THEN342=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause5955); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5958);
            expression343=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression343.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:1064:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE344=null;
        EsperEPL2GrammarParser.expression_return expression345 = null;


        CommonTree ELSE344_tree=null;

        try {
            // EsperEPL2Grammar.g:1065:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:1065:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1065:4: ( ELSE expression )
            // EsperEPL2Grammar.g:1065:5: ELSE expression
            {
            ELSE344=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause5971); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause5974);
            expression345=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression345.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:1069:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression346 = null;



        try {
            // EsperEPL2Grammar.g:1070:2: ( caseExpression )
            // EsperEPL2Grammar.g:1070:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression5987);
            caseExpression346=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression346.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:1073:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE347=null;
        Token END350=null;
        Token CASE351=null;
        Token END355=null;
        EsperEPL2GrammarParser.whenClause_return whenClause348 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause349 = null;

        EsperEPL2GrammarParser.expression_return expression352 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause353 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause354 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression356 = null;


        CommonTree CASE347_tree=null;
        CommonTree END350_tree=null;
        CommonTree CASE351_tree=null;
        CommonTree END355_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:1074:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt138=3;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==CASE) ) {
                int LA138_1 = input.LA(2);

                if ( (LA138_1==WINDOW||LA138_1==ESCAPE||(LA138_1>=NOT_EXPR && LA138_1<=EVERY_EXPR)||(LA138_1>=SUM && LA138_1<=COUNT)||LA138_1==CASE||LA138_1==OUTER||(LA138_1>=JOIN && LA138_1<=FULL)||(LA138_1>=EVENTS && LA138_1<=LAST)||(LA138_1>=UNIDIRECTIONAL && LA138_1<=CURRENT_TIMESTAMP)||LA138_1==SNAPSHOT||(LA138_1>=VARIABLE && LA138_1<=INDEX)||(LA138_1>=BOOLEAN_TRUE && LA138_1<=VALUE_NULL)||(LA138_1>=DEFINE && LA138_1<=MATCHES)||LA138_1==WHILE||LA138_1==NUM_DOUBLE||LA138_1==IDENT||LA138_1==LPAREN||(LA138_1>=PLUS && LA138_1<=QUESTION)||(LA138_1>=STRING_LITERAL && LA138_1<=QUOTED_STRING_LITERAL)||LA138_1==MINUS||LA138_1==LCURLY||LA138_1==NUM_INT||(LA138_1>=TICKED_STRING_LITERAL && LA138_1<=NUM_FLOAT)) ) {
                    alt138=2;
                }
                else if ( (LA138_1==WHEN) ) {
                    alt138=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 138, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA138_0==WINDOW||LA138_0==ESCAPE||(LA138_0>=NOT_EXPR && LA138_0<=EVERY_EXPR)||(LA138_0>=SUM && LA138_0<=COUNT)||LA138_0==OUTER||(LA138_0>=JOIN && LA138_0<=FULL)||(LA138_0>=EVENTS && LA138_0<=LAST)||(LA138_0>=UNIDIRECTIONAL && LA138_0<=CURRENT_TIMESTAMP)||LA138_0==SNAPSHOT||(LA138_0>=VARIABLE && LA138_0<=INDEX)||(LA138_0>=BOOLEAN_TRUE && LA138_0<=VALUE_NULL)||(LA138_0>=DEFINE && LA138_0<=MATCHES)||LA138_0==WHILE||LA138_0==NUM_DOUBLE||LA138_0==IDENT||LA138_0==LPAREN||(LA138_0>=PLUS && LA138_0<=QUESTION)||(LA138_0>=STRING_LITERAL && LA138_0<=QUOTED_STRING_LITERAL)||LA138_0==MINUS||LA138_0==LCURLY||LA138_0==NUM_INT||(LA138_0>=TICKED_STRING_LITERAL && LA138_0<=NUM_FLOAT)) ) {
                alt138=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    // EsperEPL2Grammar.g:1074:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE347=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6001); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE347_tree = (CommonTree)adaptor.create(CASE347);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE347_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1074:52: ( whenClause )+
                    int cnt134=0;
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==WHEN) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1074:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6004);
                    	    whenClause348=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause348.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt134 >= 1 ) break loop134;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(134, input);
                                throw eee;
                        }
                        cnt134++;
                    } while (true);

                    // EsperEPL2Grammar.g:1074:64: ( elseClause )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==ELSE) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // EsperEPL2Grammar.g:1074:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6007);
                            elseClause349=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause349.getTree());

                            }
                            break;

                    }

                    END350=(Token)match(input,END,FOLLOW_END_in_caseExpression6010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1075:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE351=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6021); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE351);

                    pushFollow(FOLLOW_expression_in_caseExpression6023);
                    expression352=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression352.getTree());
                    // EsperEPL2Grammar.g:1075:62: ( whenClause )+
                    int cnt136=0;
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==WHEN) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1075:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6025);
                    	    whenClause353=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause353.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt136 >= 1 ) break loop136;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(136, input);
                                throw eee;
                        }
                        cnt136++;
                    } while (true);

                    // EsperEPL2Grammar.g:1075:74: ( elseClause )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==ELSE) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // EsperEPL2Grammar.g:1075:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6028);
                            elseClause354=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause354.getTree());

                            }
                            break;

                    }

                    END355=(Token)match(input,END,FOLLOW_END_in_caseExpression6031); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END355);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: expression, elseClause, whenClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1076:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:1076:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:1076:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1077:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6055);
                    evalOrExpression356=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression356.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:1080:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression357 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression358 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:1081:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:1081:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6066);
            evalAndExpression357=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression357.getTree());
            // EsperEPL2Grammar.g:1081:22: (op= OR_EXPR evalAndExpression )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==OR_EXPR) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1081:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6071); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6073);
            	    evalAndExpression358=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression358.getTree());

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1082:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:1082:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:1082:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1083:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:1086:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression359 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression360 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:1087:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:1087:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6105);
            bitWiseExpression359=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression359.getTree());
            // EsperEPL2Grammar.g:1087:22: (op= AND_EXPR bitWiseExpression )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==AND_EXPR) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1087:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6110); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6112);
            	    bitWiseExpression360=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression360.getTree());

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1088:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:1088:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1089:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:1092:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND362=null;
        Token BOR363=null;
        Token BXOR364=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression361 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression365 = null;


        CommonTree BAND362_tree=null;
        CommonTree BOR363_tree=null;
        CommonTree BXOR364_tree=null;

        try {
            // EsperEPL2Grammar.g:1093:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:1093:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6144);
            negatedExpression361=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression361.getTree());
            // EsperEPL2Grammar.g:1093:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==BOR||(LA142_0>=BAND && LA142_0<=BXOR)) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1093:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:1093:24: ( BAND | BOR | BXOR )
            	    int alt141=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt141=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt141=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt141=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 141, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt141) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1093:25: BAND
            	            {
            	            BAND362=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6149); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND362_tree = (CommonTree)adaptor.create(BAND362);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND362_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1093:31: BOR
            	            {
            	            BOR363=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6152); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR363_tree = (CommonTree)adaptor.create(BOR363);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR363_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1093:36: BXOR
            	            {
            	            BXOR364=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6155); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR364_tree = (CommonTree)adaptor.create(BXOR364);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR364_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6159);
            	    negatedExpression365=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression365.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:1096:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR367=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression366 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression368 = null;


        CommonTree NOT_EXPR367_tree=null;

        try {
            // EsperEPL2Grammar.g:1097:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==WINDOW||LA143_0==ESCAPE||LA143_0==EVERY_EXPR||(LA143_0>=SUM && LA143_0<=COUNT)||LA143_0==OUTER||(LA143_0>=JOIN && LA143_0<=FULL)||(LA143_0>=EVENTS && LA143_0<=LAST)||(LA143_0>=UNIDIRECTIONAL && LA143_0<=CURRENT_TIMESTAMP)||LA143_0==SNAPSHOT||(LA143_0>=VARIABLE && LA143_0<=INDEX)||(LA143_0>=BOOLEAN_TRUE && LA143_0<=VALUE_NULL)||(LA143_0>=DEFINE && LA143_0<=MATCHES)||LA143_0==WHILE||LA143_0==NUM_DOUBLE||LA143_0==IDENT||LA143_0==LPAREN||(LA143_0>=PLUS && LA143_0<=QUESTION)||(LA143_0>=STRING_LITERAL && LA143_0<=QUOTED_STRING_LITERAL)||LA143_0==MINUS||LA143_0==LCURLY||LA143_0==NUM_INT||(LA143_0>=TICKED_STRING_LITERAL && LA143_0<=NUM_FLOAT)) ) {
                alt143=1;
            }
            else if ( (LA143_0==NOT_EXPR) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    // EsperEPL2Grammar.g:1097:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6174);
                    evalEqualsExpression366=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression366.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1098:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR367=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6180); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR367_tree = (CommonTree)adaptor.create(NOT_EXPR367);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR367_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6183);
                    evalEqualsExpression368=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression368.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:1101:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR370=null;
        Token LPAREN372=null;
        Token RPAREN374=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression369 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression371 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList373 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression375 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR370_tree=null;
        CommonTree LPAREN372_tree=null;
        CommonTree RPAREN374_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:1102:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:1102:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6196);
            evalRelationalExpression369=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression369.getTree());
            // EsperEPL2Grammar.g:1102:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==IS||LA149_0==EQUALS||(LA149_0>=SQL_NE && LA149_0<=NOT_EQUAL)) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1103:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:1103:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt144=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt144=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA144_2 = input.LA(2);

            	        if ( (LA144_2==NOT_EXPR) ) {
            	            alt144=3;
            	        }
            	        else if ( (LA144_2==WINDOW||LA144_2==ESCAPE||LA144_2==EVERY_EXPR||(LA144_2>=SUM && LA144_2<=COUNT)||LA144_2==OUTER||(LA144_2>=JOIN && LA144_2<=FULL)||(LA144_2>=ALL && LA144_2<=SOME)||(LA144_2>=EVENTS && LA144_2<=LAST)||(LA144_2>=UNIDIRECTIONAL && LA144_2<=CURRENT_TIMESTAMP)||LA144_2==SNAPSHOT||(LA144_2>=VARIABLE && LA144_2<=INDEX)||(LA144_2>=BOOLEAN_TRUE && LA144_2<=VALUE_NULL)||(LA144_2>=DEFINE && LA144_2<=MATCHES)||LA144_2==WHILE||LA144_2==NUM_DOUBLE||LA144_2==IDENT||LA144_2==LPAREN||(LA144_2>=PLUS && LA144_2<=QUESTION)||(LA144_2>=STRING_LITERAL && LA144_2<=QUOTED_STRING_LITERAL)||LA144_2==MINUS||LA144_2==LCURLY||LA144_2==NUM_INT||(LA144_2>=TICKED_STRING_LITERAL && LA144_2<=NUM_FLOAT)) ) {
            	            alt144=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 144, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt144=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt144=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 144, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt144) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1103:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6209); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1104:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6227); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1105:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6241); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR370=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6243); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR370);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:1106:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6257); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:1107:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6271); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:1109:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt148=2;
            	    int LA148_0 = input.LA(1);

            	    if ( (LA148_0==WINDOW||LA148_0==ESCAPE||LA148_0==EVERY_EXPR||(LA148_0>=SUM && LA148_0<=COUNT)||LA148_0==OUTER||(LA148_0>=JOIN && LA148_0<=FULL)||(LA148_0>=EVENTS && LA148_0<=LAST)||(LA148_0>=UNIDIRECTIONAL && LA148_0<=CURRENT_TIMESTAMP)||LA148_0==SNAPSHOT||(LA148_0>=VARIABLE && LA148_0<=INDEX)||(LA148_0>=BOOLEAN_TRUE && LA148_0<=VALUE_NULL)||(LA148_0>=DEFINE && LA148_0<=MATCHES)||LA148_0==WHILE||LA148_0==NUM_DOUBLE||LA148_0==IDENT||LA148_0==LPAREN||(LA148_0>=PLUS && LA148_0<=QUESTION)||(LA148_0>=STRING_LITERAL && LA148_0<=QUOTED_STRING_LITERAL)||LA148_0==MINUS||LA148_0==LCURLY||LA148_0==NUM_INT||(LA148_0>=TICKED_STRING_LITERAL && LA148_0<=NUM_FLOAT)) ) {
            	        alt148=1;
            	    }
            	    else if ( ((LA148_0>=ALL && LA148_0<=SOME)) ) {
            	        alt148=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 148, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt148) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1110:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6301);
            	            evalRelationalExpression371=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression371.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1111:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:1111:13: (a= ANY | a= SOME | a= ALL )
            	            int alt145=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt145=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt145=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt145=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 145, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt145) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1111:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression6318); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1111:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression6324); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:1111:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression6330); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:1111:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt147=2;
            	            int LA147_0 = input.LA(1);

            	            if ( (LA147_0==LPAREN) ) {
            	                int LA147_1 = input.LA(2);

            	                if ( (LA147_1==SELECT) ) {
            	                    alt147=2;
            	                }
            	                else if ( (LA147_1==WINDOW||LA147_1==ESCAPE||(LA147_1>=NOT_EXPR && LA147_1<=EVERY_EXPR)||(LA147_1>=SUM && LA147_1<=COUNT)||LA147_1==CASE||LA147_1==OUTER||(LA147_1>=JOIN && LA147_1<=FULL)||(LA147_1>=EVENTS && LA147_1<=LAST)||(LA147_1>=UNIDIRECTIONAL && LA147_1<=CURRENT_TIMESTAMP)||LA147_1==SNAPSHOT||(LA147_1>=VARIABLE && LA147_1<=INDEX)||(LA147_1>=BOOLEAN_TRUE && LA147_1<=VALUE_NULL)||(LA147_1>=DEFINE && LA147_1<=MATCHES)||LA147_1==WHILE||LA147_1==NUM_DOUBLE||LA147_1==IDENT||(LA147_1>=LPAREN && LA147_1<=RPAREN)||(LA147_1>=PLUS && LA147_1<=QUESTION)||(LA147_1>=STRING_LITERAL && LA147_1<=QUOTED_STRING_LITERAL)||LA147_1==MINUS||LA147_1==LCURLY||LA147_1==NUM_INT||(LA147_1>=TICKED_STRING_LITERAL && LA147_1<=NUM_FLOAT)) ) {
            	                    alt147=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 147, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 147, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt147) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1111:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:1111:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:1111:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN372=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression6336); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN372);

            	                    // EsperEPL2Grammar.g:1111:48: ( expressionList )?
            	                    int alt146=2;
            	                    int LA146_0 = input.LA(1);

            	                    if ( (LA146_0==WINDOW||LA146_0==ESCAPE||(LA146_0>=NOT_EXPR && LA146_0<=EVERY_EXPR)||(LA146_0>=SUM && LA146_0<=COUNT)||LA146_0==CASE||LA146_0==OUTER||(LA146_0>=JOIN && LA146_0<=FULL)||(LA146_0>=EVENTS && LA146_0<=LAST)||(LA146_0>=UNIDIRECTIONAL && LA146_0<=CURRENT_TIMESTAMP)||LA146_0==SNAPSHOT||(LA146_0>=VARIABLE && LA146_0<=INDEX)||(LA146_0>=BOOLEAN_TRUE && LA146_0<=VALUE_NULL)||(LA146_0>=DEFINE && LA146_0<=MATCHES)||LA146_0==WHILE||LA146_0==NUM_DOUBLE||LA146_0==IDENT||LA146_0==LPAREN||(LA146_0>=PLUS && LA146_0<=QUESTION)||(LA146_0>=STRING_LITERAL && LA146_0<=QUOTED_STRING_LITERAL)||LA146_0==MINUS||LA146_0==LCURLY||LA146_0==NUM_INT||(LA146_0>=TICKED_STRING_LITERAL && LA146_0<=NUM_FLOAT)) ) {
            	                        alt146=1;
            	                    }
            	                    switch (alt146) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:1111:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression6338);
            	                            expressionList373=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList373.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN374=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression6341); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN374);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1111:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6346);
            	                    subSelectGroupExpression375=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression375.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);



            // AST REWRITE
            // elements: evalRelationalExpression, expressionList, a, subSelectGroupExpression, subSelectGroupExpression, evalRelationalExpression, evalRelationalExpression, a, evalRelationalExpression, expressionList, evalRelationalExpression
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1114:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1114:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1115:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1115:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1115:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1115:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1116:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1116:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1117:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1117:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1117:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1117:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1118:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:1121:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN378=null;
        Token RPAREN380=null;
        Token COMMA384=null;
        Token IN_SET386=null;
        Token BETWEEN388=null;
        Token LIKE390=null;
        Token ESCAPE392=null;
        Token REGEXP394=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr376 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr377 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList379 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression381 = null;

        EsperEPL2GrammarParser.expression_return expression382 = null;

        EsperEPL2GrammarParser.expression_return expression383 = null;

        EsperEPL2GrammarParser.expression_return expression385 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery387 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList389 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr391 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant393 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr395 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN378_tree=null;
        CommonTree RPAREN380_tree=null;
        CommonTree COMMA384_tree=null;
        CommonTree IN_SET386_tree=null;
        CommonTree BETWEEN388_tree=null;
        CommonTree LIKE390_tree=null;
        CommonTree ESCAPE392_tree=null;
        CommonTree REGEXP394_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:1122:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:1122:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6474);
            concatenationExpr376=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr376.getTree());
            // EsperEPL2Grammar.g:1123:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==EOF||(LA163_0>=OR_EXPR && LA163_0<=AND_EXPR)||(LA163_0>=WHERE && LA163_0<=AS)||(LA163_0>=ELSE && LA163_0<=FROM)||LA163_0==IS||(LA163_0>=GROUP && LA163_0<=HAVING)||LA163_0==ALL||LA163_0==OUTPUT||LA163_0==INSERT||(LA163_0>=ORDER && LA163_0<=DESC)||LA163_0==PATTERN||(LA163_0>=TIMEPERIOD_SEC && LA163_0<=TIMEPERIOD_SECONDS)||LA163_0==ROW_LIMIT_EXPR||LA163_0==MEASURES||(LA163_0>=AFTER && LA163_0<=FOR)||LA163_0==COMMA||LA163_0==EQUALS||LA163_0==RPAREN||LA163_0==RBRACK||LA163_0==BOR||LA163_0==COLON||(LA163_0>=BAND && LA163_0<=GE)||LA163_0==RCURLY) ) {
                alt163=1;
            }
            else if ( ((LA163_0>=IN_SET && LA163_0<=REGEXP)||LA163_0==NOT_EXPR) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    // EsperEPL2Grammar.g:1124:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:1124:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:1125:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:1125:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( ((LA155_0>=LT && LA155_0<=GE)) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1126:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:1126:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt150=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt150=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt150=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt150=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt150=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 150, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt150) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1126:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6506); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1126:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6510); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:1126:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6514); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:1126:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6518); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:1127:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt154=2;
                    	    int LA154_0 = input.LA(1);

                    	    if ( (LA154_0==WINDOW||LA154_0==ESCAPE||LA154_0==EVERY_EXPR||(LA154_0>=SUM && LA154_0<=COUNT)||LA154_0==OUTER||(LA154_0>=JOIN && LA154_0<=FULL)||(LA154_0>=EVENTS && LA154_0<=LAST)||(LA154_0>=UNIDIRECTIONAL && LA154_0<=CURRENT_TIMESTAMP)||LA154_0==SNAPSHOT||(LA154_0>=VARIABLE && LA154_0<=INDEX)||(LA154_0>=BOOLEAN_TRUE && LA154_0<=VALUE_NULL)||(LA154_0>=DEFINE && LA154_0<=MATCHES)||LA154_0==WHILE||LA154_0==NUM_DOUBLE||LA154_0==IDENT||LA154_0==LPAREN||(LA154_0>=PLUS && LA154_0<=QUESTION)||(LA154_0>=STRING_LITERAL && LA154_0<=QUOTED_STRING_LITERAL)||LA154_0==MINUS||LA154_0==LCURLY||LA154_0==NUM_INT||(LA154_0>=TICKED_STRING_LITERAL && LA154_0<=NUM_FLOAT)) ) {
                    	        alt154=1;
                    	    }
                    	    else if ( ((LA154_0>=ALL && LA154_0<=SOME)) ) {
                    	        alt154=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 154, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt154) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1128:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6542);
                    	            concatenationExpr377=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr377.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1129:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:1129:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt151=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt151=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt151=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt151=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 151, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt151) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1129:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression6559); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1129:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression6565); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:1129:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression6571); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:1129:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt153=2;
                    	            int LA153_0 = input.LA(1);

                    	            if ( (LA153_0==LPAREN) ) {
                    	                int LA153_1 = input.LA(2);

                    	                if ( (LA153_1==SELECT) ) {
                    	                    alt153=2;
                    	                }
                    	                else if ( (LA153_1==WINDOW||LA153_1==ESCAPE||(LA153_1>=NOT_EXPR && LA153_1<=EVERY_EXPR)||(LA153_1>=SUM && LA153_1<=COUNT)||LA153_1==CASE||LA153_1==OUTER||(LA153_1>=JOIN && LA153_1<=FULL)||(LA153_1>=EVENTS && LA153_1<=LAST)||(LA153_1>=UNIDIRECTIONAL && LA153_1<=CURRENT_TIMESTAMP)||LA153_1==SNAPSHOT||(LA153_1>=VARIABLE && LA153_1<=INDEX)||(LA153_1>=BOOLEAN_TRUE && LA153_1<=VALUE_NULL)||(LA153_1>=DEFINE && LA153_1<=MATCHES)||LA153_1==WHILE||LA153_1==NUM_DOUBLE||LA153_1==IDENT||(LA153_1>=LPAREN && LA153_1<=RPAREN)||(LA153_1>=PLUS && LA153_1<=QUESTION)||(LA153_1>=STRING_LITERAL && LA153_1<=QUOTED_STRING_LITERAL)||LA153_1==MINUS||LA153_1==LCURLY||LA153_1==NUM_INT||(LA153_1>=TICKED_STRING_LITERAL && LA153_1<=NUM_FLOAT)) ) {
                    	                    alt153=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 153, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 153, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt153) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1129:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:1129:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:1129:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN378=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6577); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN378);

                    	                    // EsperEPL2Grammar.g:1129:48: ( expressionList )?
                    	                    int alt152=2;
                    	                    int LA152_0 = input.LA(1);

                    	                    if ( (LA152_0==WINDOW||LA152_0==ESCAPE||(LA152_0>=NOT_EXPR && LA152_0<=EVERY_EXPR)||(LA152_0>=SUM && LA152_0<=COUNT)||LA152_0==CASE||LA152_0==OUTER||(LA152_0>=JOIN && LA152_0<=FULL)||(LA152_0>=EVENTS && LA152_0<=LAST)||(LA152_0>=UNIDIRECTIONAL && LA152_0<=CURRENT_TIMESTAMP)||LA152_0==SNAPSHOT||(LA152_0>=VARIABLE && LA152_0<=INDEX)||(LA152_0>=BOOLEAN_TRUE && LA152_0<=VALUE_NULL)||(LA152_0>=DEFINE && LA152_0<=MATCHES)||LA152_0==WHILE||LA152_0==NUM_DOUBLE||LA152_0==IDENT||LA152_0==LPAREN||(LA152_0>=PLUS && LA152_0<=QUESTION)||(LA152_0>=STRING_LITERAL && LA152_0<=QUOTED_STRING_LITERAL)||LA152_0==MINUS||LA152_0==LCURLY||LA152_0==NUM_INT||(LA152_0>=TICKED_STRING_LITERAL && LA152_0<=NUM_FLOAT)) ) {
                    	                        alt152=1;
                    	                    }
                    	                    switch (alt152) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:1129:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression6579);
                    	                            expressionList379=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList379.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN380=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6582); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN380);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1129:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6587);
                    	                    subSelectGroupExpression381=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression381.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: subSelectGroupExpression, concatenationExpr, concatenationExpr, g, expressionList, concatenationExpr
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1133:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:1133:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1134:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:1134:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:1134:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:1134:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1135:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1137:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:1137:6: (n= NOT_EXPR )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==NOT_EXPR) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // EsperEPL2Grammar.g:1137:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression6683); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1138:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt162=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA162_1 = input.LA(2);

                        if ( (LA162_1==LPAREN) ) {
                            int LA162_5 = input.LA(3);

                            if ( (LA162_5==SELECT) ) {
                                alt162=2;
                            }
                            else if ( (LA162_5==WINDOW||LA162_5==ESCAPE||(LA162_5>=NOT_EXPR && LA162_5<=EVERY_EXPR)||(LA162_5>=SUM && LA162_5<=COUNT)||LA162_5==CASE||LA162_5==OUTER||(LA162_5>=JOIN && LA162_5<=FULL)||(LA162_5>=EVENTS && LA162_5<=LAST)||(LA162_5>=UNIDIRECTIONAL && LA162_5<=CURRENT_TIMESTAMP)||LA162_5==SNAPSHOT||(LA162_5>=VARIABLE && LA162_5<=INDEX)||(LA162_5>=BOOLEAN_TRUE && LA162_5<=VALUE_NULL)||(LA162_5>=DEFINE && LA162_5<=MATCHES)||LA162_5==WHILE||LA162_5==NUM_DOUBLE||LA162_5==IDENT||LA162_5==LPAREN||(LA162_5>=PLUS && LA162_5<=QUESTION)||(LA162_5>=STRING_LITERAL && LA162_5<=QUOTED_STRING_LITERAL)||LA162_5==MINUS||LA162_5==LCURLY||LA162_5==NUM_INT||(LA162_5>=TICKED_STRING_LITERAL && LA162_5<=NUM_FLOAT)) ) {
                                alt162=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 162, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA162_1==LBRACK) ) {
                            alt162=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 162, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt162=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt162=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt162=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 162, 0, input);

                        throw nvae;
                    }

                    switch (alt162) {
                        case 1 :
                            // EsperEPL2Grammar.g:1141:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:1141:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:1141:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6710); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:1142:8: (l= LPAREN | l= LBRACK )
                            int alt157=2;
                            int LA157_0 = input.LA(1);

                            if ( (LA157_0==LPAREN) ) {
                                alt157=1;
                            }
                            else if ( (LA157_0==LBRACK) ) {
                                alt157=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 157, 0, input);

                                throw nvae;
                            }
                            switch (alt157) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1142:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6722); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1142:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression6728); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression6731);
                            expression382=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression382.getTree());
                            // EsperEPL2Grammar.g:1143:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt159=2;
                            int LA159_0 = input.LA(1);

                            if ( (LA159_0==COLON) ) {
                                alt159=1;
                            }
                            else if ( (LA159_0==COMMA||LA159_0==RPAREN||LA159_0==RBRACK) ) {
                                alt159=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 159, 0, input);

                                throw nvae;
                            }
                            switch (alt159) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1144:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:1144:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:1144:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression6753); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:1144:20: ( expression )
                                    // EsperEPL2Grammar.g:1144:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression6756);
                                    expression383=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression383.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1146:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:1146:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:1146:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:1146:10: ( COMMA expression )*
                                    loop158:
                                    do {
                                        int alt158=2;
                                        int LA158_0 = input.LA(1);

                                        if ( (LA158_0==COMMA) ) {
                                            alt158=1;
                                        }


                                        switch (alt158) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:1146:11: COMMA expression
                                    	    {
                                    	    COMMA384=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression6782); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA384);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression6784);
                                    	    expression385=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression385.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop158;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1148:8: (r= RPAREN | r= RBRACK )
                            int alt160=2;
                            int LA160_0 = input.LA(1);

                            if ( (LA160_0==RPAREN) ) {
                                alt160=1;
                            }
                            else if ( (LA160_0==RBRACK) ) {
                                alt160=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 160, 0, input);

                                throw nvae;
                            }
                            switch (alt160) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1148:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6810); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1148:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression6816); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: expression, l, expression, r, concatenationExpr, expression, r, r, concatenationExpr, concatenationExpr, l, l, l, IN_SET, expression, r, concatenationExpr
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1150:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:1150:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1151:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:1151:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1152:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:1152:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1153:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:1153:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1154:7: IN_SET inSubSelectQuery
                            {
                            IN_SET386=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6939); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET386);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression6941);
                            inSubSelectQuery387=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery387.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, inSubSelectQuery, inSubSelectQuery, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1155:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1155:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1156:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:1156:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1157:7: BETWEEN betweenList
                            {
                            BETWEEN388=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression6987); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN388);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression6989);
                            betweenList389=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList389.getTree());


                            // AST REWRITE
                            // elements: BETWEEN, concatenationExpr, betweenList, concatenationExpr, betweenList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1158:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1158:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1159:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:1159:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:1160:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE390=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7039); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE390);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7041);
                            concatenationExpr391=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr391.getTree());
                            // EsperEPL2Grammar.g:1160:30: ( ESCAPE stringconstant )?
                            int alt161=2;
                            int LA161_0 = input.LA(1);

                            if ( (LA161_0==ESCAPE) ) {
                                alt161=1;
                            }
                            switch (alt161) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1160:31: ESCAPE stringconstant
                                    {
                                    ESCAPE392=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7044); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE392);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7046);
                                    stringconstant393=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant393.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: stringconstant, concatenationExpr, concatenationExpr, stringconstant, LIKE
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1161:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1161:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:1161:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1161:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1162:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:1162:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:1162:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1162:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:1163:7: REGEXP concatenationExpr
                            {
                            REGEXP394=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7098); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP394);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7100);
                            concatenationExpr395=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr395.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, concatenationExpr, REGEXP
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1164:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1164:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1165:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:1165:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:1170:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr396 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1171:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1171:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7162);
            subQueryExpr396=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr396.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1172:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1172:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:1175:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR399=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression397 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression398 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression400 = null;


        CommonTree c_tree=null;
        CommonTree LOR399_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:1176:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:1176:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7187);
            additiveExpression397=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression397.getTree());
            // EsperEPL2Grammar.g:1176:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==LOR) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // EsperEPL2Grammar.g:1176:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7195);
                    additiveExpression398=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression398.getTree());
                    // EsperEPL2Grammar.g:1176:50: ( LOR additiveExpression )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==LOR) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1176:52: LOR additiveExpression
                    	    {
                    	    LOR399=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7199); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR399);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7201);
                    	    additiveExpression400=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression400.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1177:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:1177:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1178:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:1181:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS402=null;
        Token MINUS403=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression401 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression404 = null;


        CommonTree PLUS402_tree=null;
        CommonTree MINUS403_tree=null;

        try {
            // EsperEPL2Grammar.g:1182:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:1182:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7242);
            multiplyExpression401=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression401.getTree());
            // EsperEPL2Grammar.g:1182:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==PLUS||LA167_0==MINUS) ) {
                    alt167=1;
                }


                switch (alt167) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1182:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:1182:25: ( PLUS | MINUS )
            	    int alt166=2;
            	    int LA166_0 = input.LA(1);

            	    if ( (LA166_0==PLUS) ) {
            	        alt166=1;
            	    }
            	    else if ( (LA166_0==MINUS) ) {
            	        alt166=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 166, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt166) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1182:26: PLUS
            	            {
            	            PLUS402=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7247); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS402_tree = (CommonTree)adaptor.create(PLUS402);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS402_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1182:32: MINUS
            	            {
            	            MINUS403=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7250); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS403_tree = (CommonTree)adaptor.create(MINUS403);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS403_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7254);
            	    multiplyExpression404=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression404.getTree());

            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:1185:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR406=null;
        Token DIV407=null;
        Token MOD408=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression405 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression409 = null;


        CommonTree STAR406_tree=null;
        CommonTree DIV407_tree=null;
        CommonTree MOD408_tree=null;

        try {
            // EsperEPL2Grammar.g:1186:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:1186:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7268);
            unaryExpression405=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression405.getTree());
            // EsperEPL2Grammar.g:1186:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==STAR||(LA169_0>=DIV && LA169_0<=MOD)) ) {
                    alt169=1;
                }


                switch (alt169) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1186:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:1186:22: ( STAR | DIV | MOD )
            	    int alt168=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt168=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt168=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt168=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 168, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt168) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1186:23: STAR
            	            {
            	            STAR406=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7273); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR406_tree = (CommonTree)adaptor.create(STAR406);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR406_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1186:29: DIV
            	            {
            	            DIV407=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7276); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV407_tree = (CommonTree)adaptor.create(DIV407);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV407_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1186:34: MOD
            	            {
            	            MOD408=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7279); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD408_tree = (CommonTree)adaptor.create(MOD408);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD408_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7283);
            	    unaryExpression409=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression409.getTree());

            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:1189:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS410=null;
        Token LPAREN414=null;
        Token RPAREN416=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty411 = null;

        EsperEPL2GrammarParser.constant_return constant412 = null;

        EsperEPL2GrammarParser.substitution_return substitution413 = null;

        EsperEPL2GrammarParser.expression_return expression415 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction417 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc418 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression419 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression420 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression421 = null;


        CommonTree MINUS410_tree=null;
        CommonTree LPAREN414_tree=null;
        CommonTree RPAREN416_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1190:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt170=9;
            alt170 = dfa170.predict(input);
            switch (alt170) {
                case 1 :
                    // EsperEPL2Grammar.g:1190:4: MINUS eventProperty
                    {
                    MINUS410=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7298); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS410);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7300);
                    eventProperty411=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty411.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1190:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:1190:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1191:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression7313);
                    constant412=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant412.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1192:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression7318);
                    substitution413=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution413.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1193:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN414=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression7323); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression7326);
                    expression415=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression415.getTree());
                    RPAREN416=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression7328); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1194:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7334);
                    eventPropertyOrLibFunction417=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction417.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1195:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:1195:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:1195:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression7346);
                    builtinFunc418=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc418.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1196:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression7352);
                    arrayExpression419=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression419.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1197:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression7357);
                    subSelectExpression420=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression420.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1198:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression7362);
                    existsSubSelectExpression421=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression421.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:1201:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr422 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1202:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1202:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression7379);
            subQueryExpr422=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr422.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1203:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1203:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:1206:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr423 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1207:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1207:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression7401);
            subQueryExpr423=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr423.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1208:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1208:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:1211:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS424=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr425 = null;


        CommonTree EXISTS424_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1212:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1212:4: EXISTS subQueryExpr
            {
            EXISTS424=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression7423); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS424);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression7425);
            subQueryExpr425=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr425.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1213:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1213:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:1216:1: subQueryExpr : LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN426=null;
        Token SELECT427=null;
        Token DISTINCT428=null;
        Token FROM430=null;
        Token WHERE432=null;
        Token RPAREN434=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement429 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr431 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause433 = null;


        CommonTree LPAREN426_tree=null;
        CommonTree SELECT427_tree=null;
        CommonTree DISTINCT428_tree=null;
        CommonTree FROM430_tree=null;
        CommonTree WHERE432_tree=null;
        CommonTree RPAREN434_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:1219:2: ( LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:1219:4: LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN426=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr7458); if (state.failed) return retval;
            SELECT427=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr7464); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1220:11: ( DISTINCT )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==DISTINCT) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // EsperEPL2Grammar.g:1220:11: DISTINCT
                    {
                    DISTINCT428=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr7467); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT428_tree = (CommonTree)adaptor.create(DISTINCT428);
                    adaptor.addChild(root_0, DISTINCT428_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr7470);
            selectionListElement429=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement429.getTree());
            FROM430=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr7477); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr7480);
            subSelectFilterExpr431=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr431.getTree());
            // EsperEPL2Grammar.g:1222:6: ( WHERE whereClause )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==WHERE) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // EsperEPL2Grammar.g:1222:7: WHERE whereClause
                    {
                    WHERE432=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7488); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7491);
                    whereClause433=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause433.getTree());

                    }
                    break;

            }

            RPAREN434=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7500); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:1226:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT436=null;
        Token DOT438=null;
        Token AS440=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression435 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression437 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression439 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT436_tree=null;
        CommonTree DOT438_tree=null;
        CommonTree AS440_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:1229:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:1229:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr7524);
            eventFilterExpression435=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression435.getTree());
            // EsperEPL2Grammar.g:1230:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==DOT) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // EsperEPL2Grammar.g:1230:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT436=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT436);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7531);
                    viewExpression437=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression437.getTree());
                    // EsperEPL2Grammar.g:1230:23: ( DOT viewExpression )*
                    loop173:
                    do {
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==DOT) ) {
                            alt173=1;
                        }


                        switch (alt173) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1230:24: DOT viewExpression
                    	    {
                    	    DOT438=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7534); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT438);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7536);
                    	    viewExpression439=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression439.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop173;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1230:47: ( AS i= IDENT | i= IDENT )?
            int alt175=3;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==AS) ) {
                alt175=1;
            }
            else if ( (LA175_0==IDENT) ) {
                alt175=2;
            }
            switch (alt175) {
                case 1 :
                    // EsperEPL2Grammar.g:1230:48: AS i= IDENT
                    {
                    AS440=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr7543); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS440);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7547); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1230:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1230:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt176=3;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==RETAINUNION) ) {
                alt176=1;
            }
            else if ( (LA176_0==RETAININTERSECTION) ) {
                alt176=2;
            }
            switch (alt176) {
                case 1 :
                    // EsperEPL2Grammar.g:1230:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr7560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1230:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7564); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ru, eventFilterExpression, ri, viewExpression, i
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1231:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:1231:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:1231:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:1231:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1231:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:1231:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:1234:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY441=null;
        Token COMMA443=null;
        Token RCURLY445=null;
        EsperEPL2GrammarParser.expression_return expression442 = null;

        EsperEPL2GrammarParser.expression_return expression444 = null;


        CommonTree LCURLY441_tree=null;
        CommonTree COMMA443_tree=null;
        CommonTree RCURLY445_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1235:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:1235:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY441=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression7604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY441);

            // EsperEPL2Grammar.g:1235:11: ( expression ( COMMA expression )* )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==WINDOW||LA178_0==ESCAPE||(LA178_0>=NOT_EXPR && LA178_0<=EVERY_EXPR)||(LA178_0>=SUM && LA178_0<=COUNT)||LA178_0==CASE||LA178_0==OUTER||(LA178_0>=JOIN && LA178_0<=FULL)||(LA178_0>=EVENTS && LA178_0<=LAST)||(LA178_0>=UNIDIRECTIONAL && LA178_0<=CURRENT_TIMESTAMP)||LA178_0==SNAPSHOT||(LA178_0>=VARIABLE && LA178_0<=INDEX)||(LA178_0>=BOOLEAN_TRUE && LA178_0<=VALUE_NULL)||(LA178_0>=DEFINE && LA178_0<=MATCHES)||LA178_0==WHILE||LA178_0==NUM_DOUBLE||LA178_0==IDENT||LA178_0==LPAREN||(LA178_0>=PLUS && LA178_0<=QUESTION)||(LA178_0>=STRING_LITERAL && LA178_0<=QUOTED_STRING_LITERAL)||LA178_0==MINUS||LA178_0==LCURLY||LA178_0==NUM_INT||(LA178_0>=TICKED_STRING_LITERAL && LA178_0<=NUM_FLOAT)) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // EsperEPL2Grammar.g:1235:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression7607);
                    expression442=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression442.getTree());
                    // EsperEPL2Grammar.g:1235:23: ( COMMA expression )*
                    loop177:
                    do {
                        int alt177=2;
                        int LA177_0 = input.LA(1);

                        if ( (LA177_0==COMMA) ) {
                            alt177=1;
                        }


                        switch (alt177) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1235:24: COMMA expression
                    	    {
                    	    COMMA443=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression7610); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA443);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression7612);
                    	    expression444=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression444.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop177;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY445=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression7619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY445);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1236:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:1236:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:1236:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:1239:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM446=null;
        Token LPAREN447=null;
        Token ALL448=null;
        Token DISTINCT449=null;
        Token RPAREN451=null;
        Token AVG452=null;
        Token LPAREN453=null;
        Token ALL454=null;
        Token DISTINCT455=null;
        Token RPAREN457=null;
        Token COUNT458=null;
        Token LPAREN459=null;
        Token ALL460=null;
        Token DISTINCT461=null;
        Token STAR463=null;
        Token RPAREN464=null;
        Token MEDIAN465=null;
        Token LPAREN466=null;
        Token ALL467=null;
        Token DISTINCT468=null;
        Token RPAREN470=null;
        Token STDDEV471=null;
        Token LPAREN472=null;
        Token ALL473=null;
        Token DISTINCT474=null;
        Token RPAREN476=null;
        Token AVEDEV477=null;
        Token LPAREN478=null;
        Token ALL479=null;
        Token DISTINCT480=null;
        Token RPAREN482=null;
        Token COALESCE485=null;
        Token LPAREN486=null;
        Token COMMA488=null;
        Token COMMA490=null;
        Token RPAREN492=null;
        Token PREVIOUS493=null;
        Token LPAREN494=null;
        Token COMMA496=null;
        Token RPAREN498=null;
        Token PRIOR499=null;
        Token LPAREN500=null;
        Token NUM_INT501=null;
        Token COMMA502=null;
        Token RPAREN504=null;
        Token INSTANCEOF505=null;
        Token LPAREN506=null;
        Token COMMA508=null;
        Token COMMA510=null;
        Token RPAREN512=null;
        Token CAST513=null;
        Token LPAREN514=null;
        Token COMMA516=null;
        Token AS517=null;
        Token RPAREN519=null;
        Token EXISTS520=null;
        Token LPAREN521=null;
        Token RPAREN523=null;
        Token CURRENT_TIMESTAMP524=null;
        Token LPAREN525=null;
        Token RPAREN526=null;
        EsperEPL2GrammarParser.expression_return expression450 = null;

        EsperEPL2GrammarParser.expression_return expression456 = null;

        EsperEPL2GrammarParser.expression_return expression462 = null;

        EsperEPL2GrammarParser.expression_return expression469 = null;

        EsperEPL2GrammarParser.expression_return expression475 = null;

        EsperEPL2GrammarParser.expression_return expression481 = null;

        EsperEPL2GrammarParser.firstAggregation_return firstAggregation483 = null;

        EsperEPL2GrammarParser.lastAggregation_return lastAggregation484 = null;

        EsperEPL2GrammarParser.expression_return expression487 = null;

        EsperEPL2GrammarParser.expression_return expression489 = null;

        EsperEPL2GrammarParser.expression_return expression491 = null;

        EsperEPL2GrammarParser.expression_return expression495 = null;

        EsperEPL2GrammarParser.expression_return expression497 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty503 = null;

        EsperEPL2GrammarParser.expression_return expression507 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier509 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier511 = null;

        EsperEPL2GrammarParser.expression_return expression515 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier518 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty522 = null;


        CommonTree SUM446_tree=null;
        CommonTree LPAREN447_tree=null;
        CommonTree ALL448_tree=null;
        CommonTree DISTINCT449_tree=null;
        CommonTree RPAREN451_tree=null;
        CommonTree AVG452_tree=null;
        CommonTree LPAREN453_tree=null;
        CommonTree ALL454_tree=null;
        CommonTree DISTINCT455_tree=null;
        CommonTree RPAREN457_tree=null;
        CommonTree COUNT458_tree=null;
        CommonTree LPAREN459_tree=null;
        CommonTree ALL460_tree=null;
        CommonTree DISTINCT461_tree=null;
        CommonTree STAR463_tree=null;
        CommonTree RPAREN464_tree=null;
        CommonTree MEDIAN465_tree=null;
        CommonTree LPAREN466_tree=null;
        CommonTree ALL467_tree=null;
        CommonTree DISTINCT468_tree=null;
        CommonTree RPAREN470_tree=null;
        CommonTree STDDEV471_tree=null;
        CommonTree LPAREN472_tree=null;
        CommonTree ALL473_tree=null;
        CommonTree DISTINCT474_tree=null;
        CommonTree RPAREN476_tree=null;
        CommonTree AVEDEV477_tree=null;
        CommonTree LPAREN478_tree=null;
        CommonTree ALL479_tree=null;
        CommonTree DISTINCT480_tree=null;
        CommonTree RPAREN482_tree=null;
        CommonTree COALESCE485_tree=null;
        CommonTree LPAREN486_tree=null;
        CommonTree COMMA488_tree=null;
        CommonTree COMMA490_tree=null;
        CommonTree RPAREN492_tree=null;
        CommonTree PREVIOUS493_tree=null;
        CommonTree LPAREN494_tree=null;
        CommonTree COMMA496_tree=null;
        CommonTree RPAREN498_tree=null;
        CommonTree PRIOR499_tree=null;
        CommonTree LPAREN500_tree=null;
        CommonTree NUM_INT501_tree=null;
        CommonTree COMMA502_tree=null;
        CommonTree RPAREN504_tree=null;
        CommonTree INSTANCEOF505_tree=null;
        CommonTree LPAREN506_tree=null;
        CommonTree COMMA508_tree=null;
        CommonTree COMMA510_tree=null;
        CommonTree RPAREN512_tree=null;
        CommonTree CAST513_tree=null;
        CommonTree LPAREN514_tree=null;
        CommonTree COMMA516_tree=null;
        CommonTree AS517_tree=null;
        CommonTree RPAREN519_tree=null;
        CommonTree EXISTS520_tree=null;
        CommonTree LPAREN521_tree=null;
        CommonTree RPAREN523_tree=null;
        CommonTree CURRENT_TIMESTAMP524_tree=null;
        CommonTree LPAREN525_tree=null;
        CommonTree RPAREN526_tree=null;

        try {
            // EsperEPL2Grammar.g:1240:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt191=15;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt191=1;
                }
                break;
            case AVG:
                {
                alt191=2;
                }
                break;
            case COUNT:
                {
                alt191=3;
                }
                break;
            case MEDIAN:
                {
                alt191=4;
                }
                break;
            case STDDEV:
                {
                alt191=5;
                }
                break;
            case AVEDEV:
                {
                alt191=6;
                }
                break;
            case FIRST:
                {
                alt191=7;
                }
                break;
            case LAST:
                {
                alt191=8;
                }
                break;
            case COALESCE:
                {
                alt191=9;
                }
                break;
            case PREVIOUS:
                {
                alt191=10;
                }
                break;
            case PRIOR:
                {
                alt191=11;
                }
                break;
            case INSTANCEOF:
                {
                alt191=12;
                }
                break;
            case CAST:
                {
                alt191=13;
                }
                break;
            case EXISTS:
                {
                alt191=14;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt191=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // EsperEPL2Grammar.g:1240:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM446=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc7642); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM446_tree = (CommonTree)adaptor.create(SUM446);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM446_tree, root_0);
                    }
                    LPAREN447=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7645); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1240:17: ( ALL | DISTINCT )?
                    int alt179=3;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==ALL) ) {
                        alt179=1;
                    }
                    else if ( (LA179_0==DISTINCT) ) {
                        alt179=2;
                    }
                    switch (alt179) {
                        case 1 :
                            // EsperEPL2Grammar.g:1240:18: ALL
                            {
                            ALL448=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7649); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1240:25: DISTINCT
                            {
                            DISTINCT449=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7654); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT449_tree = (CommonTree)adaptor.create(DISTINCT449);
                            adaptor.addChild(root_0, DISTINCT449_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7658);
                    expression450=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression450.getTree());
                    RPAREN451=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7660); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1241:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG452=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc7666); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG452_tree = (CommonTree)adaptor.create(AVG452);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG452_tree, root_0);
                    }
                    LPAREN453=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7669); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1241:17: ( ALL | DISTINCT )?
                    int alt180=3;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==ALL) ) {
                        alt180=1;
                    }
                    else if ( (LA180_0==DISTINCT) ) {
                        alt180=2;
                    }
                    switch (alt180) {
                        case 1 :
                            // EsperEPL2Grammar.g:1241:18: ALL
                            {
                            ALL454=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7673); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1241:25: DISTINCT
                            {
                            DISTINCT455=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7678); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT455_tree = (CommonTree)adaptor.create(DISTINCT455);
                            adaptor.addChild(root_0, DISTINCT455_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7682);
                    expression456=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression456.getTree());
                    RPAREN457=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7684); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1242:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT458=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc7690); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT458_tree = (CommonTree)adaptor.create(COUNT458);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT458_tree, root_0);
                    }
                    LPAREN459=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7693); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1243:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==WINDOW||LA182_0==ESCAPE||(LA182_0>=NOT_EXPR && LA182_0<=EVERY_EXPR)||(LA182_0>=SUM && LA182_0<=COUNT)||LA182_0==CASE||LA182_0==OUTER||(LA182_0>=JOIN && LA182_0<=FULL)||(LA182_0>=DISTINCT && LA182_0<=ALL)||(LA182_0>=EVENTS && LA182_0<=LAST)||(LA182_0>=UNIDIRECTIONAL && LA182_0<=CURRENT_TIMESTAMP)||LA182_0==SNAPSHOT||(LA182_0>=VARIABLE && LA182_0<=INDEX)||(LA182_0>=BOOLEAN_TRUE && LA182_0<=VALUE_NULL)||(LA182_0>=DEFINE && LA182_0<=MATCHES)||LA182_0==WHILE||LA182_0==NUM_DOUBLE||LA182_0==IDENT||LA182_0==LPAREN||(LA182_0>=PLUS && LA182_0<=QUESTION)||(LA182_0>=STRING_LITERAL && LA182_0<=QUOTED_STRING_LITERAL)||LA182_0==MINUS||LA182_0==LCURLY||LA182_0==NUM_INT||(LA182_0>=TICKED_STRING_LITERAL && LA182_0<=NUM_FLOAT)) ) {
                        alt182=1;
                    }
                    else if ( (LA182_0==STAR) ) {
                        alt182=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 182, 0, input);

                        throw nvae;
                    }
                    switch (alt182) {
                        case 1 :
                            // EsperEPL2Grammar.g:1244:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:1244:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:1244:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:1244:5: ( ALL | DISTINCT )?
                            int alt181=3;
                            int LA181_0 = input.LA(1);

                            if ( (LA181_0==ALL) ) {
                                alt181=1;
                            }
                            else if ( (LA181_0==DISTINCT) ) {
                                alt181=2;
                            }
                            switch (alt181) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1244:6: ALL
                                    {
                                    ALL460=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7705); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1244:13: DISTINCT
                                    {
                                    DISTINCT461=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7710); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT461_tree = (CommonTree)adaptor.create(DISTINCT461);
                                    adaptor.addChild(root_0, DISTINCT461_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc7714);
                            expression462=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression462.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1246:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:1246:4: ( STAR )
                            // EsperEPL2Grammar.g:1246:5: STAR
                            {
                            STAR463=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc7725); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN464=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7736); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1249:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN465=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc7742); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN465_tree = (CommonTree)adaptor.create(MEDIAN465);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN465_tree, root_0);
                    }
                    LPAREN466=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7745); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1249:20: ( ALL | DISTINCT )?
                    int alt183=3;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==ALL) ) {
                        alt183=1;
                    }
                    else if ( (LA183_0==DISTINCT) ) {
                        alt183=2;
                    }
                    switch (alt183) {
                        case 1 :
                            // EsperEPL2Grammar.g:1249:21: ALL
                            {
                            ALL467=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7749); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1249:28: DISTINCT
                            {
                            DISTINCT468=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7754); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT468_tree = (CommonTree)adaptor.create(DISTINCT468);
                            adaptor.addChild(root_0, DISTINCT468_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7758);
                    expression469=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression469.getTree());
                    RPAREN470=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7760); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1250:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV471=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc7766); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV471_tree = (CommonTree)adaptor.create(STDDEV471);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV471_tree, root_0);
                    }
                    LPAREN472=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7769); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1250:20: ( ALL | DISTINCT )?
                    int alt184=3;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==ALL) ) {
                        alt184=1;
                    }
                    else if ( (LA184_0==DISTINCT) ) {
                        alt184=2;
                    }
                    switch (alt184) {
                        case 1 :
                            // EsperEPL2Grammar.g:1250:21: ALL
                            {
                            ALL473=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7773); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1250:28: DISTINCT
                            {
                            DISTINCT474=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7778); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT474_tree = (CommonTree)adaptor.create(DISTINCT474);
                            adaptor.addChild(root_0, DISTINCT474_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7782);
                    expression475=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression475.getTree());
                    RPAREN476=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7784); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1251:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV477=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc7790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV477_tree = (CommonTree)adaptor.create(AVEDEV477);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV477_tree, root_0);
                    }
                    LPAREN478=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7793); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1251:20: ( ALL | DISTINCT )?
                    int alt185=3;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==ALL) ) {
                        alt185=1;
                    }
                    else if ( (LA185_0==DISTINCT) ) {
                        alt185=2;
                    }
                    switch (alt185) {
                        case 1 :
                            // EsperEPL2Grammar.g:1251:21: ALL
                            {
                            ALL479=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7797); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1251:28: DISTINCT
                            {
                            DISTINCT480=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7802); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT480_tree = (CommonTree)adaptor.create(DISTINCT480);
                            adaptor.addChild(root_0, DISTINCT480_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7806);
                    expression481=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression481.getTree());
                    RPAREN482=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7808); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1252:4: firstAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc7814);
                    firstAggregation483=firstAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation483.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1253:4: lastAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc7819);
                    lastAggregation484=lastAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation484.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1254:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE485=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc7824); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE485_tree = (CommonTree)adaptor.create(COALESCE485);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE485_tree, root_0);
                    }
                    LPAREN486=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7827); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7830);
                    expression487=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression487.getTree());
                    COMMA488=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7832); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7835);
                    expression489=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression489.getTree());
                    // EsperEPL2Grammar.g:1254:51: ( COMMA expression )*
                    loop186:
                    do {
                        int alt186=2;
                        int LA186_0 = input.LA(1);

                        if ( (LA186_0==COMMA) ) {
                            alt186=1;
                        }


                        switch (alt186) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1254:52: COMMA expression
                    	    {
                    	    COMMA490=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7838); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc7841);
                    	    expression491=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression491.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop186;
                        }
                    } while (true);

                    RPAREN492=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7845); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1255:4: PREVIOUS LPAREN expression ( COMMA expression )? RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS493=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc7851); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS493_tree = (CommonTree)adaptor.create(PREVIOUS493);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS493_tree, root_0);
                    }
                    LPAREN494=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7854); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7857);
                    expression495=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression495.getTree());
                    // EsperEPL2Grammar.g:1255:33: ( COMMA expression )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==COMMA) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // EsperEPL2Grammar.g:1255:34: COMMA expression
                            {
                            COMMA496=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7860); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc7863);
                            expression497=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression497.getTree());

                            }
                            break;

                    }

                    RPAREN498=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7867); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1256:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR499=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc7873); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR499_tree = (CommonTree)adaptor.create(PRIOR499);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR499_tree, root_0);
                    }
                    LPAREN500=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7876); if (state.failed) return retval;
                    NUM_INT501=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc7879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT501_tree = (CommonTree)adaptor.create(NUM_INT501);
                    adaptor.addChild(root_0, NUM_INT501_tree);
                    }
                    COMMA502=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7881); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7884);
                    eventProperty503=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty503.getTree());
                    RPAREN504=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7886); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1259:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF505=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc7896); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF505_tree = (CommonTree)adaptor.create(INSTANCEOF505);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF505_tree, root_0);
                    }
                    LPAREN506=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7899); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7902);
                    expression507=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression507.getTree());
                    COMMA508=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7904); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7907);
                    classIdentifier509=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier509.getTree());
                    // EsperEPL2Grammar.g:1259:58: ( COMMA classIdentifier )*
                    loop188:
                    do {
                        int alt188=2;
                        int LA188_0 = input.LA(1);

                        if ( (LA188_0==COMMA) ) {
                            alt188=1;
                        }


                        switch (alt188) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1259:59: COMMA classIdentifier
                    	    {
                    	    COMMA510=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7910); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7913);
                    	    classIdentifier511=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier511.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop188;
                        }
                    } while (true);

                    RPAREN512=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7917); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1260:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST513=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc7923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST513_tree = (CommonTree)adaptor.create(CAST513);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST513_tree, root_0);
                    }
                    LPAREN514=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7926); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7929);
                    expression515=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression515.getTree());
                    // EsperEPL2Grammar.g:1260:29: ( COMMA | AS )
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==COMMA) ) {
                        alt189=1;
                    }
                    else if ( (LA189_0==AS) ) {
                        alt189=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 189, 0, input);

                        throw nvae;
                    }
                    switch (alt189) {
                        case 1 :
                            // EsperEPL2Grammar.g:1260:30: COMMA
                            {
                            COMMA516=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7932); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1260:39: AS
                            {
                            AS517=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc7937); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7941);
                    classIdentifier518=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier518.getTree());
                    RPAREN519=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7943); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1261:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS520=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc7949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS520_tree = (CommonTree)adaptor.create(EXISTS520);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS520_tree, root_0);
                    }
                    LPAREN521=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7952); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7955);
                    eventProperty522=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty522.getTree());
                    RPAREN523=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7957); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1262:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP524=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7963); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP524_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP524);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP524_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1262:23: ( LPAREN RPAREN )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==LPAREN) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // EsperEPL2Grammar.g:1262:24: LPAREN RPAREN
                            {
                            LPAREN525=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7967); if (state.failed) return retval;
                            RPAREN526=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7970); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "firstAggregation"
    // EsperEPL2Grammar.g:1265:1: firstAggregation : FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token FIRST527=null;
        Token LPAREN528=null;
        Token RPAREN530=null;
        EsperEPL2GrammarParser.expression_return expression529 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree FIRST527_tree=null;
        CommonTree LPAREN528_tree=null;
        CommonTree RPAREN530_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1266:2: ( FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1266:4: FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            FIRST527=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation7985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST527);

            LPAREN528=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation7987); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN528);

            // EsperEPL2Grammar.g:1266:17: (a= ALL | d= DISTINCT )?
            int alt192=3;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==ALL) ) {
                alt192=1;
            }
            else if ( (LA192_0==DISTINCT) ) {
                alt192=2;
            }
            switch (alt192) {
                case 1 :
                    // EsperEPL2Grammar.g:1266:18: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_firstAggregation7992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1266:26: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_firstAggregation7998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_firstAggregation8002);
            expression529=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression529.getTree());
            RPAREN530=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation8004); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN530);



            // AST REWRITE
            // elements: d, expression
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1267:4: -> ^( FIRST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1267:7: ^( FIRST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1267:22: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "firstAggregation"

    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastAggregation"
    // EsperEPL2Grammar.g:1270:1: lastAggregation : LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token LAST531=null;
        Token LPAREN532=null;
        Token RPAREN534=null;
        EsperEPL2GrammarParser.expression_return expression533 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree LAST531_tree=null;
        CommonTree LPAREN532_tree=null;
        CommonTree RPAREN534_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1271:2: ( LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1271:4: LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            LAST531=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation8030); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST531);

            LPAREN532=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation8032); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN532);

            // EsperEPL2Grammar.g:1271:16: (a= ALL | d= DISTINCT )?
            int alt193=3;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==ALL) ) {
                alt193=1;
            }
            else if ( (LA193_0==DISTINCT) ) {
                alt193=2;
            }
            switch (alt193) {
                case 1 :
                    // EsperEPL2Grammar.g:1271:17: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_lastAggregation8037); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1271:25: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_lastAggregation8043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_lastAggregation8047);
            expression533=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression533.getTree());
            RPAREN534=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation8049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN534);



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1272:4: -> ^( LAST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1272:7: ^( LAST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1272:21: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastAggregation"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1275:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX535=null;
        Token MIN536=null;
        Token LPAREN537=null;
        Token COMMA539=null;
        Token COMMA541=null;
        Token RPAREN543=null;
        EsperEPL2GrammarParser.expression_return expression538 = null;

        EsperEPL2GrammarParser.expression_return expression540 = null;

        EsperEPL2GrammarParser.expression_return expression542 = null;


        CommonTree MAX535_tree=null;
        CommonTree MIN536_tree=null;
        CommonTree LPAREN537_tree=null;
        CommonTree COMMA539_tree=null;
        CommonTree COMMA541_tree=null;
        CommonTree RPAREN543_tree=null;

        try {
            // EsperEPL2Grammar.g:1276:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1276:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1276:4: ( MAX | MIN )
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==MAX) ) {
                alt194=1;
            }
            else if ( (LA194_0==MIN) ) {
                alt194=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }
            switch (alt194) {
                case 1 :
                    // EsperEPL2Grammar.g:1276:5: MAX
                    {
                    MAX535=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc8076); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX535_tree = (CommonTree)adaptor.create(MAX535);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX535_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1276:12: MIN
                    {
                    MIN536=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc8081); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN536_tree = (CommonTree)adaptor.create(MIN536);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN536_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN537=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc8085); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc8088);
            expression538=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression538.getTree());
            // EsperEPL2Grammar.g:1276:37: ( COMMA expression ( COMMA expression )* )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==COMMA) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // EsperEPL2Grammar.g:1276:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA539=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8091); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc8094);
                    expression540=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression540.getTree());
                    // EsperEPL2Grammar.g:1276:56: ( COMMA expression )*
                    loop195:
                    do {
                        int alt195=2;
                        int LA195_0 = input.LA(1);

                        if ( (LA195_0==COMMA) ) {
                            alt195=1;
                        }


                        switch (alt195) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1276:57: COMMA expression
                    	    {
                    	    COMMA541=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8097); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc8100);
                    	    expression542=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression542.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop195;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN543=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc8107); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1279:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty544 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction545 = null;



        try {
            // EsperEPL2Grammar.g:1280:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt197=2;
            alt197 = dfa197.predict(input);
            switch (alt197) {
                case 1 :
                    // EsperEPL2Grammar.g:1280:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction8126);
                    eventProperty544=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty544.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1281:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction8131);
                    libFunction545=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction545.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1284:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT547=null;
        Token LPAREN549=null;
        Token RPAREN551=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy546 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent548 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs550 = null;


        CommonTree DOT547_tree=null;
        CommonTree LPAREN549_tree=null;
        CommonTree RPAREN551_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1285:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1285:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1285:4: ( classIdentifierNonGreedy DOT )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==IDENT) ) {
                int LA198_1 = input.LA(2);

                if ( (LA198_1==DOT) ) {
                    alt198=1;
                }
            }
            else if ( (LA198_0==TICKED_STRING_LITERAL) ) {
                int LA198_2 = input.LA(2);

                if ( (LA198_2==DOT) ) {
                    alt198=1;
                }
            }
            switch (alt198) {
                case 1 :
                    // EsperEPL2Grammar.g:1285:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction8144);
                    classIdentifierNonGreedy546=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy546.getTree());
                    DOT547=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction8146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT547);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction8150);
            funcIdent548=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent548.getTree());
            LPAREN549=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction8152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN549);

            // EsperEPL2Grammar.g:1285:53: ( libFunctionArgs )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==WINDOW||LA199_0==ESCAPE||(LA199_0>=NOT_EXPR && LA199_0<=EVERY_EXPR)||(LA199_0>=SUM && LA199_0<=COUNT)||LA199_0==CASE||LA199_0==OUTER||(LA199_0>=JOIN && LA199_0<=FULL)||(LA199_0>=DISTINCT && LA199_0<=ALL)||(LA199_0>=EVENTS && LA199_0<=LAST)||(LA199_0>=UNIDIRECTIONAL && LA199_0<=CURRENT_TIMESTAMP)||LA199_0==SNAPSHOT||(LA199_0>=VARIABLE && LA199_0<=INDEX)||(LA199_0>=BOOLEAN_TRUE && LA199_0<=VALUE_NULL)||(LA199_0>=DEFINE && LA199_0<=MATCHES)||LA199_0==WHILE||LA199_0==NUM_DOUBLE||LA199_0==IDENT||LA199_0==LPAREN||(LA199_0>=PLUS && LA199_0<=QUESTION)||(LA199_0>=STRING_LITERAL && LA199_0<=QUOTED_STRING_LITERAL)||LA199_0==MINUS||LA199_0==LCURLY||LA199_0==NUM_INT||(LA199_0>=TICKED_STRING_LITERAL && LA199_0<=NUM_FLOAT)) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // EsperEPL2Grammar.g:1285:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction8155);
                    libFunctionArgs550=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs550.getTree());

                    }
                    break;

            }

            RPAREN551=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction8159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN551);



            // AST REWRITE
            // elements: funcIdent, classIdentifierNonGreedy, libFunctionArgs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1286:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1286:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1286:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1286:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1289:1: funcIdent : ( escapableIdent | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent552 = null;


        CommonTree max_tree=null;
        CommonTree min_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1290:2: ( escapableIdent | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt200=3;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt200=1;
                }
                break;
            case MAX:
                {
                alt200=2;
                }
                break;
            case MIN:
                {
                alt200=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }

            switch (alt200) {
                case 1 :
                    // EsperEPL2Grammar.g:1290:4: escapableIdent
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_escapableIdent_in_funcIdent8189);
                    escapableIdent552=escapableIdent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent552.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1291:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent8196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1291:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1292:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent8208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1292:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1295:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL553=null;
        Token DISTINCT554=null;
        Token COMMA556=null;
        EsperEPL2GrammarParser.expression_return expression555 = null;

        EsperEPL2GrammarParser.expression_return expression557 = null;


        CommonTree ALL553_tree=null;
        CommonTree DISTINCT554_tree=null;
        CommonTree COMMA556_tree=null;

        try {
            // EsperEPL2Grammar.g:1296:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1296:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1296:4: ( ALL | DISTINCT )?
            int alt201=3;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==ALL) ) {
                alt201=1;
            }
            else if ( (LA201_0==DISTINCT) ) {
                alt201=2;
            }
            switch (alt201) {
                case 1 :
                    // EsperEPL2Grammar.g:1296:5: ALL
                    {
                    ALL553=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs8226); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1296:12: DISTINCT
                    {
                    DISTINCT554=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs8231); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT554_tree = (CommonTree)adaptor.create(DISTINCT554);
                    adaptor.addChild(root_0, DISTINCT554_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs8235);
            expression555=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression555.getTree());
            // EsperEPL2Grammar.g:1296:34: ( COMMA expression )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==COMMA) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1296:35: COMMA expression
            	    {
            	    COMMA556=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs8238); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs8241);
            	    expression557=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression557.getTree());

            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1299:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR559=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr558 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr560 = null;


        CommonTree AND_EXPR559_tree=null;

        try {
            // EsperEPL2Grammar.g:1300:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1300:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList8255);
            concatenationExpr558=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr558.getTree());
            AND_EXPR559=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList8257); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8260);
            concatenationExpr560=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr560.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1309:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression561 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1312:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1312:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression8288);
            followedByExpression561=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression561.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1315:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression562 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression563 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1316:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1316:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression8300);
            orExpression562=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression562.getTree());
            // EsperEPL2Grammar.g:1316:17: (f= FOLLOWED_BY orExpression )*
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==FOLLOWED_BY) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1316:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression8305); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression8307);
            	    orExpression563=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression563.getTree());

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1317:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1317:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1318:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1321:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression564 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression565 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1322:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1322:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression8346);
            andExpression564=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression564.getTree());
            // EsperEPL2Grammar.g:1322:18: (o= OR_EXPR andExpression )*
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==OR_EXPR) ) {
                    alt204=1;
                }


                switch (alt204) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1322:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression8351); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression8353);
            	    andExpression565=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression565.getTree());

            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);



            // AST REWRITE
            // elements: andExpression, andExpression, OR_EXPR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1323:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1323:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1324:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1327:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression566 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression567 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1328:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1328:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression8385);
            matchUntilExpression566=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression566.getTree());
            // EsperEPL2Grammar.g:1328:25: (a= AND_EXPR matchUntilExpression )*
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==AND_EXPR) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1328:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression8390); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression8392);
            	    matchUntilExpression567=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression567.getTree());

            	    }
            	    break;

            	default :
            	    break loop205;
                }
            } while (true);



            // AST REWRITE
            // elements: AND_EXPR, matchUntilExpression, matchUntilExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1329:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1329:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1330:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1333:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression568 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression569 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1334:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1334:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1334:4: (r= matchUntilRange )?
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==LBRACK) ) {
                alt206=1;
            }
            switch (alt206) {
                case 1 :
                    // EsperEPL2Grammar.g:1334:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression8427);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8431);
            qualifyExpression568=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression568.getTree());
            // EsperEPL2Grammar.g:1334:43: (a= UNTIL qualifyExpression )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==UNTIL) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // EsperEPL2Grammar.g:1334:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression8436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8438);
                    qualifyExpression569=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression569.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qualifyExpression, matchUntilRange, qualifyExpression, matchUntilRange, qualifyExpression, qualifyExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1335:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1335:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1336:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1336:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1337:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1337:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1338:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1341:1: qualifyExpression : ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList570 = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix571 = null;


        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1342:2: ( ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1342:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1342:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( ((LA210_0>=NOT_EXPR && LA210_0<=EVERY_DISTINCT_EXPR)) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // EsperEPL2Grammar.g:1342:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1342:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList )
                    int alt208=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt208=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt208=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt208=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 208, 0, input);

                        throw nvae;
                    }

                    switch (alt208) {
                        case 1 :
                            // EsperEPL2Grammar.g:1342:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression8503); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1342:21: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression8509); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1342:34: d= EVERY_DISTINCT_EXPR distinctExpressionList
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8515); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);

                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression8517);
                            distinctExpressionList570=distinctExpressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList570.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1342:80: (r= matchUntilRange )?
                    int alt209=2;
                    int LA209_0 = input.LA(1);

                    if ( (LA209_0==LBRACK) ) {
                        alt209=1;
                    }
                    switch (alt209) {
                        case 1 :
                            // EsperEPL2Grammar.g:1342:81: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression8523);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression8532);
            guardPostFix571=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix571.getTree());


            // AST REWRITE
            // elements: guardPostFix, matchUntilRange, distinctExpressionList, guardPostFix, EVERY_EXPR, matchUntilRange, matchUntilRange, guardPostFix, guardPostFix, guardPostFix, distinctExpressionList, guardPostFix, EVERY_DISTINCT_EXPR, EVERY_EXPR, guardPostFix, EVERY_DISTINCT_EXPR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1344:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1344:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1345:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1345:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1346:3: -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
            if (d != null && r == null) {
                // EsperEPL2Grammar.g:1346:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1347:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1347:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1347:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1348:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1348:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1348:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1349:3: -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (d != null && r != null) {
                // EsperEPL2Grammar.g:1349:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                // EsperEPL2Grammar.g:1349:77: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1350:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionList"
    // EsperEPL2Grammar.g:1353:1: distinctExpressionList : LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) ;
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN572=null;
        Token COMMA574=null;
        Token RPAREN576=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom573 = null;

        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom575 = null;


        CommonTree LPAREN572_tree=null;
        CommonTree COMMA574_tree=null;
        CommonTree RPAREN576_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            // EsperEPL2Grammar.g:1354:2: ( LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) )
            // EsperEPL2Grammar.g:1354:4: LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN
            {
            LPAREN572=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList8647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN572);

            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8649);
            distinctExpressionAtom573=distinctExpressionAtom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom573.getTree());
            // EsperEPL2Grammar.g:1354:34: ( COMMA distinctExpressionAtom )*
            loop211:
            do {
                int alt211=2;
                int LA211_0 = input.LA(1);

                if ( (LA211_0==COMMA) ) {
                    alt211=1;
                }


                switch (alt211) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1354:35: COMMA distinctExpressionAtom
            	    {
            	    COMMA574=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList8652); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA574);

            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8654);
            	    distinctExpressionAtom575=distinctExpressionAtom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom575.getTree());

            	    }
            	    break;

            	default :
            	    break loop211;
                }
            } while (true);

            RPAREN576=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList8658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN576);



            // AST REWRITE
            // elements: distinctExpressionAtom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1355:3: -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
            {
                // EsperEPL2Grammar.g:1355:6: ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);

                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());

                }
                stream_distinctExpressionAtom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionList"

    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionAtom"
    // EsperEPL2Grammar.g:1358:1: distinctExpressionAtom : expression ;
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.expression_return expression577 = null;



        try {
            // EsperEPL2Grammar.g:1359:2: ( expression )
            // EsperEPL2Grammar.g:1359:4: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_distinctExpressionAtom8681);
            expression577=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression577.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionAtom"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1362:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) ( (wh= WHERE guardWhereExpression ) | (wi= WHILE guardWhileExpression ) )? -> {$wh != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhereExpression ) -> {$wi != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhileExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN580=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression578 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression579 = null;

        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression581 = null;

        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression582 = null;


        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN580_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1363:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) ( (wh= WHERE guardWhereExpression ) | (wi= WHILE guardWhileExpression ) )? -> {$wh != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhereExpression ) -> {$wi != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhileExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1363:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) ( (wh= WHERE guardWhereExpression ) | (wi= WHILE guardWhileExpression ) )?
            {
            // EsperEPL2Grammar.g:1363:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==IDENT||LA212_0==TICKED_STRING_LITERAL) ) {
                alt212=1;
            }
            else if ( (LA212_0==LPAREN) ) {
                alt212=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;
            }
            switch (alt212) {
                case 1 :
                    // EsperEPL2Grammar.g:1363:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix8696);
                    atomicExpression578=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression578.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1363:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix8702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix8704);
                    patternExpression579=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression579.getTree());
                    RPAREN580=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix8706); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN580);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1363:59: ( (wh= WHERE guardWhereExpression ) | (wi= WHILE guardWhileExpression ) )?
            int alt213=3;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==WHERE) ) {
                alt213=1;
            }
            else if ( (LA213_0==WHILE) ) {
                alt213=2;
            }
            switch (alt213) {
                case 1 :
                    // EsperEPL2Grammar.g:1363:60: (wh= WHERE guardWhereExpression )
                    {
                    // EsperEPL2Grammar.g:1363:60: (wh= WHERE guardWhereExpression )
                    // EsperEPL2Grammar.g:1363:61: wh= WHERE guardWhereExpression
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix8713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);

                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix8715);
                    guardWhereExpression581=guardWhereExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression581.getTree());

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1363:94: (wi= WHILE guardWhileExpression )
                    {
                    // EsperEPL2Grammar.g:1363:94: (wi= WHILE guardWhileExpression )
                    // EsperEPL2Grammar.g:1363:95: wi= WHILE guardWhileExpression
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix8723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);

                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix8725);
                    guardWhileExpression582=guardWhileExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression582.getTree());

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: guardWhereExpression, atomicExpression, patternExpression, patternExpression, atomicExpression, patternExpression, atomicExpression, guardWhileExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1364:3: -> {$wh != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhereExpression )
            if (wh != null) {
                // EsperEPL2Grammar.g:1364:21: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhereExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1364:34: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1364:52: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1365:3: -> {$wi != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhileExpression )
            if (wi != null) {
                // EsperEPL2Grammar.g:1365:21: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhileExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1365:34: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1365:52: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1366:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1366:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1366:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1369:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression583 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression584 = null;



        try {
            // EsperEPL2Grammar.g:1370:2: ( observerExpression | patternFilterExpression )
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==IDENT) ) {
                int LA214_1 = input.LA(2);

                if ( (LA214_1==COLON) ) {
                    alt214=1;
                }
                else if ( (LA214_1==EOF||(LA214_1>=OR_EXPR && LA214_1<=AND_EXPR)||LA214_1==WHERE||LA214_1==UNTIL||LA214_1==WHILE||(LA214_1>=EQUALS && LA214_1<=RBRACK)||LA214_1==FOLLOWED_BY) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA214_0==TICKED_STRING_LITERAL) ) {
                alt214=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }
            switch (alt214) {
                case 1 :
                    // EsperEPL2Grammar.g:1370:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression8787);
                    observerExpression583=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression583.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1370:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression8791);
                    patternFilterExpression584=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression584.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1373:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON585=null;
        Token LPAREN586=null;
        Token RPAREN588=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList587 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON585_tree=null;
        CommonTree LPAREN586_tree=null;
        CommonTree RPAREN588_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1374:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1374:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON585=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression8808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON585);

            // EsperEPL2Grammar.g:1374:19: (nm= IDENT | a= AT )
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==IDENT) ) {
                alt215=1;
            }
            else if ( (LA215_0==AT) ) {
                alt215=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                throw nvae;
            }
            switch (alt215) {
                case 1 :
                    // EsperEPL2Grammar.g:1374:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1374:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression8819); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN586=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression8822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN586);

            // EsperEPL2Grammar.g:1374:44: ( expressionWithTimeList )?
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==WINDOW||LA216_0==ESCAPE||(LA216_0>=NOT_EXPR && LA216_0<=EVERY_EXPR)||(LA216_0>=SUM && LA216_0<=COUNT)||LA216_0==CASE||LA216_0==OUTER||(LA216_0>=JOIN && LA216_0<=FULL)||(LA216_0>=EVENTS && LA216_0<=LAST)||(LA216_0>=UNIDIRECTIONAL && LA216_0<=CURRENT_TIMESTAMP)||LA216_0==SNAPSHOT||(LA216_0>=VARIABLE && LA216_0<=INDEX)||(LA216_0>=BOOLEAN_TRUE && LA216_0<=VALUE_NULL)||(LA216_0>=DEFINE && LA216_0<=MATCHES)||LA216_0==WHILE||LA216_0==NUM_DOUBLE||LA216_0==IDENT||LA216_0==LPAREN||LA216_0==LBRACK||LA216_0==STAR||(LA216_0>=PLUS && LA216_0<=QUESTION)||(LA216_0>=STRING_LITERAL && LA216_0<=QUOTED_STRING_LITERAL)||LA216_0==MINUS||LA216_0==LCURLY||LA216_0==NUM_INT||(LA216_0>=TICKED_STRING_LITERAL && LA216_0<=NUM_FLOAT)) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    // EsperEPL2Grammar.g:1374:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression8824);
                    expressionWithTimeList587=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList587.getTree());

                    }
                    break;

            }

            RPAREN588=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression8827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN588);



            // AST REWRITE
            // elements: ns, expressionWithTimeList, IDENT, expressionWithTimeList, nm, ns
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1375:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1375:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1375:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1375:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1376:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1376:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1376:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardWhereExpression"
    // EsperEPL2Grammar.g:1379:1: guardWhereExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT589=null;
        Token COLON590=null;
        Token IDENT591=null;
        Token LPAREN592=null;
        Token RPAREN594=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList593 = null;


        CommonTree IDENT589_tree=null;
        CommonTree COLON590_tree=null;
        CommonTree IDENT591_tree=null;
        CommonTree LPAREN592_tree=null;
        CommonTree RPAREN594_tree=null;

        try {
            // EsperEPL2Grammar.g:1380:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1380:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT589=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression8876); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT589_tree = (CommonTree)adaptor.create(IDENT589);
            adaptor.addChild(root_0, IDENT589_tree);
            }
            COLON590=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression8878); if (state.failed) return retval;
            IDENT591=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression8881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT591_tree = (CommonTree)adaptor.create(IDENT591);
            adaptor.addChild(root_0, IDENT591_tree);
            }
            LPAREN592=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression8883); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1380:31: ( expressionWithTimeList )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==WINDOW||LA217_0==ESCAPE||(LA217_0>=NOT_EXPR && LA217_0<=EVERY_EXPR)||(LA217_0>=SUM && LA217_0<=COUNT)||LA217_0==CASE||LA217_0==OUTER||(LA217_0>=JOIN && LA217_0<=FULL)||(LA217_0>=EVENTS && LA217_0<=LAST)||(LA217_0>=UNIDIRECTIONAL && LA217_0<=CURRENT_TIMESTAMP)||LA217_0==SNAPSHOT||(LA217_0>=VARIABLE && LA217_0<=INDEX)||(LA217_0>=BOOLEAN_TRUE && LA217_0<=VALUE_NULL)||(LA217_0>=DEFINE && LA217_0<=MATCHES)||LA217_0==WHILE||LA217_0==NUM_DOUBLE||LA217_0==IDENT||LA217_0==LPAREN||LA217_0==LBRACK||LA217_0==STAR||(LA217_0>=PLUS && LA217_0<=QUESTION)||(LA217_0>=STRING_LITERAL && LA217_0<=QUOTED_STRING_LITERAL)||LA217_0==MINUS||LA217_0==LCURLY||LA217_0==NUM_INT||(LA217_0>=TICKED_STRING_LITERAL && LA217_0<=NUM_FLOAT)) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // EsperEPL2Grammar.g:1380:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression8887);
                    expressionWithTimeList593=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList593.getTree());

                    }
                    break;

            }

            RPAREN594=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression8891); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardWhereExpression"

    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardWhileExpression"
    // EsperEPL2Grammar.g:1383:1: guardWhileExpression : LPAREN expression RPAREN ;
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN595=null;
        Token RPAREN597=null;
        EsperEPL2GrammarParser.expression_return expression596 = null;


        CommonTree LPAREN595_tree=null;
        CommonTree RPAREN597_tree=null;

        try {
            // EsperEPL2Grammar.g:1384:2: ( LPAREN expression RPAREN )
            // EsperEPL2Grammar.g:1384:4: LPAREN expression RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN595=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression8904); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression8907);
            expression596=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression596.getTree());
            RPAREN597=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression8909); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardWhileExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1388:1: matchUntilRange : LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token d1=null;
        Token r=null;
        Token c1=null;
        Token db=null;
        Token db2=null;
        Token db3=null;
        Token LBRACK598=null;
        Token DOT599=null;
        Token DOT600=null;
        Token DOT601=null;
        Token DOT602=null;
        Token RBRACK603=null;

        CommonTree l_tree=null;
        CommonTree d1_tree=null;
        CommonTree r_tree=null;
        CommonTree c1_tree=null;
        CommonTree db_tree=null;
        CommonTree db2_tree=null;
        CommonTree db3_tree=null;
        CommonTree LBRACK598_tree=null;
        CommonTree DOT599_tree=null;
        CommonTree DOT600_tree=null;
        CommonTree DOT601_tree=null;
        CommonTree DOT602_tree=null;
        CommonTree RBRACK603_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1389:2: ( LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) )
            // EsperEPL2Grammar.g:1389:4: LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK
            {
            LBRACK598=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange8922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK598);

            // EsperEPL2Grammar.g:1389:11: (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE )
            int alt222=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt222=1;
                }
                break;
            case NUM_DOUBLE:
                {
                alt222=2;
                }
                break;
            case DOT:
                {
                int LA222_3 = input.LA(2);

                if ( (LA222_3==DOT) ) {
                    alt222=3;
                }
                else if ( (LA222_3==NUM_DOUBLE) ) {
                    alt222=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;
            }

            switch (alt222) {
                case 1 :
                    // EsperEPL2Grammar.g:1390:4: l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    {
                    l=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(l);

                    // EsperEPL2Grammar.g:1390:14: ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    int alt219=3;
                    int LA219_0 = input.LA(1);

                    if ( (LA219_0==DOT) ) {
                        alt219=1;
                    }
                    else if ( (LA219_0==COLON) ) {
                        alt219=2;
                    }
                    switch (alt219) {
                        case 1 :
                            // EsperEPL2Grammar.g:1390:17: (d1= DOT DOT (r= NUM_INT )? )
                            {
                            // EsperEPL2Grammar.g:1390:17: (d1= DOT DOT (r= NUM_INT )? )
                            // EsperEPL2Grammar.g:1390:18: d1= DOT DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8939); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            DOT599=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8941); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT599);

                            // EsperEPL2Grammar.g:1390:30: (r= NUM_INT )?
                            int alt218=2;
                            int LA218_0 = input.LA(1);

                            if ( (LA218_0==NUM_INT) ) {
                                alt218=1;
                            }
                            switch (alt218) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1390:30: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8945); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1391:17: (c1= COLON r= NUM_INT )
                            {
                            // EsperEPL2Grammar.g:1391:17: (c1= COLON r= NUM_INT )
                            // EsperEPL2Grammar.g:1391:18: c1= COLON r= NUM_INT
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange8969); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8973); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1393:8: db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    {
                    db=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db);

                    // EsperEPL2Grammar.g:1393:22: (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    int alt221=3;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==DOT) ) {
                        alt221=1;
                    }
                    else if ( (LA221_0==NUM_DOUBLE) ) {
                        alt221=2;
                    }
                    switch (alt221) {
                        case 1 :
                            // EsperEPL2Grammar.g:1394:27: d1= DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange9027); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            // EsperEPL2Grammar.g:1394:35: (r= NUM_INT )?
                            int alt220=2;
                            int LA220_0 = input.LA(1);

                            if ( (LA220_0==NUM_INT) ) {
                                alt220=1;
                            }
                            switch (alt220) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1394:35: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange9031); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1396:27: db2= NUM_DOUBLE
                            {
                            db2=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange9091); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db2);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1398:8: DOT DOT r= NUM_INT
                    {
                    DOT600=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange9128); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT600);

                    DOT601=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange9130); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT601);

                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange9134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1399:8: DOT db3= NUM_DOUBLE
                    {
                    DOT602=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange9143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT602);

                    db3=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange9147); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db3);


                    }
                    break;

            }

            RBRACK603=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange9158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK603);



            // AST REWRITE
            // elements: db, db, l, db2, l, r, l, db, db3, r, l, r, db, r
            // token labels: db, r, l, db2, db3
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleTokenStream stream_db2=new RewriteRuleTokenStream(adaptor,"token db2",db2);
            RewriteRuleTokenStream stream_db3=new RewriteRuleTokenStream(adaptor,"token db3",db3);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1402:3: -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1402:47: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1403:3: -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
            if (l != null && d1 != null) {
                // EsperEPL2Grammar.g:1403:34: ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1404:3: -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && c1 != null) {
                // EsperEPL2Grammar.g:1404:34: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1405:3: -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l)
            if (l != null) {
                // EsperEPL2Grammar.g:1405:20: ^( MATCH_UNTIL_RANGE_BOUNDED $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1406:3: -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
            if (db != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1406:48: ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1407:3: -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
            if (db != null && d1 != null) {
                // EsperEPL2Grammar.g:1407:35: ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1408:3: -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
            if (db != null && db2 != null) {
                // EsperEPL2Grammar.g:1408:36: ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_db2.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1409:3: -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
            if (db3 != null) {
                // EsperEPL2Grammar.g:1409:22: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db3.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1410:3: -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
            if (r != null) {
                // EsperEPL2Grammar.g:1410:20: ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1411:3: -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
            {
                // EsperEPL2Grammar.g:1411:6: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1419:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS604=null;
        Token LPAREN606=null;
        Token RPAREN608=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier605 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList607 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression609 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS604_tree=null;
        CommonTree LPAREN606_tree=null;
        CommonTree RPAREN608_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1422:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1422:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1422:9: (i= IDENT EQUALS )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==IDENT) ) {
                int LA223_1 = input.LA(2);

                if ( (LA223_1==EQUALS) ) {
                    alt223=1;
                }
            }
            switch (alt223) {
                case 1 :
                    // EsperEPL2Grammar.g:1422:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression9343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS604=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression9345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS604);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression9354);
            classIdentifier605=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier605.getTree());
            // EsperEPL2Grammar.g:1424:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==LPAREN) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // EsperEPL2Grammar.g:1424:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN606=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression9365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN606);

                    // EsperEPL2Grammar.g:1424:17: ( expressionList )?
                    int alt224=2;
                    int LA224_0 = input.LA(1);

                    if ( (LA224_0==WINDOW||LA224_0==ESCAPE||(LA224_0>=NOT_EXPR && LA224_0<=EVERY_EXPR)||(LA224_0>=SUM && LA224_0<=COUNT)||LA224_0==CASE||LA224_0==OUTER||(LA224_0>=JOIN && LA224_0<=FULL)||(LA224_0>=EVENTS && LA224_0<=LAST)||(LA224_0>=UNIDIRECTIONAL && LA224_0<=CURRENT_TIMESTAMP)||LA224_0==SNAPSHOT||(LA224_0>=VARIABLE && LA224_0<=INDEX)||(LA224_0>=BOOLEAN_TRUE && LA224_0<=VALUE_NULL)||(LA224_0>=DEFINE && LA224_0<=MATCHES)||LA224_0==WHILE||LA224_0==NUM_DOUBLE||LA224_0==IDENT||LA224_0==LPAREN||(LA224_0>=PLUS && LA224_0<=QUESTION)||(LA224_0>=STRING_LITERAL && LA224_0<=QUOTED_STRING_LITERAL)||LA224_0==MINUS||LA224_0==LCURLY||LA224_0==NUM_INT||(LA224_0>=TICKED_STRING_LITERAL && LA224_0<=NUM_FLOAT)) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            // EsperEPL2Grammar.g:1424:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression9367);
                            expressionList607=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList607.getTree());

                            }
                            break;

                    }

                    RPAREN608=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression9370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN608);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1425:9: ( propertyExpression )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==LBRACK) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // EsperEPL2Grammar.g:1425:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression9382);
                    propertyExpression609=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression609.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, propertyExpression, i, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1426:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1426:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1426:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1426:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1426:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1429:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic610 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic611 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1430:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1430:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9427);
            propertyExpressionAtomic610=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic610.getTree());
            // EsperEPL2Grammar.g:1430:29: ( propertyExpressionAtomic )*
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==LBRACK) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1430:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9430);
            	    propertyExpressionAtomic611=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic611.getTree());

            	    }
            	    break;

            	default :
            	    break loop227;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1431:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1431:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1434:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK612=null;
        Token SELECT613=null;
        Token FROM615=null;
        Token AS617=null;
        Token IDENT618=null;
        Token WHERE619=null;
        Token RBRACK621=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList614 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty616 = null;

        EsperEPL2GrammarParser.expression_return expression620 = null;


        CommonTree LBRACK612_tree=null;
        CommonTree SELECT613_tree=null;
        CommonTree FROM615_tree=null;
        CommonTree AS617_tree=null;
        CommonTree IDENT618_tree=null;
        CommonTree WHERE619_tree=null;
        CommonTree RBRACK621_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1435:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1435:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK612=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic9460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK612);

            // EsperEPL2Grammar.g:1435:11: ( SELECT propertySelectionList FROM )?
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==SELECT) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    // EsperEPL2Grammar.g:1435:12: SELECT propertySelectionList FROM
                    {
                    SELECT613=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic9463); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT613);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic9465);
                    propertySelectionList614=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList614.getTree());
                    FROM615=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic9467); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM615);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic9471);
            eventProperty616=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty616.getTree());
            // EsperEPL2Grammar.g:1435:62: ( AS IDENT )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==AS) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    // EsperEPL2Grammar.g:1435:63: AS IDENT
                    {
                    AS617=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic9474); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS617);

                    IDENT618=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic9476); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT618);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1435:74: ( WHERE expression )?
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==WHERE) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    // EsperEPL2Grammar.g:1435:75: WHERE expression
                    {
                    WHERE619=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic9481); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE619);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic9483);
                    expression620=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression620.getTree());

                    }
                    break;

            }

            RBRACK621=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic9487); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK621);



            // AST REWRITE
            // elements: propertySelectionList, expression, IDENT, eventProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1436:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1436:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1436:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1436:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1436:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1436:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1439:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA623=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement622 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement624 = null;


        CommonTree COMMA623_tree=null;

        try {
            // EsperEPL2Grammar.g:1440:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1440:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9537);
            propertySelectionListElement622=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement622.getTree());
            // EsperEPL2Grammar.g:1440:33: ( COMMA propertySelectionListElement )*
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);

                if ( (LA231_0==COMMA) ) {
                    alt231=1;
                }


                switch (alt231) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1440:34: COMMA propertySelectionListElement
            	    {
            	    COMMA623=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList9540); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9543);
            	    propertySelectionListElement624=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement624.getTree());

            	    }
            	    break;

            	default :
            	    break loop231;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1443:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS627=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector625 = null;

        EsperEPL2GrammarParser.expression_return expression626 = null;


        CommonTree s_tree=null;
        CommonTree AS627_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1445:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt233=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt233=1;
                }
                break;
            case IDENT:
                {
                int LA233_2 = input.LA(2);

                if ( (LA233_2==DOT) ) {
                    int LA233_63 = input.LA(3);

                    if ( (LA233_63==STAR) && (synpred5_EsperEPL2Grammar())) {
                        alt233=2;
                    }
                    else if ( (LA233_63==WINDOW||LA233_63==ESCAPE||LA233_63==EVERY_EXPR||(LA233_63>=SUM && LA233_63<=COUNT)||LA233_63==OUTER||(LA233_63>=JOIN && LA233_63<=FULL)||(LA233_63>=EVENTS && LA233_63<=LAST)||(LA233_63>=UNIDIRECTIONAL && LA233_63<=PRIOR)||(LA233_63>=WEEKDAY && LA233_63<=CAST)||LA233_63==SNAPSHOT||(LA233_63>=VARIABLE && LA233_63<=INDEX)||(LA233_63>=DEFINE && LA233_63<=MATCHES)||LA233_63==WHILE||LA233_63==IDENT||LA233_63==TICKED_STRING_LITERAL) ) {
                        alt233=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 233, 63, input);

                        throw nvae;
                    }
                }
                else if ( ((LA233_2>=IN_SET && LA233_2<=REGEXP)||(LA233_2>=OR_EXPR && LA233_2<=NOT_EXPR)||LA233_2==AS||LA233_2==FROM||LA233_2==IS||LA233_2==COMMA||LA233_2==EQUALS||LA233_2==LPAREN||LA233_2==LBRACK||(LA233_2>=STAR && LA233_2<=QUESTION)||(LA233_2>=BAND && LA233_2<=MOD)||LA233_2==ESCAPECHAR) ) {
                    alt233=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt233=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }

            switch (alt233) {
                case 1 :
                    // EsperEPL2Grammar.g:1445:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement9569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1445:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1446:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement9585);
                    propertyStreamSelector625=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector625.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1447:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement9590);
                    expression626=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression626.getTree());
                    // EsperEPL2Grammar.g:1447:15: ( AS i= keywordAllowedIdent )?
                    int alt232=2;
                    int LA232_0 = input.LA(1);

                    if ( (LA232_0==AS) ) {
                        alt232=1;
                    }
                    switch (alt232) {
                        case 1 :
                            // EsperEPL2Grammar.g:1447:16: AS i= keywordAllowedIdent
                            {
                            AS627=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement9593); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS627);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9597);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1448:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1448:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1449:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1449:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1452:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT628=null;
        Token STAR629=null;
        Token AS630=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT628_tree=null;
        CommonTree STAR629_tree=null;
        CommonTree AS630_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1453:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1453:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT628=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector9643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT628);

            STAR629=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector9645); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR629);

            // EsperEPL2Grammar.g:1453:21: ( AS i= IDENT )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==AS) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    // EsperEPL2Grammar.g:1453:22: AS i= IDENT
                    {
                    AS630=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector9648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS630);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1454:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1454:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1454:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1457:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS631=null;
        Token LPAREN633=null;
        Token RPAREN635=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier632 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList634 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression636 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS631_tree=null;
        CommonTree LPAREN633_tree=null;
        CommonTree RPAREN635_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1460:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1460:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1460:9: (i= IDENT EQUALS )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==IDENT) ) {
                int LA235_1 = input.LA(2);

                if ( (LA235_1==EQUALS) ) {
                    alt235=1;
                }
            }
            switch (alt235) {
                case 1 :
                    // EsperEPL2Grammar.g:1460:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression9699); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS631=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression9701); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS631);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression9710);
            classIdentifier632=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier632.getTree());
            // EsperEPL2Grammar.g:1462:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==LPAREN) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    // EsperEPL2Grammar.g:1462:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN633=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression9721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN633);

                    // EsperEPL2Grammar.g:1462:17: ( expressionList )?
                    int alt236=2;
                    int LA236_0 = input.LA(1);

                    if ( (LA236_0==WINDOW||LA236_0==ESCAPE||(LA236_0>=NOT_EXPR && LA236_0<=EVERY_EXPR)||(LA236_0>=SUM && LA236_0<=COUNT)||LA236_0==CASE||LA236_0==OUTER||(LA236_0>=JOIN && LA236_0<=FULL)||(LA236_0>=EVENTS && LA236_0<=LAST)||(LA236_0>=UNIDIRECTIONAL && LA236_0<=CURRENT_TIMESTAMP)||LA236_0==SNAPSHOT||(LA236_0>=VARIABLE && LA236_0<=INDEX)||(LA236_0>=BOOLEAN_TRUE && LA236_0<=VALUE_NULL)||(LA236_0>=DEFINE && LA236_0<=MATCHES)||LA236_0==WHILE||LA236_0==NUM_DOUBLE||LA236_0==IDENT||LA236_0==LPAREN||(LA236_0>=PLUS && LA236_0<=QUESTION)||(LA236_0>=STRING_LITERAL && LA236_0<=QUOTED_STRING_LITERAL)||LA236_0==MINUS||LA236_0==LCURLY||LA236_0==NUM_INT||(LA236_0>=TICKED_STRING_LITERAL && LA236_0<=NUM_FLOAT)) ) {
                        alt236=1;
                    }
                    switch (alt236) {
                        case 1 :
                            // EsperEPL2Grammar.g:1462:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression9723);
                            expressionList634=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList634.getTree());

                            }
                            break;

                    }

                    RPAREN635=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression9726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN635);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1463:9: ( propertyExpression )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==LBRACK) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    // EsperEPL2Grammar.g:1463:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression9738);
                    propertyExpression636=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression636.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: propertyExpression, i, classIdentifier, expressionList
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1464:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1464:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1464:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1464:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1464:74: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1468:1: classIdentifier : i1= escapableStr ( DOT i2= escapableStr )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT637=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;

        EsperEPL2GrammarParser.escapableStr_return i2 = null;


        CommonTree DOT637_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1470:2: (i1= escapableStr ( DOT i2= escapableStr )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1470:4: i1= escapableStr ( DOT i2= escapableStr )*
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier9793);
            i1=escapableStr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1471:6: ( DOT i2= escapableStr )*
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( (LA239_0==DOT) ) {
                    int LA239_21 = input.LA(2);

                    if ( (LA239_21==IDENT) ) {
                        int LA239_44 = input.LA(3);

                        if ( (LA239_44==EOF||LA239_44==CREATE||(LA239_44>=OR_EXPR && LA239_44<=AS)||LA239_44==SELECT||(LA239_44>=INNER && LA239_44<=ON)||(LA239_44>=GROUP && LA239_44<=HAVING)||LA239_44==OUTPUT||LA239_44==INSERT||LA239_44==ORDER||(LA239_44>=UNIDIRECTIONAL && LA239_44<=RETAININTERSECTION)||LA239_44==DELETE||LA239_44==SET||LA239_44==UNTIL||LA239_44==ROW_LIMIT_EXPR||(LA239_44>=UPDATE && LA239_44<=MATCH_RECOGNIZE)||(LA239_44>=FOR && LA239_44<=WHILE)||(LA239_44>=COMMA && LA239_44<=IDENT)||(LA239_44>=DOT && LA239_44<=RBRACK)||LA239_44==RCURLY||LA239_44==FOLLOWED_BY||LA239_44==TICKED_STRING_LITERAL||LA239_44==EMAILAT) ) {
                            alt239=1;
                        }


                    }
                    else if ( (LA239_21==TICKED_STRING_LITERAL) ) {
                        alt239=1;
                    }


                }


                switch (alt239) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1472:8: DOT i2= escapableStr
            	    {
            	    DOT637=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier9812); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT637);

            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier9816);
            	    i2=escapableStr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1474:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1474:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1477:1: classIdentifierNonGreedy : i1= escapableStr ( options {greedy=false; } : DOT i2= escapableStr )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT638=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;

        EsperEPL2GrammarParser.escapableStr_return i2 = null;


        CommonTree DOT638_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1479:2: (i1= escapableStr ( options {greedy=false; } : DOT i2= escapableStr )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1479:4: i1= escapableStr ( options {greedy=false; } : DOT i2= escapableStr )*
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy9861);
            i1=escapableStr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1480:6: ( options {greedy=false; } : DOT i2= escapableStr )*
            loop240:
            do {
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( (LA240_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA240_2 = input.LA(3);

                        if ( (LA240_2==DOT) ) {
                            alt240=1;
                        }
                        else if ( (LA240_2==LPAREN) ) {
                            alt240=2;
                        }


                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA240_3 = input.LA(3);

                        if ( (LA240_3==DOT) ) {
                            alt240=1;
                        }
                        else if ( (LA240_3==LPAREN) ) {
                            alt240=2;
                        }


                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt240=2;
                        }
                        break;

                    }

                }


                switch (alt240) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1482:8: DOT i2= escapableStr
            	    {
            	    DOT638=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy9896); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT638);

            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy9900);
            	    i2=escapableStr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1484:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1484:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1487:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA640=null;
        EsperEPL2GrammarParser.expression_return expression639 = null;

        EsperEPL2GrammarParser.expression_return expression641 = null;


        CommonTree COMMA640_tree=null;

        try {
            // EsperEPL2Grammar.g:1488:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1488:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList9942);
            expression639=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression639.getTree());
            // EsperEPL2Grammar.g:1488:22: ( COMMA expression )*
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==COMMA) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1488:23: COMMA expression
            	    {
            	    COMMA640=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList9945); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList9948);
            	    expression641=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression641.getTree());

            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1491:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA643=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime642 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime644 = null;


        CommonTree COMMA643_tree=null;

        try {
            // EsperEPL2Grammar.g:1492:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1492:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9976);
            expressionWithTime642=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime642.getTree());
            // EsperEPL2Grammar.g:1492:30: ( COMMA expressionWithTime )*
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( (LA242_0==COMMA) ) {
                    alt242=1;
                }


                switch (alt242) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1492:31: COMMA expressionWithTime
            	    {
            	    COMMA643=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList9979); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9982);
            	    expressionWithTime644=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime644.getTree());

            	    }
            	    break;

            	default :
            	    break loop242;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1495:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand645 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand646 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod647 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable648 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand649 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand650 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator651 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator652 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList653 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar654 = null;



        try {
            // EsperEPL2Grammar.g:1496:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt243=10;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==LAST) ) {
                int LA243_1 = input.LA(2);

                if ( (synpred6_EsperEPL2Grammar()) ) {
                    alt243=1;
                }
                else if ( (synpred9_EsperEPL2Grammar()) ) {
                    alt243=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==LW) ) {
                int LA243_2 = input.LA(2);

                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt243=2;
                }
                else if ( (synpred9_EsperEPL2Grammar()) ) {
                    alt243=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==NUM_INT) ) {
                int LA243_3 = input.LA(2);

                if ( (LA243_3==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt243=5;
                }
                else if ( (LA243_3==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt243=8;
                }
                else if ( (LA243_3==TIMEPERIOD_SECONDS) ) {
                    int LA243_145 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 145, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_3==TIMEPERIOD_SECOND) ) {
                    int LA243_146 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 146, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_3==TIMEPERIOD_SEC) ) {
                    int LA243_147 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 147, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_3==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt243=7;
                }
                else if ( (LA243_3==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 3, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==NUM_LONG) ) {
                int LA243_4 = input.LA(2);

                if ( (LA243_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt243=8;
                }
                else if ( (LA243_4==TIMEPERIOD_SECONDS) ) {
                    int LA243_191 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 191, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_4==TIMEPERIOD_SECOND) ) {
                    int LA243_192 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 192, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_4==TIMEPERIOD_SEC) ) {
                    int LA243_193 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 193, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt243=5;
                }
                else if ( (LA243_4==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt243=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==NUM_FLOAT) ) {
                int LA243_5 = input.LA(2);

                if ( (LA243_5==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt243=7;
                }
                else if ( (LA243_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt243=8;
                }
                else if ( (LA243_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt243=5;
                }
                else if ( (LA243_5==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==TIMEPERIOD_SECONDS) ) {
                    int LA243_255 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 255, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_5==TIMEPERIOD_SECOND) ) {
                    int LA243_256 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 256, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_5==TIMEPERIOD_SEC) ) {
                    int LA243_257 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 257, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_5==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 5, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==NUM_DOUBLE) ) {
                int LA243_6 = input.LA(2);

                if ( (LA243_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt243=8;
                }
                else if ( (LA243_6==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt243=7;
                }
                else if ( (LA243_6==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==TIMEPERIOD_SECONDS) ) {
                    int LA243_295 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 295, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_6==TIMEPERIOD_SECOND) ) {
                    int LA243_296 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 296, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_6==TIMEPERIOD_SEC) ) {
                    int LA243_297 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 297, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_6==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt243=5;
                }
                else if ( (LA243_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 6, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==IDENT) ) {
                int LA243_7 = input.LA(2);

                if ( (LA243_7==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt243=5;
                }
                else if ( (LA243_7==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==LBRACK) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==QUESTION) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==DOT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==TIMEPERIOD_SECONDS) ) {
                    int LA243_341 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 341, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_7==TIMEPERIOD_SECOND) ) {
                    int LA243_342 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 342, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_7==TIMEPERIOD_SEC) ) {
                    int LA243_343 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 343, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_7==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt243=7;
                }
                else if ( (LA243_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt243=8;
                }
                else if ( (LA243_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 7, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==QUESTION) ) {
                int LA243_8 = input.LA(2);

                if ( (LA243_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_SECONDS) ) {
                    int LA243_368 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 368, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_8==TIMEPERIOD_SECOND) ) {
                    int LA243_369 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 369, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_8==TIMEPERIOD_SEC) ) {
                    int LA243_370 = input.LA(3);

                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 370, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt243=8;
                }
                else if ( (LA243_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt243=5;
                }
                else if ( (LA243_8==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt243=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 8, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==CASE) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==MINUS) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PLUS) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==AT) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==COUNT) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==SUM) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==AVG) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==MAX) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==MIN) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==FIRST) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==WHILE) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==SQL) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==CAST) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==INDEX) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==LEFT) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==OUTER) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==FULL) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==JOIN) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==STAR) ) {
                int LA243_62 = input.LA(2);

                if ( (LA243_62==DIV) && (synpred11_EsperEPL2Grammar())) {
                    alt243=6;
                }
                else if ( (LA243_62==COMMA||LA243_62==RPAREN) ) {
                    alt243=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 62, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {
                alt243=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;
            }
            switch (alt243) {
                case 1 :
                    // EsperEPL2Grammar.g:1496:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime10008);
                    lastOperand645=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand645.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1497:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime10019);
                    lastWeekdayOperand646=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand646.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1498:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime10030);
                    timePeriod647=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod647.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1499:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime10041);
                    expressionQualifyable648=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable648.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1500:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime10052);
                    rangeOperand649=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand649.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1501:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime10064);
                    frequencyOperand650=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand650.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1502:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime10075);
                    lastOperator651=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator651.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1503:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime10087);
                    weekDayOperator652=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator652.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1504:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime10099);
                    numericParameterList653=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList653.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1505:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime10104);
                    numberSetStar654=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar654.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1508:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression655 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1509:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1509:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable10115);
            expression655=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression655.getTree());
            // EsperEPL2Grammar.g:1509:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt244=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt244=1;
                    }
                    break;
                case DESC:
                    {
                    alt244=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt244=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt244=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt244=5;
                    }
                    break;
            }

            switch (alt244) {
                case 1 :
                    // EsperEPL2Grammar.g:1509:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable10120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1509:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable10124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1509:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10128); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1509:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1509:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, expression, expression, d, a
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1510:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1510:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1510:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1510:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1511:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1511:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1511:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1512:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1516:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR656=null;

        CommonTree STAR656_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1517:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1517:4: STAR
            {
            STAR656=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar10193); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR656);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1518:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1518:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1521:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW657=null;

        CommonTree LW657_tree=null;

        try {
            // EsperEPL2Grammar.g:1522:2: ( LW )
            // EsperEPL2Grammar.g:1522:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW657=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand10213); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW657_tree = (CommonTree)adaptor.create(LW657);
            root_0 = (CommonTree)adaptor.becomeRoot(LW657_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1525:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST658=null;

        CommonTree LAST658_tree=null;

        try {
            // EsperEPL2Grammar.g:1526:2: ( LAST )
            // EsperEPL2Grammar.g:1526:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST658=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand10226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST658_tree = (CommonTree)adaptor.create(LAST658);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST658_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1529:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR659=null;
        Token DIV660=null;
        EsperEPL2GrammarParser.number_return number661 = null;

        EsperEPL2GrammarParser.substitution_return substitution662 = null;


        CommonTree i_tree=null;
        CommonTree STAR659_tree=null;
        CommonTree DIV660_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1530:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1530:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR659=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand10238); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR659);

            DIV660=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand10240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV660);

            // EsperEPL2Grammar.g:1530:13: ( number | i= IDENT | substitution )
            int alt245=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt245=1;
                }
                break;
            case IDENT:
                {
                alt245=2;
                }
                break;
            case QUESTION:
                {
                alt245=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;
            }

            switch (alt245) {
                case 1 :
                    // EsperEPL2Grammar.g:1530:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand10243);
                    number661=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number661.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1530:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand10247); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1530:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand10249);
                    substitution662=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution662.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1531:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1531:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1531:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1531:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1532:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1532:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1532:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1532:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1535:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON665=null;
        EsperEPL2GrammarParser.number_return number663 = null;

        EsperEPL2GrammarParser.substitution_return substitution664 = null;

        EsperEPL2GrammarParser.number_return number666 = null;

        EsperEPL2GrammarParser.substitution_return substitution667 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON665_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1536:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1536:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1536:4: ( number | i1= IDENT | substitution )
            int alt246=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt246=1;
                }
                break;
            case IDENT:
                {
                alt246=2;
                }
                break;
            case QUESTION:
                {
                alt246=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }

            switch (alt246) {
                case 1 :
                    // EsperEPL2Grammar.g:1536:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10298);
                    number663=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number663.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1536:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1536:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10304);
                    substitution664=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution664.getTree());

                    }
                    break;

            }

            COLON665=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand10307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON665);

            // EsperEPL2Grammar.g:1536:41: ( number | i2= IDENT | substitution )
            int alt247=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt247=1;
                }
                break;
            case IDENT:
                {
                alt247=2;
                }
                break;
            case QUESTION:
                {
                alt247=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;
            }

            switch (alt247) {
                case 1 :
                    // EsperEPL2Grammar.g:1536:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10310);
                    number666=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number666.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1536:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1536:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10316);
                    substitution667=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution667.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, number, i2, i1, i1, number, i2, substitution, substitution
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1537:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1537:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1537:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1537:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1537:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1537:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1538:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1538:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1538:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1538:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1538:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1538:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1539:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1539:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1539:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1539:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1539:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1539:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1540:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1540:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1540:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1540:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1543:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST670=null;
        EsperEPL2GrammarParser.number_return number668 = null;

        EsperEPL2GrammarParser.substitution_return substitution669 = null;


        CommonTree i_tree=null;
        CommonTree LAST670_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1544:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1544:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1544:4: ( number | i= IDENT | substitution )
            int alt248=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt248=1;
                }
                break;
            case IDENT:
                {
                alt248=2;
                }
                break;
            case QUESTION:
                {
                alt248=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;
            }

            switch (alt248) {
                case 1 :
                    // EsperEPL2Grammar.g:1544:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator10430);
                    number668=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number668.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1544:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator10434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1544:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator10436);
                    substitution669=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution669.getTree());

                    }
                    break;

            }

            LAST670=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator10439); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST670);



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1545:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1545:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1545:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1545:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1546:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1546:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1546:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1546:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1549:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY673=null;
        EsperEPL2GrammarParser.number_return number671 = null;

        EsperEPL2GrammarParser.substitution_return substitution672 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY673_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1550:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1550:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1550:4: ( number | i= IDENT | substitution )
            int alt249=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt249=1;
                }
                break;
            case IDENT:
                {
                alt249=2;
                }
                break;
            case QUESTION:
                {
                alt249=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;
            }

            switch (alt249) {
                case 1 :
                    // EsperEPL2Grammar.g:1550:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator10487);
                    number671=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number671.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1550:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator10491); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1550:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator10493);
                    substitution672=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution672.getTree());

                    }
                    break;

            }

            WEEKDAY673=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator10496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY673);



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1551:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1551:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1551:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1551:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1552:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1552:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1552:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1552:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1555:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK674=null;
        Token COMMA676=null;
        Token RBRACK678=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter675 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter677 = null;


        CommonTree LBRACK674_tree=null;
        CommonTree COMMA676_tree=null;
        CommonTree RBRACK678_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1556:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1556:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK674=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList10543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK674);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList10545);
            numericListParameter675=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter675.getTree());
            // EsperEPL2Grammar.g:1556:32: ( COMMA numericListParameter )*
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);

                if ( (LA250_0==COMMA) ) {
                    alt250=1;
                }


                switch (alt250) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1556:33: COMMA numericListParameter
            	    {
            	    COMMA676=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList10548); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA676);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList10550);
            	    numericListParameter677=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter677.getTree());

            	    }
            	    break;

            	default :
            	    break loop250;
                }
            } while (true);

            RBRACK678=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList10554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK678);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1557:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1557:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1560:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand679 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand680 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant681 = null;



        try {
            // EsperEPL2Grammar.g:1561:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt251=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA251_1 = input.LA(2);

                if ( (LA251_1==COLON) ) {
                    alt251=1;
                }
                else if ( (LA251_1==COMMA||LA251_1==RBRACK) ) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA251_2 = input.LA(2);

                if ( (LA251_2==COLON) ) {
                    alt251=1;
                }
                else if ( (LA251_2==COMMA||LA251_2==RBRACK) ) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA251_3 = input.LA(2);

                if ( (LA251_3==COLON) ) {
                    alt251=1;
                }
                else if ( (LA251_3==COMMA||LA251_3==RBRACK) ) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA251_4 = input.LA(2);

                if ( (LA251_4==COMMA||LA251_4==RBRACK) ) {
                    alt251=3;
                }
                else if ( (LA251_4==COLON) ) {
                    alt251=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt251=1;
                }
                break;
            case STAR:
                {
                alt251=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt251=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);

                throw nvae;
            }

            switch (alt251) {
                case 1 :
                    // EsperEPL2Grammar.g:1561:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter10576);
                    rangeOperand679=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand679.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1562:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter10582);
                    frequencyOperand680=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand680.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1563:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter10587);
                    numberconstant681=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant681.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1566:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT683=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic682 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic684 = null;


        CommonTree DOT683_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1567:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1567:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10603);
            eventPropertyAtomic682=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic682.getTree());
            // EsperEPL2Grammar.g:1567:24: ( DOT eventPropertyAtomic )*
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);

                if ( (LA252_0==DOT) ) {
                    alt252=1;
                }


                switch (alt252) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1567:25: DOT eventPropertyAtomic
            	    {
            	    DOT683=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty10606); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT683);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10608);
            	    eventPropertyAtomic684=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic684.getTree());

            	    }
            	    break;

            	default :
            	    break loop252;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1568:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1568:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1571:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK686=null;
        Token RPAREN687=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent685 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK686_tree=null;
        CommonTree RPAREN687_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1572:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1572:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10634);
            eventPropertyIdent685=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent685.getTree());
            // EsperEPL2Grammar.g:1572:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt256=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt256=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt256=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt256=3;
                    }
                    break;
            }

            switch (alt256) {
                case 1 :
                    // EsperEPL2Grammar.g:1573:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic10643); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic10647); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK686=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic10649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK686);

                    // EsperEPL2Grammar.g:1573:32: (q= QUESTION )?
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==QUESTION) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            // EsperEPL2Grammar.g:1573:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10654); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1575:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic10668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1575:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt254=2;
                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==STRING_LITERAL) ) {
                        alt254=1;
                    }
                    else if ( (LA254_0==QUOTED_STRING_LITERAL) ) {
                        alt254=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 254, 0, input);

                        throw nvae;
                    }
                    switch (alt254) {
                        case 1 :
                            // EsperEPL2Grammar.g:1575:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10673); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1575:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10679); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN687=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic10682); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN687);

                    // EsperEPL2Grammar.g:1575:66: (q= QUESTION )?
                    int alt255=2;
                    int LA255_0 = input.LA(1);

                    if ( (LA255_0==QUESTION) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            // EsperEPL2Grammar.g:1575:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10687); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1577:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10701); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, ni, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, s, eventPropertyIdent, eventPropertyIdent, ni, eventPropertyIdent
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1580:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1580:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1581:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1581:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1582:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1582:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1583:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1583:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1584:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1584:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1585:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1585:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1588:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR688=null;
        Token DOT689=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR688_tree=null;
        CommonTree DOT689_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1590:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1590:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10824);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1591:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);

                if ( (LA258_0==ESCAPECHAR) ) {
                    alt258=1;
                }


                switch (alt258) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1592:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR688=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent10836); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR688);

            	    DOT689=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent10838); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT689);

            	    // EsperEPL2Grammar.g:1592:24: (ipi2= keywordAllowedIdent )?
            	    int alt257=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt257=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA257_5 = input.LA(2);

            	            if ( (LA257_5==EOF||(LA257_5>=IN_SET && LA257_5<=NOT_EXPR)||(LA257_5>=WHERE && LA257_5<=AS)||(LA257_5>=ELSE && LA257_5<=FROM)||(LA257_5>=INNER && LA257_5<=FULL)||LA257_5==IS||(LA257_5>=GROUP && LA257_5<=HAVING)||LA257_5==ALL||LA257_5==OUTPUT||LA257_5==INSERT||(LA257_5>=ORDER && LA257_5<=DESC)||LA257_5==PATTERN||(LA257_5>=TIMEPERIOD_SEC && LA257_5<=TIMEPERIOD_SECONDS)||LA257_5==ROW_LIMIT_EXPR||(LA257_5>=MATCH_RECOGNIZE && LA257_5<=MEASURES)||(LA257_5>=AFTER && LA257_5<=FOR)||LA257_5==COMMA||(LA257_5>=EQUALS && LA257_5<=COLON)||(LA257_5>=BAND && LA257_5<=MOD)||LA257_5==RCURLY||LA257_5==ESCAPECHAR) ) {
            	                alt257=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA257_23 = input.LA(2);

            	            if ( (LA257_23==LPAREN) ) {
            	                int LA257_170 = input.LA(3);

            	                if ( ((LA257_170>=STRING_LITERAL && LA257_170<=QUOTED_STRING_LITERAL)) ) {
            	                    alt257=1;
            	                }
            	            }
            	            else if ( (LA257_23==EOF||(LA257_23>=IN_SET && LA257_23<=NOT_EXPR)||(LA257_23>=WHERE && LA257_23<=AS)||(LA257_23>=ELSE && LA257_23<=FROM)||(LA257_23>=INNER && LA257_23<=FULL)||LA257_23==IS||(LA257_23>=GROUP && LA257_23<=HAVING)||LA257_23==ALL||LA257_23==OUTPUT||LA257_23==INSERT||(LA257_23>=ORDER && LA257_23<=DESC)||LA257_23==PATTERN||(LA257_23>=TIMEPERIOD_SEC && LA257_23<=TIMEPERIOD_SECONDS)||LA257_23==ROW_LIMIT_EXPR||(LA257_23>=MATCH_RECOGNIZE && LA257_23<=MEASURES)||(LA257_23>=AFTER && LA257_23<=FOR)||LA257_23==COMMA||(LA257_23>=EQUALS && LA257_23<=DOT)||(LA257_23>=RPAREN && LA257_23<=COLON)||(LA257_23>=BAND && LA257_23<=MOD)||LA257_23==RCURLY||LA257_23==ESCAPECHAR) ) {
            	                alt257=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA257_36 = input.LA(2);

            	            if ( (LA257_36==EOF||(LA257_36>=IN_SET && LA257_36<=NOT_EXPR)||(LA257_36>=WHERE && LA257_36<=AS)||(LA257_36>=ELSE && LA257_36<=FROM)||(LA257_36>=INNER && LA257_36<=FULL)||LA257_36==IS||(LA257_36>=GROUP && LA257_36<=HAVING)||LA257_36==ALL||LA257_36==OUTPUT||LA257_36==INSERT||(LA257_36>=ORDER && LA257_36<=DESC)||LA257_36==PATTERN||(LA257_36>=TIMEPERIOD_SEC && LA257_36<=TIMEPERIOD_SECONDS)||LA257_36==ROW_LIMIT_EXPR||(LA257_36>=MATCH_RECOGNIZE && LA257_36<=MEASURES)||(LA257_36>=AFTER && LA257_36<=FOR)||LA257_36==COMMA||(LA257_36>=EQUALS && LA257_36<=COLON)||(LA257_36>=BAND && LA257_36<=MOD)||LA257_36==RCURLY||LA257_36==ESCAPECHAR) ) {
            	                alt257=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA257_37 = input.LA(2);

            	            if ( (LA257_37==EOF||(LA257_37>=IN_SET && LA257_37<=NOT_EXPR)||(LA257_37>=WHERE && LA257_37<=AS)||(LA257_37>=ELSE && LA257_37<=FROM)||(LA257_37>=INNER && LA257_37<=FULL)||LA257_37==IS||(LA257_37>=GROUP && LA257_37<=HAVING)||LA257_37==ALL||LA257_37==OUTPUT||LA257_37==INSERT||(LA257_37>=ORDER && LA257_37<=DESC)||LA257_37==PATTERN||(LA257_37>=TIMEPERIOD_SEC && LA257_37<=TIMEPERIOD_SECONDS)||LA257_37==ROW_LIMIT_EXPR||(LA257_37>=MATCH_RECOGNIZE && LA257_37<=MEASURES)||(LA257_37>=AFTER && LA257_37<=FOR)||LA257_37==COMMA||(LA257_37>=EQUALS && LA257_37<=COLON)||(LA257_37>=BAND && LA257_37<=MOD)||LA257_37==RCURLY||LA257_37==ESCAPECHAR) ) {
            	                alt257=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA257_39 = input.LA(2);

            	            if ( (LA257_39==EOF||(LA257_39>=IN_SET && LA257_39<=NOT_EXPR)||(LA257_39>=WHERE && LA257_39<=AS)||(LA257_39>=ELSE && LA257_39<=FROM)||(LA257_39>=INNER && LA257_39<=FULL)||LA257_39==IS||(LA257_39>=GROUP && LA257_39<=HAVING)||LA257_39==ALL||LA257_39==OUTPUT||LA257_39==INSERT||(LA257_39>=ORDER && LA257_39<=DESC)||LA257_39==PATTERN||(LA257_39>=TIMEPERIOD_SEC && LA257_39<=TIMEPERIOD_SECONDS)||LA257_39==ROW_LIMIT_EXPR||(LA257_39>=MATCH_RECOGNIZE && LA257_39<=MEASURES)||(LA257_39>=AFTER && LA257_39<=FOR)||LA257_39==COMMA||(LA257_39>=EQUALS && LA257_39<=COLON)||(LA257_39>=BAND && LA257_39<=MOD)||LA257_39==RCURLY||LA257_39==ESCAPECHAR) ) {
            	                alt257=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA257_40 = input.LA(2);

            	            if ( (LA257_40==PATTERN) ) {
            	                int LA257_435 = input.LA(3);

            	                if ( (LA257_435==LPAREN) ) {
            	                    alt257=1;
            	                }
            	            }
            	            else if ( (LA257_40==EOF||(LA257_40>=IN_SET && LA257_40<=NOT_EXPR)||(LA257_40>=WHERE && LA257_40<=AS)||(LA257_40>=ELSE && LA257_40<=FROM)||(LA257_40>=INNER && LA257_40<=FULL)||LA257_40==IS||(LA257_40>=GROUP && LA257_40<=HAVING)||LA257_40==ALL||LA257_40==OUTPUT||LA257_40==INSERT||(LA257_40>=ORDER && LA257_40<=DESC)||(LA257_40>=TIMEPERIOD_SEC && LA257_40<=TIMEPERIOD_SECONDS)||LA257_40==ROW_LIMIT_EXPR||(LA257_40>=MATCH_RECOGNIZE && LA257_40<=MEASURES)||(LA257_40>=AFTER && LA257_40<=FOR)||LA257_40==COMMA||(LA257_40>=EQUALS && LA257_40<=COLON)||(LA257_40>=BAND && LA257_40<=MOD)||LA257_40==RCURLY||LA257_40==ESCAPECHAR) ) {
            	                alt257=1;
            	            }
            	            }
            	            break;
            	    }

            	    switch (alt257) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1592:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10842);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop258;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1594:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1594:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1597:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | WHILE | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | INDEX | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT690=null;
        Token COUNT691=null;
        Token ESCAPE692=null;
        Token EVERY_EXPR693=null;
        Token SUM694=null;
        Token AVG695=null;
        Token MAX696=null;
        Token MIN697=null;
        Token COALESCE698=null;
        Token MEDIAN699=null;
        Token STDDEV700=null;
        Token AVEDEV701=null;
        Token EVENTS702=null;
        Token FIRST703=null;
        Token LAST704=null;
        Token WHILE705=null;
        Token UNIDIRECTIONAL706=null;
        Token RETAINUNION707=null;
        Token RETAININTERSECTION708=null;
        Token UNTIL709=null;
        Token PATTERN710=null;
        Token SQL711=null;
        Token METADATASQL712=null;
        Token PREVIOUS713=null;
        Token PRIOR714=null;
        Token WEEKDAY715=null;
        Token LW716=null;
        Token INSTANCEOF717=null;
        Token CAST718=null;
        Token SNAPSHOT719=null;
        Token VARIABLE720=null;
        Token INDEX721=null;
        Token WINDOW722=null;
        Token LEFT723=null;
        Token RIGHT724=null;
        Token OUTER725=null;
        Token FULL726=null;
        Token JOIN727=null;
        Token DEFINE728=null;
        Token PARTITION729=null;
        Token MATCHES730=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT690_tree=null;
        CommonTree COUNT691_tree=null;
        CommonTree ESCAPE692_tree=null;
        CommonTree EVERY_EXPR693_tree=null;
        CommonTree SUM694_tree=null;
        CommonTree AVG695_tree=null;
        CommonTree MAX696_tree=null;
        CommonTree MIN697_tree=null;
        CommonTree COALESCE698_tree=null;
        CommonTree MEDIAN699_tree=null;
        CommonTree STDDEV700_tree=null;
        CommonTree AVEDEV701_tree=null;
        CommonTree EVENTS702_tree=null;
        CommonTree FIRST703_tree=null;
        CommonTree LAST704_tree=null;
        CommonTree WHILE705_tree=null;
        CommonTree UNIDIRECTIONAL706_tree=null;
        CommonTree RETAINUNION707_tree=null;
        CommonTree RETAININTERSECTION708_tree=null;
        CommonTree UNTIL709_tree=null;
        CommonTree PATTERN710_tree=null;
        CommonTree SQL711_tree=null;
        CommonTree METADATASQL712_tree=null;
        CommonTree PREVIOUS713_tree=null;
        CommonTree PRIOR714_tree=null;
        CommonTree WEEKDAY715_tree=null;
        CommonTree LW716_tree=null;
        CommonTree INSTANCEOF717_tree=null;
        CommonTree CAST718_tree=null;
        CommonTree SNAPSHOT719_tree=null;
        CommonTree VARIABLE720_tree=null;
        CommonTree INDEX721_tree=null;
        CommonTree WINDOW722_tree=null;
        CommonTree LEFT723_tree=null;
        CommonTree RIGHT724_tree=null;
        CommonTree OUTER725_tree=null;
        CommonTree FULL726_tree=null;
        CommonTree JOIN727_tree=null;
        CommonTree DEFINE728_tree=null;
        CommonTree PARTITION729_tree=null;
        CommonTree MATCHES730_tree=null;

        try {
            // EsperEPL2Grammar.g:1598:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | WHILE | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | INDEX | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES )
            int alt259=43;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt259=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt259=2;
                }
                break;
            case AT:
                {
                alt259=3;
                }
                break;
            case COUNT:
                {
                alt259=4;
                }
                break;
            case ESCAPE:
                {
                alt259=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt259=6;
                }
                break;
            case SUM:
                {
                alt259=7;
                }
                break;
            case AVG:
                {
                alt259=8;
                }
                break;
            case MAX:
                {
                alt259=9;
                }
                break;
            case MIN:
                {
                alt259=10;
                }
                break;
            case COALESCE:
                {
                alt259=11;
                }
                break;
            case MEDIAN:
                {
                alt259=12;
                }
                break;
            case STDDEV:
                {
                alt259=13;
                }
                break;
            case AVEDEV:
                {
                alt259=14;
                }
                break;
            case EVENTS:
                {
                alt259=15;
                }
                break;
            case FIRST:
                {
                alt259=16;
                }
                break;
            case LAST:
                {
                alt259=17;
                }
                break;
            case WHILE:
                {
                alt259=18;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt259=19;
                }
                break;
            case RETAINUNION:
                {
                alt259=20;
                }
                break;
            case RETAININTERSECTION:
                {
                alt259=21;
                }
                break;
            case UNTIL:
                {
                alt259=22;
                }
                break;
            case PATTERN:
                {
                alt259=23;
                }
                break;
            case SQL:
                {
                alt259=24;
                }
                break;
            case METADATASQL:
                {
                alt259=25;
                }
                break;
            case PREVIOUS:
                {
                alt259=26;
                }
                break;
            case PRIOR:
                {
                alt259=27;
                }
                break;
            case WEEKDAY:
                {
                alt259=28;
                }
                break;
            case LW:
                {
                alt259=29;
                }
                break;
            case INSTANCEOF:
                {
                alt259=30;
                }
                break;
            case CAST:
                {
                alt259=31;
                }
                break;
            case SNAPSHOT:
                {
                alt259=32;
                }
                break;
            case VARIABLE:
                {
                alt259=33;
                }
                break;
            case INDEX:
                {
                alt259=34;
                }
                break;
            case WINDOW:
                {
                alt259=35;
                }
                break;
            case LEFT:
                {
                alt259=36;
                }
                break;
            case RIGHT:
                {
                alt259=37;
                }
                break;
            case OUTER:
                {
                alt259=38;
                }
                break;
            case FULL:
                {
                alt259=39;
                }
                break;
            case JOIN:
                {
                alt259=40;
                }
                break;
            case DEFINE:
                {
                alt259=41;
                }
                break;
            case PARTITION:
                {
                alt259=42;
                }
                break;
            case MATCHES:
                {
                alt259=43;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;
            }

            switch (alt259) {
                case 1 :
                    // EsperEPL2Grammar.g:1598:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent10881); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1599:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10890); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1600:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT690=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent10897); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT690_tree = (CommonTree)adaptor.create(AT690);
                    adaptor.addChild(root_0, AT690_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1601:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT691=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent10904); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT691_tree = (CommonTree)adaptor.create(COUNT691);
                    adaptor.addChild(root_0, COUNT691_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1602:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE692=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent10911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE692_tree = (CommonTree)adaptor.create(ESCAPE692);
                    adaptor.addChild(root_0, ESCAPE692_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1603:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR693=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10922); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR693_tree = (CommonTree)adaptor.create(EVERY_EXPR693);
                    adaptor.addChild(root_0, EVERY_EXPR693_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1604:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM694=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent10929); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM694_tree = (CommonTree)adaptor.create(SUM694);
                    adaptor.addChild(root_0, SUM694_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1605:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG695=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent10936); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG695_tree = (CommonTree)adaptor.create(AVG695);
                    adaptor.addChild(root_0, AVG695_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1606:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX696=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent10943); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX696_tree = (CommonTree)adaptor.create(MAX696);
                    adaptor.addChild(root_0, MAX696_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1607:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN697=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent10950); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN697_tree = (CommonTree)adaptor.create(MIN697);
                    adaptor.addChild(root_0, MIN697_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1608:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE698=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent10957); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE698_tree = (CommonTree)adaptor.create(COALESCE698);
                    adaptor.addChild(root_0, COALESCE698_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1609:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN699=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent10964); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN699_tree = (CommonTree)adaptor.create(MEDIAN699);
                    adaptor.addChild(root_0, MEDIAN699_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1610:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV700=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent10971); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV700_tree = (CommonTree)adaptor.create(STDDEV700);
                    adaptor.addChild(root_0, STDDEV700_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1611:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV701=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent10978); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV701_tree = (CommonTree)adaptor.create(AVEDEV701);
                    adaptor.addChild(root_0, AVEDEV701_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1612:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS702=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent10985); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS702_tree = (CommonTree)adaptor.create(EVENTS702);
                    adaptor.addChild(root_0, EVENTS702_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1613:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST703=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent10992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST703_tree = (CommonTree)adaptor.create(FIRST703);
                    adaptor.addChild(root_0, FIRST703_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1614:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST704=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent10999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST704_tree = (CommonTree)adaptor.create(LAST704);
                    adaptor.addChild(root_0, LAST704_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1615:4: WHILE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WHILE705=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent11006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE705_tree = (CommonTree)adaptor.create(WHILE705);
                    adaptor.addChild(root_0, WHILE705_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1616:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL706=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11013); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL706_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL706);
                    adaptor.addChild(root_0, UNIDIRECTIONAL706_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1617:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION707=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent11020); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION707_tree = (CommonTree)adaptor.create(RETAINUNION707);
                    adaptor.addChild(root_0, RETAINUNION707_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1618:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION708=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11027); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION708_tree = (CommonTree)adaptor.create(RETAININTERSECTION708);
                    adaptor.addChild(root_0, RETAININTERSECTION708_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1619:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL709=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent11034); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL709_tree = (CommonTree)adaptor.create(UNTIL709);
                    adaptor.addChild(root_0, UNTIL709_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1620:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN710=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent11041); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN710_tree = (CommonTree)adaptor.create(PATTERN710);
                    adaptor.addChild(root_0, PATTERN710_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1621:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL711=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent11048); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL711_tree = (CommonTree)adaptor.create(SQL711);
                    adaptor.addChild(root_0, SQL711_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1622:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL712=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent11055); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL712_tree = (CommonTree)adaptor.create(METADATASQL712);
                    adaptor.addChild(root_0, METADATASQL712_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1623:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS713=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent11062); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS713_tree = (CommonTree)adaptor.create(PREVIOUS713);
                    adaptor.addChild(root_0, PREVIOUS713_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1624:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR714=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent11069); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR714_tree = (CommonTree)adaptor.create(PRIOR714);
                    adaptor.addChild(root_0, PRIOR714_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1625:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY715=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent11076); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY715_tree = (CommonTree)adaptor.create(WEEKDAY715);
                    adaptor.addChild(root_0, WEEKDAY715_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1626:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW716=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent11083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW716_tree = (CommonTree)adaptor.create(LW716);
                    adaptor.addChild(root_0, LW716_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1627:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF717=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent11090); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF717_tree = (CommonTree)adaptor.create(INSTANCEOF717);
                    adaptor.addChild(root_0, INSTANCEOF717_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1628:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST718=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent11097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST718_tree = (CommonTree)adaptor.create(CAST718);
                    adaptor.addChild(root_0, CAST718_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1629:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT719=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent11104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT719_tree = (CommonTree)adaptor.create(SNAPSHOT719);
                    adaptor.addChild(root_0, SNAPSHOT719_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1630:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE720=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent11111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE720_tree = (CommonTree)adaptor.create(VARIABLE720);
                    adaptor.addChild(root_0, VARIABLE720_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1631:4: INDEX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INDEX721=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent11120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX721_tree = (CommonTree)adaptor.create(INDEX721);
                    adaptor.addChild(root_0, INDEX721_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1632:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW722=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent11129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW722_tree = (CommonTree)adaptor.create(WINDOW722);
                    adaptor.addChild(root_0, WINDOW722_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1633:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT723=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent11136); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT723_tree = (CommonTree)adaptor.create(LEFT723);
                    adaptor.addChild(root_0, LEFT723_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1634:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT724=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent11143); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT724_tree = (CommonTree)adaptor.create(RIGHT724);
                    adaptor.addChild(root_0, RIGHT724_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1635:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER725=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent11150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER725_tree = (CommonTree)adaptor.create(OUTER725);
                    adaptor.addChild(root_0, OUTER725_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 39 :
                    // EsperEPL2Grammar.g:1636:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL726=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent11157); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL726_tree = (CommonTree)adaptor.create(FULL726);
                    adaptor.addChild(root_0, FULL726_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 40 :
                    // EsperEPL2Grammar.g:1637:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN727=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent11164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN727_tree = (CommonTree)adaptor.create(JOIN727);
                    adaptor.addChild(root_0, JOIN727_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;
                case 41 :
                    // EsperEPL2Grammar.g:1638:4: DEFINE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DEFINE728=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent11171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE728_tree = (CommonTree)adaptor.create(DEFINE728);
                    adaptor.addChild(root_0, DEFINE728_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }

                    }
                    break;
                case 42 :
                    // EsperEPL2Grammar.g:1639:4: PARTITION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PARTITION729=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent11178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION729_tree = (CommonTree)adaptor.create(PARTITION729);
                    adaptor.addChild(root_0, PARTITION729_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }

                    }
                    break;
                case 43 :
                    // EsperEPL2Grammar.g:1640:4: MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MATCHES730=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent11185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES730_tree = (CommonTree)adaptor.create(MATCHES730);
                    adaptor.addChild(root_0, MATCHES730_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableStr"
    // EsperEPL2Grammar.g:1643:1: escapableStr returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1644:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==IDENT) ) {
                alt260=1;
            }
            else if ( (LA260_0==TICKED_STRING_LITERAL) ) {
                alt260=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);

                throw nvae;
            }
            switch (alt260) {
                case 1 :
                    // EsperEPL2Grammar.g:1644:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr11206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1645:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11215); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableStr"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1648:1: escapableIdent : ( IDENT | t= TICKED_STRING_LITERAL -> IDENT[$t] );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token IDENT731=null;

        CommonTree t_tree=null;
        CommonTree IDENT731_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1649:2: ( IDENT | t= TICKED_STRING_LITERAL -> IDENT[$t] )
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==IDENT) ) {
                alt261=1;
            }
            else if ( (LA261_0==TICKED_STRING_LITERAL) ) {
                alt261=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;
            }
            switch (alt261) {
                case 1 :
                    // EsperEPL2Grammar.g:1649:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT731=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent11229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT731_tree = (CommonTree)adaptor.create(IDENT731);
                    adaptor.addChild(root_0, IDENT731_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1650:4: t= TICKED_STRING_LITERAL
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11237); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1650:28: -> IDENT[$t]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1653:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart732 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart733 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart734 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart735 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart736 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart737 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart738 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart739 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart740 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart741 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart742 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart743 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart744 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart745 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart746 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1654:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1655:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1655:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt272=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt272=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt272=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt272=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt272=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt272=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt272=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt272=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt272=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt272=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt272=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt272=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt272=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt272=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt272=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt272=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt272=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt272=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt272=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt272=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt272=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt272=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt272=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt272=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt272=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt272=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt272=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt272=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt272=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt272=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt272=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                throw nvae;
            }

            switch (alt272) {
                case 1 :
                    // EsperEPL2Grammar.g:1656:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod11262);
                    dayPart732=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart732.getTree());
                    // EsperEPL2Grammar.g:1656:11: ( hourPart )?
                    int alt262=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA262_1 = input.LA(2);

                            if ( ((LA262_1>=TIMEPERIOD_HOUR && LA262_1<=TIMEPERIOD_HOURS)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA262_2 = input.LA(2);

                            if ( ((LA262_2>=TIMEPERIOD_HOUR && LA262_2<=TIMEPERIOD_HOURS)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA262_3 = input.LA(2);

                            if ( ((LA262_3>=TIMEPERIOD_HOUR && LA262_3<=TIMEPERIOD_HOURS)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA262_4 = input.LA(2);

                            if ( ((LA262_4>=TIMEPERIOD_HOUR && LA262_4<=TIMEPERIOD_HOURS)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA262_5 = input.LA(2);

                            if ( ((LA262_5>=TIMEPERIOD_HOUR && LA262_5<=TIMEPERIOD_HOURS)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA262_6 = input.LA(2);

                            if ( ((LA262_6>=TIMEPERIOD_HOUR && LA262_6<=TIMEPERIOD_HOURS)) ) {
                                alt262=1;
                            }
                            }
                            break;
                    }

                    switch (alt262) {
                        case 1 :
                            // EsperEPL2Grammar.g:1656:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11264);
                            hourPart733=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart733.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1656:21: ( minutePart )?
                    int alt263=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA263_1 = input.LA(2);

                            if ( (LA263_1==MIN||(LA263_1>=TIMEPERIOD_MINUTE && LA263_1<=TIMEPERIOD_MINUTES)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA263_2 = input.LA(2);

                            if ( (LA263_2==MIN||(LA263_2>=TIMEPERIOD_MINUTE && LA263_2<=TIMEPERIOD_MINUTES)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA263_3 = input.LA(2);

                            if ( (LA263_3==MIN||(LA263_3>=TIMEPERIOD_MINUTE && LA263_3<=TIMEPERIOD_MINUTES)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA263_4 = input.LA(2);

                            if ( (LA263_4==MIN||(LA263_4>=TIMEPERIOD_MINUTE && LA263_4<=TIMEPERIOD_MINUTES)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA263_5 = input.LA(2);

                            if ( (LA263_5==MIN||(LA263_5>=TIMEPERIOD_MINUTE && LA263_5<=TIMEPERIOD_MINUTES)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA263_6 = input.LA(2);

                            if ( (LA263_6==MIN||(LA263_6>=TIMEPERIOD_MINUTE && LA263_6<=TIMEPERIOD_MINUTES)) ) {
                                alt263=1;
                            }
                            }
                            break;
                    }

                    switch (alt263) {
                        case 1 :
                            // EsperEPL2Grammar.g:1656:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11267);
                            minutePart734=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart734.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1656:33: ( secondPart )?
                    int alt264=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA264_1 = input.LA(2);

                            if ( ((LA264_1>=TIMEPERIOD_SEC && LA264_1<=TIMEPERIOD_SECONDS)) ) {
                                alt264=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA264_2 = input.LA(2);

                            if ( ((LA264_2>=TIMEPERIOD_SEC && LA264_2<=TIMEPERIOD_SECONDS)) ) {
                                alt264=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA264_3 = input.LA(2);

                            if ( ((LA264_3>=TIMEPERIOD_SEC && LA264_3<=TIMEPERIOD_SECONDS)) ) {
                                alt264=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA264_4 = input.LA(2);

                            if ( ((LA264_4>=TIMEPERIOD_SEC && LA264_4<=TIMEPERIOD_SECONDS)) ) {
                                alt264=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA264_5 = input.LA(2);

                            if ( ((LA264_5>=TIMEPERIOD_SEC && LA264_5<=TIMEPERIOD_SECONDS)) ) {
                                alt264=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA264_6 = input.LA(2);

                            if ( ((LA264_6>=TIMEPERIOD_SEC && LA264_6<=TIMEPERIOD_SECONDS)) ) {
                                alt264=1;
                            }
                            }
                            break;
                    }

                    switch (alt264) {
                        case 1 :
                            // EsperEPL2Grammar.g:1656:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11270);
                            secondPart735=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart735.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1656:45: ( millisecondPart )?
                    int alt265=2;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==NUM_DOUBLE||LA265_0==IDENT||LA265_0==QUESTION||LA265_0==NUM_INT||(LA265_0>=NUM_LONG && LA265_0<=NUM_FLOAT)) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            // EsperEPL2Grammar.g:1656:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11273);
                            millisecondPart736=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart736.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1657:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod11279);
                    hourPart737=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart737.getTree());
                    // EsperEPL2Grammar.g:1657:13: ( minutePart )?
                    int alt266=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA266_1 = input.LA(2);

                            if ( (LA266_1==MIN||(LA266_1>=TIMEPERIOD_MINUTE && LA266_1<=TIMEPERIOD_MINUTES)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA266_2 = input.LA(2);

                            if ( (LA266_2==MIN||(LA266_2>=TIMEPERIOD_MINUTE && LA266_2<=TIMEPERIOD_MINUTES)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA266_3 = input.LA(2);

                            if ( (LA266_3==MIN||(LA266_3>=TIMEPERIOD_MINUTE && LA266_3<=TIMEPERIOD_MINUTES)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA266_4 = input.LA(2);

                            if ( (LA266_4==MIN||(LA266_4>=TIMEPERIOD_MINUTE && LA266_4<=TIMEPERIOD_MINUTES)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA266_5 = input.LA(2);

                            if ( (LA266_5==MIN||(LA266_5>=TIMEPERIOD_MINUTE && LA266_5<=TIMEPERIOD_MINUTES)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA266_6 = input.LA(2);

                            if ( (LA266_6==MIN||(LA266_6>=TIMEPERIOD_MINUTE && LA266_6<=TIMEPERIOD_MINUTES)) ) {
                                alt266=1;
                            }
                            }
                            break;
                    }

                    switch (alt266) {
                        case 1 :
                            // EsperEPL2Grammar.g:1657:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11281);
                            minutePart738=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart738.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1657:25: ( secondPart )?
                    int alt267=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA267_1 = input.LA(2);

                            if ( ((LA267_1>=TIMEPERIOD_SEC && LA267_1<=TIMEPERIOD_SECONDS)) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA267_2 = input.LA(2);

                            if ( ((LA267_2>=TIMEPERIOD_SEC && LA267_2<=TIMEPERIOD_SECONDS)) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA267_3 = input.LA(2);

                            if ( ((LA267_3>=TIMEPERIOD_SEC && LA267_3<=TIMEPERIOD_SECONDS)) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA267_4 = input.LA(2);

                            if ( ((LA267_4>=TIMEPERIOD_SEC && LA267_4<=TIMEPERIOD_SECONDS)) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA267_5 = input.LA(2);

                            if ( ((LA267_5>=TIMEPERIOD_SEC && LA267_5<=TIMEPERIOD_SECONDS)) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA267_6 = input.LA(2);

                            if ( ((LA267_6>=TIMEPERIOD_SEC && LA267_6<=TIMEPERIOD_SECONDS)) ) {
                                alt267=1;
                            }
                            }
                            break;
                    }

                    switch (alt267) {
                        case 1 :
                            // EsperEPL2Grammar.g:1657:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11284);
                            secondPart739=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart739.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1657:37: ( millisecondPart )?
                    int alt268=2;
                    int LA268_0 = input.LA(1);

                    if ( (LA268_0==NUM_DOUBLE||LA268_0==IDENT||LA268_0==QUESTION||LA268_0==NUM_INT||(LA268_0>=NUM_LONG && LA268_0<=NUM_FLOAT)) ) {
                        alt268=1;
                    }
                    switch (alt268) {
                        case 1 :
                            // EsperEPL2Grammar.g:1657:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11287);
                            millisecondPart740=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart740.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1658:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod11293);
                    minutePart741=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart741.getTree());
                    // EsperEPL2Grammar.g:1658:15: ( secondPart )?
                    int alt269=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA269_1 = input.LA(2);

                            if ( ((LA269_1>=TIMEPERIOD_SEC && LA269_1<=TIMEPERIOD_SECONDS)) ) {
                                alt269=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA269_2 = input.LA(2);

                            if ( ((LA269_2>=TIMEPERIOD_SEC && LA269_2<=TIMEPERIOD_SECONDS)) ) {
                                alt269=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA269_3 = input.LA(2);

                            if ( ((LA269_3>=TIMEPERIOD_SEC && LA269_3<=TIMEPERIOD_SECONDS)) ) {
                                alt269=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA269_4 = input.LA(2);

                            if ( ((LA269_4>=TIMEPERIOD_SEC && LA269_4<=TIMEPERIOD_SECONDS)) ) {
                                alt269=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA269_5 = input.LA(2);

                            if ( ((LA269_5>=TIMEPERIOD_SEC && LA269_5<=TIMEPERIOD_SECONDS)) ) {
                                alt269=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA269_6 = input.LA(2);

                            if ( ((LA269_6>=TIMEPERIOD_SEC && LA269_6<=TIMEPERIOD_SECONDS)) ) {
                                alt269=1;
                            }
                            }
                            break;
                    }

                    switch (alt269) {
                        case 1 :
                            // EsperEPL2Grammar.g:1658:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11295);
                            secondPart742=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart742.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1658:27: ( millisecondPart )?
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==NUM_DOUBLE||LA270_0==IDENT||LA270_0==QUESTION||LA270_0==NUM_INT||(LA270_0>=NUM_LONG && LA270_0<=NUM_FLOAT)) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            // EsperEPL2Grammar.g:1658:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11298);
                            millisecondPart743=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart743.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1659:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod11304);
                    secondPart744=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart744.getTree());
                    // EsperEPL2Grammar.g:1659:15: ( millisecondPart )?
                    int alt271=2;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==NUM_DOUBLE||LA271_0==IDENT||LA271_0==QUESTION||LA271_0==NUM_INT||(LA271_0>=NUM_LONG && LA271_0<=NUM_FLOAT)) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            // EsperEPL2Grammar.g:1659:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11306);
                            millisecondPart745=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart745.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1660:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod11312);
                    millisecondPart746=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart746.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: millisecondPart, minutePart, secondPart, hourPart, dayPart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1662:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1662:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1662:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1662:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1662:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1662:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1662:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1665:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS749=null;
        Token TIMEPERIOD_DAY750=null;
        EsperEPL2GrammarParser.number_return number747 = null;

        EsperEPL2GrammarParser.substitution_return substitution748 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS749_tree=null;
        CommonTree TIMEPERIOD_DAY750_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1666:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1666:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1666:4: ( number | i= IDENT | substitution )
            int alt273=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt273=1;
                }
                break;
            case IDENT:
                {
                alt273=2;
                }
                break;
            case QUESTION:
                {
                alt273=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;
            }

            switch (alt273) {
                case 1 :
                    // EsperEPL2Grammar.g:1666:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart11350);
                    number747=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number747.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1666:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart11354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1666:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart11356);
                    substitution748=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution748.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1666:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==TIMEPERIOD_DAYS) ) {
                alt274=1;
            }
            else if ( (LA274_0==TIMEPERIOD_DAY) ) {
                alt274=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 274, 0, input);

                throw nvae;
            }
            switch (alt274) {
                case 1 :
                    // EsperEPL2Grammar.g:1666:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS749=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart11360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS749);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1666:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY750=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart11364); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY750);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1667:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1667:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1667:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1667:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1668:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1668:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1668:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1668:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1671:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS753=null;
        Token TIMEPERIOD_HOUR754=null;
        EsperEPL2GrammarParser.number_return number751 = null;

        EsperEPL2GrammarParser.substitution_return substitution752 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS753_tree=null;
        CommonTree TIMEPERIOD_HOUR754_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1672:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1672:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1672:4: ( number | i= IDENT | substitution )
            int alt275=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt275=1;
                }
                break;
            case IDENT:
                {
                alt275=2;
                }
                break;
            case QUESTION:
                {
                alt275=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);

                throw nvae;
            }

            switch (alt275) {
                case 1 :
                    // EsperEPL2Grammar.g:1672:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart11413);
                    number751=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number751.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1672:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart11417); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1672:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart11419);
                    substitution752=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution752.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1672:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt276=2;
            int LA276_0 = input.LA(1);

            if ( (LA276_0==TIMEPERIOD_HOURS) ) {
                alt276=1;
            }
            else if ( (LA276_0==TIMEPERIOD_HOUR) ) {
                alt276=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 276, 0, input);

                throw nvae;
            }
            switch (alt276) {
                case 1 :
                    // EsperEPL2Grammar.g:1672:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS753=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart11423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS753);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1672:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR754=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart11427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR754);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1673:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1673:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1673:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1673:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1674:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1674:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1674:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1674:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1677:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES757=null;
        Token TIMEPERIOD_MINUTE758=null;
        Token MIN759=null;
        EsperEPL2GrammarParser.number_return number755 = null;

        EsperEPL2GrammarParser.substitution_return substitution756 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES757_tree=null;
        CommonTree TIMEPERIOD_MINUTE758_tree=null;
        CommonTree MIN759_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1678:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1678:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1678:4: ( number | i= IDENT | substitution )
            int alt277=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt277=1;
                }
                break;
            case IDENT:
                {
                alt277=2;
                }
                break;
            case QUESTION:
                {
                alt277=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                throw nvae;
            }

            switch (alt277) {
                case 1 :
                    // EsperEPL2Grammar.g:1678:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart11476);
                    number755=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number755.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1678:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart11480); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1678:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart11482);
                    substitution756=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution756.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1678:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt278=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt278=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt278=2;
                }
                break;
            case MIN:
                {
                alt278=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 278, 0, input);

                throw nvae;
            }

            switch (alt278) {
                case 1 :
                    // EsperEPL2Grammar.g:1678:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES757=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11486); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES757);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1678:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE758=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE758);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1678:76: MIN
                    {
                    MIN759=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart11494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN759);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1679:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1679:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1679:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1679:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1680:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1680:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1680:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1680:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1683:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS762=null;
        Token TIMEPERIOD_SECOND763=null;
        Token TIMEPERIOD_SEC764=null;
        EsperEPL2GrammarParser.number_return number760 = null;

        EsperEPL2GrammarParser.substitution_return substitution761 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS762_tree=null;
        CommonTree TIMEPERIOD_SECOND763_tree=null;
        CommonTree TIMEPERIOD_SEC764_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1684:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1684:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1684:4: ( number | i= IDENT | substitution )
            int alt279=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt279=1;
                }
                break;
            case IDENT:
                {
                alt279=2;
                }
                break;
            case QUESTION:
                {
                alt279=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 279, 0, input);

                throw nvae;
            }

            switch (alt279) {
                case 1 :
                    // EsperEPL2Grammar.g:1684:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart11544);
                    number760=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number760.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1684:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart11548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1684:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart11550);
                    substitution761=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution761.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1684:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt280=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt280=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt280=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt280=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 280, 0, input);

                throw nvae;
            }

            switch (alt280) {
                case 1 :
                    // EsperEPL2Grammar.g:1684:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS762=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS762);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1684:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND763=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart11558); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND763);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1684:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC764=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart11562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC764);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, i, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1685:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1685:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1685:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1685:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1686:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1686:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1686:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1686:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1689:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS767=null;
        Token TIMEPERIOD_MILLISECOND768=null;
        Token TIMEPERIOD_MILLISEC769=null;
        EsperEPL2GrammarParser.number_return number765 = null;

        EsperEPL2GrammarParser.substitution_return substitution766 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS767_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND768_tree=null;
        CommonTree TIMEPERIOD_MILLISEC769_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1690:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1690:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1690:4: ( number | i= IDENT | substitution )
            int alt281=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt281=1;
                }
                break;
            case IDENT:
                {
                alt281=2;
                }
                break;
            case QUESTION:
                {
                alt281=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 281, 0, input);

                throw nvae;
            }

            switch (alt281) {
                case 1 :
                    // EsperEPL2Grammar.g:1690:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart11612);
                    number765=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number765.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1690:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart11616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1690:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart11618);
                    substitution766=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution766.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1690:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt282=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt282=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt282=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt282=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 282, 0, input);

                throw nvae;
            }

            switch (alt282) {
                case 1 :
                    // EsperEPL2Grammar.g:1690:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS767=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS767);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1690:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND768=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND768);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1690:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC769=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11630); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC769);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, i, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1691:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1691:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1691:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1691:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1692:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1692:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1692:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1692:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1695:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1696:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt283=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt283=1;
                }
                break;
            case NUM_LONG:
                {
                alt283=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt283=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt283=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);

                throw nvae;
            }

            switch (alt283) {
                case 1 :
                    // EsperEPL2Grammar.g:1696:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number11685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1696:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1697:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number11702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1697:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1698:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number11719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1698:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1699:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number11736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1699:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1702:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1703:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1703:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution11757); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1703:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1706:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant770 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant771 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1707:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt284=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt284=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt284=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt284=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt284=4;
                }
                break;
            case VALUE_NULL:
                {
                alt284=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 284, 0, input);

                throw nvae;
            }

            switch (alt284) {
                case 1 :
                    // EsperEPL2Grammar.g:1707:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant11776);
                    numberconstant770=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant770.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1708:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant11783);
                    stringconstant771=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant771.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1709:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant11796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1709:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1709:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1710:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant11816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1710:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1710:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1711:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant11836); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1711:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1711:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1714:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number772 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1715:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1715:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1715:5: (m= MINUS | p= PLUS )?
            int alt285=3;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==MINUS) ) {
                alt285=1;
            }
            else if ( (LA285_0==PLUS) ) {
                alt285=2;
            }
            switch (alt285) {
                case 1 :
                    // EsperEPL2Grammar.g:1715:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant11858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1715:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant11864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant11868);
            number772=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number772.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1716:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number772!=null?((CommonTree)number772.tree):null).getType(), "-" + (number772!=null?input.toString(number772.start,number772.stop):null)));

            }
            else // 1717:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1720:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1721:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==STRING_LITERAL) ) {
                alt286=1;
            }
            else if ( (LA286_0==QUOTED_STRING_LITERAL) ) {
                alt286=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);

                throw nvae;
            }
            switch (alt286) {
                case 1 :
                    // EsperEPL2Grammar.g:1721:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant11897); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1721:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1721:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1722:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11913); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1722:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1722:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:848:4: ( streamSelector )
        // EsperEPL2Grammar.g:848:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4147);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1026:9: ( timePeriod )
        // EsperEPL2Grammar.g:1026:10: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5520);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1195:4: ( builtinFunc )
        // EsperEPL2Grammar.g:1195:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7340);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1280:4: ( eventProperty )
        // EsperEPL2Grammar.g:1280:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar8121);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1446:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1446:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar9580);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1496:7: ( lastOperand )
        // EsperEPL2Grammar.g:1496:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar10003);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1497:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1497:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar10014);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1498:4: ( timePeriod )
        // EsperEPL2Grammar.g:1498:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar10025);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1499:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1499:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar10036);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1500:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1500:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar10047);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1501:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1501:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar10059);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1502:4: ( lastOperator )
        // EsperEPL2Grammar.g:1502:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar10070);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1503:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1503:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar10081);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1504:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1504:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar10094);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA170 dfa170 = new DFA170(this);
    protected DFA197 dfa197 = new DFA197(this);
    static final String DFA170_eotS =
        "\u0927\uffff";
    static final String DFA170_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\10\uffff"+
        "\2\16\2\uffff\2\16\u08fa\uffff";
    static final String DFA170_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\10\uffff\2\6\2\uffff\2\6\14\uffff\1\u0109\157\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\u0112\72"+
        "\uffff\1\5\72\uffff\1\5\72\uffff\1\5\11\uffff\2\6\65\uffff\2\6\75"+
        "\uffff\2\6\104\uffff\2\6\75\uffff\2\6\75\uffff\2\6\75\uffff\2\6"+
        "\64\uffff\2\6\106\uffff\2\6\64\uffff\2\6\105\uffff\2\6\64\uffff"+
        "\2\6\172\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\114\uffff\1\0\5\uffff\1\0\53\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\31\uffff\1\0\31\uffff\1\0\157\uffff";
    static final String DFA170_maxS =
        "\2\u0127\13\uffff\1\u0127\3\uffff\1\u0124\2\uffff\2\u0124\2\uffff"+
        "\4\u0124\1\uffff\2\u0124\10\uffff\2\u0124\2\uffff\2\u0124\14\uffff"+
        "\1\u0109\157\uffff\1\u0127\72\uffff\1\u0127\72\uffff\1\u0127\72"+
        "\uffff\1\u0127\72\uffff\1\u0127\72\uffff\1\u0127\72\uffff\1\u0127"+
        "\72\uffff\1\u0127\72\uffff\1\u0127\72\uffff\1\u0127\72\uffff\1\u0122"+
        "\72\uffff\1\u0127\72\uffff\1\u0127\72\uffff\1\u0125\11\uffff\2\u011f"+
        "\65\uffff\2\u011f\75\uffff\2\u011f\104\uffff\2\u011f\75\uffff\2"+
        "\u011f\75\uffff\2\u011f\75\uffff\2\u011f\64\uffff\2\u011f\106\uffff"+
        "\2\u011f\64\uffff\2\u011f\105\uffff\2\u011f\64\uffff\2\u011f\172"+
        "\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30"+
        "\uffff\1\0\114\uffff\1\0\5\uffff\1\0\53\uffff\1\0\30\uffff\1\0\30"+
        "\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30"+
        "\uffff\1\0\31\uffff\1\0\31\uffff\1\0\157\uffff";
    static final String DFA170_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\53\uffff\1\6\1\7\4\uffff"+
        "\1\1\52\uffff\1\10\1\4\u033c\uffff\11\6\2\uffff\65\6\2\uffff\75"+
        "\6\2\uffff\104\6\2\uffff\75\6\2\uffff\75\6\2\uffff\75\6\2\uffff"+
        "\64\6\2\uffff\106\6\2\uffff\64\6\2\uffff\74\6\2\uffff\7\6\2\uffff"+
        "\64\6\2\uffff\73\6\1\11\76\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\36\6\1\uffff\31\6\1\uffff\23"+
        "\6\1\uffff\5\6\1\uffff\53\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\31"+
        "\6\1\uffff\31\6\1\uffff\5\6\1\uffff\31\6\1\uffff\63\6\1\uffff\32"+
        "\6\1\uffff";
    static final String DFA170_specialS =
        "\1\0\u00a8\uffff\1\1\72\uffff\1\2\72\uffff\1\3\72\uffff\1\4\72"+
        "\uffff\1\5\72\uffff\1\6\72\uffff\1\7\72\uffff\1\10\72\uffff\1\11"+
        "\72\uffff\1\12\72\uffff\1\13\72\uffff\1\14\72\uffff\1\15\72\uffff"+
        "\1\16\11\uffff\1\17\1\20\65\uffff\1\21\1\22\75\uffff\1\23\1\24\104"+
        "\uffff\1\25\1\26\75\uffff\1\27\1\30\75\uffff\1\31\1\32\75\uffff"+
        "\1\33\1\34\64\uffff\1\35\1\36\106\uffff\1\37\1\40\64\uffff\1\41"+
        "\1\42\105\uffff\1\43\1\44\64\uffff\1\45\1\46\172\uffff\1\47\30\uffff"+
        "\1\50\30\uffff\1\51\30\uffff\1\52\30\uffff\1\53\30\uffff\1\54\114"+
        "\uffff\1\55\5\uffff\1\56\53\uffff\1\57\30\uffff\1\60\30\uffff\1"+
        "\61\30\uffff\1\62\30\uffff\1\63\30\uffff\1\64\30\uffff\1\65\30\uffff"+
        "\1\66\31\uffff\1\67\31\uffff\1\70\157\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\16\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\11\uffff\6\16\1\47\1\50\1\71\2\16\1\53\1\54\1\72"+
            "\1\uffff\1\16\1\uffff\4\16\14\uffff\3\2\5\uffff\3\16\2\uffff"+
            "\1\16\u0089\uffff\1\2\16\uffff\1\16\2\uffff\1\15\5\uffff\1\2"+
            "\1\14\1\uffff\2\2\11\uffff\1\1\2\uffff\1\73\1\uffff\1\2\2\uffff"+
            "\1\16\2\2",
            "\1\100\4\uffff\1\100\3\uffff\1\100\3\uffff\11\100\10\uffff"+
            "\1\100\1\uffff\4\100\12\uffff\3\100\11\uffff\10\100\1\uffff"+
            "\4\100\2\uffff\1\100\1\uffff\4\100\24\uffff\3\100\2\uffff\1"+
            "\100\u0089\uffff\1\2\16\uffff\1\100\33\uffff\1\2\2\uffff\1\100"+
            "\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\154\4\uffff\1\154\2\uffff\2\154\3\uffff\11\154\1\153\1"+
            "\154\6\uffff\1\154\1\uffff\4\154\12\uffff\3\154\11\uffff\16"+
            "\154\1\uffff\1\154\1\uffff\4\154\14\uffff\3\154\5\uffff\3\154"+
            "\2\uffff\1\154\u0089\uffff\1\154\16\uffff\1\154\2\uffff\1\154"+
            "\5\uffff\2\154\1\uffff\2\154\11\uffff\1\154\2\uffff\1\154\1"+
            "\uffff\1\154\2\uffff\3\154",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u00a9\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u00e4\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u011f\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u015a\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u0195\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u01d0\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u020b\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u0246\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u0281\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u02bc\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u02f7\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u0332\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0098"+
            "\uffff\1\16\1\uffff\2\16\1\u036d\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03a8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03db\4\uffff\1\u03bd\2\uffff\1\u03e7\1\u03be\3\uffff\1"+
            "\u03bf\1\u03c0\1\u03c1\1\u03c2\1\u03c3\1\u03c4\1\u03c5\1\u03c6"+
            "\1\u03bc\1\uffff\1\u03ab\6\uffff\1\u03de\1\uffff\1\u03e0\1\u03dc"+
            "\1\u03dd\1\u03df\5\uffff\1\u03aa\1\u03a9\3\uffff\1\u03c7\1\u03c8"+
            "\1\u03c9\11\uffff\1\u03cb\1\u03cc\1\u03cd\1\u03cf\1\u03d0\1"+
            "\u03d1\1\u03d2\1\u03d3\1\u03e4\1\u03d4\1\u03d5\1\u03d6\1\u03d7"+
            "\1\u03e5\1\uffff\1\u03d8\1\uffff\1\u03d9\1\u03ce\1\u03bb\1\u03da"+
            "\14\uffff\1\u03b4\1\u03b5\1\u03b6\5\uffff\1\u03e1\1\u03e2\1"+
            "\u03e3\2\uffff\1\u03ca\u0089\uffff\1\u03b1\16\uffff\1\u03b9"+
            "\2\uffff\1\u03b8\3\uffff\1\u03e8\1\uffff\1\u03ad\1\u03b7\1\uffff"+
            "\1\u03b2\1\u03b3\11\uffff\1\u03ac\2\uffff\1\u03e6\1\uffff\1"+
            "\u03ae\2\uffff\1\u03ba\1\u03af\1\u03b0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u041b\4\uffff\1\u03fd\2\uffff\1\u0427\1\u03fe\3\uffff\1"+
            "\u03ff\1\u0400\1\u0401\1\u0402\1\u0403\1\u0404\1\u0405\1\u0406"+
            "\1\u03fc\1\uffff\1\u03ed\6\uffff\1\u041e\1\uffff\1\u0420\1\u041c"+
            "\1\u041d\1\u041f\5\uffff\1\u03ec\1\u03eb\3\uffff\1\u0407\1\u0408"+
            "\1\u0409\11\uffff\1\u040b\1\u040c\1\u040d\1\u040f\1\u0410\1"+
            "\u0411\1\u0412\1\u0413\1\u0424\1\u0414\1\u0415\1\u0416\1\u0417"+
            "\1\u0425\1\uffff\1\u0418\1\uffff\1\u0419\1\u040e\1\u03fb\1\u041a"+
            "\14\uffff\1\u03f4\1\u03f5\1\u03f6\5\uffff\1\u0421\1\u0422\1"+
            "\u0423\2\uffff\1\u040a\u0089\uffff\1\u03f3\16\uffff\1\u03f9"+
            "\2\uffff\1\u03f8\5\uffff\1\u03ef\1\u03f7\1\uffff\1\u03e9\1\u03ea"+
            "\11\uffff\1\u03ee\2\uffff\1\u0426\1\uffff\1\u03f0\2\uffff\1"+
            "\u03fa\1\u03f1\1\u03f2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u045a\4\uffff\1\u043c\2\uffff\1\u0466\1\u043d\3\uffff\1"+
            "\u043e\1\u043f\1\u0440\1\u0441\1\u0442\1\u0443\1\u0444\1\u0445"+
            "\1\u043b\1\uffff\1\u042c\6\uffff\1\u045d\1\uffff\1\u045f\1\u045b"+
            "\1\u045c\1\u045e\5\uffff\1\u042b\1\u042a\3\uffff\1\u0446\1\u0447"+
            "\1\u0448\11\uffff\1\u044a\1\u044b\1\u044c\1\u044e\1\u044f\1"+
            "\u0450\1\u0451\1\u0452\1\u0463\1\u0453\1\u0454\1\u0455\1\u0456"+
            "\1\u0464\1\uffff\1\u0457\1\uffff\1\u0458\1\u044d\1\u043a\1\u0459"+
            "\14\uffff\1\u0433\1\u0434\1\u0435\5\uffff\1\u0460\1\u0461\1"+
            "\u0462\2\uffff\1\u0449\u0089\uffff\1\u0432\16\uffff\1\u0438"+
            "\2\uffff\1\u0437\5\uffff\1\u042e\1\u0436\1\uffff\1\u0428\1\u0429"+
            "\11\uffff\1\u042d\2\uffff\1\u0465\1\uffff\1\u042f\2\uffff\1"+
            "\u0439\1\u0430\1\u0431",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0497\4\uffff\1\u0479\2\uffff\1\u04a3\1\u047a\3\uffff\1"+
            "\u047b\1\u047c\1\u047d\1\u047e\1\u047f\1\u0480\1\u0481\1\u0482"+
            "\1\u0478\1\uffff\1\u0467\6\uffff\1\u049a\1\uffff\1\u049c\1\u0498"+
            "\1\u0499\1\u049b\12\uffff\1\u0483\1\u0484\1\u0485\11\uffff\1"+
            "\u0487\1\u0488\1\u0489\1\u048b\1\u048c\1\u048d\1\u048e\1\u048f"+
            "\1\u04a0\1\u0490\1\u0491\1\u0492\1\u0493\1\u04a1\1\uffff\1\u0494"+
            "\1\uffff\1\u0495\1\u048a\1\u0477\1\u0496\14\uffff\1\u0470\1"+
            "\u0471\1\u0472\5\uffff\1\u049d\1\u049e\1\u049f\2\uffff\1\u0486"+
            "\u0089\uffff\1\u046d\16\uffff\1\u0475\2\uffff\1\u0474\5\uffff"+
            "\1\u0469\1\u0473\1\uffff\1\u046e\1\u046f\11\uffff\1\u0468\2"+
            "\uffff\1\u04a2\1\uffff\1\u046a\2\uffff\1\u0476\1\u046b\1\u046c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04d6\4\uffff\1\u04b8\2\uffff\1\u04e2\1\u04b9\3\uffff\1"+
            "\u04ba\1\u04bb\1\u04bc\1\u04bd\1\u04be\1\u04bf\1\u04c0\1\u04c1"+
            "\1\u04b7\1\uffff\1\u04a6\6\uffff\1\u04d9\1\uffff\1\u04db\1\u04d7"+
            "\1\u04d8\1\u04da\5\uffff\1\u04a5\1\u04a4\3\uffff\1\u04c2\1\u04c3"+
            "\1\u04c4\11\uffff\1\u04c6\1\u04c7\1\u04c8\1\u04ca\1\u04cb\1"+
            "\u04cc\1\u04cd\1\u04ce\1\u04df\1\u04cf\1\u04d0\1\u04d1\1\u04d2"+
            "\1\u04e0\1\uffff\1\u04d3\1\uffff\1\u04d4\1\u04c9\1\u04b6\1\u04d5"+
            "\14\uffff\1\u04af\1\u04b0\1\u04b1\5\uffff\1\u04dc\1\u04dd\1"+
            "\u04de\2\uffff\1\u04c5\u0089\uffff\1\u04ac\16\uffff\1\u04b4"+
            "\2\uffff\1\u04b3\5\uffff\1\u04a8\1\u04b2\1\uffff\1\u04ad\1\u04ae"+
            "\11\uffff\1\u04a7\2\uffff\1\u04e1\1\uffff\1\u04a9\2\uffff\1"+
            "\u04b5\1\u04aa\1\u04ab",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0515\4\uffff\1\u04f7\2\uffff\1\u0521\1\u04f8\3\uffff\1"+
            "\u04f9\1\u04fa\1\u04fb\1\u04fc\1\u04fd\1\u04fe\1\u04ff\1\u0500"+
            "\1\u04f6\1\uffff\1\u04e5\6\uffff\1\u0518\1\uffff\1\u051a\1\u0516"+
            "\1\u0517\1\u0519\5\uffff\1\u04e4\1\u04e3\3\uffff\1\u0501\1\u0502"+
            "\1\u0503\11\uffff\1\u0505\1\u0506\1\u0507\1\u0509\1\u050a\1"+
            "\u050b\1\u050c\1\u050d\1\u051e\1\u050e\1\u050f\1\u0510\1\u0511"+
            "\1\u051f\1\uffff\1\u0512\1\uffff\1\u0513\1\u0508\1\u04f5\1\u0514"+
            "\14\uffff\1\u04ee\1\u04ef\1\u04f0\5\uffff\1\u051b\1\u051c\1"+
            "\u051d\2\uffff\1\u0504\u0089\uffff\1\u04eb\16\uffff\1\u04f3"+
            "\2\uffff\1\u04f2\5\uffff\1\u04e7\1\u04f1\1\uffff\1\u04ec\1\u04ed"+
            "\11\uffff\1\u04e6\2\uffff\1\u0520\1\uffff\1\u04e8\2\uffff\1"+
            "\u04f4\1\u04e9\1\u04ea",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0554\4\uffff\1\u0536\2\uffff\1\u0560\1\u0537\3\uffff\1"+
            "\u0538\1\u0539\1\u053a\1\u053b\1\u053c\1\u053d\1\u053e\1\u053f"+
            "\1\u0535\1\uffff\1\u0524\6\uffff\1\u0557\1\uffff\1\u0559\1\u0555"+
            "\1\u0556\1\u0558\5\uffff\1\u0523\1\u0522\3\uffff\1\u0540\1\u0541"+
            "\1\u0542\11\uffff\1\u0544\1\u0545\1\u0546\1\u0548\1\u0549\1"+
            "\u054a\1\u054b\1\u054c\1\u055d\1\u054d\1\u054e\1\u054f\1\u0550"+
            "\1\u055e\1\uffff\1\u0551\1\uffff\1\u0552\1\u0547\1\u0534\1\u0553"+
            "\14\uffff\1\u052d\1\u052e\1\u052f\5\uffff\1\u055a\1\u055b\1"+
            "\u055c\2\uffff\1\u0543\u0089\uffff\1\u052a\16\uffff\1\u0532"+
            "\2\uffff\1\u0531\5\uffff\1\u0526\1\u0530\1\uffff\1\u052b\1\u052c"+
            "\11\uffff\1\u0525\2\uffff\1\u055f\1\uffff\1\u0527\2\uffff\1"+
            "\u0533\1\u0528\1\u0529",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0593\4\uffff\1\u0575\2\uffff\1\u059f\1\u0576\3\uffff\1"+
            "\u0577\1\u0578\1\u0579\1\u057a\1\u057b\1\u057c\1\u057d\1\u057e"+
            "\1\u0574\1\uffff\1\u0565\6\uffff\1\u0596\1\uffff\1\u0598\1\u0594"+
            "\1\u0595\1\u0597\5\uffff\1\u0564\1\u0563\3\uffff\1\u057f\1\u0580"+
            "\1\u0581\11\uffff\1\u0583\1\u0584\1\u0585\1\u0587\1\u0588\1"+
            "\u0589\1\u058a\1\u058b\1\u059c\1\u058c\1\u058d\1\u058e\1\u058f"+
            "\1\u059d\1\uffff\1\u0590\1\uffff\1\u0591\1\u0586\1\u0573\1\u0592"+
            "\14\uffff\1\u056c\1\u056d\1\u056e\5\uffff\1\u0599\1\u059a\1"+
            "\u059b\2\uffff\1\u0582\u0089\uffff\1\u056b\16\uffff\1\u0571"+
            "\2\uffff\1\u0570\5\uffff\1\u0567\1\u056f\1\uffff\1\u0561\1\u0562"+
            "\11\uffff\1\u0566\2\uffff\1\u059e\1\uffff\1\u0568\2\uffff\1"+
            "\u0572\1\u0569\1\u056a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05d2\4\uffff\1\u05b4\2\uffff\1\u05de\1\u05b5\3\uffff\1"+
            "\u05b6\1\u05b7\1\u05b8\1\u05b9\1\u05ba\1\u05bb\1\u05bc\1\u05bd"+
            "\1\u05b3\1\uffff\1\u05a2\6\uffff\1\u05d5\1\uffff\1\u05d7\1\u05d3"+
            "\1\u05d4\1\u05d6\5\uffff\1\u05a1\1\u05a0\3\uffff\1\u05be\1\u05bf"+
            "\1\u05c0\11\uffff\1\u05c2\1\u05c3\1\u05c4\1\u05c6\1\u05c7\1"+
            "\u05c8\1\u05c9\1\u05ca\1\u05db\1\u05cb\1\u05cc\1\u05cd\1\u05ce"+
            "\1\u05dc\1\uffff\1\u05cf\1\uffff\1\u05d0\1\u05c5\1\u05b2\1\u05d1"+
            "\14\uffff\1\u05ab\1\u05ac\1\u05ad\5\uffff\1\u05d8\1\u05d9\1"+
            "\u05da\2\uffff\1\u05c1\u0089\uffff\1\u05a8\16\uffff\1\u05b0"+
            "\2\uffff\1\u05af\5\uffff\1\u05a4\1\u05ae\1\uffff\1\u05a9\1\u05aa"+
            "\11\uffff\1\u05a3\2\uffff\1\u05dd\1\uffff\1\u05a5\2\uffff\1"+
            "\u05b1\1\u05a6\1\u05a7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u060f\4\uffff\1\u05f1\2\uffff\1\u061b\1\u05f2\3\uffff\1"+
            "\u05f3\1\u05f4\1\u05f5\1\u05f6\1\u05f7\1\u05f8\1\u05f9\1\u05fa"+
            "\1\u05f0\1\uffff\1\u05e1\6\uffff\1\u0612\1\uffff\1\u0614\1\u0610"+
            "\1\u0611\1\u0613\12\uffff\1\u05fb\1\u05fc\1\u05fd\11\uffff\1"+
            "\u05ff\1\u0600\1\u0601\1\u0603\1\u0604\1\u0605\1\u0606\1\u0607"+
            "\1\u0618\1\u0608\1\u0609\1\u060a\1\u060b\1\u0619\1\uffff\1\u060c"+
            "\1\uffff\1\u060d\1\u0602\1\u05ef\1\u060e\14\uffff\1\u05e8\1"+
            "\u05e9\1\u05ea\5\uffff\1\u0615\1\u0616\1\u0617\2\uffff\1\u05fe"+
            "\u0089\uffff\1\u05e7\16\uffff\1\u05ed\2\uffff\1\u05ec\5\uffff"+
            "\1\u05e3\1\u05eb\1\uffff\1\u05df\1\u05e0\11\uffff\1\u05e2\2"+
            "\uffff\1\u061a\1\uffff\1\u05e4\2\uffff\1\u05ee\1\u05e5\1\u05e6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u061c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u064f\4\uffff\1\u0631\2\uffff\1\u065b\1\u0632\3\uffff\1"+
            "\u0633\1\u0634\1\u0635\1\u0636\1\u0637\1\u0638\1\u0639\1\u063a"+
            "\1\u0630\1\uffff\1\u061f\6\uffff\1\u0652\1\uffff\1\u0654\1\u0650"+
            "\1\u0651\1\u0653\12\uffff\1\u063b\1\u063c\1\u063d\11\uffff\1"+
            "\u063f\1\u0640\1\u0641\1\u0643\1\u0644\1\u0645\1\u0646\1\u0647"+
            "\1\u0658\1\u0648\1\u0649\1\u064a\1\u064b\1\u0659\1\uffff\1\u064c"+
            "\1\uffff\1\u064d\1\u0642\1\u062f\1\u064e\14\uffff\1\u0628\1"+
            "\u0629\1\u062a\5\uffff\1\u0655\1\u0656\1\u0657\2\uffff\1\u063e"+
            "\u0089\uffff\1\u0625\16\uffff\1\u062d\2\uffff\1\u062c\5\uffff"+
            "\1\u0621\1\u062b\1\uffff\1\u0626\1\u0627\11\uffff\1\u0620\2"+
            "\uffff\1\u065a\1\uffff\1\u0622\2\uffff\1\u062e\1\u0623\1\u0624",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u068c\4\uffff\1\u066e\2\uffff\1\u0698\1\u066f\3\uffff\1"+
            "\u0670\1\u0671\1\u0672\1\u0673\1\u0674\1\u0675\1\u0676\1\u0677"+
            "\1\u066d\1\uffff\1\u065e\6\uffff\1\u068f\1\uffff\1\u0691\1\u068d"+
            "\1\u068e\1\u0690\12\uffff\1\u0678\1\u0679\1\u067a\11\uffff\1"+
            "\u067c\1\u067d\1\u067e\1\u0680\1\u0681\1\u0682\1\u0683\1\u0684"+
            "\1\u0695\1\u0685\1\u0686\1\u0687\1\u0688\1\u0696\1\uffff\1\u0689"+
            "\1\uffff\1\u068a\1\u067f\1\u066c\1\u068b\14\uffff\1\u0665\1"+
            "\u0666\1\u0667\5\uffff\1\u0692\1\u0693\1\u0694\2\uffff\1\u067b"+
            "\u0089\uffff\1\u0664\16\uffff\1\u066a\2\uffff\1\u0669\5\uffff"+
            "\1\u0660\1\u0668\1\uffff\1\u065c\1\u065d\11\uffff\1\u065f\2"+
            "\uffff\1\u0697\1\uffff\1\u0661\2\uffff\1\u066b\1\u0662\1\u0663",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06bc\4\uffff\1\u069e\3\uffff\1\u069f\3\uffff\1\u06a0\1"+
            "\u06a1\1\u06a2\1\u06a3\1\u06a4\1\u06a5\1\u06a6\1\u06a7\1\u069d"+
            "\1\u0699\7\uffff\1\u06bf\1\uffff\1\u06c1\1\u06bd\1\u06be\1\u06c0"+
            "\12\uffff\1\u06a8\1\u06a9\1\u06aa\11\uffff\1\u06ac\1\u06ad\1"+
            "\u06ae\1\u06b0\1\u06b1\1\u06b2\1\u06b3\1\u06b4\1\uffff\1\u06b5"+
            "\1\u06b6\1\u06b7\1\u06b8\2\uffff\1\u06b9\1\uffff\1\u06ba\1\u06af"+
            "\1\u069c\1\u06bb\24\uffff\1\u06c2\1\u06c3\1\u06c4\2\uffff\1"+
            "\u06ab\u0098\uffff\1\u069a\36\uffff\1\u069b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06da\1\u06db\1\u06dc\1\u06dd\1\uffff\1\u06d7\1\u06d6\1"+
            "\u06d9\34\uffff\1\u06d0\u00dc\uffff\1\u06cf\2\uffff\1\u06d8"+
            "\2\uffff\1\u06c5\1\u06d4\1\u06c8\4\uffff\1\u06d3\1\u06d5\1\u06d1"+
            "\1\u06d2\1\u06cb\1\u06cc\1\u06cd\1\u06ce\1\u06ca\1\u06c9\1\u06c6"+
            "\1\u06c7",
            "\1\u06f3\1\u06f4\1\u06f5\1\u06f6\1\uffff\1\u06f0\1\u06ef\1"+
            "\u06f2\34\uffff\1\u06e9\u00dc\uffff\1\u06e8\2\uffff\1\u06f1"+
            "\2\uffff\1\u06de\1\u06ed\1\u06e1\4\uffff\1\u06ec\1\u06ee\1\u06ea"+
            "\1\u06eb\1\u06e4\1\u06e5\1\u06e6\1\u06e7\1\u06e3\1\u06e2\1\u06df"+
            "\1\u06e0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u070c\1\u070d\1\u070e\1\u070f\1\uffff\1\u0709\1\u0708\1"+
            "\u070b\34\uffff\1\u0702\u00dc\uffff\1\u0701\2\uffff\1\u070a"+
            "\2\uffff\1\u06f7\1\u0706\1\u06fa\4\uffff\1\u0705\1\u0707\1\u0703"+
            "\1\u0704\1\u06fd\1\u06fe\1\u06ff\1\u0700\1\u06fc\1\u06fb\1\u06f8"+
            "\1\u06f9",
            "\1\u0725\1\u0726\1\u0727\1\u0728\1\uffff\1\u0722\1\u0721\1"+
            "\u0724\34\uffff\1\u071b\u00dc\uffff\1\u071a\2\uffff\1\u0723"+
            "\2\uffff\1\u0710\1\u071f\1\u0713\4\uffff\1\u071e\1\u0720\1\u071c"+
            "\1\u071d\1\u0716\1\u0717\1\u0718\1\u0719\1\u0715\1\u0714\1\u0711"+
            "\1\u0712",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u073e\1\u073f\1\u0740\1\u0741\1\uffff\1\u073b\1\u073a\1"+
            "\u073d\34\uffff\1\u0734\u00dc\uffff\1\u0733\2\uffff\1\u073c"+
            "\2\uffff\1\u0729\1\u0738\1\u072c\4\uffff\1\u0737\1\u0739\1\u0735"+
            "\1\u0736\1\u072f\1\u0730\1\u0731\1\u0732\1\u072e\1\u072d\1\u072a"+
            "\1\u072b",
            "\1\u0757\1\u0758\1\u0759\1\u075a\1\uffff\1\u0754\1\u0753\1"+
            "\u0756\34\uffff\1\u074d\u00dc\uffff\1\u074c\2\uffff\1\u0755"+
            "\2\uffff\1\u0742\1\u0751\1\u0745\4\uffff\1\u0750\1\u0752\1\u074e"+
            "\1\u074f\1\u0748\1\u0749\1\u074a\1\u074b\1\u0747\1\u0746\1\u0743"+
            "\1\u0744",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0770\1\u0771\1\u0772\1\u0773\1\uffff\1\u076d\1\u076c\1"+
            "\u076f\34\uffff\1\u0766\u00da\uffff\1\u076e\1\uffff\1\u0765"+
            "\2\uffff\1\16\2\uffff\1\u075b\1\u076a\1\u075e\4\uffff\1\u0769"+
            "\1\u076b\1\u0767\1\u0768\1\u0761\1\u0762\1\u0763\1\u0764\1\u0760"+
            "\1\u075f\1\u075c\1\u075d",
            "\1\u078a\1\u078b\1\u078c\1\u078d\1\uffff\1\u0787\1\u0786\1"+
            "\u0789\34\uffff\1\u0780\u00da\uffff\1\u0788\1\uffff\1\u077f"+
            "\2\uffff\1\16\2\uffff\1\u0775\1\u0784\1\u0778\4\uffff\1\u0783"+
            "\1\u0785\1\u0781\1\u0782\1\u077b\1\u077c\1\u077d\1\u077e\1\u077a"+
            "\1\u0779\1\u0776\1\u0777",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07a4\1\u07a5\1\u07a6\1\u07a7\1\uffff\1\u07a1\1\u07a0\1"+
            "\u07a3\34\uffff\1\u079a\u00dc\uffff\1\u0799\2\uffff\1\u07a2"+
            "\2\uffff\1\u078f\1\u079e\1\u0792\4\uffff\1\u079d\1\u079f\1\u079b"+
            "\1\u079c\1\u0795\1\u0796\1\u0797\1\u0798\1\u0794\1\u0793\1\u0790"+
            "\1\u0791",
            "\1\u07bd\1\u07be\1\u07bf\1\u07c0\1\uffff\1\u07bb\1\u07ba\1"+
            "\u07bc\34\uffff\1\u07b4\u00dc\uffff\1\u07b3\2\uffff\1\u07a8"+
            "\2\uffff\1\u07a9\1\u07b8\1\u07ac\4\uffff\1\u07b7\1\u07b9\1\u07b5"+
            "\1\u07b6\1\u07af\1\u07b0\1\u07b1\1\u07b2\1\u07ae\1\u07ad\1\u07aa"+
            "\1\u07ab",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07d6\1\u07d7\1\u07d8\1\u07d9\1\uffff\1\u07d3\1\u07d2\1"+
            "\u07d5\34\uffff\1\u07cc\u00dc\uffff\1\u07cb\2\uffff\1\u07d4"+
            "\2\uffff\1\u07c1\1\u07d0\1\u07c4\4\uffff\1\u07cf\1\u07d1\1\u07cd"+
            "\1\u07ce\1\u07c7\1\u07c8\1\u07c9\1\u07ca\1\u07c6\1\u07c5\1\u07c2"+
            "\1\u07c3",
            "\1\u07ef\1\u07f0\1\u07f1\1\u07f2\1\uffff\1\u07ec\1\u07eb\1"+
            "\u07ee\34\uffff\1\u07e5\u00dc\uffff\1\u07e4\2\uffff\1\u07ed"+
            "\2\uffff\1\u07da\1\u07e9\1\u07dd\4\uffff\1\u07e8\1\u07ea\1\u07e6"+
            "\1\u07e7\1\u07e0\1\u07e1\1\u07e2\1\u07e3\1\u07df\1\u07de\1\u07db"+
            "\1\u07dc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0808\1\u0809\1\u080a\1\u080b\1\uffff\1\u0805\1\u0804\1"+
            "\u0807\34\uffff\1\u07fe\u00dc\uffff\1\u07fd\2\uffff\1\u0806"+
            "\2\uffff\1\u07f3\1\u0802\1\u07f6\4\uffff\1\u0801\1\u0803\1\u07ff"+
            "\1\u0800\1\u07f9\1\u07fa\1\u07fb\1\u07fc\1\u07f8\1\u07f7\1\u07f4"+
            "\1\u07f5",
            "\1\u0821\1\u0822\1\u0823\1\u0824\1\uffff\1\u081e\1\u081d\1"+
            "\u0820\34\uffff\1\u0817\u00dc\uffff\1\u0816\2\uffff\1\u081f"+
            "\2\uffff\1\u080c\1\u081b\1\u080f\4\uffff\1\u081a\1\u081c\1\u0818"+
            "\1\u0819\1\u0812\1\u0813\1\u0814\1\u0815\1\u0811\1\u0810\1\u080d"+
            "\1\u080e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u083a\1\u083b\1\u083c\1\u083d\1\uffff\1\u0837\1\u0836\1"+
            "\u0839\34\uffff\1\u0830\u00dc\uffff\1\u082f\2\uffff\1\u0838"+
            "\2\uffff\1\u0825\1\u0834\1\u0828\4\uffff\1\u0833\1\u0835\1\u0831"+
            "\1\u0832\1\u082b\1\u082c\1\u082d\1\u082e\1\u082a\1\u0829\1\u0826"+
            "\1\u0827",
            "\1\u0853\1\u0854\1\u0855\1\u0856\1\uffff\1\u0850\1\u084f\1"+
            "\u0852\34\uffff\1\u0849\u00dc\uffff\1\u0848\2\uffff\1\u0851"+
            "\2\uffff\1\u083e\1\u084d\1\u0841\4\uffff\1\u084c\1\u084e\1\u084a"+
            "\1\u084b\1\u0844\1\u0845\1\u0846\1\u0847\1\u0843\1\u0842\1\u083f"+
            "\1\u0840",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u086c\1\u086d\1\u086e\1\u086f\1\uffff\1\u0869\1\u0868\1"+
            "\u086b\34\uffff\1\u0862\u00dc\uffff\1\u0861\2\uffff\1\u086a"+
            "\2\uffff\1\u0857\1\u0866\1\u085a\4\uffff\1\u0865\1\u0867\1\u0863"+
            "\1\u0864\1\u085d\1\u085e\1\u085f\1\u0860\1\u085c\1\u085b\1\u0858"+
            "\1\u0859",
            "\1\u0885\1\u0886\1\u0887\1\u0888\1\uffff\1\u0882\1\u0881\1"+
            "\u0884\34\uffff\1\u087b\u00dc\uffff\1\u087a\2\uffff\1\u0883"+
            "\2\uffff\1\u0870\1\u087f\1\u0873\4\uffff\1\u087e\1\u0880\1\u087c"+
            "\1\u087d\1\u0876\1\u0877\1\u0878\1\u0879\1\u0875\1\u0874\1\u0871"+
            "\1\u0872",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u089f\1\u08a0\1\u08a1\1\u08a2\1\uffff\1\u089b\1\u089a\1"+
            "\u089e\34\uffff\1\u0894\u00da\uffff\1\u089c\1\uffff\1\u0893"+
            "\2\uffff\1\u089d\2\uffff\1\u0889\1\u0898\1\u088c\4\uffff\1\u0897"+
            "\1\u0899\1\u0895\1\u0896\1\u088f\1\u0890\1\u0891\1\u0892\1\u088e"+
            "\1\u088d\1\u088a\1\u088b",
            "\1\u08b9\1\u08ba\1\u08bb\1\u08bc\1\uffff\1\u08b5\1\u08b4\1"+
            "\u08b8\34\uffff\1\u08ae\u00da\uffff\1\u08b6\1\uffff\1\u08ad"+
            "\2\uffff\1\u08b7\2\uffff\1\u08a3\1\u08b2\1\u08a6\4\uffff\1\u08b1"+
            "\1\u08b3\1\u08af\1\u08b0\1\u08a9\1\u08aa\1\u08ab\1\u08ac\1\u08a8"+
            "\1\u08a7\1\u08a4\1\u08a5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08d3\1\u08d4\1\u08d5\1\u08d6\1\uffff\1\u08d0\1\u08cf\1"+
            "\u08d2\34\uffff\1\u08c9\u00da\uffff\1\u08d1\1\uffff\1\u08c8"+
            "\2\uffff\1\16\2\uffff\1\u08be\1\u08cd\1\u08c1\4\uffff\1\u08cc"+
            "\1\u08ce\1\u08ca\1\u08cb\1\u08c4\1\u08c5\1\u08c6\1\u08c7\1\u08c3"+
            "\1\u08c2\1\u08bf\1\u08c0",
            "\1\u08ed\1\u08ee\1\u08ef\1\u08f0\1\uffff\1\u08ea\1\u08e9\1"+
            "\u08ec\34\uffff\1\u08e3\u00da\uffff\1\u08eb\1\uffff\1\u08e2"+
            "\2\uffff\1\16\2\uffff\1\u08d8\1\u08e7\1\u08db\4\uffff\1\u08e6"+
            "\1\u08e8\1\u08e4\1\u08e5\1\u08de\1\u08df\1\u08e0\1\u08e1\1\u08dd"+
            "\1\u08dc\1\u08d9\1\u08da",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0907\1\u0908\1\u0909\1\u090a\1\uffff\1\u0903\1\u0902\1"+
            "\u0906\3\uffff\1\u0905\30\uffff\1\u08fc\u00da\uffff\1\u0904"+
            "\1\uffff\1\u08fb\2\uffff\1\16\2\uffff\1\u08f1\1\u0900\1\u08f4"+
            "\4\uffff\1\u08ff\1\u0901\1\u08fd\1\u08fe\1\u08f7\1\u08f8\1\u08f9"+
            "\1\u08fa\1\u08f6\1\u08f5\1\u08f2\1\u08f3",
            "\1\u0922\1\u0923\1\u0924\1\u0925\1\uffff\1\u091e\1\u091d\1"+
            "\u0921\3\uffff\1\u0920\30\uffff\1\u0917\u00da\uffff\1\u091f"+
            "\1\uffff\1\u0916\2\uffff\1\16\2\uffff\1\u090c\1\u091b\1\u090f"+
            "\4\uffff\1\u091a\1\u091c\1\u0918\1\u0919\1\u0912\1\u0913\1\u0914"+
            "\1\u0915\1\u0911\1\u0910\1\u090d\1\u090e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "1189:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_0 = input.LA(1);

                         
                        int index170_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_0==MINUS) ) {s = 1;}

                        else if ( ((LA170_0>=BOOLEAN_TRUE && LA170_0<=VALUE_NULL)||LA170_0==NUM_DOUBLE||LA170_0==PLUS||(LA170_0>=STRING_LITERAL && LA170_0<=QUOTED_STRING_LITERAL)||LA170_0==NUM_INT||(LA170_0>=NUM_LONG && LA170_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA170_0==QUESTION) ) {s = 12;}

                        else if ( (LA170_0==LPAREN) ) {s = 13;}

                        else if ( (LA170_0==WINDOW||LA170_0==ESCAPE||LA170_0==EVERY_EXPR||(LA170_0>=MAX && LA170_0<=MIN)||LA170_0==OUTER||(LA170_0>=JOIN && LA170_0<=FULL)||LA170_0==EVENTS||(LA170_0>=UNIDIRECTIONAL && LA170_0<=METADATASQL)||(LA170_0>=WEEKDAY && LA170_0<=LW)||LA170_0==SNAPSHOT||(LA170_0>=VARIABLE && LA170_0<=INDEX)||(LA170_0>=DEFINE && LA170_0<=MATCHES)||LA170_0==WHILE||LA170_0==IDENT||LA170_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA170_0==COUNT) ) {s = 17;}

                        else if ( (LA170_0==SUM) ) {s = 20;}

                        else if ( (LA170_0==AVG) ) {s = 21;}

                        else if ( (LA170_0==COALESCE) ) {s = 24;}

                        else if ( (LA170_0==MEDIAN) ) {s = 25;}

                        else if ( (LA170_0==STDDEV) ) {s = 26;}

                        else if ( (LA170_0==AVEDEV) ) {s = 27;}

                        else if ( (LA170_0==FIRST) ) {s = 29;}

                        else if ( (LA170_0==LAST) ) {s = 30;}

                        else if ( (LA170_0==PREVIOUS) ) {s = 39;}

                        else if ( (LA170_0==PRIOR) ) {s = 40;}

                        else if ( (LA170_0==INSTANCEOF) ) {s = 43;}

                        else if ( (LA170_0==CAST) ) {s = 44;}

                        else if ( (LA170_0==EXISTS) ) {s = 57;}

                        else if ( (LA170_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA170_0==LCURLY) ) {s = 59;}

                         
                        input.seek(index170_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA170_169 = input.LA(1);

                         
                        int index170_169 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_169==ALL) && (synpred3_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA170_169==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA170_169==CASE) && (synpred3_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA170_169==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA170_169==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA170_169==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA170_169==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA170_169==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA170_169==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA170_169==STRING_LITERAL) ) {s = 946;}

                        else if ( (LA170_169==QUOTED_STRING_LITERAL) ) {s = 947;}

                        else if ( (LA170_169==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA170_169==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA170_169==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA170_169==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA170_169==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA170_169==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA170_169==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA170_169==AT) && (synpred3_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA170_169==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA170_169==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA170_169==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA170_169==SUM) && (synpred3_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA170_169==AVG) && (synpred3_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA170_169==MAX) && (synpred3_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA170_169==MIN) && (synpred3_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA170_169==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA170_169==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA170_169==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA170_169==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA170_169==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA170_169==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA170_169==LAST) && (synpred3_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA170_169==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA170_169==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA170_169==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA170_169==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA170_169==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA170_169==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA170_169==SQL) && (synpred3_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA170_169==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA170_169==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA170_169==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA170_169==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA170_169==LW) && (synpred3_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA170_169==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA170_169==CAST) && (synpred3_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA170_169==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA170_169==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA170_169==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA170_169==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA170_169==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA170_169==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA170_169==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA170_169==FULL) && (synpred3_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA170_169==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA170_169==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA170_169==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA170_169==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA170_169==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA170_169==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA170_169==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA170_169==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA170_169==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                         
                        input.seek(index170_169);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA170_228 = input.LA(1);

                         
                        int index170_228 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_228==STRING_LITERAL) ) {s = 1001;}

                        else if ( (LA170_228==QUOTED_STRING_LITERAL) ) {s = 1002;}

                        else if ( (LA170_228==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA170_228==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA170_228==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA170_228==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA170_228==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA170_228==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA170_228==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA170_228==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA170_228==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA170_228==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA170_228==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA170_228==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA170_228==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA170_228==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA170_228==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA170_228==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA170_228==AT) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA170_228==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA170_228==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA170_228==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA170_228==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA170_228==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA170_228==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA170_228==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA170_228==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA170_228==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA170_228==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA170_228==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA170_228==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA170_228==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA170_228==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA170_228==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA170_228==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA170_228==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA170_228==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA170_228==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA170_228==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA170_228==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA170_228==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA170_228==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA170_228==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA170_228==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA170_228==LW) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA170_228==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA170_228==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA170_228==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA170_228==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA170_228==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA170_228==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA170_228==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA170_228==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA170_228==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA170_228==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA170_228==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA170_228==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA170_228==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA170_228==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA170_228==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA170_228==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA170_228==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA170_228==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                         
                        input.seek(index170_228);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA170_287 = input.LA(1);

                         
                        int index170_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_287==STRING_LITERAL) ) {s = 1064;}

                        else if ( (LA170_287==QUOTED_STRING_LITERAL) ) {s = 1065;}

                        else if ( (LA170_287==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA170_287==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA170_287==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA170_287==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA170_287==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA170_287==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA170_287==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA170_287==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA170_287==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA170_287==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA170_287==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA170_287==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA170_287==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA170_287==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA170_287==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA170_287==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA170_287==AT) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA170_287==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA170_287==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA170_287==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA170_287==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA170_287==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA170_287==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA170_287==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA170_287==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA170_287==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA170_287==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA170_287==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA170_287==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA170_287==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA170_287==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA170_287==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA170_287==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA170_287==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA170_287==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA170_287==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA170_287==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA170_287==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA170_287==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA170_287==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA170_287==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA170_287==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA170_287==LW) && (synpred3_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA170_287==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1109;}

                        else if ( (LA170_287==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA170_287==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA170_287==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA170_287==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA170_287==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA170_287==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA170_287==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA170_287==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA170_287==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA170_287==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA170_287==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA170_287==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA170_287==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA170_287==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA170_287==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA170_287==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA170_287==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                         
                        input.seek(index170_287);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA170_346 = input.LA(1);

                         
                        int index170_346 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_346==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA170_346==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA170_346==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA170_346==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA170_346==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA170_346==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA170_346==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA170_346==STRING_LITERAL) ) {s = 1134;}

                        else if ( (LA170_346==QUOTED_STRING_LITERAL) ) {s = 1135;}

                        else if ( (LA170_346==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA170_346==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA170_346==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA170_346==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA170_346==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA170_346==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA170_346==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA170_346==AT) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA170_346==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA170_346==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA170_346==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA170_346==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA170_346==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA170_346==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA170_346==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA170_346==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA170_346==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA170_346==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA170_346==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA170_346==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA170_346==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA170_346==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA170_346==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA170_346==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA170_346==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA170_346==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA170_346==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA170_346==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA170_346==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA170_346==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA170_346==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA170_346==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA170_346==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA170_346==LW) && (synpred3_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA170_346==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA170_346==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA170_346==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA170_346==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA170_346==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA170_346==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA170_346==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA170_346==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA170_346==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA170_346==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA170_346==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA170_346==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA170_346==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA170_346==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA170_346==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA170_346==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA170_346==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA170_346==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                         
                        input.seek(index170_346);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA170_405 = input.LA(1);

                         
                        int index170_405 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_405==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA170_405==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA170_405==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA170_405==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA170_405==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA170_405==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA170_405==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA170_405==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA170_405==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA170_405==STRING_LITERAL) ) {s = 1197;}

                        else if ( (LA170_405==QUOTED_STRING_LITERAL) ) {s = 1198;}

                        else if ( (LA170_405==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA170_405==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA170_405==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA170_405==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA170_405==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA170_405==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA170_405==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA170_405==AT) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA170_405==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA170_405==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA170_405==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                        else if ( (LA170_405==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( (LA170_405==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1211;}

                        else if ( (LA170_405==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1212;}

                        else if ( (LA170_405==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA170_405==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA170_405==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA170_405==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA170_405==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA170_405==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA170_405==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA170_405==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA170_405==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                        else if ( (LA170_405==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA170_405==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA170_405==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA170_405==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA170_405==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA170_405==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA170_405==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA170_405==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                        else if ( (LA170_405==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1230;}

                        else if ( (LA170_405==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1231;}

                        else if ( (LA170_405==LW) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA170_405==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA170_405==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA170_405==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA170_405==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA170_405==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA170_405==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA170_405==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA170_405==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA170_405==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA170_405==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA170_405==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA170_405==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA170_405==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA170_405==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                        else if ( (LA170_405==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA170_405==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA170_405==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA170_405==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                         
                        input.seek(index170_405);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA170_464 = input.LA(1);

                         
                        int index170_464 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_464==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA170_464==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA170_464==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA170_464==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA170_464==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA170_464==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA170_464==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA170_464==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA170_464==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA170_464==STRING_LITERAL) ) {s = 1260;}

                        else if ( (LA170_464==QUOTED_STRING_LITERAL) ) {s = 1261;}

                        else if ( (LA170_464==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA170_464==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA170_464==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA170_464==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA170_464==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA170_464==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA170_464==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                        else if ( (LA170_464==AT) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA170_464==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA170_464==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA170_464==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA170_464==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA170_464==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA170_464==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA170_464==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA170_464==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA170_464==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA170_464==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA170_464==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA170_464==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA170_464==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                        else if ( (LA170_464==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA170_464==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1284;}

                        else if ( (LA170_464==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA170_464==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA170_464==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA170_464==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA170_464==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA170_464==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA170_464==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                        else if ( (LA170_464==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1292;}

                        else if ( (LA170_464==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1293;}

                        else if ( (LA170_464==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA170_464==LW) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA170_464==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA170_464==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA170_464==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA170_464==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA170_464==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA170_464==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA170_464==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                        else if ( (LA170_464==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1303;}

                        else if ( (LA170_464==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA170_464==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA170_464==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA170_464==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA170_464==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA170_464==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA170_464==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA170_464==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA170_464==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA170_464==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                         
                        input.seek(index170_464);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA170_523 = input.LA(1);

                         
                        int index170_523 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_523==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA170_523==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA170_523==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA170_523==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA170_523==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA170_523==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA170_523==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA170_523==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA170_523==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA170_523==STRING_LITERAL) ) {s = 1323;}

                        else if ( (LA170_523==QUOTED_STRING_LITERAL) ) {s = 1324;}

                        else if ( (LA170_523==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1325;}

                        else if ( (LA170_523==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA170_523==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA170_523==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA170_523==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA170_523==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA170_523==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA170_523==AT) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA170_523==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA170_523==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA170_523==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA170_523==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA170_523==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA170_523==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA170_523==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA170_523==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA170_523==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                        else if ( (LA170_523==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA170_523==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                        else if ( (LA170_523==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA170_523==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA170_523==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA170_523==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA170_523==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA170_523==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA170_523==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA170_523==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA170_523==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA170_523==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1353;}

                        else if ( (LA170_523==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1354;}

                        else if ( (LA170_523==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1355;}

                        else if ( (LA170_523==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA170_523==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA170_523==LW) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA170_523==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA170_523==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA170_523==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1361;}

                        else if ( (LA170_523==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA170_523==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                        else if ( (LA170_523==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1364;}

                        else if ( (LA170_523==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA170_523==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                        else if ( (LA170_523==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA170_523==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA170_523==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA170_523==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA170_523==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA170_523==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA170_523==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA170_523==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA170_523==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA170_523==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                         
                        input.seek(index170_523);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA170_582 = input.LA(1);

                         
                        int index170_582 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_582==STRING_LITERAL) ) {s = 1377;}

                        else if ( (LA170_582==QUOTED_STRING_LITERAL) ) {s = 1378;}

                        else if ( (LA170_582==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA170_582==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA170_582==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA170_582==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA170_582==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA170_582==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA170_582==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA170_582==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1386;}

                        else if ( (LA170_582==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA170_582==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                        else if ( (LA170_582==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA170_582==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                        else if ( (LA170_582==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1391;}

                        else if ( (LA170_582==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1392;}

                        else if ( (LA170_582==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA170_582==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA170_582==AT) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA170_582==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA170_582==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA170_582==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA170_582==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA170_582==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA170_582==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA170_582==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA170_582==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA170_582==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                        else if ( (LA170_582==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA170_582==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA170_582==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA170_582==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1408;}

                        else if ( (LA170_582==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA170_582==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA170_582==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1411;}

                        else if ( (LA170_582==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA170_582==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                        else if ( (LA170_582==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1414;}

                        else if ( (LA170_582==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                        else if ( (LA170_582==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1416;}

                        else if ( (LA170_582==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1417;}

                        else if ( (LA170_582==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA170_582==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA170_582==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA170_582==LW) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA170_582==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA170_582==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA170_582==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA170_582==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA170_582==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA170_582==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA170_582==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA170_582==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA170_582==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA170_582==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA170_582==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA170_582==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA170_582==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA170_582==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA170_582==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1436;}

                        else if ( (LA170_582==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA170_582==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                        else if ( (LA170_582==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1439;}

                         
                        input.seek(index170_582);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA170_641 = input.LA(1);

                         
                        int index170_641 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_641==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA170_641==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                        else if ( (LA170_641==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA170_641==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA170_641==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA170_641==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA170_641==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                        else if ( (LA170_641==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA170_641==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA170_641==STRING_LITERAL) ) {s = 1449;}

                        else if ( (LA170_641==QUOTED_STRING_LITERAL) ) {s = 1450;}

                        else if ( (LA170_641==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA170_641==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA170_641==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA170_641==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA170_641==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA170_641==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA170_641==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1457;}

                        else if ( (LA170_641==AT) && (synpred3_EsperEPL2Grammar())) {s = 1458;}

                        else if ( (LA170_641==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA170_641==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA170_641==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1461;}

                        else if ( (LA170_641==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA170_641==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                        else if ( (LA170_641==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1464;}

                        else if ( (LA170_641==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                        else if ( (LA170_641==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1466;}

                        else if ( (LA170_641==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1467;}

                        else if ( (LA170_641==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA170_641==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA170_641==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA170_641==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA170_641==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA170_641==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA170_641==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA170_641==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA170_641==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA170_641==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                        else if ( (LA170_641==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1478;}

                        else if ( (LA170_641==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1479;}

                        else if ( (LA170_641==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA170_641==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA170_641==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA170_641==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA170_641==LW) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA170_641==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA170_641==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1486;}

                        else if ( (LA170_641==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA170_641==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                        else if ( (LA170_641==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA170_641==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA170_641==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                        else if ( (LA170_641==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA170_641==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA170_641==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA170_641==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA170_641==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA170_641==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA170_641==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA170_641==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA170_641==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA170_641==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA170_641==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                         
                        input.seek(index170_641);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA170_700 = input.LA(1);

                         
                        int index170_700 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_700==STRING_LITERAL) ) {s = 1503;}

                        else if ( (LA170_700==QUOTED_STRING_LITERAL) ) {s = 1504;}

                        else if ( (LA170_700==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA170_700==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA170_700==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA170_700==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1508;}

                        else if ( (LA170_700==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA170_700==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA170_700==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA170_700==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA170_700==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                        else if ( (LA170_700==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1514;}

                        else if ( (LA170_700==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA170_700==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA170_700==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1517;}

                        else if ( (LA170_700==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA170_700==AT) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA170_700==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA170_700==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA170_700==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA170_700==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA170_700==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                        else if ( (LA170_700==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( (LA170_700==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1526;}

                        else if ( (LA170_700==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1527;}

                        else if ( (LA170_700==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1528;}

                        else if ( (LA170_700==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1529;}

                        else if ( (LA170_700==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA170_700==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA170_700==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA170_700==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA170_700==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA170_700==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA170_700==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA170_700==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                        else if ( (LA170_700==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( (LA170_700==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1539;}

                        else if ( (LA170_700==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1540;}

                        else if ( (LA170_700==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1541;}

                        else if ( (LA170_700==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1542;}

                        else if ( (LA170_700==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1543;}

                        else if ( (LA170_700==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA170_700==LW) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA170_700==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA170_700==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA170_700==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA170_700==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA170_700==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA170_700==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA170_700==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA170_700==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA170_700==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA170_700==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA170_700==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA170_700==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA170_700==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA170_700==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA170_700==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA170_700==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                        else if ( (LA170_700==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA170_700==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1563;}

                         
                        input.seek(index170_700);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA170_759 = input.LA(1);

                         
                        int index170_759 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_759==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( ((LA170_759>=STRING_LITERAL && LA170_759<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index170_759);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA170_818 = input.LA(1);

                         
                        int index170_818 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_818==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA170_818==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                        else if ( (LA170_818==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA170_818==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA170_818==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA170_818==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA170_818==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA170_818==STRING_LITERAL) ) {s = 1574;}

                        else if ( (LA170_818==QUOTED_STRING_LITERAL) ) {s = 1575;}

                        else if ( (LA170_818==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA170_818==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA170_818==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA170_818==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA170_818==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA170_818==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA170_818==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA170_818==AT) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA170_818==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA170_818==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA170_818==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                        else if ( (LA170_818==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1587;}

                        else if ( (LA170_818==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1588;}

                        else if ( (LA170_818==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA170_818==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                        else if ( (LA170_818==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA170_818==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA170_818==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                        else if ( (LA170_818==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA170_818==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA170_818==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA170_818==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA170_818==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA170_818==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA170_818==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                        else if ( (LA170_818==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1601;}

                        else if ( (LA170_818==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1602;}

                        else if ( (LA170_818==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA170_818==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA170_818==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA170_818==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA170_818==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA170_818==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA170_818==LW) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA170_818==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA170_818==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA170_818==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA170_818==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1613;}

                        else if ( (LA170_818==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA170_818==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                        else if ( (LA170_818==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1616;}

                        else if ( (LA170_818==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA170_818==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                        else if ( (LA170_818==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA170_818==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                        else if ( (LA170_818==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA170_818==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA170_818==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA170_818==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA170_818==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA170_818==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA170_818==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                         
                        input.seek(index170_818);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA170_877 = input.LA(1);

                         
                        int index170_877 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_877==STRING_LITERAL) ) {s = 1628;}

                        else if ( (LA170_877==QUOTED_STRING_LITERAL) ) {s = 1629;}

                        else if ( (LA170_877==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA170_877==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA170_877==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA170_877==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA170_877==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA170_877==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA170_877==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA170_877==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA170_877==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1638;}

                        else if ( (LA170_877==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA170_877==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                        else if ( (LA170_877==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA170_877==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA170_877==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                        else if ( (LA170_877==AT) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA170_877==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                        else if ( (LA170_877==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1646;}

                        else if ( (LA170_877==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA170_877==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA170_877==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA170_877==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA170_877==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA170_877==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA170_877==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA170_877==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                        else if ( (LA170_877==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA170_877==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA170_877==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA170_877==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA170_877==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA170_877==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                        else if ( (LA170_877==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1661;}

                        else if ( (LA170_877==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA170_877==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1663;}

                        else if ( (LA170_877==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA170_877==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                        else if ( (LA170_877==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1666;}

                        else if ( (LA170_877==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA170_877==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                        else if ( (LA170_877==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA170_877==LW) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA170_877==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA170_877==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA170_877==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA170_877==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA170_877==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA170_877==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA170_877==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA170_877==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA170_877==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA170_877==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA170_877==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA170_877==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA170_877==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA170_877==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA170_877==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA170_877==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA170_877==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                        else if ( (LA170_877==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1688;}

                         
                        input.seek(index170_877);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA170_936 = input.LA(1);

                         
                        int index170_936 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_936==SELECT) ) {s = 1689;}

                        else if ( (LA170_936==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                        else if ( (LA170_936==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA170_936==AT) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA170_936==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                        else if ( (LA170_936==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA170_936==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA170_936==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA170_936==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA170_936==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA170_936==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA170_936==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA170_936==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA170_936==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA170_936==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                        else if ( (LA170_936==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1704;}

                        else if ( (LA170_936==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA170_936==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA170_936==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA170_936==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA170_936==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA170_936==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA170_936==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA170_936==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                        else if ( (LA170_936==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA170_936==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA170_936==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                        else if ( (LA170_936==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                        else if ( (LA170_936==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA170_936==LW) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA170_936==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1719;}

                        else if ( (LA170_936==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA170_936==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA170_936==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA170_936==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA170_936==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA170_936==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA170_936==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA170_936==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA170_936==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                        else if ( (LA170_936==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA170_936==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA170_936==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA170_936==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1732;}

                         
                        input.seek(index170_936);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA170_946 = input.LA(1);

                         
                        int index170_946 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_946==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA170_946==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA170_946==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA170_946==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA170_946==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                        else if ( (LA170_946==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA170_946==LT) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA170_946==GT) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA170_946==LE) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                        else if ( (LA170_946==GE) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA170_946==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA170_946==IS) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA170_946==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1745;}

                        else if ( (LA170_946==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA170_946==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA170_946==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1748;}

                        else if ( (LA170_946==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA170_946==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA170_946==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA170_946==RPAREN) ) {s = 1752;}

                        else if ( (LA170_946==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                        else if ( (LA170_946==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA170_946==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA170_946==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA170_946==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                         
                        input.seek(index170_946);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA170_947 = input.LA(1);

                         
                        int index170_947 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_947==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA170_947==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA170_947==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA170_947==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA170_947==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                        else if ( (LA170_947==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA170_947==LT) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA170_947==GT) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA170_947==LE) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA170_947==GE) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                        else if ( (LA170_947==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA170_947==IS) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA170_947==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA170_947==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1771;}

                        else if ( (LA170_947==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA170_947==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1773;}

                        else if ( (LA170_947==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA170_947==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA170_947==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA170_947==RPAREN) ) {s = 1777;}

                        else if ( (LA170_947==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                        else if ( (LA170_947==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA170_947==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA170_947==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA170_947==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1782;}

                         
                        input.seek(index170_947);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA170_1001 = input.LA(1);

                         
                        int index170_1001 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1001==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1783;}

                        else if ( (LA170_1001==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1784;}

                        else if ( (LA170_1001==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA170_1001==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA170_1001==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                        else if ( (LA170_1001==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA170_1001==LT) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA170_1001==GT) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA170_1001==LE) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA170_1001==GE) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA170_1001==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                        else if ( (LA170_1001==IS) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA170_1001==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA170_1001==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA170_1001==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1797;}

                        else if ( (LA170_1001==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1798;}

                        else if ( (LA170_1001==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA170_1001==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA170_1001==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA170_1001==RPAREN) ) {s = 1802;}

                        else if ( (LA170_1001==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                        else if ( (LA170_1001==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA170_1001==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA170_1001==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA170_1001==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                         
                        input.seek(index170_1001);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA170_1002 = input.LA(1);

                         
                        int index170_1002 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1002==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA170_1002==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA170_1002==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA170_1002==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA170_1002==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                        else if ( (LA170_1002==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1813;}

                        else if ( (LA170_1002==LT) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA170_1002==GT) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA170_1002==LE) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA170_1002==GE) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA170_1002==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA170_1002==IS) && (synpred3_EsperEPL2Grammar())) {s = 1819;}

                        else if ( (LA170_1002==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1820;}

                        else if ( (LA170_1002==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA170_1002==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA170_1002==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1823;}

                        else if ( (LA170_1002==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                        else if ( (LA170_1002==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA170_1002==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA170_1002==RPAREN) ) {s = 1827;}

                        else if ( (LA170_1002==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                        else if ( (LA170_1002==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1829;}

                        else if ( (LA170_1002==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA170_1002==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA170_1002==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                         
                        input.seek(index170_1002);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA170_1064 = input.LA(1);

                         
                        int index170_1064 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1064==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA170_1064==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA170_1064==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA170_1064==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA170_1064==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                        else if ( (LA170_1064==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1838;}

                        else if ( (LA170_1064==LT) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA170_1064==GT) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA170_1064==LE) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA170_1064==GE) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA170_1064==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA170_1064==IS) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA170_1064==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA170_1064==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                        else if ( (LA170_1064==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1847;}

                        else if ( (LA170_1064==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1848;}

                        else if ( (LA170_1064==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1849;}

                        else if ( (LA170_1064==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA170_1064==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1851;}

                        else if ( (LA170_1064==RPAREN) ) {s = 1852;}

                        else if ( (LA170_1064==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1853;}

                        else if ( (LA170_1064==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1854;}

                        else if ( (LA170_1064==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1855;}

                        else if ( (LA170_1064==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1856;}

                        else if ( (LA170_1064==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1857;}

                         
                        input.seek(index170_1064);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA170_1065 = input.LA(1);

                         
                        int index170_1065 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1065==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1858;}

                        else if ( (LA170_1065==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1859;}

                        else if ( (LA170_1065==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1860;}

                        else if ( (LA170_1065==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1861;}

                        else if ( (LA170_1065==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1862;}

                        else if ( (LA170_1065==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1863;}

                        else if ( (LA170_1065==LT) && (synpred3_EsperEPL2Grammar())) {s = 1864;}

                        else if ( (LA170_1065==GT) && (synpred3_EsperEPL2Grammar())) {s = 1865;}

                        else if ( (LA170_1065==LE) && (synpred3_EsperEPL2Grammar())) {s = 1866;}

                        else if ( (LA170_1065==GE) && (synpred3_EsperEPL2Grammar())) {s = 1867;}

                        else if ( (LA170_1065==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1868;}

                        else if ( (LA170_1065==IS) && (synpred3_EsperEPL2Grammar())) {s = 1869;}

                        else if ( (LA170_1065==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1870;}

                        else if ( (LA170_1065==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1871;}

                        else if ( (LA170_1065==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1872;}

                        else if ( (LA170_1065==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1873;}

                        else if ( (LA170_1065==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1874;}

                        else if ( (LA170_1065==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1875;}

                        else if ( (LA170_1065==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1876;}

                        else if ( (LA170_1065==RPAREN) ) {s = 1877;}

                        else if ( (LA170_1065==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1878;}

                        else if ( (LA170_1065==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1879;}

                        else if ( (LA170_1065==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1880;}

                        else if ( (LA170_1065==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1881;}

                        else if ( (LA170_1065==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1882;}

                         
                        input.seek(index170_1065);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA170_1134 = input.LA(1);

                         
                        int index170_1134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1134==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1883;}

                        else if ( (LA170_1134==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1884;}

                        else if ( (LA170_1134==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1885;}

                        else if ( (LA170_1134==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1886;}

                        else if ( (LA170_1134==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1887;}

                        else if ( (LA170_1134==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1888;}

                        else if ( (LA170_1134==LT) && (synpred3_EsperEPL2Grammar())) {s = 1889;}

                        else if ( (LA170_1134==GT) && (synpred3_EsperEPL2Grammar())) {s = 1890;}

                        else if ( (LA170_1134==LE) && (synpred3_EsperEPL2Grammar())) {s = 1891;}

                        else if ( (LA170_1134==GE) && (synpred3_EsperEPL2Grammar())) {s = 1892;}

                        else if ( (LA170_1134==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1893;}

                        else if ( (LA170_1134==IS) && (synpred3_EsperEPL2Grammar())) {s = 1894;}

                        else if ( (LA170_1134==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1895;}

                        else if ( (LA170_1134==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1896;}

                        else if ( (LA170_1134==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1897;}

                        else if ( (LA170_1134==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1898;}

                        else if ( (LA170_1134==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1899;}

                        else if ( (LA170_1134==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1900;}

                        else if ( (LA170_1134==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1901;}

                        else if ( (LA170_1134==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1902;}

                        else if ( (LA170_1134==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1903;}

                        else if ( (LA170_1134==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1904;}

                        else if ( (LA170_1134==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1905;}

                        else if ( (LA170_1134==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1906;}

                        else if ( (LA170_1134==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1907;}

                        else if ( (LA170_1134==RPAREN) ) {s = 14;}

                         
                        input.seek(index170_1134);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA170_1135 = input.LA(1);

                         
                        int index170_1135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1135==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1909;}

                        else if ( (LA170_1135==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1910;}

                        else if ( (LA170_1135==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1911;}

                        else if ( (LA170_1135==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1912;}

                        else if ( (LA170_1135==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1913;}

                        else if ( (LA170_1135==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1914;}

                        else if ( (LA170_1135==LT) && (synpred3_EsperEPL2Grammar())) {s = 1915;}

                        else if ( (LA170_1135==GT) && (synpred3_EsperEPL2Grammar())) {s = 1916;}

                        else if ( (LA170_1135==LE) && (synpred3_EsperEPL2Grammar())) {s = 1917;}

                        else if ( (LA170_1135==GE) && (synpred3_EsperEPL2Grammar())) {s = 1918;}

                        else if ( (LA170_1135==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1919;}

                        else if ( (LA170_1135==IS) && (synpred3_EsperEPL2Grammar())) {s = 1920;}

                        else if ( (LA170_1135==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1921;}

                        else if ( (LA170_1135==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1922;}

                        else if ( (LA170_1135==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1923;}

                        else if ( (LA170_1135==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1924;}

                        else if ( (LA170_1135==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1925;}

                        else if ( (LA170_1135==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1926;}

                        else if ( (LA170_1135==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1927;}

                        else if ( (LA170_1135==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1928;}

                        else if ( (LA170_1135==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1929;}

                        else if ( (LA170_1135==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1930;}

                        else if ( (LA170_1135==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1931;}

                        else if ( (LA170_1135==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1932;}

                        else if ( (LA170_1135==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1933;}

                        else if ( (LA170_1135==RPAREN) ) {s = 14;}

                         
                        input.seek(index170_1135);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA170_1197 = input.LA(1);

                         
                        int index170_1197 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1197==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1935;}

                        else if ( (LA170_1197==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1936;}

                        else if ( (LA170_1197==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1937;}

                        else if ( (LA170_1197==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1938;}

                        else if ( (LA170_1197==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1939;}

                        else if ( (LA170_1197==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1940;}

                        else if ( (LA170_1197==LT) && (synpred3_EsperEPL2Grammar())) {s = 1941;}

                        else if ( (LA170_1197==GT) && (synpred3_EsperEPL2Grammar())) {s = 1942;}

                        else if ( (LA170_1197==LE) && (synpred3_EsperEPL2Grammar())) {s = 1943;}

                        else if ( (LA170_1197==GE) && (synpred3_EsperEPL2Grammar())) {s = 1944;}

                        else if ( (LA170_1197==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1945;}

                        else if ( (LA170_1197==IS) && (synpred3_EsperEPL2Grammar())) {s = 1946;}

                        else if ( (LA170_1197==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1947;}

                        else if ( (LA170_1197==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1948;}

                        else if ( (LA170_1197==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1949;}

                        else if ( (LA170_1197==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1950;}

                        else if ( (LA170_1197==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1951;}

                        else if ( (LA170_1197==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1952;}

                        else if ( (LA170_1197==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1953;}

                        else if ( (LA170_1197==RPAREN) ) {s = 1954;}

                        else if ( (LA170_1197==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1955;}

                        else if ( (LA170_1197==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1956;}

                        else if ( (LA170_1197==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1957;}

                        else if ( (LA170_1197==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1958;}

                        else if ( (LA170_1197==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1959;}

                         
                        input.seek(index170_1197);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA170_1198 = input.LA(1);

                         
                        int index170_1198 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1198==RPAREN) ) {s = 1960;}

                        else if ( (LA170_1198==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1961;}

                        else if ( (LA170_1198==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1962;}

                        else if ( (LA170_1198==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1963;}

                        else if ( (LA170_1198==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1964;}

                        else if ( (LA170_1198==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1965;}

                        else if ( (LA170_1198==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1966;}

                        else if ( (LA170_1198==LT) && (synpred3_EsperEPL2Grammar())) {s = 1967;}

                        else if ( (LA170_1198==GT) && (synpred3_EsperEPL2Grammar())) {s = 1968;}

                        else if ( (LA170_1198==LE) && (synpred3_EsperEPL2Grammar())) {s = 1969;}

                        else if ( (LA170_1198==GE) && (synpred3_EsperEPL2Grammar())) {s = 1970;}

                        else if ( (LA170_1198==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1971;}

                        else if ( (LA170_1198==IS) && (synpred3_EsperEPL2Grammar())) {s = 1972;}

                        else if ( (LA170_1198==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1973;}

                        else if ( (LA170_1198==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1974;}

                        else if ( (LA170_1198==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1975;}

                        else if ( (LA170_1198==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1976;}

                        else if ( (LA170_1198==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1977;}

                        else if ( (LA170_1198==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1978;}

                        else if ( (LA170_1198==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1979;}

                        else if ( (LA170_1198==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1980;}

                        else if ( (LA170_1198==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1981;}

                        else if ( (LA170_1198==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1982;}

                        else if ( (LA170_1198==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1983;}

                        else if ( (LA170_1198==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1984;}

                         
                        input.seek(index170_1198);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA170_1260 = input.LA(1);

                         
                        int index170_1260 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1260==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1985;}

                        else if ( (LA170_1260==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1986;}

                        else if ( (LA170_1260==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1987;}

                        else if ( (LA170_1260==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1988;}

                        else if ( (LA170_1260==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1989;}

                        else if ( (LA170_1260==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1990;}

                        else if ( (LA170_1260==LT) && (synpred3_EsperEPL2Grammar())) {s = 1991;}

                        else if ( (LA170_1260==GT) && (synpred3_EsperEPL2Grammar())) {s = 1992;}

                        else if ( (LA170_1260==LE) && (synpred3_EsperEPL2Grammar())) {s = 1993;}

                        else if ( (LA170_1260==GE) && (synpred3_EsperEPL2Grammar())) {s = 1994;}

                        else if ( (LA170_1260==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1995;}

                        else if ( (LA170_1260==IS) && (synpred3_EsperEPL2Grammar())) {s = 1996;}

                        else if ( (LA170_1260==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1997;}

                        else if ( (LA170_1260==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1998;}

                        else if ( (LA170_1260==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1999;}

                        else if ( (LA170_1260==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2000;}

                        else if ( (LA170_1260==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2001;}

                        else if ( (LA170_1260==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2002;}

                        else if ( (LA170_1260==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2003;}

                        else if ( (LA170_1260==RPAREN) ) {s = 2004;}

                        else if ( (LA170_1260==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2005;}

                        else if ( (LA170_1260==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2006;}

                        else if ( (LA170_1260==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2007;}

                        else if ( (LA170_1260==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2008;}

                        else if ( (LA170_1260==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2009;}

                         
                        input.seek(index170_1260);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA170_1261 = input.LA(1);

                         
                        int index170_1261 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1261==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2010;}

                        else if ( (LA170_1261==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2011;}

                        else if ( (LA170_1261==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2012;}

                        else if ( (LA170_1261==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2013;}

                        else if ( (LA170_1261==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2014;}

                        else if ( (LA170_1261==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2015;}

                        else if ( (LA170_1261==LT) && (synpred3_EsperEPL2Grammar())) {s = 2016;}

                        else if ( (LA170_1261==GT) && (synpred3_EsperEPL2Grammar())) {s = 2017;}

                        else if ( (LA170_1261==LE) && (synpred3_EsperEPL2Grammar())) {s = 2018;}

                        else if ( (LA170_1261==GE) && (synpred3_EsperEPL2Grammar())) {s = 2019;}

                        else if ( (LA170_1261==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2020;}

                        else if ( (LA170_1261==IS) && (synpred3_EsperEPL2Grammar())) {s = 2021;}

                        else if ( (LA170_1261==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2022;}

                        else if ( (LA170_1261==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2023;}

                        else if ( (LA170_1261==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2024;}

                        else if ( (LA170_1261==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2025;}

                        else if ( (LA170_1261==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2026;}

                        else if ( (LA170_1261==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2027;}

                        else if ( (LA170_1261==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2028;}

                        else if ( (LA170_1261==RPAREN) ) {s = 2029;}

                        else if ( (LA170_1261==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2030;}

                        else if ( (LA170_1261==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2031;}

                        else if ( (LA170_1261==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2032;}

                        else if ( (LA170_1261==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2033;}

                        else if ( (LA170_1261==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2034;}

                         
                        input.seek(index170_1261);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA170_1323 = input.LA(1);

                         
                        int index170_1323 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1323==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2035;}

                        else if ( (LA170_1323==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2036;}

                        else if ( (LA170_1323==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2037;}

                        else if ( (LA170_1323==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2038;}

                        else if ( (LA170_1323==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2039;}

                        else if ( (LA170_1323==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2040;}

                        else if ( (LA170_1323==LT) && (synpred3_EsperEPL2Grammar())) {s = 2041;}

                        else if ( (LA170_1323==GT) && (synpred3_EsperEPL2Grammar())) {s = 2042;}

                        else if ( (LA170_1323==LE) && (synpred3_EsperEPL2Grammar())) {s = 2043;}

                        else if ( (LA170_1323==GE) && (synpred3_EsperEPL2Grammar())) {s = 2044;}

                        else if ( (LA170_1323==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2045;}

                        else if ( (LA170_1323==IS) && (synpred3_EsperEPL2Grammar())) {s = 2046;}

                        else if ( (LA170_1323==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2047;}

                        else if ( (LA170_1323==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2048;}

                        else if ( (LA170_1323==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2049;}

                        else if ( (LA170_1323==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2050;}

                        else if ( (LA170_1323==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2051;}

                        else if ( (LA170_1323==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2052;}

                        else if ( (LA170_1323==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2053;}

                        else if ( (LA170_1323==RPAREN) ) {s = 2054;}

                        else if ( (LA170_1323==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2055;}

                        else if ( (LA170_1323==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2056;}

                        else if ( (LA170_1323==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2057;}

                        else if ( (LA170_1323==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2058;}

                        else if ( (LA170_1323==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2059;}

                         
                        input.seek(index170_1323);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA170_1324 = input.LA(1);

                         
                        int index170_1324 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1324==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2060;}

                        else if ( (LA170_1324==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2061;}

                        else if ( (LA170_1324==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2062;}

                        else if ( (LA170_1324==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2063;}

                        else if ( (LA170_1324==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2064;}

                        else if ( (LA170_1324==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2065;}

                        else if ( (LA170_1324==LT) && (synpred3_EsperEPL2Grammar())) {s = 2066;}

                        else if ( (LA170_1324==GT) && (synpred3_EsperEPL2Grammar())) {s = 2067;}

                        else if ( (LA170_1324==LE) && (synpred3_EsperEPL2Grammar())) {s = 2068;}

                        else if ( (LA170_1324==GE) && (synpred3_EsperEPL2Grammar())) {s = 2069;}

                        else if ( (LA170_1324==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2070;}

                        else if ( (LA170_1324==IS) && (synpred3_EsperEPL2Grammar())) {s = 2071;}

                        else if ( (LA170_1324==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2072;}

                        else if ( (LA170_1324==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2073;}

                        else if ( (LA170_1324==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2074;}

                        else if ( (LA170_1324==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2075;}

                        else if ( (LA170_1324==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2076;}

                        else if ( (LA170_1324==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2077;}

                        else if ( (LA170_1324==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2078;}

                        else if ( (LA170_1324==RPAREN) ) {s = 2079;}

                        else if ( (LA170_1324==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2080;}

                        else if ( (LA170_1324==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2081;}

                        else if ( (LA170_1324==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2082;}

                        else if ( (LA170_1324==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2083;}

                        else if ( (LA170_1324==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2084;}

                         
                        input.seek(index170_1324);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA170_1377 = input.LA(1);

                         
                        int index170_1377 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1377==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2085;}

                        else if ( (LA170_1377==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2086;}

                        else if ( (LA170_1377==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2087;}

                        else if ( (LA170_1377==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2088;}

                        else if ( (LA170_1377==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2089;}

                        else if ( (LA170_1377==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2090;}

                        else if ( (LA170_1377==LT) && (synpred3_EsperEPL2Grammar())) {s = 2091;}

                        else if ( (LA170_1377==GT) && (synpred3_EsperEPL2Grammar())) {s = 2092;}

                        else if ( (LA170_1377==LE) && (synpred3_EsperEPL2Grammar())) {s = 2093;}

                        else if ( (LA170_1377==GE) && (synpred3_EsperEPL2Grammar())) {s = 2094;}

                        else if ( (LA170_1377==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2095;}

                        else if ( (LA170_1377==IS) && (synpred3_EsperEPL2Grammar())) {s = 2096;}

                        else if ( (LA170_1377==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2097;}

                        else if ( (LA170_1377==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2098;}

                        else if ( (LA170_1377==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2099;}

                        else if ( (LA170_1377==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2100;}

                        else if ( (LA170_1377==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}

                        else if ( (LA170_1377==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2102;}

                        else if ( (LA170_1377==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2103;}

                        else if ( (LA170_1377==RPAREN) ) {s = 2104;}

                        else if ( (LA170_1377==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2105;}

                        else if ( (LA170_1377==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2106;}

                        else if ( (LA170_1377==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2107;}

                        else if ( (LA170_1377==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2108;}

                        else if ( (LA170_1377==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2109;}

                         
                        input.seek(index170_1377);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA170_1378 = input.LA(1);

                         
                        int index170_1378 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1378==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2110;}

                        else if ( (LA170_1378==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2111;}

                        else if ( (LA170_1378==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2112;}

                        else if ( (LA170_1378==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2113;}

                        else if ( (LA170_1378==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2114;}

                        else if ( (LA170_1378==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2115;}

                        else if ( (LA170_1378==LT) && (synpred3_EsperEPL2Grammar())) {s = 2116;}

                        else if ( (LA170_1378==GT) && (synpred3_EsperEPL2Grammar())) {s = 2117;}

                        else if ( (LA170_1378==LE) && (synpred3_EsperEPL2Grammar())) {s = 2118;}

                        else if ( (LA170_1378==GE) && (synpred3_EsperEPL2Grammar())) {s = 2119;}

                        else if ( (LA170_1378==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2120;}

                        else if ( (LA170_1378==IS) && (synpred3_EsperEPL2Grammar())) {s = 2121;}

                        else if ( (LA170_1378==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2122;}

                        else if ( (LA170_1378==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2123;}

                        else if ( (LA170_1378==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2124;}

                        else if ( (LA170_1378==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2125;}

                        else if ( (LA170_1378==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2126;}

                        else if ( (LA170_1378==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2127;}

                        else if ( (LA170_1378==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2128;}

                        else if ( (LA170_1378==RPAREN) ) {s = 2129;}

                        else if ( (LA170_1378==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2130;}

                        else if ( (LA170_1378==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2131;}

                        else if ( (LA170_1378==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2132;}

                        else if ( (LA170_1378==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2133;}

                        else if ( (LA170_1378==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2134;}

                         
                        input.seek(index170_1378);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA170_1449 = input.LA(1);

                         
                        int index170_1449 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1449==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2135;}

                        else if ( (LA170_1449==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2136;}

                        else if ( (LA170_1449==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2137;}

                        else if ( (LA170_1449==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2138;}

                        else if ( (LA170_1449==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2139;}

                        else if ( (LA170_1449==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2140;}

                        else if ( (LA170_1449==LT) && (synpred3_EsperEPL2Grammar())) {s = 2141;}

                        else if ( (LA170_1449==GT) && (synpred3_EsperEPL2Grammar())) {s = 2142;}

                        else if ( (LA170_1449==LE) && (synpred3_EsperEPL2Grammar())) {s = 2143;}

                        else if ( (LA170_1449==GE) && (synpred3_EsperEPL2Grammar())) {s = 2144;}

                        else if ( (LA170_1449==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2145;}

                        else if ( (LA170_1449==IS) && (synpred3_EsperEPL2Grammar())) {s = 2146;}

                        else if ( (LA170_1449==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2147;}

                        else if ( (LA170_1449==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2148;}

                        else if ( (LA170_1449==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2149;}

                        else if ( (LA170_1449==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2150;}

                        else if ( (LA170_1449==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2151;}

                        else if ( (LA170_1449==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2152;}

                        else if ( (LA170_1449==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2153;}

                        else if ( (LA170_1449==RPAREN) ) {s = 2154;}

                        else if ( (LA170_1449==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2155;}

                        else if ( (LA170_1449==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2156;}

                        else if ( (LA170_1449==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2157;}

                        else if ( (LA170_1449==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2158;}

                        else if ( (LA170_1449==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2159;}

                         
                        input.seek(index170_1449);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA170_1450 = input.LA(1);

                         
                        int index170_1450 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1450==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2160;}

                        else if ( (LA170_1450==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2161;}

                        else if ( (LA170_1450==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2162;}

                        else if ( (LA170_1450==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2163;}

                        else if ( (LA170_1450==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2164;}

                        else if ( (LA170_1450==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2165;}

                        else if ( (LA170_1450==LT) && (synpred3_EsperEPL2Grammar())) {s = 2166;}

                        else if ( (LA170_1450==GT) && (synpred3_EsperEPL2Grammar())) {s = 2167;}

                        else if ( (LA170_1450==LE) && (synpred3_EsperEPL2Grammar())) {s = 2168;}

                        else if ( (LA170_1450==GE) && (synpred3_EsperEPL2Grammar())) {s = 2169;}

                        else if ( (LA170_1450==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2170;}

                        else if ( (LA170_1450==IS) && (synpred3_EsperEPL2Grammar())) {s = 2171;}

                        else if ( (LA170_1450==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2172;}

                        else if ( (LA170_1450==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2173;}

                        else if ( (LA170_1450==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2174;}

                        else if ( (LA170_1450==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2175;}

                        else if ( (LA170_1450==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2176;}

                        else if ( (LA170_1450==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2177;}

                        else if ( (LA170_1450==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2178;}

                        else if ( (LA170_1450==RPAREN) ) {s = 2179;}

                        else if ( (LA170_1450==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2180;}

                        else if ( (LA170_1450==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2181;}

                        else if ( (LA170_1450==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2182;}

                        else if ( (LA170_1450==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2183;}

                        else if ( (LA170_1450==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2184;}

                         
                        input.seek(index170_1450);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA170_1503 = input.LA(1);

                         
                        int index170_1503 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1503==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2185;}

                        else if ( (LA170_1503==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2186;}

                        else if ( (LA170_1503==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2187;}

                        else if ( (LA170_1503==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2188;}

                        else if ( (LA170_1503==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2189;}

                        else if ( (LA170_1503==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2190;}

                        else if ( (LA170_1503==LT) && (synpred3_EsperEPL2Grammar())) {s = 2191;}

                        else if ( (LA170_1503==GT) && (synpred3_EsperEPL2Grammar())) {s = 2192;}

                        else if ( (LA170_1503==LE) && (synpred3_EsperEPL2Grammar())) {s = 2193;}

                        else if ( (LA170_1503==GE) && (synpred3_EsperEPL2Grammar())) {s = 2194;}

                        else if ( (LA170_1503==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2195;}

                        else if ( (LA170_1503==IS) && (synpred3_EsperEPL2Grammar())) {s = 2196;}

                        else if ( (LA170_1503==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2197;}

                        else if ( (LA170_1503==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2198;}

                        else if ( (LA170_1503==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2199;}

                        else if ( (LA170_1503==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}

                        else if ( (LA170_1503==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2201;}

                        else if ( (LA170_1503==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2202;}

                        else if ( (LA170_1503==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2203;}

                        else if ( (LA170_1503==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2204;}

                        else if ( (LA170_1503==RPAREN) ) {s = 2205;}

                        else if ( (LA170_1503==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2206;}

                        else if ( (LA170_1503==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2207;}

                        else if ( (LA170_1503==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2208;}

                        else if ( (LA170_1503==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2209;}

                        else if ( (LA170_1503==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2210;}

                         
                        input.seek(index170_1503);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA170_1504 = input.LA(1);

                         
                        int index170_1504 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1504==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2211;}

                        else if ( (LA170_1504==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2212;}

                        else if ( (LA170_1504==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2213;}

                        else if ( (LA170_1504==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2214;}

                        else if ( (LA170_1504==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2215;}

                        else if ( (LA170_1504==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2216;}

                        else if ( (LA170_1504==LT) && (synpred3_EsperEPL2Grammar())) {s = 2217;}

                        else if ( (LA170_1504==GT) && (synpred3_EsperEPL2Grammar())) {s = 2218;}

                        else if ( (LA170_1504==LE) && (synpred3_EsperEPL2Grammar())) {s = 2219;}

                        else if ( (LA170_1504==GE) && (synpred3_EsperEPL2Grammar())) {s = 2220;}

                        else if ( (LA170_1504==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2221;}

                        else if ( (LA170_1504==IS) && (synpred3_EsperEPL2Grammar())) {s = 2222;}

                        else if ( (LA170_1504==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2223;}

                        else if ( (LA170_1504==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2224;}

                        else if ( (LA170_1504==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2225;}

                        else if ( (LA170_1504==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2226;}

                        else if ( (LA170_1504==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2227;}

                        else if ( (LA170_1504==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2228;}

                        else if ( (LA170_1504==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2229;}

                        else if ( (LA170_1504==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2230;}

                        else if ( (LA170_1504==RPAREN) ) {s = 2231;}

                        else if ( (LA170_1504==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2232;}

                        else if ( (LA170_1504==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2233;}

                        else if ( (LA170_1504==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2234;}

                        else if ( (LA170_1504==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2235;}

                        else if ( (LA170_1504==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2236;}

                         
                        input.seek(index170_1504);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA170_1574 = input.LA(1);

                         
                        int index170_1574 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1574==RPAREN) ) {s = 14;}

                        else if ( (LA170_1574==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2238;}

                        else if ( (LA170_1574==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2239;}

                        else if ( (LA170_1574==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2240;}

                        else if ( (LA170_1574==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2241;}

                        else if ( (LA170_1574==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2242;}

                        else if ( (LA170_1574==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2243;}

                        else if ( (LA170_1574==LT) && (synpred3_EsperEPL2Grammar())) {s = 2244;}

                        else if ( (LA170_1574==GT) && (synpred3_EsperEPL2Grammar())) {s = 2245;}

                        else if ( (LA170_1574==LE) && (synpred3_EsperEPL2Grammar())) {s = 2246;}

                        else if ( (LA170_1574==GE) && (synpred3_EsperEPL2Grammar())) {s = 2247;}

                        else if ( (LA170_1574==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2248;}

                        else if ( (LA170_1574==IS) && (synpred3_EsperEPL2Grammar())) {s = 2249;}

                        else if ( (LA170_1574==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2250;}

                        else if ( (LA170_1574==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2251;}

                        else if ( (LA170_1574==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2252;}

                        else if ( (LA170_1574==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2253;}

                        else if ( (LA170_1574==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2254;}

                        else if ( (LA170_1574==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2255;}

                        else if ( (LA170_1574==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2256;}

                        else if ( (LA170_1574==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2257;}

                        else if ( (LA170_1574==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2258;}

                        else if ( (LA170_1574==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2259;}

                        else if ( (LA170_1574==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2260;}

                        else if ( (LA170_1574==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2261;}

                        else if ( (LA170_1574==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2262;}

                         
                        input.seek(index170_1574);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA170_1575 = input.LA(1);

                         
                        int index170_1575 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1575==RPAREN) ) {s = 14;}

                        else if ( (LA170_1575==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2264;}

                        else if ( (LA170_1575==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2265;}

                        else if ( (LA170_1575==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2266;}

                        else if ( (LA170_1575==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2267;}

                        else if ( (LA170_1575==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2268;}

                        else if ( (LA170_1575==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2269;}

                        else if ( (LA170_1575==LT) && (synpred3_EsperEPL2Grammar())) {s = 2270;}

                        else if ( (LA170_1575==GT) && (synpred3_EsperEPL2Grammar())) {s = 2271;}

                        else if ( (LA170_1575==LE) && (synpred3_EsperEPL2Grammar())) {s = 2272;}

                        else if ( (LA170_1575==GE) && (synpred3_EsperEPL2Grammar())) {s = 2273;}

                        else if ( (LA170_1575==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2274;}

                        else if ( (LA170_1575==IS) && (synpred3_EsperEPL2Grammar())) {s = 2275;}

                        else if ( (LA170_1575==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2276;}

                        else if ( (LA170_1575==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2277;}

                        else if ( (LA170_1575==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2278;}

                        else if ( (LA170_1575==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2279;}

                        else if ( (LA170_1575==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2280;}

                        else if ( (LA170_1575==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2281;}

                        else if ( (LA170_1575==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2282;}

                        else if ( (LA170_1575==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2283;}

                        else if ( (LA170_1575==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2284;}

                        else if ( (LA170_1575==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2285;}

                        else if ( (LA170_1575==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2286;}

                        else if ( (LA170_1575==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2287;}

                        else if ( (LA170_1575==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2288;}

                         
                        input.seek(index170_1575);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA170_1628 = input.LA(1);

                         
                        int index170_1628 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1628==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2289;}

                        else if ( (LA170_1628==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2290;}

                        else if ( (LA170_1628==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2291;}

                        else if ( (LA170_1628==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2292;}

                        else if ( (LA170_1628==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2293;}

                        else if ( (LA170_1628==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2294;}

                        else if ( (LA170_1628==LT) && (synpred3_EsperEPL2Grammar())) {s = 2295;}

                        else if ( (LA170_1628==GT) && (synpred3_EsperEPL2Grammar())) {s = 2296;}

                        else if ( (LA170_1628==LE) && (synpred3_EsperEPL2Grammar())) {s = 2297;}

                        else if ( (LA170_1628==GE) && (synpred3_EsperEPL2Grammar())) {s = 2298;}

                        else if ( (LA170_1628==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2299;}

                        else if ( (LA170_1628==IS) && (synpred3_EsperEPL2Grammar())) {s = 2300;}

                        else if ( (LA170_1628==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2301;}

                        else if ( (LA170_1628==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2302;}

                        else if ( (LA170_1628==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2303;}

                        else if ( (LA170_1628==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2304;}

                        else if ( (LA170_1628==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2305;}

                        else if ( (LA170_1628==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2306;}

                        else if ( (LA170_1628==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2307;}

                        else if ( (LA170_1628==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2308;}

                        else if ( (LA170_1628==AS) && (synpred3_EsperEPL2Grammar())) {s = 2309;}

                        else if ( (LA170_1628==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2310;}

                        else if ( (LA170_1628==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2311;}

                        else if ( (LA170_1628==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2312;}

                        else if ( (LA170_1628==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2313;}

                        else if ( (LA170_1628==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2314;}

                        else if ( (LA170_1628==RPAREN) ) {s = 14;}

                         
                        input.seek(index170_1628);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA170_1629 = input.LA(1);

                         
                        int index170_1629 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1629==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2316;}

                        else if ( (LA170_1629==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2317;}

                        else if ( (LA170_1629==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2318;}

                        else if ( (LA170_1629==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2319;}

                        else if ( (LA170_1629==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2320;}

                        else if ( (LA170_1629==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2321;}

                        else if ( (LA170_1629==LT) && (synpred3_EsperEPL2Grammar())) {s = 2322;}

                        else if ( (LA170_1629==GT) && (synpred3_EsperEPL2Grammar())) {s = 2323;}

                        else if ( (LA170_1629==LE) && (synpred3_EsperEPL2Grammar())) {s = 2324;}

                        else if ( (LA170_1629==GE) && (synpred3_EsperEPL2Grammar())) {s = 2325;}

                        else if ( (LA170_1629==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2326;}

                        else if ( (LA170_1629==IS) && (synpred3_EsperEPL2Grammar())) {s = 2327;}

                        else if ( (LA170_1629==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2328;}

                        else if ( (LA170_1629==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2329;}

                        else if ( (LA170_1629==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2330;}

                        else if ( (LA170_1629==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2331;}

                        else if ( (LA170_1629==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2332;}

                        else if ( (LA170_1629==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2333;}

                        else if ( (LA170_1629==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2334;}

                        else if ( (LA170_1629==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2335;}

                        else if ( (LA170_1629==AS) && (synpred3_EsperEPL2Grammar())) {s = 2336;}

                        else if ( (LA170_1629==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2337;}

                        else if ( (LA170_1629==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2338;}

                        else if ( (LA170_1629==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2339;}

                        else if ( (LA170_1629==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2340;}

                        else if ( (LA170_1629==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2341;}

                        else if ( (LA170_1629==RPAREN) ) {s = 14;}

                         
                        input.seek(index170_1629);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA170_1752 = input.LA(1);

                         
                        int index170_1752 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_1752);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA170_1777 = input.LA(1);

                         
                        int index170_1777 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_1777);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA170_1802 = input.LA(1);

                         
                        int index170_1802 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_1802);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA170_1827 = input.LA(1);

                         
                        int index170_1827 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_1827);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA170_1852 = input.LA(1);

                         
                        int index170_1852 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_1852);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA170_1877 = input.LA(1);

                         
                        int index170_1877 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_1877);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA170_1954 = input.LA(1);

                         
                        int index170_1954 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_1954);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA170_1960 = input.LA(1);

                         
                        int index170_1960 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_1960);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA170_2004 = input.LA(1);

                         
                        int index170_2004 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_2004);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA170_2029 = input.LA(1);

                         
                        int index170_2029 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_2029);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA170_2054 = input.LA(1);

                         
                        int index170_2054 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_2054);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA170_2079 = input.LA(1);

                         
                        int index170_2079 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_2079);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA170_2104 = input.LA(1);

                         
                        int index170_2104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_2104);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA170_2129 = input.LA(1);

                         
                        int index170_2129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_2129);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA170_2154 = input.LA(1);

                         
                        int index170_2154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_2154);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA170_2179 = input.LA(1);

                         
                        int index170_2179 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_2179);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA170_2205 = input.LA(1);

                         
                        int index170_2205 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_2205);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA170_2231 = input.LA(1);

                         
                        int index170_2231 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2341;}

                         
                        input.seek(index170_2231);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA197_eotS =
        "\u0516\uffff";
    static final String DFA197_eofS =
        "\1\uffff\1\112\1\u0085\6\uffff\1\u00c0\1\u00fb\u014d\uffff\1\u02bf"+
        "\1\u02fb\1\u0335\1\u0370\147\uffff\1\u03df\1\u041b\1\u0455\1\u0490"+
        "\u034f\uffff";
    static final String DFA197_minS =
        "\1\5\2\6\6\uffff\2\6\43\uffff\1\5\1\uffff\1\5\70\uffff\1\5\1\uffff"+
        "\1\5\66\uffff\1\5\74\uffff\1\5\101\uffff\2\6\65\uffff\4\6\60\uffff"+
        "\2\6\65\uffff\4\6\60\uffff\2\6\76\uffff\2\6\111\uffff\1\0\5\uffff"+
        "\1\0\33\uffff\1\0\67\uffff\2\0\2\uffff\1\0\67\uffff\1\0\72\uffff"+
        "\1\0\116\uffff\1\0\5\uffff\1\0\33\uffff\1\0\67\uffff\2\0\2\uffff"+
        "\1\0\67\uffff\1\0\72\uffff\1\0\116\uffff\1\0\5\uffff\1\0\55\uffff"+
        "\1\0\5\uffff\1\0\31\uffff";
    static final String DFA197_maxS =
        "\1\u0125\2\u0124\6\uffff\2\u0124\43\uffff\1\u0127\1\uffff\1\u0125"+
        "\70\uffff\1\u0127\1\uffff\1\u0125\66\uffff\1\u0127\74\uffff\1\u0127"+
        "\101\uffff\2\u011f\65\uffff\4\u0124\60\uffff\2\u011f\65\uffff\4"+
        "\u0124\60\uffff\2\u011f\76\uffff\2\u011f\111\uffff\1\0\5\uffff\1"+
        "\0\33\uffff\1\0\67\uffff\2\0\2\uffff\1\0\67\uffff\1\0\72\uffff\1"+
        "\0\116\uffff\1\0\5\uffff\1\0\33\uffff\1\0\67\uffff\2\0\2\uffff\1"+
        "\0\67\uffff\1\0\72\uffff\1\0\116\uffff\1\0\5\uffff\1\0\55\uffff"+
        "\1\0\5\uffff\1\0\31\uffff";
    static final String DFA197_acceptS =
        "\3\uffff\6\1\2\uffff\43\1\1\uffff\1\1\1\uffff\70\1\1\uffff\1\1"+
        "\1\uffff\66\1\1\uffff\74\1\1\uffff\70\1\1\2\103\uffff\47\1\104\uffff"+
        "\47\1\u00b4\uffff\2\1\1\uffff\67\1\2\uffff\2\1\1\uffff\67\1\1\uffff"+
        "\72\1\1\uffff\72\1\64\uffff\2\1\1\uffff\67\1\2\uffff\2\1\1\uffff"+
        "\67\1\1\uffff\72\1\1\uffff\72\1\150\uffff";
    static final String DFA197_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\45\uffff\1\5\72\uffff\1\6\u00ec\uffff"+
        "\1\7\1\10\1\11\1\12\147\uffff\1\13\1\14\1\15\1\16\u00bb\uffff\1"+
        "\17\5\uffff\1\20\33\uffff\1\21\67\uffff\1\22\1\23\2\uffff\1\24\67"+
        "\uffff\1\25\72\uffff\1\26\116\uffff\1\27\5\uffff\1\30\33\uffff\1"+
        "\31\67\uffff\1\32\1\33\2\uffff\1\34\67\uffff\1\35\72\uffff\1\36"+
        "\116\uffff\1\37\5\uffff\1\40\55\uffff\1\41\5\uffff\1\42\31\uffff}>";
    static final String[] DFA197_transitionS = {
            "\1\43\4\uffff\1\5\3\uffff\1\6\3\uffff\1\7\1\10\1\11\1\12\1"+
            "\13\1\14\1\15\1\16\1\4\10\uffff\1\46\1\uffff\1\50\1\44\1\45"+
            "\1\47\12\uffff\1\17\1\20\1\21\11\uffff\1\23\1\24\1\25\1\27\1"+
            "\30\1\31\1\32\1\33\1\uffff\1\34\1\35\1\36\1\37\2\uffff\1\40"+
            "\1\uffff\1\41\1\26\1\3\1\42\24\uffff\1\51\1\52\1\53\2\uffff"+
            "\1\22\u0098\uffff\1\1\36\uffff\1\2",
            "\1\142\1\143\1\144\1\145\1\146\1\103\1\102\1\141\2\uffff\1"+
            "\116\1\117\14\uffff\1\130\1\132\1\127\1\131\1\120\7\uffff\1"+
            "\74\1\uffff\1\104\1\105\1\uffff\1\122\2\uffff\1\106\3\uffff"+
            "\1\113\1\uffff\1\107\1\125\1\126\7\uffff\1\124\27\uffff\1\140"+
            "\1\137\1\136\6\uffff\1\110\3\uffff\1\121\3\uffff\1\123\1\111"+
            "\u0098\uffff\1\115\1\uffff\1\73\1\60\1\56\1\114\1\55\1\134\1"+
            "\61\1\100\1\64\1\57\1\133\2\uffff\1\77\1\101\1\75\1\76\1\67"+
            "\1\70\1\71\1\72\1\66\1\65\1\62\1\63\1\uffff\1\135\2\uffff\1"+
            "\54",
            "\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1\176\1\175\1\u009c"+
            "\2\uffff\1\u0089\1\u008a\14\uffff\1\u0093\1\u0095\1\u0092\1"+
            "\u0094\1\u008b\7\uffff\1\167\1\uffff\1\177\1\u0080\1\uffff\1"+
            "\u008d\2\uffff\1\u0081\3\uffff\1\u0086\1\uffff\1\u0082\1\u0090"+
            "\1\u0091\7\uffff\1\u008f\27\uffff\1\u009b\1\u009a\1\u0099\6"+
            "\uffff\1\u0083\3\uffff\1\u008c\3\uffff\1\u008e\1\u0084\u0098"+
            "\uffff\1\u0088\1\uffff\1\166\1\153\1\151\1\u0087\1\150\1\u0097"+
            "\1\154\1\173\1\157\1\152\1\u0096\2\uffff\1\172\1\174\1\170\1"+
            "\171\1\162\1\163\1\164\1\165\1\161\1\160\1\155\1\156\1\uffff"+
            "\1\u0098\2\uffff\1\147",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00d8\1\u00d9\1\u00da\1\u00db\1\u00dc\1\u00b9\1\u00b8\1"+
            "\u00d7\2\uffff\1\u00c4\1\u00c5\14\uffff\1\u00ce\1\u00d0\1\u00cd"+
            "\1\u00cf\1\u00c6\7\uffff\1\u00b2\1\uffff\1\u00ba\1\u00bb\1\uffff"+
            "\1\u00c8\2\uffff\1\u00bc\3\uffff\1\u00c1\1\uffff\1\u00bd\1\u00cb"+
            "\1\u00cc\7\uffff\1\u00ca\27\uffff\1\u00d6\1\u00d5\1\u00d4\6"+
            "\uffff\1\u00be\3\uffff\1\u00c7\3\uffff\1\u00c9\1\u00bf\u0098"+
            "\uffff\1\u00c3\1\uffff\1\u00b1\1\u00a6\1\u00a2\1\u00c2\1\u00a4"+
            "\1\u00d2\1\u00a7\1\u00b6\1\u00aa\1\u00a5\1\u00d1\2\uffff\1\u00b5"+
            "\1\u00b7\1\u00b3\1\u00b4\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00ac"+
            "\1\u00ab\1\u00a8\1\u00a9\1\uffff\1\u00d3\2\uffff\1\u00a3",
            "\1\u0113\1\u0114\1\u0115\1\u0116\1\u0117\1\u00f4\1\u00f3\1"+
            "\u0112\2\uffff\1\u00ff\1\u0100\14\uffff\1\u0109\1\u010b\1\u0108"+
            "\1\u010a\1\u0101\7\uffff\1\u00ed\1\uffff\1\u00f5\1\u00f6\1\uffff"+
            "\1\u0103\2\uffff\1\u00f7\3\uffff\1\u00fc\1\uffff\1\u00f8\1\u0106"+
            "\1\u0107\7\uffff\1\u0105\27\uffff\1\u0111\1\u0110\1\u010f\6"+
            "\uffff\1\u00f9\3\uffff\1\u0102\3\uffff\1\u0104\1\u00fa\u0098"+
            "\uffff\1\u00fe\1\uffff\1\u00ec\1\u00e1\1\u00df\1\u00fd\1\u00de"+
            "\1\u010d\1\u00e2\1\u00f1\1\u00e5\1\u00e0\1\u010c\2\uffff\1\u00f0"+
            "\1\u00f2\1\u00ee\1\u00ef\1\u00e8\1\u00e9\1\u00ea\1\u00eb\1\u00e7"+
            "\1\u00e6\1\u00e3\1\u00e4\1\uffff\1\u010e\2\uffff\1\u00dd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0118\4\uffff\1\u0118\2\uffff\2\u0118\3\uffff\11\u0118"+
            "\1\uffff\1\u0118\6\uffff\1\u0118\1\uffff\4\u0118\5\uffff\2\u0118"+
            "\3\uffff\3\u0118\11\uffff\16\u0118\1\uffff\1\u0118\1\uffff\4"+
            "\u0118\14\uffff\3\u0118\5\uffff\3\u0118\2\uffff\1\u0118\u0089"+
            "\uffff\1\u0118\16\uffff\1\u0118\2\uffff\2\u0118\4\uffff\2\u0118"+
            "\1\uffff\1\u0121\1\u0122\11\uffff\1\u0118\2\uffff\1\u0118\1"+
            "\uffff\1\u0118\2\uffff\3\u0118",
            "",
            "\1\u017a\4\uffff\1\u015e\3\uffff\1\u015f\3\uffff\1\u0160\1"+
            "\u0161\1\u015a\1\u015b\1\u0162\1\u0163\1\u0164\1\u0165\1\u015d"+
            "\10\uffff\1\u017d\1\uffff\1\u017f\1\u017b\1\u017c\1\u017e\12"+
            "\uffff\1\u0166\1\u0167\1\u0168\11\uffff\1\u016a\1\u016b\1\u016c"+
            "\1\u016e\1\u016f\1\u0170\1\u0171\1\u0172\1\uffff\1\u0173\1\u0174"+
            "\1\u0175\1\u0176\2\uffff\1\u0177\1\uffff\1\u0178\1\u016d\1\u015c"+
            "\1\u0179\24\uffff\1\u0180\1\u0181\1\u0182\2\uffff\1\u0169\u0098"+
            "\uffff\1\u0158\36\uffff\1\u0159",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0118\4\uffff\1\u0118\2\uffff\2\u0118\3\uffff\11\u0118"+
            "\1\uffff\1\u0118\6\uffff\1\u0118\1\uffff\4\u0118\5\uffff\2\u0118"+
            "\3\uffff\3\u0118\11\uffff\16\u0118\1\uffff\1\u0118\1\uffff\4"+
            "\u0118\14\uffff\3\u0118\5\uffff\3\u0118\2\uffff\1\u0118\u0089"+
            "\uffff\1\u0118\16\uffff\1\u0118\2\uffff\2\u0118\4\uffff\2\u0118"+
            "\1\uffff\1\u018c\1\u018d\11\uffff\1\u0118\2\uffff\1\u0118\1"+
            "\uffff\1\u0118\2\uffff\3\u0118",
            "",
            "\1\u01e5\4\uffff\1\u01c9\3\uffff\1\u01ca\3\uffff\1\u01cb\1"+
            "\u01cc\1\u01c5\1\u01c6\1\u01cd\1\u01ce\1\u01cf\1\u01d0\1\u01c8"+
            "\10\uffff\1\u01e8\1\uffff\1\u01ea\1\u01e6\1\u01e7\1\u01e9\12"+
            "\uffff\1\u01d1\1\u01d2\1\u01d3\11\uffff\1\u01d5\1\u01d6\1\u01d7"+
            "\1\u01d9\1\u01da\1\u01db\1\u01dc\1\u01dd\1\uffff\1\u01de\1\u01df"+
            "\1\u01e0\1\u01e1\2\uffff\1\u01e2\1\uffff\1\u01e3\1\u01d8\1\u01c7"+
            "\1\u01e4\24\uffff\1\u01eb\1\u01ec\1\u01ed\2\uffff\1\u01d4\u0098"+
            "\uffff\1\u01c3\36\uffff\1\u01c4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0118\4\uffff\1\u0118\2\uffff\2\u0118\3\uffff\11\u0118"+
            "\1\uffff\1\u0118\6\uffff\1\u0118\1\uffff\4\u0118\5\uffff\2\u0118"+
            "\3\uffff\3\u0118\11\uffff\16\u0118\1\uffff\1\u0118\1\uffff\4"+
            "\u0118\14\uffff\3\u0118\5\uffff\3\u0118\2\uffff\1\u0118\u0089"+
            "\uffff\1\u0118\16\uffff\1\u0118\2\uffff\2\u0118\4\uffff\2\u0118"+
            "\1\uffff\1\u01f7\1\u01f8\11\uffff\1\u0118\2\uffff\1\u0118\1"+
            "\uffff\1\u0118\2\uffff\3\u0118",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0118\4\uffff\1\u0118\2\uffff\2\u0118\3\uffff\11\u0118"+
            "\1\uffff\1\u0118\6\uffff\1\u0118\1\uffff\4\u0118\5\uffff\2\u0118"+
            "\3\uffff\3\u0118\11\uffff\16\u0118\1\uffff\1\u0118\1\uffff\4"+
            "\u0118\14\uffff\3\u0118\5\uffff\3\u0118\2\uffff\1\u0118\u0089"+
            "\uffff\1\u0118\16\uffff\1\u0118\2\uffff\2\u0118\4\uffff\2\u0118"+
            "\1\uffff\1\u0237\1\u0238\11\uffff\1\u0118\2\uffff\1\u0118\1"+
            "\uffff\1\u0118\2\uffff\3\u0118",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0118\1\uffff\3\u0118\34\uffff\1\u0118\u00da\uffff\1\u0118"+
            "\1\uffff\1\u0118\2\uffff\1\u0282\2\uffff\3\u0118\4\uffff\14"+
            "\u0118",
            "\4\u0118\1\uffff\3\u0118\34\uffff\1\u0118\u00da\uffff\1\u0118"+
            "\1\uffff\1\u0118\2\uffff\1\u0288\2\uffff\3\u0118\4\uffff\14"+
            "\u0118",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02d7\1\u02d8\1\u02d9\1\u02da\1\u02db\1\u02b8\1\u02b7\1"+
            "\u02d6\2\uffff\1\u02c3\1\u02c4\14\uffff\1\u02cd\1\u02cf\1\u02cc"+
            "\1\u02ce\1\u02c5\7\uffff\1\u02b1\1\uffff\1\u02b9\1\u02ba\1\uffff"+
            "\1\u02c7\2\uffff\1\u02bb\3\uffff\1\u02c0\1\uffff\1\u02bc\1\u02ca"+
            "\1\u02cb\7\uffff\1\u02c9\27\uffff\1\u02d5\1\u02d4\1\u02d3\6"+
            "\uffff\1\u02bd\3\uffff\1\u02c6\3\uffff\1\u02c8\1\u02be\u0098"+
            "\uffff\1\u02c2\1\uffff\1\u02b0\1\u02dc\1\u02a4\1\u02c1\1\u02a3"+
            "\1\u02d1\1\u02a6\1\u02b5\1\u02a9\1\u02a5\1\u02d0\2\uffff\1\u02b4"+
            "\1\u02b6\1\u02b2\1\u02b3\1\u02ac\1\u02ad\1\u02ae\1\u02af\1\u02ab"+
            "\1\u02aa\1\u02a7\1\u02a8\1\uffff\1\u02d2\2\uffff\1\u02a2",
            "\1\u0313\1\u0314\1\u0315\1\u0316\1\u0317\1\u02f4\1\u02f3\1"+
            "\u0312\2\uffff\1\u02ff\1\u0300\14\uffff\1\u0309\1\u030b\1\u0308"+
            "\1\u030a\1\u0301\7\uffff\1\u02ed\1\uffff\1\u02f5\1\u02f6\1\uffff"+
            "\1\u0303\2\uffff\1\u02f7\3\uffff\1\u02fc\1\uffff\1\u02f8\1\u0306"+
            "\1\u0307\7\uffff\1\u0305\27\uffff\1\u0311\1\u0310\1\u030f\6"+
            "\uffff\1\u02f9\3\uffff\1\u0302\3\uffff\1\u0304\1\u02fa\u0098"+
            "\uffff\1\u02fe\1\uffff\1\u02ec\1\u02dd\1\u02e0\1\u02fd\1\u02df"+
            "\1\u030d\1\u02e2\1\u02f1\1\u02e5\1\u02e1\1\u030c\2\uffff\1\u02f0"+
            "\1\u02f2\1\u02ee\1\u02ef\1\u02e8\1\u02e9\1\u02ea\1\u02eb\1\u02e7"+
            "\1\u02e6\1\u02e3\1\u02e4\1\uffff\1\u030e\2\uffff\1\u02de",
            "\1\u034d\1\u034e\1\u034f\1\u0350\1\u0351\1\u032e\1\u032d\1"+
            "\u034c\2\uffff\1\u0339\1\u033a\14\uffff\1\u0343\1\u0345\1\u0342"+
            "\1\u0344\1\u033b\7\uffff\1\u0327\1\uffff\1\u032f\1\u0330\1\uffff"+
            "\1\u033d\2\uffff\1\u0331\3\uffff\1\u0336\1\uffff\1\u0332\1\u0340"+
            "\1\u0341\7\uffff\1\u033f\27\uffff\1\u034b\1\u034a\1\u0349\6"+
            "\uffff\1\u0333\3\uffff\1\u033c\3\uffff\1\u033e\1\u0334\u0098"+
            "\uffff\1\u0338\1\uffff\1\u0326\1\u0352\1\u0318\1\u0337\1\u031a"+
            "\1\u0347\1\u031c\1\u032b\1\u031f\1\u031b\1\u0346\2\uffff\1\u032a"+
            "\1\u032c\1\u0328\1\u0329\1\u0322\1\u0323\1\u0324\1\u0325\1\u0321"+
            "\1\u0320\1\u031d\1\u031e\1\uffff\1\u0348\2\uffff\1\u0319",
            "\1\u0388\1\u0389\1\u038a\1\u038b\1\u038c\1\u0369\1\u0368\1"+
            "\u0387\2\uffff\1\u0374\1\u0375\14\uffff\1\u037e\1\u0380\1\u037d"+
            "\1\u037f\1\u0376\7\uffff\1\u0362\1\uffff\1\u036a\1\u036b\1\uffff"+
            "\1\u0378\2\uffff\1\u036c\3\uffff\1\u0371\1\uffff\1\u036d\1\u037b"+
            "\1\u037c\7\uffff\1\u037a\27\uffff\1\u0386\1\u0385\1\u0384\6"+
            "\uffff\1\u036e\3\uffff\1\u0377\3\uffff\1\u0379\1\u036f\u0098"+
            "\uffff\1\u0373\1\uffff\1\u0361\1\u038d\1\u0353\1\u0372\1\u0355"+
            "\1\u0382\1\u0357\1\u0366\1\u035a\1\u0356\1\u0381\2\uffff\1\u0365"+
            "\1\u0367\1\u0363\1\u0364\1\u035d\1\u035e\1\u035f\1\u0360\1\u035c"+
            "\1\u035b\1\u0358\1\u0359\1\uffff\1\u0383\2\uffff\1\u0354",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0118\1\uffff\3\u0118\34\uffff\1\u0118\u00da\uffff\1\u0118"+
            "\1\uffff\1\u0118\2\uffff\1\u03a2\2\uffff\3\u0118\4\uffff\14"+
            "\u0118",
            "\4\u0118\1\uffff\3\u0118\34\uffff\1\u0118\u00da\uffff\1\u0118"+
            "\1\uffff\1\u0118\2\uffff\1\u03a8\2\uffff\3\u0118\4\uffff\14"+
            "\u0118",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03f7\1\u03f8\1\u03f9\1\u03fa\1\u03fb\1\u03d8\1\u03d7\1"+
            "\u03f6\2\uffff\1\u03e3\1\u03e4\14\uffff\1\u03ed\1\u03ef\1\u03ec"+
            "\1\u03ee\1\u03e5\7\uffff\1\u03d1\1\uffff\1\u03d9\1\u03da\1\uffff"+
            "\1\u03e7\2\uffff\1\u03db\3\uffff\1\u03e0\1\uffff\1\u03dc\1\u03ea"+
            "\1\u03eb\7\uffff\1\u03e9\27\uffff\1\u03f5\1\u03f4\1\u03f3\6"+
            "\uffff\1\u03dd\3\uffff\1\u03e6\3\uffff\1\u03e8\1\u03de\u0098"+
            "\uffff\1\u03e2\1\uffff\1\u03d0\1\u03fc\1\u03c4\1\u03e1\1\u03c3"+
            "\1\u03f1\1\u03c6\1\u03d5\1\u03c9\1\u03c5\1\u03f0\2\uffff\1\u03d4"+
            "\1\u03d6\1\u03d2\1\u03d3\1\u03cc\1\u03cd\1\u03ce\1\u03cf\1\u03cb"+
            "\1\u03ca\1\u03c7\1\u03c8\1\uffff\1\u03f2\2\uffff\1\u03c2",
            "\1\u0433\1\u0434\1\u0435\1\u0436\1\u0437\1\u0414\1\u0413\1"+
            "\u0432\2\uffff\1\u041f\1\u0420\14\uffff\1\u0429\1\u042b\1\u0428"+
            "\1\u042a\1\u0421\7\uffff\1\u040d\1\uffff\1\u0415\1\u0416\1\uffff"+
            "\1\u0423\2\uffff\1\u0417\3\uffff\1\u041c\1\uffff\1\u0418\1\u0426"+
            "\1\u0427\7\uffff\1\u0425\27\uffff\1\u0431\1\u0430\1\u042f\6"+
            "\uffff\1\u0419\3\uffff\1\u0422\3\uffff\1\u0424\1\u041a\u0098"+
            "\uffff\1\u041e\1\uffff\1\u040c\1\u03fd\1\u0400\1\u041d\1\u03ff"+
            "\1\u042d\1\u0402\1\u0411\1\u0405\1\u0401\1\u042c\2\uffff\1\u0410"+
            "\1\u0412\1\u040e\1\u040f\1\u0408\1\u0409\1\u040a\1\u040b\1\u0407"+
            "\1\u0406\1\u0403\1\u0404\1\uffff\1\u042e\2\uffff\1\u03fe",
            "\1\u046d\1\u046e\1\u046f\1\u0470\1\u0471\1\u044e\1\u044d\1"+
            "\u046c\2\uffff\1\u0459\1\u045a\14\uffff\1\u0463\1\u0465\1\u0462"+
            "\1\u0464\1\u045b\7\uffff\1\u0447\1\uffff\1\u044f\1\u0450\1\uffff"+
            "\1\u045d\2\uffff\1\u0451\3\uffff\1\u0456\1\uffff\1\u0452\1\u0460"+
            "\1\u0461\7\uffff\1\u045f\27\uffff\1\u046b\1\u046a\1\u0469\6"+
            "\uffff\1\u0453\3\uffff\1\u045c\3\uffff\1\u045e\1\u0454\u0098"+
            "\uffff\1\u0458\1\uffff\1\u0446\1\u0472\1\u0438\1\u0457\1\u043a"+
            "\1\u0467\1\u043c\1\u044b\1\u043f\1\u043b\1\u0466\2\uffff\1\u044a"+
            "\1\u044c\1\u0448\1\u0449\1\u0442\1\u0443\1\u0444\1\u0445\1\u0441"+
            "\1\u0440\1\u043d\1\u043e\1\uffff\1\u0468\2\uffff\1\u0439",
            "\1\u04a8\1\u04a9\1\u04aa\1\u04ab\1\u04ac\1\u0489\1\u0488\1"+
            "\u04a7\2\uffff\1\u0494\1\u0495\14\uffff\1\u049e\1\u04a0\1\u049d"+
            "\1\u049f\1\u0496\7\uffff\1\u0482\1\uffff\1\u048a\1\u048b\1\uffff"+
            "\1\u0498\2\uffff\1\u048c\3\uffff\1\u0491\1\uffff\1\u048d\1\u049b"+
            "\1\u049c\7\uffff\1\u049a\27\uffff\1\u04a6\1\u04a5\1\u04a4\6"+
            "\uffff\1\u048e\3\uffff\1\u0497\3\uffff\1\u0499\1\u048f\u0098"+
            "\uffff\1\u0493\1\uffff\1\u0481\1\u04ad\1\u0473\1\u0492\1\u0475"+
            "\1\u04a2\1\u0477\1\u0486\1\u047a\1\u0476\1\u04a1\2\uffff\1\u0485"+
            "\1\u0487\1\u0483\1\u0484\1\u047d\1\u047e\1\u047f\1\u0480\1\u047c"+
            "\1\u047b\1\u0478\1\u0479\1\uffff\1\u04a3\2\uffff\1\u0474",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0118\1\uffff\3\u0118\34\uffff\1\u0118\u00da\uffff\1\u0118"+
            "\1\uffff\1\u0118\2\uffff\1\u04c2\2\uffff\3\u0118\4\uffff\14"+
            "\u0118",
            "\4\u0118\1\uffff\3\u0118\34\uffff\1\u0118\u00da\uffff\1\u0118"+
            "\1\uffff\1\u0118\2\uffff\1\u04c8\2\uffff\3\u0118\4\uffff\14"+
            "\u0118",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0118\1\uffff\3\u0118\34\uffff\1\u0118\u00da\uffff\1\u0118"+
            "\1\uffff\1\u0118\2\uffff\1\u04f6\2\uffff\3\u0118\4\uffff\14"+
            "\u0118",
            "\4\u0118\1\uffff\3\u0118\34\uffff\1\u0118\u00da\uffff\1\u0118"+
            "\1\uffff\1\u0118\2\uffff\1\u04fc\2\uffff\3\u0118\4\uffff\14"+
            "\u0118",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA197_eot = DFA.unpackEncodedString(DFA197_eotS);
    static final short[] DFA197_eof = DFA.unpackEncodedString(DFA197_eofS);
    static final char[] DFA197_min = DFA.unpackEncodedStringToUnsignedChars(DFA197_minS);
    static final char[] DFA197_max = DFA.unpackEncodedStringToUnsignedChars(DFA197_maxS);
    static final short[] DFA197_accept = DFA.unpackEncodedString(DFA197_acceptS);
    static final short[] DFA197_special = DFA.unpackEncodedString(DFA197_specialS);
    static final short[][] DFA197_transition;

    static {
        int numStates = DFA197_transitionS.length;
        DFA197_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA197_transition[i] = DFA.unpackEncodedString(DFA197_transitionS[i]);
        }
    }

    class DFA197 extends DFA {

        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = DFA197_eot;
            this.eof = DFA197_eof;
            this.min = DFA197_min;
            this.max = DFA197_max;
            this.accept = DFA197_accept;
            this.special = DFA197_special;
            this.transition = DFA197_transition;
        }
        public String getDescription() {
            return "1279:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA197_0 = input.LA(1);

                         
                        int index197_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_0==IDENT) ) {s = 1;}

                        else if ( (LA197_0==TICKED_STRING_LITERAL) ) {s = 2;}

                        else if ( (LA197_0==AT) && (synpred4_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA197_0==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA197_0==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA197_0==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA197_0==SUM) && (synpred4_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA197_0==AVG) && (synpred4_EsperEPL2Grammar())) {s = 8;}

                        else if ( (LA197_0==MAX) ) {s = 9;}

                        else if ( (LA197_0==MIN) ) {s = 10;}

                        else if ( (LA197_0==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA197_0==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA197_0==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA197_0==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA197_0==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA197_0==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA197_0==LAST) && (synpred4_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA197_0==WHILE) && (synpred4_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA197_0==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA197_0==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA197_0==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA197_0==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA197_0==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA197_0==SQL) && (synpred4_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA197_0==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA197_0==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA197_0==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA197_0==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA197_0==LW) && (synpred4_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA197_0==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA197_0==CAST) && (synpred4_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA197_0==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA197_0==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA197_0==INDEX) && (synpred4_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA197_0==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA197_0==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA197_0==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA197_0==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA197_0==FULL) && (synpred4_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA197_0==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA197_0==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA197_0==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA197_0==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 43;}

                         
                        input.seek(index197_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA197_1 = input.LA(1);

                         
                        int index197_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA197_1==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA197_1==LPAREN) ) {s = 46;}

                        else if ( (LA197_1==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA197_1==DOT) ) {s = 48;}

                        else if ( (LA197_1==STAR) && (synpred4_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA197_1==DIV) && (synpred4_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA197_1==MOD) && (synpred4_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA197_1==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA197_1==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA197_1==LOR) && (synpred4_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA197_1==LT) && (synpred4_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA197_1==GT) && (synpred4_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA197_1==LE) && (synpred4_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA197_1==GE) && (synpred4_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA197_1==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA197_1==IS) && (synpred4_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA197_1==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA197_1==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA197_1==BAND) && (synpred4_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA197_1==BOR) && (synpred4_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA197_1==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA197_1==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA197_1==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA197_1==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA197_1==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA197_1==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA197_1==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA197_1==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA197_1==FOR) && (synpred4_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA197_1==EOF) && (synpred4_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA197_1==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA197_1==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA197_1==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA197_1==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA197_1==AS) && (synpred4_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA197_1==FROM) && (synpred4_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA197_1==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA197_1==ALL) && (synpred4_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA197_1==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA197_1==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA197_1==ASC) && (synpred4_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA197_1==DESC) && (synpred4_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA197_1==THEN) && (synpred4_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA197_1==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA197_1==END) && (synpred4_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA197_1==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA197_1==COLON) && (synpred4_EsperEPL2Grammar())) {s = 91;}

                        else if ( (LA197_1==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 92;}

                        else if ( (LA197_1==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 93;}

                        else if ( (LA197_1==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA197_1==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA197_1==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA197_1==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA197_1==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 98;}

                        else if ( (LA197_1==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 99;}

                        else if ( (LA197_1==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 100;}

                        else if ( (LA197_1==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA197_1==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 102;}

                         
                        input.seek(index197_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA197_2 = input.LA(1);

                         
                        int index197_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_2==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA197_2==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 104;}

                        else if ( (LA197_2==LPAREN) ) {s = 105;}

                        else if ( (LA197_2==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA197_2==DOT) ) {s = 107;}

                        else if ( (LA197_2==STAR) && (synpred4_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA197_2==DIV) && (synpred4_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA197_2==MOD) && (synpred4_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA197_2==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA197_2==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA197_2==LOR) && (synpred4_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA197_2==LT) && (synpred4_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA197_2==GT) && (synpred4_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA197_2==LE) && (synpred4_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA197_2==GE) && (synpred4_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA197_2==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA197_2==IS) && (synpred4_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA197_2==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA197_2==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA197_2==BAND) && (synpred4_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA197_2==BOR) && (synpred4_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA197_2==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA197_2==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA197_2==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA197_2==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA197_2==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA197_2==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA197_2==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA197_2==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA197_2==FOR) && (synpred4_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA197_2==EOF) && (synpred4_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA197_2==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA197_2==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA197_2==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA197_2==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA197_2==AS) && (synpred4_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA197_2==FROM) && (synpred4_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA197_2==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA197_2==ALL) && (synpred4_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA197_2==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA197_2==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA197_2==ASC) && (synpred4_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA197_2==DESC) && (synpred4_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA197_2==THEN) && (synpred4_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA197_2==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA197_2==END) && (synpred4_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA197_2==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA197_2==COLON) && (synpred4_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA197_2==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA197_2==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA197_2==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA197_2==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA197_2==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA197_2==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA197_2==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA197_2==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA197_2==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA197_2==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA197_2==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 161;}

                         
                        input.seek(index197_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA197_9 = input.LA(1);

                         
                        int index197_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_9==LPAREN) ) {s = 162;}

                        else if ( (LA197_9==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA197_9==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA197_9==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA197_9==DOT) && (synpred4_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA197_9==STAR) && (synpred4_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA197_9==DIV) && (synpred4_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA197_9==MOD) && (synpred4_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA197_9==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA197_9==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA197_9==LOR) && (synpred4_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA197_9==LT) && (synpred4_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA197_9==GT) && (synpred4_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA197_9==LE) && (synpred4_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA197_9==GE) && (synpred4_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA197_9==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA197_9==IS) && (synpred4_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA197_9==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA197_9==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA197_9==BAND) && (synpred4_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA197_9==BOR) && (synpred4_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA197_9==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA197_9==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA197_9==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA197_9==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA197_9==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA197_9==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA197_9==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA197_9==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA197_9==FOR) && (synpred4_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA197_9==EOF) && (synpred4_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA197_9==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA197_9==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA197_9==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA197_9==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA197_9==AS) && (synpred4_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA197_9==FROM) && (synpred4_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA197_9==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA197_9==ALL) && (synpred4_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA197_9==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA197_9==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA197_9==ASC) && (synpred4_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA197_9==DESC) && (synpred4_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA197_9==THEN) && (synpred4_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA197_9==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA197_9==END) && (synpred4_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA197_9==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA197_9==COLON) && (synpred4_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA197_9==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA197_9==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA197_9==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA197_9==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA197_9==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA197_9==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA197_9==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA197_9==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA197_9==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA197_9==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA197_9==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 220;}

                         
                        input.seek(index197_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA197_10 = input.LA(1);

                         
                        int index197_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_10==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA197_10==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA197_10==LPAREN) ) {s = 223;}

                        else if ( (LA197_10==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA197_10==DOT) && (synpred4_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA197_10==STAR) && (synpred4_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA197_10==DIV) && (synpred4_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA197_10==MOD) && (synpred4_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA197_10==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA197_10==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA197_10==LOR) && (synpred4_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA197_10==LT) && (synpred4_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA197_10==GT) && (synpred4_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA197_10==LE) && (synpred4_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA197_10==GE) && (synpred4_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA197_10==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA197_10==IS) && (synpred4_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA197_10==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA197_10==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA197_10==BAND) && (synpred4_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA197_10==BOR) && (synpred4_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA197_10==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA197_10==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA197_10==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA197_10==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA197_10==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA197_10==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA197_10==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA197_10==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA197_10==FOR) && (synpred4_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA197_10==EOF) && (synpred4_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA197_10==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA197_10==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA197_10==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA197_10==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA197_10==AS) && (synpred4_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA197_10==FROM) && (synpred4_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA197_10==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA197_10==ALL) && (synpred4_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA197_10==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA197_10==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA197_10==ASC) && (synpred4_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA197_10==DESC) && (synpred4_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA197_10==THEN) && (synpred4_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA197_10==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA197_10==END) && (synpred4_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA197_10==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA197_10==COLON) && (synpred4_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA197_10==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA197_10==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA197_10==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA197_10==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA197_10==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA197_10==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA197_10==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA197_10==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA197_10==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA197_10==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA197_10==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 279;}

                         
                        input.seek(index197_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA197_48 = input.LA(1);

                         
                        int index197_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_48==IDENT) ) {s = 344;}

                        else if ( (LA197_48==TICKED_STRING_LITERAL) ) {s = 345;}

                        else if ( (LA197_48==MAX) ) {s = 346;}

                        else if ( (LA197_48==MIN) ) {s = 347;}

                        else if ( (LA197_48==AT) && (synpred4_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA197_48==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA197_48==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA197_48==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA197_48==SUM) && (synpred4_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA197_48==AVG) && (synpred4_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA197_48==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA197_48==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA197_48==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA197_48==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA197_48==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA197_48==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA197_48==LAST) && (synpred4_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA197_48==WHILE) && (synpred4_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA197_48==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA197_48==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA197_48==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA197_48==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA197_48==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA197_48==SQL) && (synpred4_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA197_48==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA197_48==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA197_48==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA197_48==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA197_48==LW) && (synpred4_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA197_48==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA197_48==CAST) && (synpred4_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA197_48==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA197_48==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA197_48==INDEX) && (synpred4_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA197_48==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA197_48==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA197_48==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA197_48==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA197_48==FULL) && (synpred4_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA197_48==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA197_48==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA197_48==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA197_48==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 386;}

                         
                        input.seek(index197_48);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA197_107 = input.LA(1);

                         
                        int index197_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_107==IDENT) ) {s = 451;}

                        else if ( (LA197_107==TICKED_STRING_LITERAL) ) {s = 452;}

                        else if ( (LA197_107==MAX) ) {s = 453;}

                        else if ( (LA197_107==MIN) ) {s = 454;}

                        else if ( (LA197_107==AT) && (synpred4_EsperEPL2Grammar())) {s = 455;}

                        else if ( (LA197_107==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 456;}

                        else if ( (LA197_107==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 457;}

                        else if ( (LA197_107==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 458;}

                        else if ( (LA197_107==SUM) && (synpred4_EsperEPL2Grammar())) {s = 459;}

                        else if ( (LA197_107==AVG) && (synpred4_EsperEPL2Grammar())) {s = 460;}

                        else if ( (LA197_107==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 461;}

                        else if ( (LA197_107==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 462;}

                        else if ( (LA197_107==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 463;}

                        else if ( (LA197_107==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 464;}

                        else if ( (LA197_107==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 465;}

                        else if ( (LA197_107==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 466;}

                        else if ( (LA197_107==LAST) && (synpred4_EsperEPL2Grammar())) {s = 467;}

                        else if ( (LA197_107==WHILE) && (synpred4_EsperEPL2Grammar())) {s = 468;}

                        else if ( (LA197_107==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 469;}

                        else if ( (LA197_107==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 470;}

                        else if ( (LA197_107==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 471;}

                        else if ( (LA197_107==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 472;}

                        else if ( (LA197_107==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 473;}

                        else if ( (LA197_107==SQL) && (synpred4_EsperEPL2Grammar())) {s = 474;}

                        else if ( (LA197_107==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 475;}

                        else if ( (LA197_107==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 476;}

                        else if ( (LA197_107==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 477;}

                        else if ( (LA197_107==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 478;}

                        else if ( (LA197_107==LW) && (synpred4_EsperEPL2Grammar())) {s = 479;}

                        else if ( (LA197_107==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 480;}

                        else if ( (LA197_107==CAST) && (synpred4_EsperEPL2Grammar())) {s = 481;}

                        else if ( (LA197_107==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 482;}

                        else if ( (LA197_107==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 483;}

                        else if ( (LA197_107==INDEX) && (synpred4_EsperEPL2Grammar())) {s = 484;}

                        else if ( (LA197_107==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 485;}

                        else if ( (LA197_107==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 486;}

                        else if ( (LA197_107==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 487;}

                        else if ( (LA197_107==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 488;}

                        else if ( (LA197_107==FULL) && (synpred4_EsperEPL2Grammar())) {s = 489;}

                        else if ( (LA197_107==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 490;}

                        else if ( (LA197_107==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 491;}

                        else if ( (LA197_107==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 492;}

                        else if ( (LA197_107==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 493;}

                         
                        input.seek(index197_107);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA197_344 = input.LA(1);

                         
                        int index197_344 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_344==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 674;}

                        else if ( (LA197_344==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 675;}

                        else if ( (LA197_344==LPAREN) ) {s = 676;}

                        else if ( (LA197_344==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 677;}

                        else if ( (LA197_344==STAR) && (synpred4_EsperEPL2Grammar())) {s = 678;}

                        else if ( (LA197_344==DIV) && (synpred4_EsperEPL2Grammar())) {s = 679;}

                        else if ( (LA197_344==MOD) && (synpred4_EsperEPL2Grammar())) {s = 680;}

                        else if ( (LA197_344==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 681;}

                        else if ( (LA197_344==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 682;}

                        else if ( (LA197_344==LOR) && (synpred4_EsperEPL2Grammar())) {s = 683;}

                        else if ( (LA197_344==LT) && (synpred4_EsperEPL2Grammar())) {s = 684;}

                        else if ( (LA197_344==GT) && (synpred4_EsperEPL2Grammar())) {s = 685;}

                        else if ( (LA197_344==LE) && (synpred4_EsperEPL2Grammar())) {s = 686;}

                        else if ( (LA197_344==GE) && (synpred4_EsperEPL2Grammar())) {s = 687;}

                        else if ( (LA197_344==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 688;}

                        else if ( (LA197_344==IS) && (synpred4_EsperEPL2Grammar())) {s = 689;}

                        else if ( (LA197_344==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 690;}

                        else if ( (LA197_344==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 691;}

                        else if ( (LA197_344==BAND) && (synpred4_EsperEPL2Grammar())) {s = 692;}

                        else if ( (LA197_344==BOR) && (synpred4_EsperEPL2Grammar())) {s = 693;}

                        else if ( (LA197_344==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 694;}

                        else if ( (LA197_344==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 695;}

                        else if ( (LA197_344==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 696;}

                        else if ( (LA197_344==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 697;}

                        else if ( (LA197_344==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 698;}

                        else if ( (LA197_344==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 699;}

                        else if ( (LA197_344==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 700;}

                        else if ( (LA197_344==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 701;}

                        else if ( (LA197_344==FOR) && (synpred4_EsperEPL2Grammar())) {s = 702;}

                        else if ( (LA197_344==EOF) && (synpred4_EsperEPL2Grammar())) {s = 703;}

                        else if ( (LA197_344==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 704;}

                        else if ( (LA197_344==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 705;}

                        else if ( (LA197_344==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 706;}

                        else if ( (LA197_344==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 707;}

                        else if ( (LA197_344==AS) && (synpred4_EsperEPL2Grammar())) {s = 708;}

                        else if ( (LA197_344==FROM) && (synpred4_EsperEPL2Grammar())) {s = 709;}

                        else if ( (LA197_344==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 710;}

                        else if ( (LA197_344==ALL) && (synpred4_EsperEPL2Grammar())) {s = 711;}

                        else if ( (LA197_344==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 712;}

                        else if ( (LA197_344==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 713;}

                        else if ( (LA197_344==ASC) && (synpred4_EsperEPL2Grammar())) {s = 714;}

                        else if ( (LA197_344==DESC) && (synpred4_EsperEPL2Grammar())) {s = 715;}

                        else if ( (LA197_344==THEN) && (synpred4_EsperEPL2Grammar())) {s = 716;}

                        else if ( (LA197_344==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 717;}

                        else if ( (LA197_344==END) && (synpred4_EsperEPL2Grammar())) {s = 718;}

                        else if ( (LA197_344==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 719;}

                        else if ( (LA197_344==COLON) && (synpred4_EsperEPL2Grammar())) {s = 720;}

                        else if ( (LA197_344==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 721;}

                        else if ( (LA197_344==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 722;}

                        else if ( (LA197_344==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 723;}

                        else if ( (LA197_344==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 724;}

                        else if ( (LA197_344==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 725;}

                        else if ( (LA197_344==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 726;}

                        else if ( (LA197_344==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 727;}

                        else if ( (LA197_344==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 728;}

                        else if ( (LA197_344==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 729;}

                        else if ( (LA197_344==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA197_344==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA197_344==DOT) ) {s = 732;}

                         
                        input.seek(index197_344);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA197_345 = input.LA(1);

                         
                        int index197_345 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_345==DOT) ) {s = 733;}

                        else if ( (LA197_345==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA197_345==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA197_345==LPAREN) ) {s = 736;}

                        else if ( (LA197_345==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 737;}

                        else if ( (LA197_345==STAR) && (synpred4_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA197_345==DIV) && (synpred4_EsperEPL2Grammar())) {s = 739;}

                        else if ( (LA197_345==MOD) && (synpred4_EsperEPL2Grammar())) {s = 740;}

                        else if ( (LA197_345==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA197_345==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA197_345==LOR) && (synpred4_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA197_345==LT) && (synpred4_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA197_345==GT) && (synpred4_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA197_345==LE) && (synpred4_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA197_345==GE) && (synpred4_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA197_345==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA197_345==IS) && (synpred4_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA197_345==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA197_345==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA197_345==BAND) && (synpred4_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA197_345==BOR) && (synpred4_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA197_345==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA197_345==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA197_345==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA197_345==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA197_345==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA197_345==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA197_345==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA197_345==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA197_345==FOR) && (synpred4_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA197_345==EOF) && (synpred4_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA197_345==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA197_345==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA197_345==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA197_345==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA197_345==AS) && (synpred4_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA197_345==FROM) && (synpred4_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA197_345==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA197_345==ALL) && (synpred4_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA197_345==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA197_345==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA197_345==ASC) && (synpred4_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA197_345==DESC) && (synpred4_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA197_345==THEN) && (synpred4_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA197_345==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA197_345==END) && (synpred4_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA197_345==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA197_345==COLON) && (synpred4_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA197_345==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA197_345==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA197_345==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA197_345==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA197_345==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA197_345==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA197_345==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA197_345==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA197_345==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA197_345==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA197_345==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 791;}

                         
                        input.seek(index197_345);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA197_346 = input.LA(1);

                         
                        int index197_346 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_346==LPAREN) ) {s = 792;}

                        else if ( (LA197_346==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA197_346==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA197_346==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA197_346==STAR) && (synpred4_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA197_346==DIV) && (synpred4_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA197_346==MOD) && (synpred4_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA197_346==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA197_346==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA197_346==LOR) && (synpred4_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA197_346==LT) && (synpred4_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA197_346==GT) && (synpred4_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA197_346==LE) && (synpred4_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA197_346==GE) && (synpred4_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA197_346==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA197_346==IS) && (synpred4_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA197_346==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA197_346==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA197_346==BAND) && (synpred4_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA197_346==BOR) && (synpred4_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA197_346==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA197_346==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA197_346==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA197_346==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA197_346==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA197_346==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA197_346==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA197_346==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA197_346==FOR) && (synpred4_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA197_346==EOF) && (synpred4_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA197_346==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA197_346==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA197_346==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA197_346==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA197_346==AS) && (synpred4_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA197_346==FROM) && (synpred4_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA197_346==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA197_346==ALL) && (synpred4_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA197_346==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA197_346==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA197_346==ASC) && (synpred4_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA197_346==DESC) && (synpred4_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA197_346==THEN) && (synpred4_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA197_346==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA197_346==END) && (synpred4_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA197_346==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA197_346==COLON) && (synpred4_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA197_346==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA197_346==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA197_346==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA197_346==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA197_346==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA197_346==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA197_346==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA197_346==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA197_346==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA197_346==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA197_346==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA197_346==DOT) && (synpred4_EsperEPL2Grammar())) {s = 850;}

                         
                        input.seek(index197_346);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA197_347 = input.LA(1);

                         
                        int index197_347 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_347==LPAREN) ) {s = 851;}

                        else if ( (LA197_347==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA197_347==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA197_347==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA197_347==STAR) && (synpred4_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA197_347==DIV) && (synpred4_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA197_347==MOD) && (synpred4_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA197_347==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA197_347==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA197_347==LOR) && (synpred4_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA197_347==LT) && (synpred4_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA197_347==GT) && (synpred4_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA197_347==LE) && (synpred4_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA197_347==GE) && (synpred4_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA197_347==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA197_347==IS) && (synpred4_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA197_347==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA197_347==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA197_347==BAND) && (synpred4_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA197_347==BOR) && (synpred4_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA197_347==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA197_347==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA197_347==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA197_347==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA197_347==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA197_347==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA197_347==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA197_347==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA197_347==FOR) && (synpred4_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA197_347==EOF) && (synpred4_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA197_347==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA197_347==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA197_347==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA197_347==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA197_347==AS) && (synpred4_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA197_347==FROM) && (synpred4_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA197_347==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA197_347==ALL) && (synpred4_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA197_347==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA197_347==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA197_347==ASC) && (synpred4_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA197_347==DESC) && (synpred4_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA197_347==THEN) && (synpred4_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA197_347==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA197_347==END) && (synpred4_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA197_347==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA197_347==COLON) && (synpred4_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA197_347==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA197_347==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA197_347==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA197_347==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA197_347==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA197_347==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA197_347==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA197_347==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA197_347==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA197_347==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA197_347==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA197_347==DOT) && (synpred4_EsperEPL2Grammar())) {s = 909;}

                         
                        input.seek(index197_347);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA197_451 = input.LA(1);

                         
                        int index197_451 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_451==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA197_451==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA197_451==LPAREN) ) {s = 964;}

                        else if ( (LA197_451==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA197_451==STAR) && (synpred4_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA197_451==DIV) && (synpred4_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA197_451==MOD) && (synpred4_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA197_451==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA197_451==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA197_451==LOR) && (synpred4_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA197_451==LT) && (synpred4_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA197_451==GT) && (synpred4_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA197_451==LE) && (synpred4_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA197_451==GE) && (synpred4_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA197_451==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA197_451==IS) && (synpred4_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA197_451==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA197_451==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA197_451==BAND) && (synpred4_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA197_451==BOR) && (synpred4_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA197_451==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA197_451==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA197_451==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA197_451==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA197_451==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA197_451==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA197_451==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA197_451==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA197_451==FOR) && (synpred4_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA197_451==EOF) && (synpred4_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA197_451==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA197_451==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA197_451==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA197_451==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA197_451==AS) && (synpred4_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA197_451==FROM) && (synpred4_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA197_451==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA197_451==ALL) && (synpred4_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA197_451==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA197_451==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA197_451==ASC) && (synpred4_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA197_451==DESC) && (synpred4_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA197_451==THEN) && (synpred4_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA197_451==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA197_451==END) && (synpred4_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA197_451==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA197_451==COLON) && (synpred4_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA197_451==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA197_451==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA197_451==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA197_451==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA197_451==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA197_451==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA197_451==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA197_451==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA197_451==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA197_451==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA197_451==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA197_451==DOT) ) {s = 1020;}

                         
                        input.seek(index197_451);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA197_452 = input.LA(1);

                         
                        int index197_452 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_452==DOT) ) {s = 1021;}

                        else if ( (LA197_452==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA197_452==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA197_452==LPAREN) ) {s = 1024;}

                        else if ( (LA197_452==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA197_452==STAR) && (synpred4_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA197_452==DIV) && (synpred4_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA197_452==MOD) && (synpred4_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA197_452==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA197_452==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA197_452==LOR) && (synpred4_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA197_452==LT) && (synpred4_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA197_452==GT) && (synpred4_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA197_452==LE) && (synpred4_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA197_452==GE) && (synpred4_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA197_452==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA197_452==IS) && (synpred4_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA197_452==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA197_452==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA197_452==BAND) && (synpred4_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA197_452==BOR) && (synpred4_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA197_452==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA197_452==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA197_452==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA197_452==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA197_452==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA197_452==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA197_452==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA197_452==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA197_452==FOR) && (synpred4_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA197_452==EOF) && (synpred4_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA197_452==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA197_452==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA197_452==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA197_452==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA197_452==AS) && (synpred4_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA197_452==FROM) && (synpred4_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA197_452==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA197_452==ALL) && (synpred4_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA197_452==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA197_452==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA197_452==ASC) && (synpred4_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA197_452==DESC) && (synpred4_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA197_452==THEN) && (synpred4_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA197_452==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA197_452==END) && (synpred4_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA197_452==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA197_452==COLON) && (synpred4_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA197_452==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA197_452==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA197_452==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA197_452==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA197_452==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA197_452==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA197_452==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA197_452==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA197_452==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA197_452==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA197_452==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1079;}

                         
                        input.seek(index197_452);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA197_453 = input.LA(1);

                         
                        int index197_453 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_453==LPAREN) ) {s = 1080;}

                        else if ( (LA197_453==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA197_453==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA197_453==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA197_453==STAR) && (synpred4_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA197_453==DIV) && (synpred4_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA197_453==MOD) && (synpred4_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA197_453==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA197_453==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA197_453==LOR) && (synpred4_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA197_453==LT) && (synpred4_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA197_453==GT) && (synpred4_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA197_453==LE) && (synpred4_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA197_453==GE) && (synpred4_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA197_453==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA197_453==IS) && (synpred4_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA197_453==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA197_453==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA197_453==BAND) && (synpred4_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA197_453==BOR) && (synpred4_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA197_453==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA197_453==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA197_453==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA197_453==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA197_453==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA197_453==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA197_453==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA197_453==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA197_453==FOR) && (synpred4_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA197_453==EOF) && (synpred4_EsperEPL2Grammar())) {s = 1109;}

                        else if ( (LA197_453==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA197_453==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA197_453==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA197_453==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA197_453==AS) && (synpred4_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA197_453==FROM) && (synpred4_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA197_453==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA197_453==ALL) && (synpred4_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA197_453==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA197_453==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA197_453==ASC) && (synpred4_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA197_453==DESC) && (synpred4_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA197_453==THEN) && (synpred4_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA197_453==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA197_453==END) && (synpred4_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA197_453==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA197_453==COLON) && (synpred4_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA197_453==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA197_453==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA197_453==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA197_453==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA197_453==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA197_453==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA197_453==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA197_453==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA197_453==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA197_453==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA197_453==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA197_453==DOT) && (synpred4_EsperEPL2Grammar())) {s = 1138;}

                         
                        input.seek(index197_453);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA197_454 = input.LA(1);

                         
                        int index197_454 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_454==LPAREN) ) {s = 1139;}

                        else if ( (LA197_454==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA197_454==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA197_454==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA197_454==STAR) && (synpred4_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA197_454==DIV) && (synpred4_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA197_454==MOD) && (synpred4_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA197_454==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA197_454==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA197_454==LOR) && (synpred4_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA197_454==LT) && (synpred4_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA197_454==GT) && (synpred4_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA197_454==LE) && (synpred4_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA197_454==GE) && (synpred4_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA197_454==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA197_454==IS) && (synpred4_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA197_454==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA197_454==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA197_454==BAND) && (synpred4_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA197_454==BOR) && (synpred4_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA197_454==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA197_454==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA197_454==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA197_454==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA197_454==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA197_454==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA197_454==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA197_454==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA197_454==FOR) && (synpred4_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA197_454==EOF) && (synpred4_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA197_454==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA197_454==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA197_454==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA197_454==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA197_454==AS) && (synpred4_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA197_454==FROM) && (synpred4_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA197_454==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA197_454==ALL) && (synpred4_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA197_454==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA197_454==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA197_454==ASC) && (synpred4_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA197_454==DESC) && (synpred4_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA197_454==THEN) && (synpred4_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA197_454==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA197_454==END) && (synpred4_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA197_454==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA197_454==COLON) && (synpred4_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA197_454==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA197_454==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA197_454==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA197_454==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA197_454==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA197_454==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA197_454==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA197_454==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA197_454==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA197_454==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA197_454==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA197_454==DOT) && (synpred4_EsperEPL2Grammar())) {s = 1197;}

                         
                        input.seek(index197_454);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA197_642 = input.LA(1);

                         
                        int index197_642 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_642);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA197_648 = input.LA(1);

                         
                        int index197_648 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_648);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA197_676 = input.LA(1);

                         
                        int index197_676 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_676);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA197_732 = input.LA(1);

                         
                        int index197_732 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_732);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA197_733 = input.LA(1);

                         
                        int index197_733 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_733);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA197_736 = input.LA(1);

                         
                        int index197_736 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_736);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA197_792 = input.LA(1);

                         
                        int index197_792 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_792);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA197_851 = input.LA(1);

                         
                        int index197_851 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_851);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA197_930 = input.LA(1);

                         
                        int index197_930 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_930);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA197_936 = input.LA(1);

                         
                        int index197_936 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_936);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA197_964 = input.LA(1);

                         
                        int index197_964 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_964);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA197_1020 = input.LA(1);

                         
                        int index197_1020 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_1020);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA197_1021 = input.LA(1);

                         
                        int index197_1021 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_1021);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA197_1024 = input.LA(1);

                         
                        int index197_1024 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_1024);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA197_1080 = input.LA(1);

                         
                        int index197_1080 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_1080);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA197_1139 = input.LA(1);

                         
                        int index197_1139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_1139);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA197_1218 = input.LA(1);

                         
                        int index197_1218 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_1218);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA197_1224 = input.LA(1);

                         
                        int index197_1224 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_1224);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA197_1270 = input.LA(1);

                         
                        int index197_1270 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_1270);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA197_1276 = input.LA(1);

                         
                        int index197_1276 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 280;}

                         
                        input.seek(index197_1276);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 197, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1606 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000002000000A40L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1611 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1629 = new BitSet(new long[]{0x0040020008000010L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1635 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1665 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1695 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0080000000000000L,0x200000C5200C8440L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1751 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1755 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0080000000000000L,0x200000E5200C8440L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1809 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1836 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1867 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0080000000000000L,0x200000C5200C8000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1908 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0080000000000000L,0x200000E5200C8040L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum1965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum1988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum1999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2040 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0080000000000000L,0x200000C7200C8020L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2046 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0080000000000000L,0x200000C5200C8000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2088 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0080000000000000L,0x200000E7200C8060L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2094 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0080000000000000L,0x200000E5200C8040L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2140 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2145 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2150 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2155 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2160 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2165 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2170 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2187 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2190 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2196 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2199 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2203 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2206 = new BitSet(new long[]{0x0104300000010002L,0x0000004800000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2210 = new BitSet(new long[]{0x0104300000010002L,0x0000000800000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2216 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2219 = new BitSet(new long[]{0x0104300000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2226 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2229 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2232 = new BitSet(new long[]{0x0104200000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2239 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2242 = new BitSet(new long[]{0x0104000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2249 = new BitSet(new long[]{0x0130800080004000L,0x0000080800044000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2252 = new BitSet(new long[]{0x0100000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2259 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2262 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2265 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420008040L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2292 = new BitSet(new long[]{0x0040000008000000L,0x000000200000A000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2301 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2304 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2361 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2365 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2410 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2414 = new BitSet(new long[]{0x0000000000020000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_AS_in_updateExpr2417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2433 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2435 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2438 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2440 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2448 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2498 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2500 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2506 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2508 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2511 = new BitSet(new long[]{0x0100300400010002L,0x0000000800000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2515 = new BitSet(new long[]{0x0100300000010002L,0x0000000800000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2521 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2523 = new BitSet(new long[]{0x0100300000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2532 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2534 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2536 = new BitSet(new long[]{0x0100200000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2543 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2545 = new BitSet(new long[]{0x0100000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2552 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2554 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2556 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420008040L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr2565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr2625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2632 = new BitSet(new long[]{0x0000000000020000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr2635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr2651 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2653 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr2656 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2658 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr2665 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr2667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2718 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2720 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr2724 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr2726 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr2731 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr2733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert2764 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert2769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert2775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2817 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2821 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2826 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2868 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2873 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment2900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2902 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2933 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2974 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr2980 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002000000340L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2985 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002000000340L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2990 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002000000340L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr2999 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000240L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3003 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000240L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3007 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000240L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3022 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3041 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3058 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3061 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3150 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F4F7FL,0x0000000000000000L,0x0080000000000000L,0x200000E5200CA040L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3153 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3179 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnList_in_createIndexExpr3189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3226 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3229 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3273 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3278 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_IDENT_in_createColumnListElement3308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3311 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement3316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement3318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3362 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3365 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F4F7FL,0x0000000000000000L,0x0080000000000000L,0x200000E5200CA040L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3367 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3408 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3436 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr3467 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3471 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr3474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3478 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000002240L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr3480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000002240L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr3493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr3504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000440L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr3506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr3509 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr3516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_variantList3608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000002040L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3610 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STAR_in_variantListElement3637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement3643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3668 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3674 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr3685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr3687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr3689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList3723 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_columnList3726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_columnList3728 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause3766 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause3769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause3773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin3787 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin3790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3804 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3807 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin3850 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin3854 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin3858 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin3861 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin3882 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin3896 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin3898 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin3900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent3965 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3968 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent3971 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3974 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair3991 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4052 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4058 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4064 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4070 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4104 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4107 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4110 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4157 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4160 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4224 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4262 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4266 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4270 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4274 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4283 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4288 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_AS_in_streamExpression4295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4299 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4305 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4312 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr4379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_forExpr4383 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr4386 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA640L});
    public static final BitSet FOLLOW_expressionList_in_forExpr4388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr4391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog4427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog4441 = new BitSet(new long[]{0x0000000000000000L,0x0000028000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog4447 = new BitSet(new long[]{0x0000000000000000L,0x0000028000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog4454 = new BitSet(new long[]{0x0000800000000000L,0x0000080000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog4459 = new BitSet(new long[]{0x0000800000000000L,0x0000080000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4465 = new BitSet(new long[]{0x0000800000000000L,0x0000080000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog4471 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog4477 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4527 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4529 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4531 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4534 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4536 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4565 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4567 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4570 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4597 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4600 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4636 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000240L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4682 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4686 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4690 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4694 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4698 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval4738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval4740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration4771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000240L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000240L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested4849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000240L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested4853 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000001A000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested4858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested4864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested4870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom4909 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000001A000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom4915 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom4921 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4927 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine4977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4979 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine4982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5011 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5013 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5042 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000A40L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5173 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5176 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA640L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5242 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DAE40L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5286 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5289 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5291 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5326 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr5329 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5331 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_expression_in_orderByListElement5356 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement5361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement5365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause5403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit5441 = new BitSet(new long[]{0x0030800080004002L,0x0000000000044000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit5456 = new BitSet(new long[]{0x0000000080004002L,0x0000000000040000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit5460 = new BitSet(new long[]{0x0000000080004002L,0x0000000000040000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit5464 = new BitSet(new long[]{0x0000000080004002L,0x0000000000040000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit5468 = new BitSet(new long[]{0x0000000080004002L,0x0000000000040000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5536 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5542 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5598 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_outputLimit5600 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter5755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter5758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter5762 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter5764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5810 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5816 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit5823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420008040L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit5829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420008040L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet5893 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DAA40L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5897 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DAA40L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5901 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DAA40L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5905 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DAA40L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5909 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DAA40L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5914 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DAA40L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet5920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause5950 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_whenClause5953 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause5955 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_whenClause5958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause5971 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_elseClause5974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression5987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6001 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6004 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6007 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6021 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_caseExpression6023 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6025 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6028 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6066 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6071 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6073 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6105 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6110 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6112 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6144 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000304000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6149 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6152 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6155 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6159 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000304000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6180 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6196 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00080L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6209 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6227 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6241 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6243 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6257 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6271 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6301 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00080L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression6318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression6324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression6330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression6336 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA640L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression6338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression6341 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00080L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6346 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00080L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6474 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000F000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6506 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6510 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6514 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6518 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000F000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression6559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression6565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression6571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6577 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA640L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression6579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6582 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000F000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000F000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression6683 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A00L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6722 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression6728 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000021420L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression6753 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression6782 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001420L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression6816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression6941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression6987 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression6989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7039 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7041 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7098 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7187 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7193 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7199 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7201 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7242 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020008000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7247 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7250 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7254 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020008000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7268 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0002000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7273 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7276 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7279 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7283 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0002000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7298 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression7313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression7318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression7323 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_unaryExpression7326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression7328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression7346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression7352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression7357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression7362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression7379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression7401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression7423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression7425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr7458 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr7464 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr7467 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr7470 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr7477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr7480 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7488 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr7524 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7531 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7536 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr7543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7547 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr7560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression7604 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E7200DA240L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression7610 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression7619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc7642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7645 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7649 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7654 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc7666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7669 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7673 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7678 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc7690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7693 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7705 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7710 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc7725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc7742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7745 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7749 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7754 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc7766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7769 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7773 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7778 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc7790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7793 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7797 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7802 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc7814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc7819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc7824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7827 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7832 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7838 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc7851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7854 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7860 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc7873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc7879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7881 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc7896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7899 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc7923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7926 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7929 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_AS_in_builtinFunc7937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc7949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7952 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7963 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation7985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation7987 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_ALL_in_firstAggregation7992 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_DISTINCT_in_firstAggregation7998 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_firstAggregation8002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation8004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation8030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation8032 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_ALL_in_lastAggregation8037 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_DISTINCT_in_lastAggregation8043 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_lastAggregation8047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation8049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc8076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_MIN_in_maxFunc8081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc8085 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_maxFunc8088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8091 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_maxFunc8094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8097 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_maxFunc8100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc8107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction8126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction8131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction8144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DOT_in_libFunction8146 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction8150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction8152 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA640L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction8155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction8159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent8189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent8196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent8208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs8226 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs8231 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8235 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs8238 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8241 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8255 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList8257 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200D8240L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression8288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8300 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression8305 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000A40L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8307 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8346 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression8351 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000A40L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8353 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8385 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression8390 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000A40L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8392 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression8427 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000A40L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8431 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression8436 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000A40L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression8503 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000A40L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression8509 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000A40L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression8517 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000A40L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression8523 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000A40L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression8532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList8647 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList8652 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList8658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom8681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix8696 = new BitSet(new long[]{0x0000000000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix8702 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000A40L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix8704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix8706 = new BitSet(new long[]{0x0000000000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix8713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix8715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix8723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix8725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression8787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression8791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression8808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_AT_in_observerExpression8819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression8822 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DAE40L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression8824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression8827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression8876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression8878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression8881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression8883 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DAE40L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression8887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression8891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression8904 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression8907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression8909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange8922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000400000100L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000021100L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400001000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange8969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000001100L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange9027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400001000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange9031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange9091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange9128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange9130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange9134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange9143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange9147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange9158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression9343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression9345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression9354 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A00L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression9365 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA640L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression9367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression9370 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression9382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9427 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9430 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic9460 = new BitSet(new long[]{0x803801E80FFC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic9463 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic9465 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic9467 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic9471 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic9474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic9476 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic9481 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic9483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic9487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9537 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList9540 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9543 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement9569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement9585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement9590 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement9593 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector9643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector9645 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector9648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression9699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression9701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression9710 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A00L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression9721 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA640L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression9723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression9726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression9738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier9793 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier9812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier9816 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy9861 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy9896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy9900 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_expressionList9942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_expressionList9945 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DA240L});
    public static final BitSet FOLLOW_expression_in_expressionList9948 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9976 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList9979 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0080000000000000L,0x200000E5200DAA40L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9982 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime10008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime10019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime10030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime10041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime10052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime10064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime10075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime10087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime10099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime10104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable10115 = new BitSet(new long[]{0x0600000000000002L,0x000000001C000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable10120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable10124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar10193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand10213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand10226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand10238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand10240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_number_in_frequencyOperand10243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand10247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand10249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand10298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand10307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_number_in_rangeOperand10310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator10430 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator10434 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator10436 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator10439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator10487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator10491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator10493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator10496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList10543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C42001A040L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001020L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList10548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C42001A040L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001020L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList10554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter10576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter10582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter10587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10603 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DOT_in_eventProperty10606 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10608 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010A00L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic10643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic10647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic10649 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic10668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic10682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10824 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent10836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent10838 = new BitSet(new long[]{0x803801E807FC4422L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000003000000040L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent10881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent10897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent10904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent10911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent10929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent10936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent10943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent10950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent10957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent10964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent10971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent10978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent10985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent10992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent10999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent11006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent11020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent11034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent11041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent11048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent11055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent11062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent11069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent11076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent11083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent11090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent11097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent11104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent11111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent11120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent11129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent11136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent11143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent11150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent11157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent11164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent11171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent11178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent11185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr11206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent11229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11262 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11264 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11267 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11270 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11279 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11281 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11284 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11293 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11304 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420018040L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart11350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart11354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_substitution_in_dayPart11356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart11360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart11364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart11413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart11417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_substitution_in_hourPart11419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart11423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart11427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart11476 = new BitSet(new long[]{0x0000000000200000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart11480 = new BitSet(new long[]{0x0000000000200000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart11482 = new BitSet(new long[]{0x0000000000200000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart11494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart11544 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart11548 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart11550 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart11558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart11562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart11612 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart11616 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart11618 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number11685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number11702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number11719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number11736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution11757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant11776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant11783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant11796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant11816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant11836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant11858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420008000L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant11864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x000000C420008000L});
    public static final BitSet FOLLOW_number_in_numberconstant11868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant11897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar8121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar9580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar10003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar10014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar10025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar10036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar10047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar10059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar10070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar10081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar10094 = new BitSet(new long[]{0x0000000000000002L});

}