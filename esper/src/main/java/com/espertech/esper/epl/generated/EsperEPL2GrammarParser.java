  /*
 * *************************************************************************************
 *  Copyright (C) 2008 EsperTech, Inc. All rights reserved.                            *
 *  http://esper.codehaus.org                                                          *
 *  http://www.espertech.com                                                           *
 *  ---------------------------------------------------------------------------------- *
 *  The software in this package is published under the terms of the GPL license       *
 *  a copy of which has been included with this distribution in the license.txt file.  *
 * *************************************************************************************
 */

package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "EXPRESSIONDECL", "NEWKW", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_IS_EXPR", "EVAL_ISNOT_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "ACCESS_AGG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_VAR", "VARIANT_LIST", "MERGE_UNM", "MERGE_MAT", "MERGE_UPD", "MERGE_INS", "MERGE_DEL", "NEW_ITEM", "AGG_FILTER_EXPR", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "IDENT", "LCURLY", "RCURLY", "LPAREN", "RPAREN", "GOES", "COMMA", "EQUALS", "DOT", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "NUM_INT", "FOLLOWED_BY", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ATCHAR", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=188;
    public static final int FLOAT_SUFFIX=362;
    public static final int STAR=305;
    public static final int DOT_EXPR=197;
    public static final int NUMERIC_PARAM_LIST=126;
    public static final int MOD=323;
    public static final int ISTREAM=60;
    public static final int LIB_FUNC_CHAIN=196;
    public static final int OUTERJOIN_EXPR=170;
    public static final int CREATE_COL_TYPE_LIST=250;
    public static final int BSR=345;
    public static final int MERGE_INS=269;
    public static final int MONTH_PART=202;
    public static final int LIB_FUNCTION=195;
    public static final int EOF=-1;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int FULL_OUTERJOIN_EXPR=174;
    public static final int MATCHREC_PATTERN_CONCAT=284;
    public static final int INC=338;
    public static final int LNOT=334;
    public static final int RPAREN=298;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=310;
    public static final int BSR_ASSIGN=346;
    public static final int CAST_EXPR=229;
    public static final int MATCHES=116;
    public static final int USING=120;
    public static final int STREAM_EXPR=169;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=315;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=135;
    public static final int LAST_AGGREG=257;
    public static final int GOES=299;
    public static final int REGEXP=9;
    public static final int MATCHED=122;
    public static final int FOLLOWED_BY_EXPR=129;
    public static final int NEWKW=124;
    public static final int FOLLOWED_BY=325;
    public static final int HOUR_PART=205;
    public static final int RBRACK=304;
    public static final int MATCHREC_PATTERN_NESTED=286;
    public static final int MATCH_UNTIL_RANGE_CLOSED=248;
    public static final int GE=319;
    public static final int METHOD_JOIN_EXPR=244;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=134;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=133;
    public static final int MINUS_ASSIGN=339;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=145;
    public static final int NUM_DOUBLE=280;
    public static final int INSERTINTO_STREAM_NAME=217;
    public static final int LCURLY=295;
    public static final int UNARY_MINUS=198;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=215;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=143;
    public static final int WS=354;
    public static final int SUBSELECT_GROUP_EXPR=221;
    public static final int ON_SELECT_INSERT_EXPR=239;
    public static final int YEAR_PART=201;
    public static final int FOLLOWED_BY_ITEM=130;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=329;
    public static final int EXPRCOL=192;
    public static final int SL_COMMENT=355;
    public static final int NULL_TYPE=279;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=246;
    public static final int GT=317;
    public static final int BNOT=335;
    public static final int WHERE_EXPR=154;
    public static final int EVAL_IS_EXPR=161;
    public static final int END=33;
    public static final int LAND=352;
    public static final int INNERJOIN_EXPR=171;
    public static final int NOT_REGEXP=212;
    public static final int MATCH_UNTIL_EXPR=245;
    public static final int EVENT_PROP_EXPR=178;
    public static final int LBRACK=303;
    public static final int MERGE_UPD=268;
    public static final int VIEW_EXPR=151;
    public static final int ANNOTATION=253;
    public static final int LONG_TYPE=274;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=136;
    public static final int MATCHREC_PATTERN=282;
    public static final int ON_MERGE_EXPR=238;
    public static final int ATCHAR=328;
    public static final int TIMEPERIOD_SEC=100;
    public static final int TICKED_STRING_LITERAL=330;
    public static final int ON_SELECT_EXPR=236;
    public static final int MINUTE_PART=206;
    public static final int PATTERN_NOT_EXPR=132;
    public static final int SQL_NE=314;
    public static final int SUM=18;
    public static final int HexDigit=360;
    public static final int UPDATE_EXPR=260;
    public static final int LPAREN=297;
    public static final int IN_SUBSELECT_EXPR=223;
    public static final int AT=86;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=106;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=288;
    public static final int NOT_IN_RANGE=219;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int OFFSET=110;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=207;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=112;
    public static final int IDENT=294;
    public static final int DATABASE_JOIN_EXPR=153;
    public static final int BXOR=313;
    public static final int PLUS=307;
    public static final int CASE2=29;
    public static final int MERGE_MAT=267;
    public static final int TIMEPERIOD_DAY=94;
    public static final int CREATE_SCHEMA_EXPR=262;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=181;
    public static final int CREATE_INDEX_EXPR=230;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int ACCESS_AGG=259;
    public static final int EVAL_NOTEQUALS_EXPR=160;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=247;
    public static final int CREATE_VARIABLE_EXPR=243;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=289;
    public static final int BY=43;
    public static final int RIGHT_OUTERJOIN_EXPR=173;
    public static final int NUMBERSETSTAR=252;
    public static final int LAST_OPERATOR=226;
    public static final int PATTERN_FILTER_EXPR=131;
    public static final int MERGE=121;
    public static final int FOLLOWMAX_END=327;
    public static final int MERGE_UNM=266;
    public static final int EVAL_AND_EXPR=157;
    public static final int LEFT_OUTERJOIN_EXPR=172;
    public static final int EPL_EXPR=281;
    public static final int GROUP_BY_EXPR=175;
    public static final int SET=83;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=179;
    public static final int MINUS=321;
    public static final int SEMI=353;
    public static final int INDEXCOL=193;
    public static final int STAR_ASSIGN=341;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=265;
    public static final int FIRST_AGGREG=256;
    public static final int COLON=309;
    public static final int EVAL_EQUALS_GROUP_EXPR=163;
    public static final int BAND_ASSIGN=351;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=189;
    public static final int NOT_IN_SET=209;
    public static final int VALUE_NULL=108;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=182;
    public static final int SL=347;
    public static final int NOT_IN_SUBSELECT_EXPR=224;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=149;
    public static final int SR=343;
    public static final int RCURLY=296;
    public static final int PLUS_ASSIGN=337;
    public static final int EXISTS_SUBSELECT_EXPR=222;
    public static final int DAY_PART=204;
    public static final int EVENT_FILTER_IN=144;
    public static final int DIV=322;
    public static final int WEEK_PART=203;
    public static final int EXPRESSIONDECL=123;
    public static final int OBJECT_PARAM_ORDERED_EXPR=128;
    public static final int OctalEscape=359;
    public static final int MILLISECOND_PART=208;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=166;
    public static final int LOR=320;
    public static final int CAST=79;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=216;
    public static final int EXPONENT=361;
    public static final int LT=316;
    public static final int PATTERN_INCL_EXPR=152;
    public static final int WHILE=119;
    public static final int ORDER_BY_EXPR=176;
    public static final int BOOL_TYPE=278;
    public static final int NEW_ITEM=271;
    public static final int MOD_ASSIGN=342;
    public static final int ANNOTATION_ARRAY=254;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=225;
    public static final int EQUALS=301;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=336;
    public static final int WINDOW_AGGREG=258;
    public static final int SL_ASSIGN=348;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=287;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=237;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=200;
    public static final int CREATE_COL_TYPE=251;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=164;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int EVAL_ISNOT_EXPR=162;
    public static final int FLOAT_TYPE=275;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int EVENT_FILTER_BETWEEN=146;
    public static final int ANNOTATION_VALUE=255;
    public static final int SUBSELECT_EXPR=220;
    public static final int CONCAT=194;
    public static final int NUMERIC_PARAM_RANGE=125;
    public static final int CLASS_IDENT=148;
    public static final int MATCHREC_PATTERN_ALTER=285;
    public static final int ON_EXPR=233;
    public static final int CREATE_WINDOW_EXPR=231;
    public static final int PROPERTY_SELECTION_STREAM=138;
    public static final int ON_DELETE_EXPR=235;
    public static final int NUM_LONG=331;
    public static final int ON=41;
    public static final int TIME_PERIOD=199;
    public static final int DOUBLE_TYPE=276;
    public static final int DELETE=81;
    public static final int INT_TYPE=273;
    public static final int MATCHREC_PARTITION=293;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=156;
    public static final int ORDER_ELEMENT_EXPR=177;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=228;
    public static final int UNTIL=85;
    public static final int STRING_TYPE=277;
    public static final int NUM_INT=324;
    public static final int MATCHREC_DEFINE_ITEM=290;
    public static final int ON_SET_EXPR=242;
    public static final int STDDEV=24;
    public static final int NUM_FLOAT=332;
    public static final int ON_EXPR_FROM=241;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=357;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=137;
    public static final int WEEKDAY_OPERATOR=227;
    public static final int DEC=340;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=349;
    public static final int NUMERIC_PARAM_FREQUENCY=127;
    public static final int SNAPSHOT=82;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=187;
    public static final int EVENT_FILTER_PARAM=141;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=184;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=234;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int EVENT_FILTER_RANGE=142;
    public static final int ML_COMMENT=356;
    public static final int INDEX=87;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=183;
    public static final int BOR_ASSIGN=350;
    public static final int COMMA=300;
    public static final int WHEN_LIMIT_EXPR=190;
    public static final int IS=42;
    public static final int PARTITION=115;
    public static final int TIMEPERIOD_LIMIT_EXPR=186;
    public static final int SOME=49;
    public static final int EQUAL=333;
    public static final int BOR=306;
    public static final int MATCHREC_MEASURE_ITEM=292;
    public static final int ALL=47;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int CREATE_SCHEMA_EXPR_VAR=264;
    public static final int EVENT_FILTER_NOT_BETWEEN=147;
    public static final int IN_RANGE=218;
    public static final int DOT=302;
    public static final int MATCHREC_MEASURES=291;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=139;
    public static final int INSERTINTO_EXPR=191;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=155;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=249;
    public static final int MERGE_DEL=270;
    public static final int EVAL_EQUALS_EXPR=159;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=211;
    public static final int EVENT_LIMIT_EXPR=185;
    public static final int NOT_BETWEEN=210;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int EVAL_OR_EXPR=158;
    public static final int ON_SELECT_INSERT_OUTPUT=240;
    public static final int AGG_FILTER_EXPR=272;
    public static final int MEASURES=113;
    public static final int AFTER=117;
    public static final int BAND=312;
    public static final int MATCHREC_PATTERN_ATOM=283;
    public static final int QUOTED_STRING_LITERAL=311;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=308;
    public static final int OBSERVER_EXPR=150;
    public static final int CREATE_SCHEMA_EXPR_QUAL=263;
    public static final int EVENT_FILTER_IDENT=140;
    public static final int EVENT_PROP_MAPPED=180;
    public static final int UnicodeEscape=358;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=213;
    public static final int FOLLOWMAX_BEGIN=326;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int SELECTION_ELEMENT_EXPR=167;
    public static final int CREATE_WINDOW_SELECT_EXPR=232;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=261;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=168;
    public static final int SR_ASSIGN=344;
    public static final int LE=318;
    public static final int DBFROM_CLAUSE=214;
    public static final int EVAL_IDENT=165;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF4=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl2 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression3 = null;
        CommonTree EOF4_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=3;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==ATCHAR) ) {
                    alt1=1;
                }
                else if ( (LA1_0==EXPRESSIONDECL) ) {
                    alt1=2;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1778);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startPatternExpressionRule1782);
            	    expressionDecl2=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionDecl2.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1788);
            patternExpression3=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression3.getTree());
            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1792); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum5 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl6 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression7 = null;
        CommonTree EOF8_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==ATCHAR) ) {
                    alt2=1;
                }
                else if ( (LA2_0==EXPRESSIONDECL) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1807);
            	    annotationEnum5=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum5.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startEPLExpressionRule1811);
            	    expressionDecl6=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl6.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1817);
            eplExpression7=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF8);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                while ( stream_expressionDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                }
                stream_expressionDecl.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF10=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty9 = null;
        CommonTree EOF10_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1850);
            eventProperty9=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty9.getTree());
            EOF10=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1854); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDecl_return expressionDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDecl_return retval = new EsperEPL2GrammarParser.expressionDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EXPRESSIONDECL11=null;
        Token LCURLY12=null;
        Token RCURLY15=null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl13 = null;
        EsperEPL2GrammarParser.expression_return expression14 = null;
        CommonTree i_tree=null;
        CommonTree EXPRESSIONDECL11_tree=null;
        CommonTree LCURLY12_tree=null;
        CommonTree RCURLY15_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_EXPRESSIONDECL=new RewriteRuleTokenStream(adaptor,"token EXPRESSIONDECL");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionLambdaDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionLambdaDecl");
        try {
            {
            EXPRESSIONDECL11=(Token)match(input,EXPRESSIONDECL,FOLLOW_EXPRESSIONDECL_in_expressionDecl1873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXPRESSIONDECL.add(EXPRESSIONDECL11);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDecl1877); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LCURLY12=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_expressionDecl1879); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY12);
            int alt3=2;
            int LA3_0 = input.LA(1);
            if ( (LA3_0==IDENT) ) {
                int LA3_1 = input.LA(2);
                if ( (LA3_1==GOES) ) {
                    alt3=1;
                }
            }
            else if ( (LA3_0==LPAREN) ) {
                int LA3_2 = input.LA(2);
                if ( (LA3_2==IDENT) ) {
                    int LA3_104 = input.LA(3);
                    if ( (LA3_104==RPAREN) ) {
                        int LA3_199 = input.LA(4);
                        if ( (LA3_199==GOES) ) {
                            alt3=1;
                        }
                    }
                    else if ( (LA3_104==COMMA) ) {
                        alt3=1;
                    }
                }
            }
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_expressionDecl1881);
                    expressionLambdaDecl13=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionLambdaDecl.add(expressionLambdaDecl13.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_expressionDecl1884);
            expression14=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression14.getTree());
            RCURLY15=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_expressionDecl1886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY15);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EXPRESSIONDECL.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_expressionLambdaDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionLambdaDecl.nextTree());
                }
                stream_expressionLambdaDecl.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionLambdaDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionLambdaDecl_return retval = new EsperEPL2GrammarParser.expressionLambdaDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LPAREN16=null;
        Token RPAREN18=null;
        Token GOES19=null;
        EsperEPL2GrammarParser.columnList_return columnList17 = null;
        CommonTree i_tree=null;
        CommonTree LPAREN16_tree=null;
        CommonTree RPAREN18_tree=null;
        CommonTree GOES19_tree=null;
        RewriteRuleTokenStream stream_GOES=new RewriteRuleTokenStream(adaptor,"token GOES");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==IDENT) ) {
                alt4=1;
            }
            else if ( (LA4_0==LPAREN) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);
                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionLambdaDecl1920); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    {
                    LPAREN16=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionLambdaDecl1925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN16);
                    pushFollow(FOLLOW_columnList_in_expressionLambdaDecl1927);
                    columnList17=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList17.getTree());
                    RPAREN18=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionLambdaDecl1929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN18);
                    }
                    }
                    break;
            }
            GOES19=(Token)match(input,GOES,FOLLOW_GOES_in_expressionLambdaDecl1933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GOES.add(GOES19);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GOES.nextNode(), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal20=null;
        Token char_literal22=null;
        Token char_literal25=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier21 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum23 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum24 = null;
        CommonTree char_literal20_tree=null;
        CommonTree char_literal22_tree=null;
        CommonTree char_literal25_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal20=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationNoEnum1968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(char_literal20);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1970);
            classIdentifier21=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier21.getTree());
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( (LA6_0==LPAREN) ) {
                int LA6_1 = input.LA(2);
                if ( (LA6_1==IDENT) ) {
                    int LA6_10 = input.LA(3);
                    if ( (LA6_10==EQUALS) ) {
                        int LA6_31 = input.LA(4);
                        if ( ((LA6_31>=BOOLEAN_TRUE && LA6_31<=VALUE_NULL)||LA6_31==NUM_DOUBLE||LA6_31==LCURLY||LA6_31==PLUS||(LA6_31>=STRING_LITERAL && LA6_31<=QUOTED_STRING_LITERAL)||LA6_31==MINUS||LA6_31==NUM_INT||LA6_31==ATCHAR||(LA6_31>=NUM_LONG && LA6_31<=NUM_FLOAT)) ) {
                            alt6=1;
                        }
                    }
                }
                else if ( ((LA6_1>=BOOLEAN_TRUE && LA6_1<=VALUE_NULL)||LA6_1==NUM_DOUBLE||LA6_1==LCURLY||LA6_1==RPAREN||LA6_1==PLUS||(LA6_1>=STRING_LITERAL && LA6_1<=QUOTED_STRING_LITERAL)||LA6_1==MINUS||LA6_1==NUM_INT||LA6_1==ATCHAR||(LA6_1>=NUM_LONG && LA6_1<=NUM_FLOAT)) ) {
                    alt6=1;
                }
            }
            switch (alt6) {
                case 1 :
                    {
                    char_literal22=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal22);
                    int alt5=3;
                    int LA5_0 = input.LA(1);
                    if ( (LA5_0==IDENT) ) {
                        alt5=1;
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==LCURLY||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==NUM_INT||LA5_0==ATCHAR||(LA5_0>=NUM_LONG && LA5_0<=NUM_FLOAT)) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1978);
                            elementValuePairsNoEnum23=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum23.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1982);
                            elementValueNoEnum24=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum24.getTree());
                            }
                            break;
                    }
                    char_literal25=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal25);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal26=null;
        Token char_literal28=null;
        Token char_literal31=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier27 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum29 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;
        CommonTree char_literal26_tree=null;
        CommonTree char_literal28_tree=null;
        CommonTree char_literal31_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal26=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationEnum2028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(char_literal26);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum2030);
            classIdentifier27=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier27.getTree());
            int alt8=2;
            int LA8_0 = input.LA(1);
            if ( (LA8_0==LPAREN) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    {
                    char_literal28=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum2034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal28);
                    int alt7=3;
                    int LA7_0 = input.LA(1);
                    if ( (LA7_0==IDENT) ) {
                        int LA7_1 = input.LA(2);
                        if ( (LA7_1==EQUALS) ) {
                            alt7=1;
                        }
                        else if ( (LA7_1==RPAREN||LA7_1==DOT) ) {
                            alt7=2;
                        }
                    }
                    else if ( ((LA7_0>=BOOLEAN_TRUE && LA7_0<=VALUE_NULL)||LA7_0==NUM_DOUBLE||LA7_0==LCURLY||LA7_0==PLUS||(LA7_0>=STRING_LITERAL && LA7_0<=QUOTED_STRING_LITERAL)||LA7_0==MINUS||LA7_0==NUM_INT||LA7_0==ATCHAR||(LA7_0>=TICKED_STRING_LITERAL && LA7_0<=NUM_FLOAT)) ) {
                        alt7=2;
                    }
                    switch (alt7) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum2038);
                            elementValuePairsEnum29=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum29.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum2042);
                            elementValueEnum30=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());
                            }
                            break;
                    }
                    char_literal31=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum2047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal31);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA33=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum32 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum34 = null;
        CommonTree COMMA33_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2088);
            elementValuePairNoEnum32=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum32.getTree());
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);
                if ( (LA9_0==COMMA) ) {
                    alt9=1;
                }
                switch (alt9) {
            	case 1 :
            	    {
            	    COMMA33=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum2091); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2094);
            	    elementValuePairNoEnum34=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum34.getTree());
            	    }
            	    break;
            	default :
            	    break loop9;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA36=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum35 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum37 = null;
        CommonTree COMMA36_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2115);
            elementValuePairEnum35=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum35.getTree());
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);
                if ( (LA10_0==COMMA) ) {
                    alt10=1;
                }
                switch (alt10) {
            	case 1 :
            	    {
            	    COMMA36=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum2118); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2121);
            	    elementValuePairEnum37=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum37.getTree());
            	    }
            	    break;
            	default :
            	    break loop10;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal38=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;
        CommonTree i_tree=null;
        CommonTree char_literal38_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum2144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal38=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum2146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal38);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2148);
            elementValueNoEnum39=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal40=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum41 = null;
        CommonTree i_tree=null;
        CommonTree char_literal40_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal40=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal40);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2189);
            elementValueEnum41=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum41.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum42 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum43 = null;
        EsperEPL2GrammarParser.constant_return constant44 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt11=3;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt11=1;
                }
                break;
            case LCURLY:
                {
                alt11=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt11=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);
                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2220);
                    annotationEnum42=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum42.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2231);
                    elementValueArrayNoEnum43=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum43.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2244);
                    constant44=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant44.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum45 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum46 = null;
        EsperEPL2GrammarParser.constant_return constant47 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier48 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt12=4;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt12=1;
                }
                break;
            case LCURLY:
                {
                alt12=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt12=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt12=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);
                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2267);
                    annotationEnum45=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum45.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2278);
                    elementValueArrayEnum46=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum46.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2291);
                    constant47=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant47.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2299);
                    classIdentifier48=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier48.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal49=null;
        Token char_literal51=null;
        Token char_literal53=null;
        Token char_literal54=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum50 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum52 = null;
        CommonTree char_literal49_tree=null;
        CommonTree char_literal51_tree=null;
        CommonTree char_literal53_tree=null;
        CommonTree char_literal54_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal49=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal49);
            int alt14=2;
            int LA14_0 = input.LA(1);
            if ( ((LA14_0>=BOOLEAN_TRUE && LA14_0<=VALUE_NULL)||LA14_0==NUM_DOUBLE||LA14_0==LCURLY||LA14_0==PLUS||(LA14_0>=STRING_LITERAL && LA14_0<=QUOTED_STRING_LITERAL)||LA14_0==MINUS||LA14_0==NUM_INT||LA14_0==ATCHAR||(LA14_0>=NUM_LONG && LA14_0<=NUM_FLOAT)) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2322);
                    elementValueNoEnum50=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum50.getTree());
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);
                        if ( (LA13_0==COMMA) ) {
                            int LA13_1 = input.LA(2);
                            if ( ((LA13_1>=BOOLEAN_TRUE && LA13_1<=VALUE_NULL)||LA13_1==NUM_DOUBLE||LA13_1==LCURLY||LA13_1==PLUS||(LA13_1>=STRING_LITERAL && LA13_1<=QUOTED_STRING_LITERAL)||LA13_1==MINUS||LA13_1==NUM_INT||LA13_1==ATCHAR||(LA13_1>=NUM_LONG && LA13_1<=NUM_FLOAT)) ) {
                                alt13=1;
                            }
                        }
                        switch (alt13) {
                    	case 1 :
                    	    {
                    	    char_literal51=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2325); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal51);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2327);
                    	    elementValueNoEnum52=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum52.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop13;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt15=2;
            int LA15_0 = input.LA(1);
            if ( (LA15_0==COMMA) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    {
                    char_literal53=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal53);
                    }
                    break;
            }
            char_literal54=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal54);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal55=null;
        Token char_literal57=null;
        Token char_literal59=null;
        Token char_literal60=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum56 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum58 = null;
        CommonTree char_literal55_tree=null;
        CommonTree char_literal57_tree=null;
        CommonTree char_literal59_tree=null;
        CommonTree char_literal60_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal55=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal55);
            int alt17=2;
            int LA17_0 = input.LA(1);
            if ( ((LA17_0>=BOOLEAN_TRUE && LA17_0<=VALUE_NULL)||LA17_0==NUM_DOUBLE||(LA17_0>=IDENT && LA17_0<=LCURLY)||LA17_0==PLUS||(LA17_0>=STRING_LITERAL && LA17_0<=QUOTED_STRING_LITERAL)||LA17_0==MINUS||LA17_0==NUM_INT||LA17_0==ATCHAR||(LA17_0>=TICKED_STRING_LITERAL && LA17_0<=NUM_FLOAT)) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2370);
                    elementValueEnum56=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum56.getTree());
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);
                        if ( (LA16_0==COMMA) ) {
                            int LA16_1 = input.LA(2);
                            if ( ((LA16_1>=BOOLEAN_TRUE && LA16_1<=VALUE_NULL)||LA16_1==NUM_DOUBLE||(LA16_1>=IDENT && LA16_1<=LCURLY)||LA16_1==PLUS||(LA16_1>=STRING_LITERAL && LA16_1<=QUOTED_STRING_LITERAL)||LA16_1==MINUS||LA16_1==NUM_INT||LA16_1==ATCHAR||(LA16_1>=TICKED_STRING_LITERAL && LA16_1<=NUM_FLOAT)) ) {
                                alt16=1;
                            }
                        }
                        switch (alt16) {
                    	case 1 :
                    	    {
                    	    char_literal57=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2373); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal57);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2375);
                    	    elementValueEnum58=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum58.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop16;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt18=2;
            int LA18_0 = input.LA(1);
            if ( (LA18_0==COMMA) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    {
                    char_literal59=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal59);
                    }
                    break;
            }
            char_literal60=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2386); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal60);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr61 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr62 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr63 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr64 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr65 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr66 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr67 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr68 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt19=7;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt19=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt19=2;
                    }
                    break;
                case INDEX:
                    {
                    alt19=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt19=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt19=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt19=6;
                }
                break;
            case UPDATE:
                {
                alt19=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);
                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2419);
                    selectExpr61=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr61.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2424);
                    createWindowExpr62=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr62.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2429);
                    createIndexExpr63=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr63.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2434);
                    createVariableExpr64=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr64.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2439);
                    createSchemaExpr65=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr65.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2444);
                    onExpr66=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr66.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2449);
                    updateExpr67=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr67.getTree());
                    }
                    break;
            }
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( (LA20_0==FOR) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2452);
                    forExpr68=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr68.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT69=null;
        Token SELECT71=null;
        Token FROM73=null;
        Token WHERE76=null;
        Token GROUP78=null;
        Token BY79=null;
        Token HAVING81=null;
        Token OUTPUT83=null;
        Token ORDER85=null;
        Token BY86=null;
        Token ROW_LIMIT_EXPR88=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr70 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause72 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause74 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog75 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause77 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr80 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause82 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit84 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr87 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit89 = null;
        CommonTree INSERT69_tree=null;
        CommonTree SELECT71_tree=null;
        CommonTree FROM73_tree=null;
        CommonTree WHERE76_tree=null;
        CommonTree GROUP78_tree=null;
        CommonTree BY79_tree=null;
        CommonTree HAVING81_tree=null;
        CommonTree OUTPUT83_tree=null;
        CommonTree ORDER85_tree=null;
        CommonTree BY86_tree=null;
        CommonTree ROW_LIMIT_EXPR88_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==INSERT) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    INSERT69=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2466); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2469);
                    insertIntoExpr70=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr70.getTree());
                    }
                    break;
            }
            SELECT71=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2475); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2478);
            selectClause72=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause72.getTree());
            FROM73=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2482); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2485);
            fromClause74=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause74.getTree());
            int alt22=2;
            int LA22_0 = input.LA(1);
            if ( (LA22_0==MATCH_RECOGNIZE) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2489);
                    matchRecog75=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog75.getTree());
                    }
                    break;
            }
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==WHERE) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    WHERE76=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2495); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2498);
                    whereClause77=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause77.getTree());
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==GROUP) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    GROUP78=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2505); if (state.failed) return retval;
                    BY79=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2508); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2511);
                    groupByListExpr80=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr80.getTree());
                    }
                    break;
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==HAVING) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    HAVING81=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2518); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2521);
                    havingClause82=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause82.getTree());
                    }
                    break;
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==OUTPUT) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    OUTPUT83=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2528); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2531);
                    outputLimit84=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit84.getTree());
                    }
                    break;
            }
            int alt27=2;
            int LA27_0 = input.LA(1);
            if ( (LA27_0==ORDER) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    {
                    ORDER85=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2538); if (state.failed) return retval;
                    BY86=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2541); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2544);
                    orderByListExpr87=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr87.getTree());
                    }
                    break;
            }
            int alt28=2;
            int LA28_0 = input.LA(1);
            if ( (LA28_0==ROW_LIMIT_EXPR) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR88=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2551); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2554);
                    rowLimit89=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit89.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON90=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr91 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr92 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr93 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr94 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert95 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr96 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr97 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr98 = null;
        CommonTree ON90_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON90=(Token)match(input,ON,FOLLOW_ON_in_onExpr2569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON90);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2571);
            onStreamExpr91=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr91.getTree());
            int alt32=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt32=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt32=2;
                }
                break;
            case SET:
                {
                alt32=3;
                }
                break;
            case UPDATE:
                {
                alt32=4;
                }
                break;
            case MERGE:
                {
                alt32=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);
                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2576);
                    onDeleteExpr92=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr92.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2580);
                    onSelectExpr93=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr93.getTree());
                    int alt31=2;
                    int LA31_0 = input.LA(1);
                    if ( (LA31_0==INSERT) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            {
                            int cnt29=0;
                            loop29:
                            do {
                                int alt29=2;
                                int LA29_0 = input.LA(1);
                                if ( (LA29_0==INSERT) ) {
                                    alt29=1;
                                }
                                switch (alt29) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2583);
                            	    onSelectInsertExpr94=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr94.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt29 >= 1 ) break loop29;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(29, input);
                                        throw eee;
                                }
                                cnt29++;
                            } while (true);
                            int alt30=2;
                            int LA30_0 = input.LA(1);
                            if ( (LA30_0==OUTPUT) ) {
                                alt30=1;
                            }
                            switch (alt30) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2586);
                                    outputClauseInsert95=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert95.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2593);
                    onSetExpr96=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr96.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2597);
                    onUpdateExpr97=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr97.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2601);
                    onMergeExpr98=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr98.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS101=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression99 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression100 = null;
        CommonTree i_tree=null;
        CommonTree AS101_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt33=2;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==IDENT||LA33_0==TICKED_STRING_LITERAL) ) {
                alt33=1;
            }
            else if ( (LA33_0==PATTERN) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);
                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2646);
                    eventFilterExpression99=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression99.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2650);
                    patternInclusionExpression100=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression100.getTree());
                    }
                    break;
            }
            int alt34=3;
            int LA34_0 = input.LA(1);
            if ( (LA34_0==AS) ) {
                alt34=1;
            }
            else if ( (LA34_0==IDENT) ) {
                alt34=2;
            }
            switch (alt34) {
                case 1 :
                    {
                    AS101=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS101);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2664); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE102=null;
        Token ISTREAM103=null;
        Token AS105=null;
        Token SET106=null;
        Token COMMA108=null;
        Token WHERE110=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier104 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment107 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment109 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause111 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE102_tree=null;
        CommonTree ISTREAM103_tree=null;
        CommonTree AS105_tree=null;
        CommonTree SET106_tree=null;
        CommonTree COMMA108_tree=null;
        CommonTree WHERE110_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE102=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE102);
            ISTREAM103=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM103);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2699);
            classIdentifier104=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier104.getTree());
            int alt35=3;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==AS) ) {
                alt35=1;
            }
            else if ( (LA35_0==IDENT) ) {
                alt35=2;
            }
            switch (alt35) {
                case 1 :
                    {
                    AS105=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS105);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2706); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2712); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET106=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET106);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2720);
            onSetAssignment107=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment107.getTree());
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);
                if ( (LA36_0==COMMA) ) {
                    alt36=1;
                }
                switch (alt36) {
            	case 1 :
            	    {
            	    COMMA108=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2723); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA108);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2725);
            	    onSetAssignment109=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment109.getTree());
            	    }
            	    break;
            	default :
            	    break loop36;
                }
            } while (true);
            int alt37=2;
            int LA37_0 = input.LA(1);
            if ( (LA37_0==WHERE) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    {
                    WHERE110=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE110);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2735);
                    whereClause111=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause111.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE112=null;
        Token INTO113=null;
        Token AS114=null;
        Token WHERE115=null;
        EsperEPL2GrammarParser.whereClause_return whereClause116 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem117 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE112_tree=null;
        CommonTree INTO113_tree=null;
        CommonTree AS114_tree=null;
        CommonTree WHERE115_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE112=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr2770); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE112);
            int alt38=2;
            int LA38_0 = input.LA(1);
            if ( (LA38_0==INTO) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    {
                    INTO113=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr2772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO113);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2777); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt39=3;
            int LA39_0 = input.LA(1);
            if ( (LA39_0==AS) ) {
                alt39=1;
            }
            else if ( (LA39_0==IDENT) ) {
                alt39=2;
            }
            switch (alt39) {
                case 1 :
                    {
                    AS114=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr2780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS114);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==WHERE) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    {
                    WHERE115=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr2797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE115);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr2799);
                    whereClause116=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause116.getTree());
                    }
                    break;
            }
            int cnt41=0;
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);
                if ( (LA41_0==WHEN) ) {
                    alt41=1;
                }
                switch (alt41) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr2807);
            	    mergeItem117=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem117.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        throw eee;
                }
                cnt41++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched118 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched119 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt42=2;
            int LA42_0 = input.LA(1);
            if ( (LA42_0==WHEN) ) {
                int LA42_1 = input.LA(2);
                if ( (LA42_1==MATCHED) ) {
                    alt42=1;
                }
                else if ( (LA42_1==NOT_EXPR) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);
                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem2841);
                    mergeMatched118=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched118.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem2845);
                    mergeUnmatched119=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched119.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN120=null;
        Token MATCHED121=null;
        Token AND_EXPR122=null;
        EsperEPL2GrammarParser.expression_return expression123 = null;
        EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem124 = null;
        CommonTree WHEN120_tree=null;
        CommonTree MATCHED121_tree=null;
        CommonTree AND_EXPR122_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeMatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatchedItem");
        try {
            {
            WHEN120=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched2858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN120);
            MATCHED121=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched2860); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED121);
            int alt43=2;
            int LA43_0 = input.LA(1);
            if ( (LA43_0==AND_EXPR) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    {
                    AND_EXPR122=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched2863); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR122);
                    pushFollow(FOLLOW_expression_in_mergeMatched2865);
                    expression123=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression123.getTree());
                    }
                    break;
            }
            int cnt44=0;
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);
                if ( (LA44_0==THEN) ) {
                    alt44=1;
                }
                switch (alt44) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatchedItem_in_mergeMatched2869);
            	    mergeMatchedItem124=mergeMatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatchedItem.add(mergeMatchedItem124.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt44 >= 1 ) break loop44;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(44, input);
                        throw eee;
                }
                cnt44++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_MAT, "MERGE_MAT"), root_1);
                if ( !(stream_mergeMatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeMatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatchedItem.nextTree());
                }
                stream_mergeMatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatchedItem_return retval = new EsperEPL2GrammarParser.mergeMatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token d=null;
        Token THEN125=null;
        Token SET126=null;
        Token COMMA128=null;
        Token WHERE130=null;
        Token WHERE132=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment127 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment129 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause131 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause133 = null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert134 = null;
        CommonTree u_tree=null;
        CommonTree d_tree=null;
        CommonTree THEN125_tree=null;
        CommonTree SET126_tree=null;
        CommonTree COMMA128_tree=null;
        CommonTree WHERE130_tree=null;
        CommonTree WHERE132_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeInsert=new RewriteRuleSubtreeStream(adaptor,"rule mergeInsert");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            THEN125=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatchedItem2895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN125);
            int alt48=3;
            switch ( input.LA(1) ) {
            case UPDATE:
                {
                alt48=1;
                }
                break;
            case DELETE:
                {
                alt48=2;
                }
                break;
            case INSERT:
                {
                alt48=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);
                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    {
                    {
                    u=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatchedItem2910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(u);
                    SET126=(Token)match(input,SET,FOLLOW_SET_in_mergeMatchedItem2912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET126);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem2914);
                    onSetAssignment127=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment127.getTree());
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);
                        if ( (LA45_0==COMMA) ) {
                            alt45=1;
                        }
                        switch (alt45) {
                    	case 1 :
                    	    {
                    	    COMMA128=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatchedItem2917); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA128);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem2919);
                    	    onSetAssignment129=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment129.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop45;
                        }
                    } while (true);
                    }
                    int alt46=2;
                    int LA46_0 = input.LA(1);
                    if ( (LA46_0==WHERE) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            {
                            WHERE130=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem2925); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE130);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem2927);
                            whereClause131=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause131.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatchedItem2939); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    int alt47=2;
                    int LA47_0 = input.LA(1);
                    if ( (LA47_0==WHERE) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            {
                            WHERE132=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem2942); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE132);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem2944);
                            whereClause133=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause133.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_mergeInsert_in_mergeMatchedItem2955);
                    mergeInsert134=mergeInsert();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mergeInsert.add(mergeInsert134.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_DEL, "MERGE_DEL"), root_1);
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_1, (CommonTree)adaptor.create(INT_TYPE, "dummy"));
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (u != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_mergeInsert.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN135=null;
        Token NOT_EXPR136=null;
        Token MATCHED137=null;
        Token AND_EXPR138=null;
        EsperEPL2GrammarParser.expression_return expression139 = null;
        EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem140 = null;
        CommonTree WHEN135_tree=null;
        CommonTree NOT_EXPR136_tree=null;
        CommonTree MATCHED137_tree=null;
        CommonTree AND_EXPR138_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeUnmatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatchedItem");
        try {
            {
            WHEN135=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched3012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN135);
            NOT_EXPR136=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched3014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR136);
            MATCHED137=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched3016); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED137);
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==AND_EXPR) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    {
                    AND_EXPR138=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched3019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR138);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched3021);
                    expression139=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression139.getTree());
                    }
                    break;
            }
            int cnt50=0;
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);
                if ( (LA50_0==THEN) ) {
                    alt50=1;
                }
                switch (alt50) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3025);
            	    mergeUnmatchedItem140=mergeUnmatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatchedItem.add(mergeUnmatchedItem140.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt50 >= 1 ) break loop50;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(50, input);
                        throw eee;
                }
                cnt50++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UNM, "MERGE_UNM"), root_1);
                if ( !(stream_mergeUnmatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeUnmatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatchedItem.nextTree());
                }
                stream_mergeUnmatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatchedItem_return retval = new EsperEPL2GrammarParser.mergeUnmatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token THEN141=null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert142 = null;
        CommonTree THEN141_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            THEN141=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatchedItem3052); if (state.failed) return retval;
            pushFollow(FOLLOW_mergeInsert_in_mergeUnmatchedItem3055);
            mergeInsert142=mergeInsert();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeInsert142.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeInsert_return mergeInsert() throws RecognitionException {
        EsperEPL2GrammarParser.mergeInsert_return retval = new EsperEPL2GrammarParser.mergeInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT143=null;
        Token INTO144=null;
        Token LPAREN146=null;
        Token RPAREN148=null;
        Token SELECT149=null;
        Token WHERE151=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier145 = null;
        EsperEPL2GrammarParser.columnList_return columnList147 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList150 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause152 = null;
        CommonTree INSERT143_tree=null;
        CommonTree INTO144_tree=null;
        CommonTree LPAREN146_tree=null;
        CommonTree RPAREN148_tree=null;
        CommonTree SELECT149_tree=null;
        CommonTree WHERE151_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            INSERT143=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeInsert3070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT143);
            int alt51=2;
            int LA51_0 = input.LA(1);
            if ( (LA51_0==INTO) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    INTO144=(Token)match(input,INTO,FOLLOW_INTO_in_mergeInsert3073); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO144);
                    pushFollow(FOLLOW_classIdentifier_in_mergeInsert3075);
                    classIdentifier145=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier145.getTree());
                    }
                    break;
            }
            int alt52=2;
            int LA52_0 = input.LA(1);
            if ( (LA52_0==LPAREN) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    {
                    LPAREN146=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeInsert3080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN146);
                    pushFollow(FOLLOW_columnList_in_mergeInsert3082);
                    columnList147=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList147.getTree());
                    RPAREN148=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeInsert3084); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN148);
                    }
                    break;
            }
            SELECT149=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeInsert3088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT149);
            pushFollow(FOLLOW_selectionList_in_mergeInsert3090);
            selectionList150=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList150.getTree());
            int alt53=2;
            int LA53_0 = input.LA(1);
            if ( (LA53_0==WHERE) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    {
                    WHERE151=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeInsert3093); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE151);
                    pushFollow(FOLLOW_whereClause_in_mergeInsert3095);
                    whereClause152=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause152.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT153=null;
        Token SELECT155=null;
        Token DISTINCT156=null;
        Token WHERE159=null;
        Token GROUP161=null;
        Token BY162=null;
        Token HAVING164=null;
        Token ORDER166=null;
        Token BY167=null;
        Token ROW_LIMIT_EXPR169=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr154 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList157 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom158 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause160 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr163 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause165 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr168 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit170 = null;
        CommonTree INSERT153_tree=null;
        CommonTree SELECT155_tree=null;
        CommonTree DISTINCT156_tree=null;
        CommonTree WHERE159_tree=null;
        CommonTree GROUP161_tree=null;
        CommonTree BY162_tree=null;
        CommonTree HAVING164_tree=null;
        CommonTree ORDER166_tree=null;
        CommonTree BY167_tree=null;
        CommonTree ROW_LIMIT_EXPR169_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt54=2;
            int LA54_0 = input.LA(1);
            if ( (LA54_0==INSERT) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    {
                    INSERT153=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr3141); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT153);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr3143);
                    insertIntoExpr154=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr154.getTree());
                    }
                    break;
            }
            SELECT155=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr3149); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT155);
            int alt55=2;
            int LA55_0 = input.LA(1);
            if ( (LA55_0==DISTINCT) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    {
                    DISTINCT156=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr3151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT156);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr3154);
            selectionList157=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList157.getTree());
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==FROM) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr3158);
                    onExprFrom158=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom158.getTree());
                    }
                    break;
            }
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==WHERE) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    WHERE159=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr3164); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE159);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr3166);
                    whereClause160=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause160.getTree());
                    }
                    break;
            }
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==GROUP) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    GROUP161=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr3175); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP161);
                    BY162=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY162);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr3179);
                    groupByListExpr163=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr163.getTree());
                    }
                    break;
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==HAVING) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    HAVING164=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr3186); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING164);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr3188);
                    havingClause165=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause165.getTree());
                    }
                    break;
            }
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==ORDER) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    ORDER166=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr3195); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER166);
                    BY167=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY167);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr3199);
                    orderByListExpr168=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr168.getTree());
                    }
                    break;
            }
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==ROW_LIMIT_EXPR) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR169=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3206); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR169);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr3208);
                    rowLimit170=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit170.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE171=null;
        Token AS172=null;
        Token SET173=null;
        Token COMMA175=null;
        Token WHERE177=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment174 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment176 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause178 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE171_tree=null;
        CommonTree AS172_tree=null;
        CommonTree SET173_tree=null;
        CommonTree COMMA175_tree=null;
        CommonTree WHERE177_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE171=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr3268); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE171);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3275); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt62=3;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==AS) ) {
                alt62=1;
            }
            else if ( (LA62_0==IDENT) ) {
                alt62=2;
            }
            switch (alt62) {
                case 1 :
                    {
                    AS172=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr3278); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS172);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3282); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3288); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET173=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3294); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET173);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3296);
            onSetAssignment174=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment174.getTree());
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);
                if ( (LA63_0==COMMA) ) {
                    alt63=1;
                }
                switch (alt63) {
            	case 1 :
            	    {
            	    COMMA175=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3299); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA175);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3301);
            	    onSetAssignment176=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment176.getTree());
            	    }
            	    break;
            	default :
            	    break loop63;
                }
            } while (true);
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==WHERE) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    WHERE177=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE177);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3310);
                    whereClause178=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause178.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT179=null;
        Token SELECT181=null;
        Token WHERE183=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr180 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList182 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause184 = null;
        CommonTree INSERT179_tree=null;
        CommonTree SELECT181_tree=null;
        CommonTree WHERE183_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT179=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3361); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT179);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3363);
            insertIntoExpr180=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr180.getTree());
            SELECT181=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT181);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3369);
            selectionList182=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList182.getTree());
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==WHERE) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    WHERE183=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE183);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3376);
                    whereClause184=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause184.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT185=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT185_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT185=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT185);
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==FIRST) ) {
                alt66=1;
            }
            else if ( (LA66_0==ALL) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);
                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3412); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE186=null;
        Token WHERE188=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom187 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause189 = null;
        CommonTree DELETE186_tree=null;
        CommonTree WHERE188_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE186=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE186);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3464);
            onExprFrom187=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom187.getTree());
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==WHERE) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    WHERE188=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE188);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3471);
                    whereClause189=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause189.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET190=null;
        Token COMMA192=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment191 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment193 = null;
        CommonTree SET190_tree=null;
        CommonTree COMMA192_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET190=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET190);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3513);
            onSetAssignment191=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment191.getTree());
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);
                if ( (LA68_0==COMMA) ) {
                    alt68=1;
                }
                switch (alt68) {
            	case 1 :
            	    {
            	    COMMA192=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3516); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA192);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3518);
            	    onSetAssignment193=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment193.getTree());
            	    }
            	    break;
            	default :
            	    break loop68;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS195=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty194 = null;
        EsperEPL2GrammarParser.expression_return expression196 = null;
        CommonTree EQUALS195_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3543);
            eventProperty194=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty194.getTree());
            EQUALS195=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS195);
            pushFollow(FOLLOW_expression_in_onSetAssignment3547);
            expression196=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression196.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM197=null;
        Token AS198=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM197_tree=null;
        CommonTree AS198_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM197=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM197);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt69=3;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==AS) ) {
                alt69=1;
            }
            else if ( (LA69_0==IDENT) ) {
                alt69=2;
            }
            switch (alt69) {
                case 1 :
                    {
                    AS198=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3579); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS198);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE199=null;
        Token WINDOW200=null;
        Token DOT201=null;
        Token DOT203=null;
        Token AS205=null;
        Token LPAREN207=null;
        Token RPAREN209=null;
        Token WHERE210=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression202 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression204 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter206 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList208 = null;
        EsperEPL2GrammarParser.expression_return expression211 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE199_tree=null;
        CommonTree WINDOW200_tree=null;
        CommonTree DOT201_tree=null;
        CommonTree DOT203_tree=null;
        CommonTree AS205_tree=null;
        CommonTree LPAREN207_tree=null;
        CommonTree RPAREN209_tree=null;
        CommonTree WHERE210_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE199=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3617); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE199);
            WINDOW200=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW200);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3623); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==DOT) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    DOT201=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT201);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3628);
                    viewExpression202=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression202.getTree());
                    loop70:
                    do {
                        int alt70=2;
                        int LA70_0 = input.LA(1);
                        if ( (LA70_0==DOT) ) {
                            alt70=1;
                        }
                        switch (alt70) {
                    	case 1 :
                    	    {
                    	    DOT203=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3631); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT203);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3633);
                    	    viewExpression204=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression204.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop70;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt72=3;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==RETAINUNION) ) {
                alt72=1;
            }
            else if ( (LA72_0==RETAININTERSECTION) ) {
                alt72=2;
            }
            switch (alt72) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==AS) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    AS205=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS205);
                    }
                    break;
            }
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==SELECT||LA74_0==IDENT||LA74_0==TICKED_STRING_LITERAL) ) {
                alt74=1;
            }
            else if ( (LA74_0==LPAREN) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);
                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3665);
                    createWindowExprModelAfter206=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter206.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN207=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3680); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN207);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3682);
                    createColumnList208=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList208.getTree());
                    RPAREN209=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN209);
                    }
                    break;
            }
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==INSERT) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3701); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt75=2;
                    int LA75_0 = input.LA(1);
                    if ( (LA75_0==WHERE) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            {
                            WHERE210=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3704); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE210);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3706);
                            expression211=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression211.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT212=null;
        Token FROM214=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList213 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier215 = null;
        CommonTree SELECT212_tree=null;
        CommonTree FROM214_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt77=2;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==SELECT) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    SELECT212=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3793); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3796);
                    createSelectionList213=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList213.getTree());
                    FROM214=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3798); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3803);
            classIdentifier215=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier215.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE216=null;
        Token INDEX217=null;
        Token ON218=null;
        Token LPAREN219=null;
        Token RPAREN221=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList220 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE216_tree=null;
        CommonTree INDEX217_tree=null;
        CommonTree ON218_tree=null;
        CommonTree LPAREN219_tree=null;
        CommonTree RPAREN221_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE216=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE216);
            INDEX217=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX217);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON218=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON218);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3828); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN219=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3830); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN219);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr3832);
            createIndexColumnList220=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList220.getTree());
            RPAREN221=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3834); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN221);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA223=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn222 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn224 = null;
        CommonTree COMMA223_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3863);
            createIndexColumn222=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn222.getTree());
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);
                if ( (LA78_0==COMMA) ) {
                    alt78=1;
                }
                switch (alt78) {
            	case 1 :
            	    {
            	    COMMA223=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList3866); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA223);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3868);
            	    createIndexColumn224=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn224.getTree());
            	    }
            	    break;
            	default :
            	    break loop78;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT225=null;
        Token IDENT226=null;
        CommonTree IDENT225_tree=null;
        CommonTree IDENT226_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT225=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn3895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT225);
            int alt79=2;
            int LA79_0 = input.LA(1);
            if ( (LA79_0==IDENT) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    {
                    IDENT226=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn3897); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT226);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token CREATE227=null;
        Token VARIABLE228=null;
        Token EQUALS230=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier229 = null;
        EsperEPL2GrammarParser.expression_return expression231 = null;
        CommonTree n_tree=null;
        CommonTree CREATE227_tree=null;
        CommonTree VARIABLE228_tree=null;
        CommonTree EQUALS230_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE227=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE227);
            VARIABLE228=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE228);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3926);
            classIdentifier229=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier229.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==EQUALS) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    EQUALS230=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS230);
                    pushFollow(FOLLOW_expression_in_createVariableExpr3935);
                    expression231=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression231.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA233=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement232 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement234 = null;
        CommonTree COMMA233_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3977);
            createColumnListElement232=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement232.getTree());
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);
                if ( (LA81_0==COMMA) ) {
                    alt81=1;
                }
                switch (alt81) {
            	case 1 :
            	    {
            	    COMMA233=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3980); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA233);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3982);
            	    createColumnListElement234=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement234.getTree());
            	    }
            	    break;
            	default :
            	    break loop81;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK237=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy235 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier236 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK237_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4010);
            classIdentifierNonGreedy235=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy235.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement4013);
            classIdentifier236=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier236.getTree());
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==LBRACK) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement4018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK237=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement4020); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK237);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA239=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement238 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement240 = null;
        CommonTree COMMA239_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4063);
            createSelectionListElement238=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement238.getTree());
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);
                if ( (LA83_0==COMMA) ) {
                    alt83=1;
                }
                switch (alt83) {
            	case 1 :
            	    {
            	    COMMA239=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList4066); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA239);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4068);
            	    createSelectionListElement240=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement240.getTree());
            	    }
            	    break;
            	default :
            	    break loop83;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS242=null;
        Token AS244=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty241 = null;
        EsperEPL2GrammarParser.constant_return constant243 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS242_tree=null;
        CommonTree AS244_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt85=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt85=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt85=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt85=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);
                throw nvae;
            }
            switch (alt85) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement4097); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement4109);
                    eventProperty241=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty241.getTree());
                    int alt84=2;
                    int LA84_0 = input.LA(1);
                    if ( (LA84_0==AS) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            {
                            AS242=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4112); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS242);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4116); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement4137);
                    constant243=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant243.getTree());
                    AS244=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS244);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token CREATE245=null;
        Token SCHEMA246=null;
        Token AS247=null;
        Token LPAREN249=null;
        Token RPAREN251=null;
        EsperEPL2GrammarParser.variantList_return variantList248 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList250 = null;
        EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual252 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree CREATE245_tree=null;
        CommonTree SCHEMA246_tree=null;
        CommonTree AS247_tree=null;
        CommonTree LPAREN249_tree=null;
        CommonTree RPAREN251_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_createSchemaQual=new RewriteRuleSubtreeStream(adaptor,"rule createSchemaQual");
        try {
            {
            CREATE245=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr4168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE245);
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==IDENT) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA246=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr4175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA246);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( (LA87_0==AS) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    {
                    AS247=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr4181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS247);
                    }
                    break;
            }
            int alt89=2;
            int LA89_0 = input.LA(1);
            if ( (LA89_0==IDENT||LA89_0==STAR||LA89_0==TICKED_STRING_LITERAL) ) {
                alt89=1;
            }
            else if ( (LA89_0==LPAREN) ) {
                alt89=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);
                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr4194);
                    variantList248=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList248.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN249=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr4205); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN249);
                    int alt88=2;
                    int LA88_0 = input.LA(1);
                    if ( (LA88_0==IDENT||LA88_0==TICKED_STRING_LITERAL) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr4207);
                            createColumnList250=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList250.getTree());
                            }
                            break;
                    }
                    RPAREN251=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr4210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN251);
                    }
                    break;
            }
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);
                if ( (LA90_0==IDENT) ) {
                    alt90=1;
                }
                switch (alt90) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_createSchemaQual_in_createSchemaExpr4219);
            	    createSchemaQual252=createSchemaQual();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSchemaQual.add(createSchemaQual252.getTree());
            	    }
            	    break;
            	default :
            	    break loop90;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_VAR, "CREATE_SCHEMA_EXPR_VAR"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                while ( stream_createSchemaQual.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSchemaQual.nextTree());
                }
                stream_createSchemaQual.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaQual_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaQual_return createSchemaQual() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaQual_return retval = new EsperEPL2GrammarParser.createSchemaQual_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.columnList_return columnList253 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaQual4282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_columnList_in_createSchemaQual4284);
            columnList253=columnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList253.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA255=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement254 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement256 = null;
        CommonTree COMMA255_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList4310);
            variantListElement254=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement254.getTree());
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);
                if ( (LA91_0==COMMA) ) {
                    alt91=1;
                }
                switch (alt91) {
            	case 1 :
            	    {
            	    COMMA255=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList4313); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA255);
            	    pushFollow(FOLLOW_variantListElement_in_variantList4315);
            	    variantListElement256=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement256.getTree());
            	    }
            	    break;
            	default :
            	    break loop91;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR257=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier258 = null;
        CommonTree STAR257_tree=null;
        try {
            int alt92=2;
            int LA92_0 = input.LA(1);
            if ( (LA92_0==STAR) ) {
                alt92=1;
            }
            else if ( (LA92_0==IDENT||LA92_0==TICKED_STRING_LITERAL) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);
                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR257=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement4342); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR257_tree = (CommonTree)adaptor.create(STAR257);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR257_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement4348);
                    classIdentifier258=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier258.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO259=null;
        Token LPAREN261=null;
        Token RPAREN263=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier260 = null;
        EsperEPL2GrammarParser.columnList_return columnList262 = null;
        CommonTree s_tree=null;
        CommonTree INTO259_tree=null;
        CommonTree LPAREN261_tree=null;
        CommonTree RPAREN263_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt93=3;
            int LA93_0 = input.LA(1);
            if ( (LA93_0==ISTREAM) ) {
                alt93=1;
            }
            else if ( (LA93_0==RSTREAM) ) {
                alt93=2;
            }
            switch (alt93) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr4373); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr4379); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO259=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr4383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO259);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr4385);
            classIdentifier260=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier260.getTree());
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==LPAREN) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    {
                    LPAREN261=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr4388); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN261);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr4390);
                    columnList262=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList262.getTree());
                    RPAREN263=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr4392); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN263);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT264=null;
        Token COMMA265=null;
        Token IDENT266=null;
        CommonTree IDENT264_tree=null;
        CommonTree COMMA265_tree=null;
        CommonTree IDENT266_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT264=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT264);
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);
                if ( (LA95_0==COMMA) ) {
                    alt95=1;
                }
                switch (alt95) {
            	case 1 :
            	    {
            	    COMMA265=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList4428); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA265);
            	    IDENT266=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4430); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT266);
            	    }
            	    break;
            	default :
            	    break loop95;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression267 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin268 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList269 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause4468);
            streamExpression267=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression267.getTree());
            int alt96=2;
            int LA96_0 = input.LA(1);
            if ( (LA96_0==EOF||LA96_0==WHERE||(LA96_0>=GROUP && LA96_0<=HAVING)||LA96_0==OUTPUT||LA96_0==ORDER||LA96_0==ROW_LIMIT_EXPR||LA96_0==MATCH_RECOGNIZE||LA96_0==FOR||LA96_0==COMMA) ) {
                alt96=1;
            }
            else if ( ((LA96_0>=INNER && LA96_0<=FULL)) ) {
                alt96=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);
                throw nvae;
            }
            switch (alt96) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause4471);
                    regularJoin268=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin268.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause4475);
                    outerJoinList269=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList269.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA270=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression271 = null;
        CommonTree COMMA270_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);
                if ( (LA97_0==COMMA) ) {
                    alt97=1;
                }
                switch (alt97) {
            	case 1 :
            	    {
            	    COMMA270=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin4489); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin4492);
            	    streamExpression271=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression271.getTree());
            	    }
            	    break;
            	default :
            	    break loop97;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin272 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin273 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList4506);
            outerJoin272=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin272.getTree());
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);
                if ( ((LA98_0>=INNER && LA98_0<=FULL)) ) {
                    alt98=1;
                }
                switch (alt98) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList4509);
            	    outerJoin273=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin273.getTree());
            	    }
            	    break;
            	default :
            	    break loop98;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER274=null;
        Token JOIN275=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression276 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent277 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER274_tree=null;
        CommonTree JOIN275_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt101=2;
            int LA101_0 = input.LA(1);
            if ( ((LA101_0>=JOIN && LA101_0<=FULL)) ) {
                alt101=1;
            }
            else if ( (LA101_0==INNER) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);
                throw nvae;
            }
            switch (alt101) {
                case 1 :
                    {
                    int alt100=2;
                    int LA100_0 = input.LA(1);
                    if ( ((LA100_0>=LEFT && LA100_0<=FULL)) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            {
                            int alt99=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt99=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt99=2;
                                }
                                break;
                            case FULL:
                                {
                                alt99=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 99, 0, input);
                                throw nvae;
                            }
                            switch (alt99) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin4552); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin4556); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin4560); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER274=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin4563); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER274);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin4584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN275=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin4598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN275);
            pushFollow(FOLLOW_streamExpression_in_outerJoin4600);
            streamExpression276=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression276.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin4602);
            outerJoinIdent277=outerJoinIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent277.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON278=null;
        Token AND_EXPR280=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair279 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair281 = null;
        CommonTree ON278_tree=null;
        CommonTree AND_EXPR280_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON278=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent4667); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4670);
            outerJoinIdentPair279=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair279.getTree());
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);
                if ( (LA102_0==AND_EXPR) ) {
                    alt102=1;
                }
                switch (alt102) {
            	case 1 :
            	    {
            	    AND_EXPR280=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent4673); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4676);
            	    outerJoinIdentPair281=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair281.getTree());
            	    }
            	    break;
            	default :
            	    break loop102;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS283=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty282 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty284 = null;
        CommonTree EQUALS283_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4691);
            eventProperty282=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty282.getTree());
            EQUALS283=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair4693); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4696);
            eventProperty284=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty284.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression285 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4718);
            evalOrExpression285=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression285.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList286 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt103=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt103=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt103=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt103=3;
                    }
                    break;
            }
            switch (alt103) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4760); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt104=2;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==DISTINCT) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause4775);
            selectionList286=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList286.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA288=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement287 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement289 = null;
        CommonTree COMMA288_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList4806);
            selectionListElement287=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement287.getTree());
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);
                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }
                switch (alt105) {
            	case 1 :
            	    {
            	    COMMA288=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4809); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4812);
            	    selectionListElement289=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement289.getTree());
            	    }
            	    break;
            	default :
            	    break loop105;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS292=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector290 = null;
        EsperEPL2GrammarParser.expression_return expression291 = null;
        CommonTree s_tree=null;
        CommonTree AS292_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt107=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt107=1;
                }
                break;
            case IDENT:
                {
                int LA107_2 = input.LA(2);
                if ( (LA107_2==DOT) ) {
                    int LA107_73 = input.LA(3);
                    if ( (LA107_73==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt107=2;
                    }
                    else if ( (LA107_73==WINDOW||LA107_73==ESCAPE||LA107_73==EVERY_EXPR||LA107_73==WHERE||(LA107_73>=SUM && LA107_73<=COUNT)||LA107_73==OUTER||(LA107_73>=JOIN && LA107_73<=FULL)||(LA107_73>=EVENTS && LA107_73<=LAST)||(LA107_73>=UNIDIRECTIONAL && LA107_73<=PREVIOUSTAIL)||LA107_73==PRIOR||(LA107_73>=WEEKDAY && LA107_73<=CAST)||(LA107_73>=SNAPSHOT && LA107_73<=INDEX)||(LA107_73>=DEFINE && LA107_73<=AFTER)||LA107_73==WHILE||(LA107_73>=MERGE && LA107_73<=MATCHED)||LA107_73==IDENT||LA107_73==TICKED_STRING_LITERAL) ) {
                        alt107=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 107, 73, input);
                        throw nvae;
                    }
                }
                else if ( (LA107_2==EOF||(LA107_2>=IN_SET && LA107_2<=REGEXP)||(LA107_2>=OR_EXPR && LA107_2<=NOT_EXPR)||(LA107_2>=WHERE && LA107_2<=AS)||(LA107_2>=WHEN && LA107_2<=THEN)||LA107_2==FROM||LA107_2==IS||(LA107_2>=GROUP && LA107_2<=HAVING)||LA107_2==OUTPUT||LA107_2==INSERT||LA107_2==ORDER||LA107_2==ROW_LIMIT_EXPR||LA107_2==FOR||LA107_2==LPAREN||(LA107_2>=COMMA && LA107_2<=EQUALS)||LA107_2==LBRACK||(LA107_2>=STAR && LA107_2<=QUESTION)||(LA107_2>=BAND && LA107_2<=MOD)||LA107_2==ESCAPECHAR) ) {
                    alt107=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt107=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);
                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4838); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4856);
                    streamSelector290=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector290.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4861);
                    expression291=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression291.getTree());
                    int alt106=2;
                    int LA106_0 = input.LA(1);
                    if ( (LA106_0==AS) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            {
                            AS292=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4864); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS292);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4868);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT293=null;
        Token STAR294=null;
        Token AS295=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT293_tree=null;
        CommonTree STAR294_tree=null;
        CommonTree AS295_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT293=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT293);
            STAR294=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR294);
            int alt108=2;
            int LA108_0 = input.LA(1);
            if ( (LA108_0==AS) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    {
                    AS295=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS295);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT300=null;
        Token DOT302=null;
        Token AS304=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression296 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression297 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression298 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression299 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression301 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression303 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT300_tree=null;
        CommonTree DOT302_tree=null;
        CommonTree AS304_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt109=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA109_1 = input.LA(2);
                if ( (LA109_1==EOF||(LA109_1>=WHERE && LA109_1<=AS)||(LA109_1>=INNER && LA109_1<=ON)||(LA109_1>=GROUP && LA109_1<=HAVING)||LA109_1==OUTPUT||LA109_1==ORDER||(LA109_1>=UNIDIRECTIONAL && LA109_1<=RETAININTERSECTION)||LA109_1==ROW_LIMIT_EXPR||LA109_1==MATCH_RECOGNIZE||LA109_1==FOR||LA109_1==IDENT||LA109_1==LPAREN||(LA109_1>=COMMA && LA109_1<=LBRACK)) ) {
                    alt109=1;
                }
                else if ( (LA109_1==COLON) ) {
                    alt109=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt109=1;
                }
                break;
            case PATTERN:
                {
                alt109=2;
                }
                break;
            case SQL:
                {
                alt109=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);
                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4966);
                    eventFilterExpression296=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression296.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4970);
                    patternInclusionExpression297=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression297.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4974);
                    databaseJoinExpression298=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression298.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4978);
                    methodJoinExpression299=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression299.getTree());
                    }
                    break;
            }
            int alt111=2;
            int LA111_0 = input.LA(1);
            if ( (LA111_0==DOT) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    {
                    DOT300=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT300);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression4987);
                    viewExpression301=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression301.getTree());
                    loop110:
                    do {
                        int alt110=2;
                        int LA110_0 = input.LA(1);
                        if ( (LA110_0==DOT) ) {
                            alt110=1;
                        }
                        switch (alt110) {
                    	case 1 :
                    	    {
                    	    DOT302=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4990); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT302);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4992);
                    	    viewExpression303=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression303.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop110;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt112=3;
            int LA112_0 = input.LA(1);
            if ( (LA112_0==AS) ) {
                alt112=1;
            }
            else if ( (LA112_0==IDENT) ) {
                alt112=2;
            }
            switch (alt112) {
                case 1 :
                    {
                    AS304=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4999); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS304);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression5003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression5009); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt113=2;
            int LA113_0 = input.LA(1);
            if ( (LA113_0==UNIDIRECTIONAL) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression5016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt114=3;
            int LA114_0 = input.LA(1);
            if ( (LA114_0==RETAINUNION) ) {
                alt114=1;
            }
            else if ( (LA114_0==RETAININTERSECTION) ) {
                alt114=2;
            }
            switch (alt114) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression5023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression5027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR305=null;
        Token LPAREN306=null;
        Token RPAREN308=null;
        EsperEPL2GrammarParser.expressionList_return expressionList307 = null;
        CommonTree i_tree=null;
        CommonTree FOR305_tree=null;
        CommonTree LPAREN306_tree=null;
        CommonTree RPAREN308_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR305=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr5083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR305);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr5087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt116=2;
            int LA116_0 = input.LA(1);
            if ( (LA116_0==LPAREN) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    {
                    LPAREN306=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr5090); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN306);
                    int alt115=2;
                    int LA115_0 = input.LA(1);
                    if ( (LA115_0==WINDOW||LA115_0==ESCAPE||(LA115_0>=NOT_EXPR && LA115_0<=EVERY_EXPR)||LA115_0==WHERE||(LA115_0>=SUM && LA115_0<=COUNT)||LA115_0==CASE||LA115_0==OUTER||(LA115_0>=JOIN && LA115_0<=FULL)||(LA115_0>=EVENTS && LA115_0<=LAST)||(LA115_0>=UNIDIRECTIONAL && LA115_0<=CURRENT_TIMESTAMP)||(LA115_0>=SNAPSHOT && LA115_0<=INDEX)||(LA115_0>=BOOLEAN_TRUE && LA115_0<=VALUE_NULL)||(LA115_0>=DEFINE && LA115_0<=AFTER)||LA115_0==WHILE||(LA115_0>=MERGE && LA115_0<=MATCHED)||LA115_0==NEWKW||LA115_0==NUM_DOUBLE||(LA115_0>=IDENT && LA115_0<=LCURLY)||LA115_0==LPAREN||(LA115_0>=PLUS && LA115_0<=QUESTION)||(LA115_0>=STRING_LITERAL && LA115_0<=QUOTED_STRING_LITERAL)||LA115_0==MINUS||LA115_0==NUM_INT||(LA115_0>=TICKED_STRING_LITERAL && LA115_0<=NUM_FLOAT)) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr5092);
                            expressionList307=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList307.getTree());
                            }
                            break;
                    }
                    RPAREN308=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr5095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN308);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE309=null;
        Token LPAREN310=null;
        Token RPAREN318=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy311 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures312 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection313 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip314 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern315 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval316 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine317 = null;
        CommonTree MATCH_RECOGNIZE309_tree=null;
        CommonTree LPAREN310_tree=null;
        CommonTree RPAREN318_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE309=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog5131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE309);
            LPAREN310=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog5145); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN310);
            int alt117=2;
            int LA117_0 = input.LA(1);
            if ( (LA117_0==PARTITION) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog5151);
                    matchRecogPartitionBy311=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy311.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog5158);
            matchRecogMeasures312=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures312.getTree());
            int alt118=2;
            int LA118_0 = input.LA(1);
            if ( (LA118_0==ALL) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog5163);
                    matchRecogMatchesSelection313=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection313.getTree());
                    }
                    break;
            }
            int alt119=2;
            int LA119_0 = input.LA(1);
            if ( (LA119_0==AFTER) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5169);
                    matchRecogMatchesAfterSkip314=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip314.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog5175);
            matchRecogPattern315=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern315.getTree());
            int alt120=2;
            int LA120_0 = input.LA(1);
            if ( (LA120_0==IDENT) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog5181);
                    matchRecogMatchesInterval316=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval316.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog5187);
            matchRecogDefine317=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine317.getTree());
            RPAREN318=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog5194); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN318);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION319=null;
        Token BY320=null;
        Token COMMA322=null;
        EsperEPL2GrammarParser.expression_return expression321 = null;
        EsperEPL2GrammarParser.expression_return expression323 = null;
        CommonTree PARTITION319_tree=null;
        CommonTree BY320_tree=null;
        CommonTree COMMA322_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION319=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy5231); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION319);
            BY320=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy5233); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY320);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5235);
            expression321=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression321.getTree());
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);
                if ( (LA121_0==COMMA) ) {
                    alt121=1;
                }
                switch (alt121) {
            	case 1 :
            	    {
            	    COMMA322=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy5238); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA322);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5240);
            	    expression323=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression323.getTree());
            	    }
            	    break;
            	default :
            	    break loop121;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES324=null;
        Token COMMA326=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem325 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem327 = null;
        CommonTree MEASURES324_tree=null;
        CommonTree COMMA326_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES324=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures5269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES324);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5271);
            matchRecogMeasureItem325=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem325.getTree());
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);
                if ( (LA122_0==COMMA) ) {
                    alt122=1;
                }
                switch (alt122) {
            	case 1 :
            	    {
            	    COMMA326=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures5274); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA326);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5276);
            	    matchRecogMeasureItem327=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem327.getTree());
            	    }
            	    break;
            	default :
            	    break loop122;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS329=null;
        EsperEPL2GrammarParser.expression_return expression328 = null;
        CommonTree i_tree=null;
        CommonTree AS329_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem5301);
            expression328=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression328.getTree());
            int alt124=2;
            int LA124_0 = input.LA(1);
            if ( (LA124_0==AS) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    {
                    AS329=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem5304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS329);
                    int alt123=2;
                    int LA123_0 = input.LA(1);
                    if ( (LA123_0==IDENT) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem5309); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL330=null;
        Token MATCHES331=null;
        CommonTree ALL330_tree=null;
        CommonTree MATCHES331_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL330=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection5340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL330_tree = (CommonTree)adaptor.create(ALL330);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL330_tree, root_0);
            }
            MATCHES331=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection5343); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN332=null;
        Token LPAREN333=null;
        Token RPAREN335=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration334 = null;
        CommonTree PATTERN332_tree=null;
        CommonTree LPAREN333_tree=null;
        CommonTree RPAREN335_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN332=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern5358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN332);
            LPAREN333=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern5360); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN333);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5362);
            matchRecogPatternAlteration334=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration334.getTree());
            RPAREN335=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern5364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN335);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER336=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER336_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER336=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5386); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER336);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5390);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5394);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5398);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5402);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5406);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod337 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval5442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval5444);
            timePeriod337=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod337.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat338 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat339 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5470);
            matchRecogPatternConcat338=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat338.getTree());
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);
                if ( (LA125_0==BOR) ) {
                    alt125=1;
                }
                switch (alt125) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration5475); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5477);
            	    matchRecogPatternConcat339=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat339.getTree());
            	    }
            	    break;
            	default :
            	    break loop125;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary340 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt126=0;
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);
                if ( (LA126_0==IDENT||LA126_0==LPAREN) ) {
                    alt126=1;
                }
                switch (alt126) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5510);
            	    matchRecogPatternUnary340=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary340.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested341 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom342 = null;
        try {
            int alt127=2;
            int LA127_0 = input.LA(1);
            if ( (LA127_0==LPAREN) ) {
                alt127=1;
            }
            else if ( (LA127_0==IDENT) ) {
                alt127=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);
                throw nvae;
            }
            switch (alt127) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5535);
                    matchRecogPatternNested341=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested341.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5541);
                    matchRecogPatternAtom342=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom342.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN343=null;
        Token RPAREN345=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration344 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN343_tree=null;
        CommonTree RPAREN345_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN343=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested5553); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN343);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5555);
            matchRecogPatternAlteration344=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration344.getTree());
            RPAREN345=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested5557); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN345);
            int alt128=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt128=1;
                    }
                    break;
                case PLUS:
                    {
                    alt128=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt128=3;
                    }
                    break;
            }
            switch (alt128) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested5562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested5568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested5574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom5613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt131=2;
            int LA131_0 = input.LA(1);
            if ( (LA131_0==STAR||(LA131_0>=PLUS && LA131_0<=QUESTION)) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    {
                    int alt129=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt129=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt129=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt129=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 129, 0, input);
                        throw nvae;
                    }
                    switch (alt129) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom5619); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom5625); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5631); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt130=2;
                    int LA130_0 = input.LA(1);
                    if ( (LA130_0==QUESTION) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5637); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE346=null;
        Token COMMA348=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem347 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem349 = null;
        CommonTree DEFINE346_tree=null;
        CommonTree COMMA348_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE346=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine5681); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE346);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5683);
            matchRecogDefineItem347=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem347.getTree());
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);
                if ( (LA132_0==COMMA) ) {
                    alt132=1;
                }
                switch (alt132) {
            	case 1 :
            	    {
            	    COMMA348=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine5686); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA348);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5688);
            	    matchRecogDefineItem349=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem349.getTree());
            	    }
            	    break;
            	default :
            	    break loop132;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS350=null;
        EsperEPL2GrammarParser.expression_return expression351 = null;
        CommonTree i_tree=null;
        CommonTree AS350_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5715); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS350=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5717); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS350);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5719);
            expression351=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression351.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN352=null;
        Token LBRACK353=null;
        Token RBRACK355=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression354 = null;
        CommonTree PATTERN352_tree=null;
        CommonTree LBRACK353_tree=null;
        CommonTree RBRACK355_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN352=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5744); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN352);
            LBRACK353=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK353);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5748);
            patternExpression354=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression354.getTree());
            RBRACK355=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK355);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL356=null;
        Token COLON357=null;
        Token LBRACK358=null;
        Token METADATASQL359=null;
        Token RBRACK360=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL356_tree=null;
        CommonTree COLON357_tree=null;
        CommonTree LBRACK358_tree=null;
        CommonTree METADATASQL359_tree=null;
        CommonTree RBRACK360_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL356=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL356);
            COLON357=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5785); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON357);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5789); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK358=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK358);
            int alt133=2;
            int LA133_0 = input.LA(1);
            if ( (LA133_0==STRING_LITERAL) ) {
                alt133=1;
            }
            else if ( (LA133_0==QUOTED_STRING_LITERAL) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);
                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5802); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt135=2;
            int LA135_0 = input.LA(1);
            if ( (LA135_0==METADATASQL) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    {
                    METADATASQL359=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5806); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL359);
                    int alt134=2;
                    int LA134_0 = input.LA(1);
                    if ( (LA134_0==STRING_LITERAL) ) {
                        alt134=1;
                    }
                    else if ( (LA134_0==QUOTED_STRING_LITERAL) ) {
                        alt134=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 134, 0, input);
                        throw nvae;
                    }
                    switch (alt134) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5811); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5817); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK360=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK360);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON361=null;
        Token LPAREN363=null;
        Token RPAREN365=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier362 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList364 = null;
        CommonTree i_tree=null;
        CommonTree COLON361_tree=null;
        CommonTree LPAREN363_tree=null;
        CommonTree RPAREN365_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON361=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5875); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON361);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5877);
            classIdentifier362=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier362.getTree());
            int alt137=2;
            int LA137_0 = input.LA(1);
            if ( (LA137_0==LPAREN) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    {
                    LPAREN363=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN363);
                    int alt136=2;
                    int LA136_0 = input.LA(1);
                    if ( (LA136_0==WINDOW||LA136_0==ESCAPE||(LA136_0>=NOT_EXPR && LA136_0<=EVERY_EXPR)||LA136_0==WHERE||(LA136_0>=SUM && LA136_0<=COUNT)||LA136_0==CASE||LA136_0==OUTER||(LA136_0>=JOIN && LA136_0<=FULL)||(LA136_0>=EVENTS && LA136_0<=LAST)||(LA136_0>=UNIDIRECTIONAL && LA136_0<=CURRENT_TIMESTAMP)||(LA136_0>=SNAPSHOT && LA136_0<=INDEX)||(LA136_0>=BOOLEAN_TRUE && LA136_0<=VALUE_NULL)||(LA136_0>=DEFINE && LA136_0<=AFTER)||LA136_0==WHILE||(LA136_0>=MERGE && LA136_0<=MATCHED)||LA136_0==NEWKW||LA136_0==NUM_DOUBLE||(LA136_0>=IDENT && LA136_0<=LCURLY)||LA136_0==LPAREN||(LA136_0>=PLUS && LA136_0<=QUESTION)||(LA136_0>=STRING_LITERAL && LA136_0<=QUOTED_STRING_LITERAL)||LA136_0==MINUS||LA136_0==NUM_INT||(LA136_0>=TICKED_STRING_LITERAL && LA136_0<=NUM_FLOAT)) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5882);
                            expressionList364=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList364.getTree());
                            }
                            break;
                    }
                    RPAREN365=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5885); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN365);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON366=null;
        Token LPAREN367=null;
        Token RPAREN369=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList368 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON366_tree=null;
        CommonTree LPAREN367_tree=null;
        CommonTree RPAREN369_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON366=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON366);
            int alt138=2;
            int LA138_0 = input.LA(1);
            if ( (LA138_0==IDENT) ) {
                alt138=1;
            }
            else if ( (LA138_0==MERGE) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);
                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5945); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression5949); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN367=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN367);
            int alt139=2;
            int LA139_0 = input.LA(1);
            if ( (LA139_0==WINDOW||LA139_0==ESCAPE||(LA139_0>=NOT_EXPR && LA139_0<=EVERY_EXPR)||LA139_0==WHERE||(LA139_0>=SUM && LA139_0<=COUNT)||LA139_0==CASE||LA139_0==OUTER||(LA139_0>=JOIN && LA139_0<=FULL)||(LA139_0>=EVENTS && LA139_0<=LAST)||(LA139_0>=UNIDIRECTIONAL && LA139_0<=CURRENT_TIMESTAMP)||(LA139_0>=SNAPSHOT && LA139_0<=INDEX)||(LA139_0>=BOOLEAN_TRUE && LA139_0<=VALUE_NULL)||(LA139_0>=DEFINE && LA139_0<=AFTER)||LA139_0==WHILE||(LA139_0>=MERGE && LA139_0<=MATCHED)||LA139_0==NEWKW||LA139_0==NUM_DOUBLE||(LA139_0>=IDENT && LA139_0<=LCURLY)||LA139_0==LPAREN||LA139_0==LBRACK||LA139_0==STAR||(LA139_0>=PLUS && LA139_0<=QUESTION)||(LA139_0>=STRING_LITERAL && LA139_0<=QUOTED_STRING_LITERAL)||LA139_0==MINUS||LA139_0==NUM_INT||(LA139_0>=TICKED_STRING_LITERAL && LA139_0<=NUM_FLOAT)) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5954);
                    expressionWithTimeList368=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList368.getTree());
                    }
                    break;
            }
            RPAREN369=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN369);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA371=null;
        EsperEPL2GrammarParser.expression_return expression370 = null;
        EsperEPL2GrammarParser.expression_return expression372 = null;
        CommonTree COMMA371_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr6017);
            expression370=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression370.getTree());
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);
                if ( (LA140_0==COMMA) ) {
                    alt140=1;
                }
                switch (alt140) {
            	case 1 :
            	    {
            	    COMMA371=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr6020); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA371);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr6022);
            	    expression372=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression372.getTree());
            	    }
            	    break;
            	default :
            	    break loop140;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA374=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement373 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement375 = null;
        CommonTree COMMA374_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6057);
            orderByListElement373=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement373.getTree());
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);
                if ( (LA141_0==COMMA) ) {
                    alt141=1;
                }
                switch (alt141) {
            	case 1 :
            	    {
            	    COMMA374=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr6060); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA374);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6062);
            	    orderByListElement375=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement375.getTree());
            	    }
            	    break;
            	default :
            	    break loop141;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression376 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement6087);
            expression376=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression376.getTree());
            int alt142=3;
            int LA142_0 = input.LA(1);
            if ( (LA142_0==ASC) ) {
                alt142=1;
            }
            else if ( (LA142_0==DESC) ) {
                alt142=2;
            }
            switch (alt142) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement6092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement6096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression377 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause6134);
            evalOrExpression377=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression377.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN383=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter378 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod379 = null;
        EsperEPL2GrammarParser.number_return number380 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet381 = null;
        EsperEPL2GrammarParser.expression_return expression382 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr384 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN383_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt143=2;
            int LA143_0 = input.LA(1);
            if ( (LA143_0==AFTER) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit6172);
                    outputLimitAfter378=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter378.getTree());
                    }
                    break;
            }
            int alt144=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt144=1;
                    }
                    break;
                case FIRST:
                    {
                    alt144=2;
                    }
                    break;
                case LAST:
                    {
                    alt144=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt144=4;
                    }
                    break;
            }
            switch (alt144) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit6187); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit6191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit6195); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit6199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt148=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt148=1;
                }
                break;
            case AT:
                {
                alt148=2;
                }
                break;
            case WHEN:
                {
                alt148=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt148=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);
                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit6230); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt146=2;
                    int LA146_0 = input.LA(1);
                    if ( (LA146_0==MINUS) && (synpred2_EsperEPL2Grammar())) {
                        alt146=1;
                    }
                    else if ( (LA146_0==PLUS) && (synpred2_EsperEPL2Grammar())) {
                        alt146=1;
                    }
                    else if ( (LA146_0==NUM_INT) ) {
                        int LA146_3 = input.LA(2);
                        if ( (LA146_3==EVENTS) ) {
                            alt146=2;
                        }
                        else if ( (LA146_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 146, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA146_0==NUM_LONG) ) {
                        int LA146_4 = input.LA(2);
                        if ( (LA146_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==EVENTS) ) {
                            alt146=2;
                        }
                        else if ( (LA146_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 146, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA146_0==NUM_FLOAT) ) {
                        int LA146_5 = input.LA(2);
                        if ( (LA146_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==EVENTS) ) {
                            alt146=2;
                        }
                        else if ( (LA146_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 146, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA146_0==NUM_DOUBLE) ) {
                        int LA146_6 = input.LA(2);
                        if ( (LA146_6==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==EVENTS) ) {
                            alt146=2;
                        }
                        else if ( (LA146_6==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_6==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 146, 6, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA146_0==IDENT) ) {
                        int LA146_7 = input.LA(2);
                        if ( (LA146_7==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==EVENTS) ) {
                            alt146=2;
                        }
                        else if ( (LA146_7==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_7==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 146, 7, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA146_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt146=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 146, 0, input);
                        throw nvae;
                    }
                    switch (alt146) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit6256);
                            timePeriod379=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod379.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt145=2;
                            int LA145_0 = input.LA(1);
                            if ( (LA145_0==NUM_DOUBLE||LA145_0==NUM_INT||(LA145_0>=NUM_LONG && LA145_0<=NUM_FLOAT)) ) {
                                alt145=1;
                            }
                            else if ( (LA145_0==IDENT) ) {
                                alt145=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 145, 0, input);
                                throw nvae;
                            }
                            switch (alt145) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit6267);
                                    number380=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number380.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit6273); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit6279); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit6310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit6312);
                    crontabLimitParameterSet381=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet381.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit6329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit6331);
                    expression382=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression382.getTree());
                    int alt147=2;
                    int LA147_0 = input.LA(1);
                    if ( (LA147_0==THEN) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            {
                            THEN383=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit6334); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN383);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit6336);
                            onSetExpr384=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr384.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS387=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod385 = null;
        EsperEPL2GrammarParser.number_return number386 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS387_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter6486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt149=2;
            switch ( input.LA(1) ) {
            case IDENT:
            case PLUS:
            case QUESTION:
            case MINUS:
                {
                alt149=1;
                }
                break;
            case NUM_INT:
                {
                int LA149_3 = input.LA(2);
                if ( (LA149_3==MIN||(LA149_3>=TIMEPERIOD_YEAR && LA149_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt149=1;
                }
                else if ( (LA149_3==EVENTS) ) {
                    alt149=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA149_4 = input.LA(2);
                if ( (LA149_4==MIN||(LA149_4>=TIMEPERIOD_YEAR && LA149_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt149=1;
                }
                else if ( (LA149_4==EVENTS) ) {
                    alt149=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA149_5 = input.LA(2);
                if ( (LA149_5==MIN||(LA149_5>=TIMEPERIOD_YEAR && LA149_5<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt149=1;
                }
                else if ( (LA149_5==EVENTS) ) {
                    alt149=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA149_6 = input.LA(2);
                if ( (LA149_6==MIN||(LA149_6>=TIMEPERIOD_YEAR && LA149_6<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt149=1;
                }
                else if ( (LA149_6==EVENTS) ) {
                    alt149=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);
                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter6489);
                    timePeriod385=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod385.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter6493);
                    number386=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number386.getTree());
                    EVENTS387=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter6495); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS387);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt150=2;
            int LA150_0 = input.LA(1);
            if ( (LA150_0==NUM_DOUBLE||LA150_0==PLUS||LA150_0==MINUS||LA150_0==NUM_INT||(LA150_0>=NUM_LONG && LA150_0<=NUM_FLOAT)) ) {
                alt150=1;
            }
            else if ( (LA150_0==IDENT) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);
                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit6541);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6547); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt153=2;
            int LA153_0 = input.LA(1);
            if ( (LA153_0==OFFSET||LA153_0==COMMA) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    {
                    int alt151=2;
                    int LA151_0 = input.LA(1);
                    if ( (LA151_0==COMMA) ) {
                        alt151=1;
                    }
                    else if ( (LA151_0==OFFSET) ) {
                        alt151=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 151, 0, input);
                        throw nvae;
                    }
                    switch (alt151) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit6554); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit6560); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt152=2;
                    int LA152_0 = input.LA(1);
                    if ( (LA152_0==NUM_DOUBLE||LA152_0==PLUS||LA152_0==MINUS||LA152_0==NUM_INT||(LA152_0>=NUM_LONG && LA152_0<=NUM_FLOAT)) ) {
                        alt152=1;
                    }
                    else if ( (LA152_0==IDENT) ) {
                        alt152=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 152, 0, input);
                        throw nvae;
                    }
                    switch (alt152) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit6566);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6572); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN388=null;
        Token COMMA390=null;
        Token COMMA392=null;
        Token COMMA394=null;
        Token COMMA396=null;
        Token COMMA398=null;
        Token RPAREN400=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime389 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime391 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime393 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime395 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime397 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime399 = null;
        CommonTree LPAREN388_tree=null;
        CommonTree COMMA390_tree=null;
        CommonTree COMMA392_tree=null;
        CommonTree COMMA394_tree=null;
        CommonTree COMMA396_tree=null;
        CommonTree COMMA398_tree=null;
        CommonTree RPAREN400_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN388=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet6624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN388);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6626);
            expressionWithTime389=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime389.getTree());
            COMMA390=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA390);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6630);
            expressionWithTime391=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime391.getTree());
            COMMA392=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA392);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6634);
            expressionWithTime393=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime393.getTree());
            COMMA394=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA394);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6638);
            expressionWithTime395=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime395.getTree());
            COMMA396=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA396);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6642);
            expressionWithTime397=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime397.getTree());
            int alt154=2;
            int LA154_0 = input.LA(1);
            if ( (LA154_0==COMMA) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    {
                    COMMA398=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA398);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6647);
                    expressionWithTime399=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime399.getTree());
                    }
                    break;
            }
            RPAREN400=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet6651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN400);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN401=null;
        Token THEN403=null;
        EsperEPL2GrammarParser.expression_return expression402 = null;
        EsperEPL2GrammarParser.expression_return expression404 = null;
        CommonTree WHEN401_tree=null;
        CommonTree THEN403_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN401=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause6681); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6684);
            expression402=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression402.getTree());
            THEN403=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause6686); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6689);
            expression404=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression404.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE405=null;
        EsperEPL2GrammarParser.expression_return expression406 = null;
        CommonTree ELSE405_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE405=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause6702); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause6705);
            expression406=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression406.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression407 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression6718);
            caseExpression407=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression407.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE408=null;
        Token END411=null;
        Token CASE412=null;
        Token END416=null;
        EsperEPL2GrammarParser.whenClause_return whenClause409 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause410 = null;
        EsperEPL2GrammarParser.expression_return expression413 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause414 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause415 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression417 = null;
        CommonTree CASE408_tree=null;
        CommonTree END411_tree=null;
        CommonTree CASE412_tree=null;
        CommonTree END416_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt159=3;
            int LA159_0 = input.LA(1);
            if ( (LA159_0==CASE) ) {
                int LA159_1 = input.LA(2);
                if ( (LA159_1==WINDOW||LA159_1==ESCAPE||(LA159_1>=NOT_EXPR && LA159_1<=EVERY_EXPR)||LA159_1==WHERE||(LA159_1>=SUM && LA159_1<=COUNT)||LA159_1==CASE||LA159_1==OUTER||(LA159_1>=JOIN && LA159_1<=FULL)||(LA159_1>=EVENTS && LA159_1<=LAST)||(LA159_1>=UNIDIRECTIONAL && LA159_1<=CURRENT_TIMESTAMP)||(LA159_1>=SNAPSHOT && LA159_1<=INDEX)||(LA159_1>=BOOLEAN_TRUE && LA159_1<=VALUE_NULL)||(LA159_1>=DEFINE && LA159_1<=AFTER)||LA159_1==WHILE||(LA159_1>=MERGE && LA159_1<=MATCHED)||LA159_1==NEWKW||LA159_1==NUM_DOUBLE||(LA159_1>=IDENT && LA159_1<=LCURLY)||LA159_1==LPAREN||(LA159_1>=PLUS && LA159_1<=QUESTION)||(LA159_1>=STRING_LITERAL && LA159_1<=QUOTED_STRING_LITERAL)||LA159_1==MINUS||LA159_1==NUM_INT||(LA159_1>=TICKED_STRING_LITERAL && LA159_1<=NUM_FLOAT)) ) {
                    alt159=2;
                }
                else if ( (LA159_1==WHEN) ) {
                    alt159=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA159_0==WINDOW||LA159_0==ESCAPE||(LA159_0>=NOT_EXPR && LA159_0<=EVERY_EXPR)||LA159_0==WHERE||(LA159_0>=SUM && LA159_0<=COUNT)||LA159_0==OUTER||(LA159_0>=JOIN && LA159_0<=FULL)||(LA159_0>=EVENTS && LA159_0<=LAST)||(LA159_0>=UNIDIRECTIONAL && LA159_0<=CURRENT_TIMESTAMP)||(LA159_0>=SNAPSHOT && LA159_0<=INDEX)||(LA159_0>=BOOLEAN_TRUE && LA159_0<=VALUE_NULL)||(LA159_0>=DEFINE && LA159_0<=AFTER)||LA159_0==WHILE||(LA159_0>=MERGE && LA159_0<=MATCHED)||LA159_0==NEWKW||LA159_0==NUM_DOUBLE||(LA159_0>=IDENT && LA159_0<=LCURLY)||LA159_0==LPAREN||(LA159_0>=PLUS && LA159_0<=QUESTION)||(LA159_0>=STRING_LITERAL && LA159_0<=QUOTED_STRING_LITERAL)||LA159_0==MINUS||LA159_0==NUM_INT||(LA159_0>=TICKED_STRING_LITERAL && LA159_0<=NUM_FLOAT)) ) {
                alt159=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);
                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE408=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6732); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE408_tree = (CommonTree)adaptor.create(CASE408);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE408_tree, root_0);
                    }
                    int cnt155=0;
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);
                        if ( (LA155_0==WHEN) ) {
                            alt155=1;
                        }
                        switch (alt155) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6735);
                    	    whenClause409=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause409.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt155 >= 1 ) break loop155;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(155, input);
                                throw eee;
                        }
                        cnt155++;
                    } while (true);
                    int alt156=2;
                    int LA156_0 = input.LA(1);
                    if ( (LA156_0==ELSE) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6738);
                            elseClause410=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause410.getTree());
                            }
                            break;
                    }
                    END411=(Token)match(input,END,FOLLOW_END_in_caseExpression6741); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE412=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6752); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE412);
                    pushFollow(FOLLOW_expression_in_caseExpression6754);
                    expression413=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression413.getTree());
                    int cnt157=0;
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);
                        if ( (LA157_0==WHEN) ) {
                            alt157=1;
                        }
                        switch (alt157) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6756);
                    	    whenClause414=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause414.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt157 >= 1 ) break loop157;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(157, input);
                                throw eee;
                        }
                        cnt157++;
                    } while (true);
                    int alt158=2;
                    int LA158_0 = input.LA(1);
                    if ( (LA158_0==ELSE) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6759);
                            elseClause415=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause415.getTree());
                            }
                            break;
                    }
                    END416=(Token)match(input,END,FOLLOW_END_in_caseExpression6762); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END416);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6786);
                    evalOrExpression417=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression417.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression418 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression419 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6797);
            evalAndExpression418=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression418.getTree());
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);
                if ( (LA160_0==OR_EXPR) ) {
                    alt160=1;
                }
                switch (alt160) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6802); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6804);
            	    evalAndExpression419=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression419.getTree());
            	    }
            	    break;
            	default :
            	    break loop160;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression420 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression421 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6836);
            bitWiseExpression420=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression420.getTree());
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);
                if ( (LA161_0==AND_EXPR) ) {
                    alt161=1;
                }
                switch (alt161) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6841); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6843);
            	    bitWiseExpression421=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression421.getTree());
            	    }
            	    break;
            	default :
            	    break loop161;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND423=null;
        Token BOR424=null;
        Token BXOR425=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression422 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression426 = null;
        CommonTree BAND423_tree=null;
        CommonTree BOR424_tree=null;
        CommonTree BXOR425_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6875);
            negatedExpression422=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression422.getTree());
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);
                if ( (LA163_0==BOR||(LA163_0>=BAND && LA163_0<=BXOR)) ) {
                    alt163=1;
                }
                switch (alt163) {
            	case 1 :
            	    {
            	    int alt162=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt162=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt162=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt162=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 162, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt162) {
            	        case 1 :
            	            {
            	            BAND423=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6880); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND423_tree = (CommonTree)adaptor.create(BAND423);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND423_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR424=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6883); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR424_tree = (CommonTree)adaptor.create(BOR424);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR424_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR425=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6886); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR425_tree = (CommonTree)adaptor.create(BXOR425);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR425_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6890);
            	    negatedExpression426=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression426.getTree());
            	    }
            	    break;
            	default :
            	    break loop163;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR428=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression427 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression429 = null;
        CommonTree NOT_EXPR428_tree=null;
        try {
            int alt164=2;
            int LA164_0 = input.LA(1);
            if ( (LA164_0==WINDOW||LA164_0==ESCAPE||LA164_0==EVERY_EXPR||LA164_0==WHERE||(LA164_0>=SUM && LA164_0<=COUNT)||LA164_0==OUTER||(LA164_0>=JOIN && LA164_0<=FULL)||(LA164_0>=EVENTS && LA164_0<=LAST)||(LA164_0>=UNIDIRECTIONAL && LA164_0<=CURRENT_TIMESTAMP)||(LA164_0>=SNAPSHOT && LA164_0<=INDEX)||(LA164_0>=BOOLEAN_TRUE && LA164_0<=VALUE_NULL)||(LA164_0>=DEFINE && LA164_0<=AFTER)||LA164_0==WHILE||(LA164_0>=MERGE && LA164_0<=MATCHED)||LA164_0==NEWKW||LA164_0==NUM_DOUBLE||(LA164_0>=IDENT && LA164_0<=LCURLY)||LA164_0==LPAREN||(LA164_0>=PLUS && LA164_0<=QUESTION)||(LA164_0>=STRING_LITERAL && LA164_0<=QUOTED_STRING_LITERAL)||LA164_0==MINUS||LA164_0==NUM_INT||(LA164_0>=TICKED_STRING_LITERAL && LA164_0<=NUM_FLOAT)) ) {
                alt164=1;
            }
            else if ( (LA164_0==NOT_EXPR) ) {
                alt164=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);
                throw nvae;
            }
            switch (alt164) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6905);
                    evalEqualsExpression427=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression427.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR428=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR428_tree = (CommonTree)adaptor.create(NOT_EXPR428);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR428_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6914);
                    evalEqualsExpression429=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression429.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR431=null;
        Token LPAREN433=null;
        Token RPAREN435=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression430 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression432 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList434 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression436 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR431_tree=null;
        CommonTree LPAREN433_tree=null;
        CommonTree RPAREN435_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6927);
            evalRelationalExpression430=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression430.getTree());
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);
                if ( (LA170_0==IS||LA170_0==EQUALS||(LA170_0>=SQL_NE && LA170_0<=NOT_EQUAL)) ) {
                    alt170=1;
                }
                switch (alt170) {
            	case 1 :
            	    {
            	    int alt165=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt165=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA165_2 = input.LA(2);
            	        if ( (LA165_2==NOT_EXPR) ) {
            	            alt165=3;
            	        }
            	        else if ( (LA165_2==WINDOW||LA165_2==ESCAPE||LA165_2==EVERY_EXPR||LA165_2==WHERE||(LA165_2>=SUM && LA165_2<=COUNT)||LA165_2==OUTER||(LA165_2>=JOIN && LA165_2<=FULL)||(LA165_2>=ALL && LA165_2<=SOME)||(LA165_2>=EVENTS && LA165_2<=LAST)||(LA165_2>=UNIDIRECTIONAL && LA165_2<=CURRENT_TIMESTAMP)||(LA165_2>=SNAPSHOT && LA165_2<=INDEX)||(LA165_2>=BOOLEAN_TRUE && LA165_2<=VALUE_NULL)||(LA165_2>=DEFINE && LA165_2<=AFTER)||LA165_2==WHILE||(LA165_2>=MERGE && LA165_2<=MATCHED)||LA165_2==NEWKW||LA165_2==NUM_DOUBLE||(LA165_2>=IDENT && LA165_2<=LCURLY)||LA165_2==LPAREN||(LA165_2>=PLUS && LA165_2<=QUESTION)||(LA165_2>=STRING_LITERAL && LA165_2<=QUOTED_STRING_LITERAL)||LA165_2==MINUS||LA165_2==NUM_INT||(LA165_2>=TICKED_STRING_LITERAL && LA165_2<=NUM_FLOAT)) ) {
            	            alt165=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 165, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt165=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt165=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 165, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt165) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6940); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6958); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6972); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR431=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6974); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR431);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6988); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression7002); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt169=2;
            	    int LA169_0 = input.LA(1);
            	    if ( (LA169_0==WINDOW||LA169_0==ESCAPE||LA169_0==EVERY_EXPR||LA169_0==WHERE||(LA169_0>=SUM && LA169_0<=COUNT)||LA169_0==OUTER||(LA169_0>=JOIN && LA169_0<=FULL)||(LA169_0>=EVENTS && LA169_0<=LAST)||(LA169_0>=UNIDIRECTIONAL && LA169_0<=CURRENT_TIMESTAMP)||(LA169_0>=SNAPSHOT && LA169_0<=INDEX)||(LA169_0>=BOOLEAN_TRUE && LA169_0<=VALUE_NULL)||(LA169_0>=DEFINE && LA169_0<=AFTER)||LA169_0==WHILE||(LA169_0>=MERGE && LA169_0<=MATCHED)||LA169_0==NEWKW||LA169_0==NUM_DOUBLE||(LA169_0>=IDENT && LA169_0<=LCURLY)||LA169_0==LPAREN||(LA169_0>=PLUS && LA169_0<=QUESTION)||(LA169_0>=STRING_LITERAL && LA169_0<=QUOTED_STRING_LITERAL)||LA169_0==MINUS||LA169_0==NUM_INT||(LA169_0>=TICKED_STRING_LITERAL && LA169_0<=NUM_FLOAT)) ) {
            	        alt169=1;
            	    }
            	    else if ( ((LA169_0>=ALL && LA169_0<=SOME)) ) {
            	        alt169=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 169, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt169) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression7032);
            	            evalRelationalExpression432=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression432.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt166=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt166=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt166=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt166=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 166, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt166) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression7049); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression7055); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression7061); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt168=2;
            	            int LA168_0 = input.LA(1);
            	            if ( (LA168_0==LPAREN) ) {
            	                int LA168_1 = input.LA(2);
            	                if ( (LA168_1==SELECT) ) {
            	                    alt168=2;
            	                }
            	                else if ( (LA168_1==WINDOW||LA168_1==ESCAPE||(LA168_1>=NOT_EXPR && LA168_1<=EVERY_EXPR)||LA168_1==WHERE||(LA168_1>=SUM && LA168_1<=COUNT)||LA168_1==CASE||LA168_1==OUTER||(LA168_1>=JOIN && LA168_1<=FULL)||(LA168_1>=EVENTS && LA168_1<=LAST)||(LA168_1>=UNIDIRECTIONAL && LA168_1<=CURRENT_TIMESTAMP)||(LA168_1>=SNAPSHOT && LA168_1<=INDEX)||(LA168_1>=BOOLEAN_TRUE && LA168_1<=VALUE_NULL)||(LA168_1>=DEFINE && LA168_1<=AFTER)||LA168_1==WHILE||(LA168_1>=MERGE && LA168_1<=MATCHED)||LA168_1==NEWKW||LA168_1==NUM_DOUBLE||(LA168_1>=IDENT && LA168_1<=LCURLY)||(LA168_1>=LPAREN && LA168_1<=RPAREN)||(LA168_1>=PLUS && LA168_1<=QUESTION)||(LA168_1>=STRING_LITERAL && LA168_1<=QUOTED_STRING_LITERAL)||LA168_1==MINUS||LA168_1==NUM_INT||(LA168_1>=TICKED_STRING_LITERAL && LA168_1<=NUM_FLOAT)) ) {
            	                    alt168=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 168, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 168, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt168) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN433=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression7067); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN433);
            	                    int alt167=2;
            	                    int LA167_0 = input.LA(1);
            	                    if ( (LA167_0==WINDOW||LA167_0==ESCAPE||(LA167_0>=NOT_EXPR && LA167_0<=EVERY_EXPR)||LA167_0==WHERE||(LA167_0>=SUM && LA167_0<=COUNT)||LA167_0==CASE||LA167_0==OUTER||(LA167_0>=JOIN && LA167_0<=FULL)||(LA167_0>=EVENTS && LA167_0<=LAST)||(LA167_0>=UNIDIRECTIONAL && LA167_0<=CURRENT_TIMESTAMP)||(LA167_0>=SNAPSHOT && LA167_0<=INDEX)||(LA167_0>=BOOLEAN_TRUE && LA167_0<=VALUE_NULL)||(LA167_0>=DEFINE && LA167_0<=AFTER)||LA167_0==WHILE||(LA167_0>=MERGE && LA167_0<=MATCHED)||LA167_0==NEWKW||LA167_0==NUM_DOUBLE||(LA167_0>=IDENT && LA167_0<=LCURLY)||LA167_0==LPAREN||(LA167_0>=PLUS && LA167_0<=QUESTION)||(LA167_0>=STRING_LITERAL && LA167_0<=QUOTED_STRING_LITERAL)||LA167_0==MINUS||LA167_0==NUM_INT||(LA167_0>=TICKED_STRING_LITERAL && LA167_0<=NUM_FLOAT)) ) {
            	                        alt167=1;
            	                    }
            	                    switch (alt167) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression7069);
            	                            expressionList434=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList434.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN435=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression7072); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN435);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7077);
            	                    subSelectGroupExpression436=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression436.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop170;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && eq != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && is != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_IS_EXPR, "EVAL_IS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && isnot != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_ISNOT_EXPR, "EVAL_ISNOT_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (sqlne != null || ne != null || isnot != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN439=null;
        Token RPAREN441=null;
        Token COMMA445=null;
        Token IN_SET447=null;
        Token BETWEEN449=null;
        Token LIKE451=null;
        Token ESCAPE453=null;
        Token REGEXP455=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr437 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr438 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList440 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression442 = null;
        EsperEPL2GrammarParser.expression_return expression443 = null;
        EsperEPL2GrammarParser.expression_return expression444 = null;
        EsperEPL2GrammarParser.expression_return expression446 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery448 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList450 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr452 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant454 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr456 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN439_tree=null;
        CommonTree RPAREN441_tree=null;
        CommonTree COMMA445_tree=null;
        CommonTree IN_SET447_tree=null;
        CommonTree BETWEEN449_tree=null;
        CommonTree LIKE451_tree=null;
        CommonTree ESCAPE453_tree=null;
        CommonTree REGEXP455_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7237);
            concatenationExpr437=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr437.getTree());
            int alt184=2;
            int LA184_0 = input.LA(1);
            if ( (LA184_0==EOF||(LA184_0>=OR_EXPR && LA184_0<=AND_EXPR)||(LA184_0>=WHERE && LA184_0<=AS)||(LA184_0>=ELSE && LA184_0<=FROM)||LA184_0==IS||(LA184_0>=GROUP && LA184_0<=HAVING)||LA184_0==ALL||LA184_0==OUTPUT||LA184_0==INSERT||(LA184_0>=ORDER && LA184_0<=DESC)||LA184_0==PATTERN||(LA184_0>=TIMEPERIOD_SEC && LA184_0<=TIMEPERIOD_SECONDS)||LA184_0==ROW_LIMIT_EXPR||LA184_0==MEASURES||(LA184_0>=AFTER && LA184_0<=FOR)||LA184_0==RCURLY||LA184_0==RPAREN||(LA184_0>=COMMA && LA184_0<=EQUALS)||LA184_0==RBRACK||LA184_0==BOR||LA184_0==COLON||(LA184_0>=BAND && LA184_0<=GE)||LA184_0==FOLLOWMAX_END) ) {
                alt184=1;
            }
            else if ( ((LA184_0>=IN_SET && LA184_0<=REGEXP)||LA184_0==NOT_EXPR) ) {
                alt184=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);
                throw nvae;
            }
            switch (alt184) {
                case 1 :
                    {
                    {
                    loop176:
                    do {
                        int alt176=2;
                        int LA176_0 = input.LA(1);
                        if ( ((LA176_0>=LT && LA176_0<=GE)) ) {
                            alt176=1;
                        }
                        switch (alt176) {
                    	case 1 :
                    	    {
                    	    int alt171=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt171=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt171=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt171=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt171=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 171, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt171) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression7269); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression7273); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression7277); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression7281); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt175=2;
                    	    int LA175_0 = input.LA(1);
                    	    if ( (LA175_0==WINDOW||LA175_0==ESCAPE||LA175_0==EVERY_EXPR||LA175_0==WHERE||(LA175_0>=SUM && LA175_0<=COUNT)||LA175_0==OUTER||(LA175_0>=JOIN && LA175_0<=FULL)||(LA175_0>=EVENTS && LA175_0<=LAST)||(LA175_0>=UNIDIRECTIONAL && LA175_0<=CURRENT_TIMESTAMP)||(LA175_0>=SNAPSHOT && LA175_0<=INDEX)||(LA175_0>=BOOLEAN_TRUE && LA175_0<=VALUE_NULL)||(LA175_0>=DEFINE && LA175_0<=AFTER)||LA175_0==WHILE||(LA175_0>=MERGE && LA175_0<=MATCHED)||LA175_0==NEWKW||LA175_0==NUM_DOUBLE||(LA175_0>=IDENT && LA175_0<=LCURLY)||LA175_0==LPAREN||(LA175_0>=PLUS && LA175_0<=QUESTION)||(LA175_0>=STRING_LITERAL && LA175_0<=QUOTED_STRING_LITERAL)||LA175_0==MINUS||LA175_0==NUM_INT||(LA175_0>=TICKED_STRING_LITERAL && LA175_0<=NUM_FLOAT)) ) {
                    	        alt175=1;
                    	    }
                    	    else if ( ((LA175_0>=ALL && LA175_0<=SOME)) ) {
                    	        alt175=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 175, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt175) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7305);
                    	            concatenationExpr438=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr438.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt172=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt172=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt172=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt172=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 172, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt172) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression7322); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression7328); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression7334); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt174=2;
                    	            int LA174_0 = input.LA(1);
                    	            if ( (LA174_0==LPAREN) ) {
                    	                int LA174_1 = input.LA(2);
                    	                if ( (LA174_1==SELECT) ) {
                    	                    alt174=2;
                    	                }
                    	                else if ( (LA174_1==WINDOW||LA174_1==ESCAPE||(LA174_1>=NOT_EXPR && LA174_1<=EVERY_EXPR)||LA174_1==WHERE||(LA174_1>=SUM && LA174_1<=COUNT)||LA174_1==CASE||LA174_1==OUTER||(LA174_1>=JOIN && LA174_1<=FULL)||(LA174_1>=EVENTS && LA174_1<=LAST)||(LA174_1>=UNIDIRECTIONAL && LA174_1<=CURRENT_TIMESTAMP)||(LA174_1>=SNAPSHOT && LA174_1<=INDEX)||(LA174_1>=BOOLEAN_TRUE && LA174_1<=VALUE_NULL)||(LA174_1>=DEFINE && LA174_1<=AFTER)||LA174_1==WHILE||(LA174_1>=MERGE && LA174_1<=MATCHED)||LA174_1==NEWKW||LA174_1==NUM_DOUBLE||(LA174_1>=IDENT && LA174_1<=LCURLY)||(LA174_1>=LPAREN && LA174_1<=RPAREN)||(LA174_1>=PLUS && LA174_1<=QUESTION)||(LA174_1>=STRING_LITERAL && LA174_1<=QUOTED_STRING_LITERAL)||LA174_1==MINUS||LA174_1==NUM_INT||(LA174_1>=TICKED_STRING_LITERAL && LA174_1<=NUM_FLOAT)) ) {
                    	                    alt174=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 174, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 174, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt174) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN439=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7340); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN439);
                    	                    int alt173=2;
                    	                    int LA173_0 = input.LA(1);
                    	                    if ( (LA173_0==WINDOW||LA173_0==ESCAPE||(LA173_0>=NOT_EXPR && LA173_0<=EVERY_EXPR)||LA173_0==WHERE||(LA173_0>=SUM && LA173_0<=COUNT)||LA173_0==CASE||LA173_0==OUTER||(LA173_0>=JOIN && LA173_0<=FULL)||(LA173_0>=EVENTS && LA173_0<=LAST)||(LA173_0>=UNIDIRECTIONAL && LA173_0<=CURRENT_TIMESTAMP)||(LA173_0>=SNAPSHOT && LA173_0<=INDEX)||(LA173_0>=BOOLEAN_TRUE && LA173_0<=VALUE_NULL)||(LA173_0>=DEFINE && LA173_0<=AFTER)||LA173_0==WHILE||(LA173_0>=MERGE && LA173_0<=MATCHED)||LA173_0==NEWKW||LA173_0==NUM_DOUBLE||(LA173_0>=IDENT && LA173_0<=LCURLY)||LA173_0==LPAREN||(LA173_0>=PLUS && LA173_0<=QUESTION)||(LA173_0>=STRING_LITERAL && LA173_0<=QUOTED_STRING_LITERAL)||LA173_0==MINUS||LA173_0==NUM_INT||(LA173_0>=TICKED_STRING_LITERAL && LA173_0<=NUM_FLOAT)) ) {
                    	                        alt173=1;
                    	                    }
                    	                    switch (alt173) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression7342);
                    	                            expressionList440=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList440.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN441=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7345); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN441);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7350);
                    	                    subSelectGroupExpression442=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression442.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop176;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt177=2;
                    int LA177_0 = input.LA(1);
                    if ( (LA177_0==NOT_EXPR) ) {
                        alt177=1;
                    }
                    switch (alt177) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression7446); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt183=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA183_1 = input.LA(2);
                        if ( (LA183_1==LPAREN) ) {
                            int LA183_5 = input.LA(3);
                            if ( (LA183_5==SELECT) ) {
                                alt183=2;
                            }
                            else if ( (LA183_5==WINDOW||LA183_5==ESCAPE||(LA183_5>=NOT_EXPR && LA183_5<=EVERY_EXPR)||LA183_5==WHERE||(LA183_5>=SUM && LA183_5<=COUNT)||LA183_5==CASE||LA183_5==OUTER||(LA183_5>=JOIN && LA183_5<=FULL)||(LA183_5>=EVENTS && LA183_5<=LAST)||(LA183_5>=UNIDIRECTIONAL && LA183_5<=CURRENT_TIMESTAMP)||(LA183_5>=SNAPSHOT && LA183_5<=INDEX)||(LA183_5>=BOOLEAN_TRUE && LA183_5<=VALUE_NULL)||(LA183_5>=DEFINE && LA183_5<=AFTER)||LA183_5==WHILE||(LA183_5>=MERGE && LA183_5<=MATCHED)||LA183_5==NEWKW||LA183_5==NUM_DOUBLE||(LA183_5>=IDENT && LA183_5<=LCURLY)||LA183_5==LPAREN||(LA183_5>=PLUS && LA183_5<=QUESTION)||(LA183_5>=STRING_LITERAL && LA183_5<=QUOTED_STRING_LITERAL)||LA183_5==MINUS||LA183_5==NUM_INT||(LA183_5>=TICKED_STRING_LITERAL && LA183_5<=NUM_FLOAT)) ) {
                                alt183=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 183, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA183_1==LBRACK) ) {
                            alt183=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 183, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt183=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt183=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt183=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 183, 0, input);
                        throw nvae;
                    }
                    switch (alt183) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7473); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt178=2;
                            int LA178_0 = input.LA(1);
                            if ( (LA178_0==LPAREN) ) {
                                alt178=1;
                            }
                            else if ( (LA178_0==LBRACK) ) {
                                alt178=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 178, 0, input);
                                throw nvae;
                            }
                            switch (alt178) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7485); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression7491); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression7494);
                            expression443=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression443.getTree());
                            int alt180=2;
                            int LA180_0 = input.LA(1);
                            if ( (LA180_0==COLON) ) {
                                alt180=1;
                            }
                            else if ( (LA180_0==RPAREN||LA180_0==COMMA||LA180_0==RBRACK) ) {
                                alt180=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 180, 0, input);
                                throw nvae;
                            }
                            switch (alt180) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression7516); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression7519);
                                    expression444=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression444.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop179:
                                    do {
                                        int alt179=2;
                                        int LA179_0 = input.LA(1);
                                        if ( (LA179_0==COMMA) ) {
                                            alt179=1;
                                        }
                                        switch (alt179) {
                                    	case 1 :
                                    	    {
                                    	    COMMA445=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression7545); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA445);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression7547);
                                    	    expression446=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression446.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop179;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt181=2;
                            int LA181_0 = input.LA(1);
                            if ( (LA181_0==RPAREN) ) {
                                alt181=1;
                            }
                            else if ( (LA181_0==RBRACK) ) {
                                alt181=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 181, 0, input);
                                throw nvae;
                            }
                            switch (alt181) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7573); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression7579); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET447=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7702); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET447);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression7704);
                            inSubSelectQuery448=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery448.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN449=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression7750); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN449);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression7752);
                            betweenList450=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList450.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE451=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7802); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE451);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7804);
                            concatenationExpr452=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr452.getTree());
                            int alt182=2;
                            int LA182_0 = input.LA(1);
                            if ( (LA182_0==ESCAPE) ) {
                                alt182=1;
                            }
                            switch (alt182) {
                                case 1 :
                                    {
                                    ESCAPE453=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7807); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE453);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7809);
                                    stringconstant454=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant454.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP455=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7861); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP455);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7863);
                            concatenationExpr456=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr456.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr457 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7925);
            subQueryExpr457=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr457.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR460=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression458 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression459 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression461 = null;
        CommonTree c_tree=null;
        CommonTree LOR460_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7950);
            additiveExpression458=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression458.getTree());
            int alt186=2;
            int LA186_0 = input.LA(1);
            if ( (LA186_0==LOR) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7956); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7958);
                    additiveExpression459=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression459.getTree());
                    loop185:
                    do {
                        int alt185=2;
                        int LA185_0 = input.LA(1);
                        if ( (LA185_0==LOR) ) {
                            alt185=1;
                        }
                        switch (alt185) {
                    	case 1 :
                    	    {
                    	    LOR460=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7962); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR460);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7964);
                    	    additiveExpression461=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression461.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop185;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS463=null;
        Token MINUS464=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression462 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression465 = null;
        CommonTree PLUS463_tree=null;
        CommonTree MINUS464_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression8005);
            multiplyExpression462=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression462.getTree());
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);
                if ( (LA188_0==PLUS||LA188_0==MINUS) ) {
                    alt188=1;
                }
                switch (alt188) {
            	case 1 :
            	    {
            	    int alt187=2;
            	    int LA187_0 = input.LA(1);
            	    if ( (LA187_0==PLUS) ) {
            	        alt187=1;
            	    }
            	    else if ( (LA187_0==MINUS) ) {
            	        alt187=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 187, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt187) {
            	        case 1 :
            	            {
            	            PLUS463=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression8010); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS463_tree = (CommonTree)adaptor.create(PLUS463);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS463_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS464=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression8013); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS464_tree = (CommonTree)adaptor.create(MINUS464);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS464_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression8017);
            	    multiplyExpression465=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression465.getTree());
            	    }
            	    break;
            	default :
            	    break loop188;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR467=null;
        Token DIV468=null;
        Token MOD469=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression466 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression470 = null;
        CommonTree STAR467_tree=null;
        CommonTree DIV468_tree=null;
        CommonTree MOD469_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression8031);
            unaryExpression466=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression466.getTree());
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);
                if ( (LA190_0==STAR||(LA190_0>=DIV && LA190_0<=MOD)) ) {
                    alt190=1;
                }
                switch (alt190) {
            	case 1 :
            	    {
            	    int alt189=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt189=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt189=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt189=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 189, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt189) {
            	        case 1 :
            	            {
            	            STAR467=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression8036); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR467_tree = (CommonTree)adaptor.create(STAR467);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR467_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV468=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression8039); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV468_tree = (CommonTree)adaptor.create(DIV468);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV468_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD469=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression8042); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD469_tree = (CommonTree)adaptor.create(MOD469);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD469_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression8046);
            	    unaryExpression470=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression470.getTree());
            	    }
            	    break;
            	default :
            	    break loop190;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS471=null;
        Token LPAREN475=null;
        Token RPAREN477=null;
        Token NEWKW487=null;
        Token LCURLY488=null;
        Token COMMA490=null;
        Token RCURLY492=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty472 = null;
        EsperEPL2GrammarParser.constant_return constant473 = null;
        EsperEPL2GrammarParser.substitution_return substitution474 = null;
        EsperEPL2GrammarParser.expression_return expression476 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass478 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass479 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction480 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc481 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression482 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression483 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass484 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass485 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression486 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign489 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign491 = null;
        CommonTree d_tree=null;
        CommonTree MINUS471_tree=null;
        CommonTree LPAREN475_tree=null;
        CommonTree RPAREN477_tree=null;
        CommonTree NEWKW487_tree=null;
        CommonTree LCURLY488_tree=null;
        CommonTree COMMA490_tree=null;
        CommonTree RCURLY492_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_NEWKW=new RewriteRuleTokenStream(adaptor,"token NEWKW");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_newAssign=new RewriteRuleSubtreeStream(adaptor,"rule newAssign");
        RewriteRuleSubtreeStream stream_subSelectExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt196=10;
            alt196 = dfa196.predict(input);
            switch (alt196) {
                case 1 :
                    {
                    MINUS471=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression8061); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS471);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression8063);
                    eventProperty472=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty472.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression8076);
                    constant473=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant473.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression8081);
                    substitution474=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution474.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN475=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression8086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN475);
                    pushFollow(FOLLOW_expression_in_unaryExpression8088);
                    expression476=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression476.getTree());
                    RPAREN477=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression8090); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN477);
                    int alt192=2;
                    int LA192_0 = input.LA(1);
                    if ( (LA192_0==DOT) ) {
                        alt192=1;
                    }
                    switch (alt192) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8095); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8097);
                            libFunctionNoClass478=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass478.getTree());
                            loop191:
                            do {
                                int alt191=2;
                                int LA191_0 = input.LA(1);
                                if ( (LA191_0==DOT) ) {
                                    alt191=1;
                                }
                                switch (alt191) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8102); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8104);
                            	    libFunctionNoClass479=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass479.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop191;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression8141);
                    eventPropertyOrLibFunction480=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction480.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression8153);
                    builtinFunc481=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc481.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression8159);
                    arrayExpression482=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression482.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression8164);
                    subSelectExpression483=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelectExpression.add(subSelectExpression483.getTree());
                    int alt194=2;
                    int LA194_0 = input.LA(1);
                    if ( (LA194_0==DOT) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8169); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8171);
                            libFunctionNoClass484=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass484.getTree());
                            loop193:
                            do {
                                int alt193=2;
                                int LA193_0 = input.LA(1);
                                if ( (LA193_0==DOT) ) {
                                    alt193=1;
                                }
                                switch (alt193) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8176); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8178);
                            	    libFunctionNoClass485=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass485.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop193;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_subSelectExpression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_subSelectExpression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression8215);
                    existsSubSelectExpression486=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression486.getTree());
                    }
                    break;
                case 10 :
                    {
                    NEWKW487=(Token)match(input,NEWKW,FOLLOW_NEWKW_in_unaryExpression8220); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NEWKW.add(NEWKW487);
                    LCURLY488=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_unaryExpression8222); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY488);
                    pushFollow(FOLLOW_newAssign_in_unaryExpression8224);
                    newAssign489=newAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newAssign.add(newAssign489.getTree());
                    loop195:
                    do {
                        int alt195=2;
                        int LA195_0 = input.LA(1);
                        if ( (LA195_0==COMMA) ) {
                            alt195=1;
                        }
                        switch (alt195) {
                    	case 1 :
                    	    {
                    	    COMMA490=(Token)match(input,COMMA,FOLLOW_COMMA_in_unaryExpression8227); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA490);
                    	    pushFollow(FOLLOW_newAssign_in_unaryExpression8229);
                    	    newAssign491=newAssign();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_newAssign.add(newAssign491.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop195;
                        }
                    } while (true);
                    RCURLY492=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_unaryExpression8233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY492);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NEWKW.nextNode(), root_1);
                        while ( stream_newAssign.hasNext() ) {
                            adaptor.addChild(root_1, stream_newAssign.nextTree());
                        }
                        stream_newAssign.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class newAssign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.newAssign_return newAssign() throws RecognitionException {
        EsperEPL2GrammarParser.newAssign_return retval = new EsperEPL2GrammarParser.newAssign_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS494=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty493 = null;
        EsperEPL2GrammarParser.expression_return expression495 = null;
        CommonTree EQUALS494_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_newAssign8255);
            eventProperty493=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty493.getTree());
            int alt197=2;
            int LA197_0 = input.LA(1);
            if ( (LA197_0==EQUALS) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    {
                    EQUALS494=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_newAssign8258); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS494);
                    pushFollow(FOLLOW_expression_in_newAssign8260);
                    expression495=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression495.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEW_ITEM, "NEW_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr496 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression8288);
            subQueryExpr496=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr496.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr497 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression8310);
            subQueryExpr497=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr497.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS498=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr499 = null;
        CommonTree EXISTS498_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS498=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression8332); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS498);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression8334);
            subQueryExpr499=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr499.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN500=null;
        Token SELECT501=null;
        Token DISTINCT502=null;
        Token FROM504=null;
        Token WHERE506=null;
        Token RPAREN508=null;
        EsperEPL2GrammarParser.selectionList_return selectionList503 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr505 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause507 = null;
        CommonTree LPAREN500_tree=null;
        CommonTree SELECT501_tree=null;
        CommonTree DISTINCT502_tree=null;
        CommonTree FROM504_tree=null;
        CommonTree WHERE506_tree=null;
        CommonTree RPAREN508_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN500=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr8367); if (state.failed) return retval;
            SELECT501=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr8373); if (state.failed) return retval;
            int alt198=2;
            int LA198_0 = input.LA(1);
            if ( (LA198_0==DISTINCT) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    {
                    DISTINCT502=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr8376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT502_tree = (CommonTree)adaptor.create(DISTINCT502);
                    adaptor.addChild(root_0, DISTINCT502_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr8379);
            selectionList503=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList503.getTree());
            FROM504=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr8386); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr8389);
            subSelectFilterExpr505=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr505.getTree());
            int alt199=2;
            int LA199_0 = input.LA(1);
            if ( (LA199_0==WHERE) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    {
                    WHERE506=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr8397); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr8400);
                    whereClause507=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause507.getTree());
                    }
                    break;
            }
            RPAREN508=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr8409); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT510=null;
        Token DOT512=null;
        Token AS514=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression509 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression511 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression513 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT510_tree=null;
        CommonTree DOT512_tree=null;
        CommonTree AS514_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr8433);
            eventFilterExpression509=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression509.getTree());
            int alt201=2;
            int LA201_0 = input.LA(1);
            if ( (LA201_0==DOT) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    {
                    DOT510=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8438); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT510);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8440);
                    viewExpression511=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression511.getTree());
                    loop200:
                    do {
                        int alt200=2;
                        int LA200_0 = input.LA(1);
                        if ( (LA200_0==DOT) ) {
                            alt200=1;
                        }
                        switch (alt200) {
                    	case 1 :
                    	    {
                    	    DOT512=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8443); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT512);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8445);
                    	    viewExpression513=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression513.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop200;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt202=3;
            int LA202_0 = input.LA(1);
            if ( (LA202_0==AS) ) {
                alt202=1;
            }
            else if ( (LA202_0==IDENT) ) {
                alt202=2;
            }
            switch (alt202) {
                case 1 :
                    {
                    AS514=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr8452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS514);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8456); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8462); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt203=3;
            int LA203_0 = input.LA(1);
            if ( (LA203_0==RETAINUNION) ) {
                alt203=1;
            }
            else if ( (LA203_0==RETAININTERSECTION) ) {
                alt203=2;
            }
            switch (alt203) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr8469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LCURLY515=null;
        Token COMMA517=null;
        Token RCURLY519=null;
        EsperEPL2GrammarParser.expression_return expression516 = null;
        EsperEPL2GrammarParser.expression_return expression518 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass520 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass521 = null;
        CommonTree d_tree=null;
        CommonTree LCURLY515_tree=null;
        CommonTree COMMA517_tree=null;
        CommonTree RCURLY519_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LCURLY515=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression8513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY515);
            int alt205=2;
            int LA205_0 = input.LA(1);
            if ( (LA205_0==WINDOW||LA205_0==ESCAPE||(LA205_0>=NOT_EXPR && LA205_0<=EVERY_EXPR)||LA205_0==WHERE||(LA205_0>=SUM && LA205_0<=COUNT)||LA205_0==CASE||LA205_0==OUTER||(LA205_0>=JOIN && LA205_0<=FULL)||(LA205_0>=EVENTS && LA205_0<=LAST)||(LA205_0>=UNIDIRECTIONAL && LA205_0<=CURRENT_TIMESTAMP)||(LA205_0>=SNAPSHOT && LA205_0<=INDEX)||(LA205_0>=BOOLEAN_TRUE && LA205_0<=VALUE_NULL)||(LA205_0>=DEFINE && LA205_0<=AFTER)||LA205_0==WHILE||(LA205_0>=MERGE && LA205_0<=MATCHED)||LA205_0==NEWKW||LA205_0==NUM_DOUBLE||(LA205_0>=IDENT && LA205_0<=LCURLY)||LA205_0==LPAREN||(LA205_0>=PLUS && LA205_0<=QUESTION)||(LA205_0>=STRING_LITERAL && LA205_0<=QUOTED_STRING_LITERAL)||LA205_0==MINUS||LA205_0==NUM_INT||(LA205_0>=TICKED_STRING_LITERAL && LA205_0<=NUM_FLOAT)) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression8516);
                    expression516=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression516.getTree());
                    loop204:
                    do {
                        int alt204=2;
                        int LA204_0 = input.LA(1);
                        if ( (LA204_0==COMMA) ) {
                            alt204=1;
                        }
                        switch (alt204) {
                    	case 1 :
                    	    {
                    	    COMMA517=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression8519); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA517);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression8521);
                    	    expression518=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression518.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop204;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY519=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression8528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY519);
            int alt207=2;
            int LA207_0 = input.LA(1);
            if ( (LA207_0==DOT) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression8533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression8535);
                    libFunctionNoClass520=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass520.getTree());
                    loop206:
                    do {
                        int alt206=2;
                        int LA206_0 = input.LA(1);
                        if ( (LA206_0==DOT) ) {
                            alt206=1;
                        }
                        switch (alt206) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression8540); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression8542);
                    	    libFunctionNoClass521=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass521.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop206;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_2);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token SUM522=null;
        Token LPAREN523=null;
        Token ALL524=null;
        Token DISTINCT525=null;
        Token RPAREN528=null;
        Token AVG529=null;
        Token LPAREN530=null;
        Token ALL531=null;
        Token DISTINCT532=null;
        Token RPAREN535=null;
        Token COUNT536=null;
        Token LPAREN537=null;
        Token ALL538=null;
        Token DISTINCT539=null;
        Token STAR541=null;
        Token RPAREN543=null;
        Token MEDIAN544=null;
        Token LPAREN545=null;
        Token ALL546=null;
        Token DISTINCT547=null;
        Token RPAREN550=null;
        Token STDDEV551=null;
        Token LPAREN552=null;
        Token ALL553=null;
        Token DISTINCT554=null;
        Token RPAREN557=null;
        Token AVEDEV558=null;
        Token LPAREN559=null;
        Token ALL560=null;
        Token DISTINCT561=null;
        Token RPAREN564=null;
        Token COALESCE568=null;
        Token LPAREN569=null;
        Token COMMA571=null;
        Token COMMA573=null;
        Token RPAREN575=null;
        Token PREVIOUS576=null;
        Token LPAREN577=null;
        Token COMMA579=null;
        Token RPAREN581=null;
        Token PREVIOUSTAIL584=null;
        Token LPAREN585=null;
        Token COMMA587=null;
        Token RPAREN589=null;
        Token PREVIOUSCOUNT592=null;
        Token LPAREN593=null;
        Token RPAREN595=null;
        Token PREVIOUSWINDOW596=null;
        Token LPAREN597=null;
        Token RPAREN599=null;
        Token PRIOR602=null;
        Token LPAREN603=null;
        Token NUM_INT604=null;
        Token COMMA605=null;
        Token RPAREN607=null;
        Token INSTANCEOF608=null;
        Token LPAREN609=null;
        Token COMMA611=null;
        Token COMMA613=null;
        Token RPAREN615=null;
        Token TYPEOF616=null;
        Token LPAREN617=null;
        Token RPAREN619=null;
        Token CAST620=null;
        Token LPAREN621=null;
        Token COMMA623=null;
        Token AS624=null;
        Token RPAREN626=null;
        Token EXISTS629=null;
        Token LPAREN630=null;
        Token RPAREN632=null;
        Token CURRENT_TIMESTAMP633=null;
        Token LPAREN634=null;
        Token RPAREN635=null;
        EsperEPL2GrammarParser.expression_return expression526 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr527 = null;
        EsperEPL2GrammarParser.expression_return expression533 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr534 = null;
        EsperEPL2GrammarParser.expression_return expression540 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr542 = null;
        EsperEPL2GrammarParser.expression_return expression548 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr549 = null;
        EsperEPL2GrammarParser.expression_return expression555 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr556 = null;
        EsperEPL2GrammarParser.expression_return expression562 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr563 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation565 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation566 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation567 = null;
        EsperEPL2GrammarParser.expression_return expression570 = null;
        EsperEPL2GrammarParser.expression_return expression572 = null;
        EsperEPL2GrammarParser.expression_return expression574 = null;
        EsperEPL2GrammarParser.expression_return expression578 = null;
        EsperEPL2GrammarParser.expression_return expression580 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass582 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass583 = null;
        EsperEPL2GrammarParser.expression_return expression586 = null;
        EsperEPL2GrammarParser.expression_return expression588 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass590 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass591 = null;
        EsperEPL2GrammarParser.expression_return expression594 = null;
        EsperEPL2GrammarParser.expression_return expression598 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass600 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass601 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty606 = null;
        EsperEPL2GrammarParser.expression_return expression610 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier612 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier614 = null;
        EsperEPL2GrammarParser.expression_return expression618 = null;
        EsperEPL2GrammarParser.expression_return expression622 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier625 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass627 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass628 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty631 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass636 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass637 = null;
        CommonTree d_tree=null;
        CommonTree SUM522_tree=null;
        CommonTree LPAREN523_tree=null;
        CommonTree ALL524_tree=null;
        CommonTree DISTINCT525_tree=null;
        CommonTree RPAREN528_tree=null;
        CommonTree AVG529_tree=null;
        CommonTree LPAREN530_tree=null;
        CommonTree ALL531_tree=null;
        CommonTree DISTINCT532_tree=null;
        CommonTree RPAREN535_tree=null;
        CommonTree COUNT536_tree=null;
        CommonTree LPAREN537_tree=null;
        CommonTree ALL538_tree=null;
        CommonTree DISTINCT539_tree=null;
        CommonTree STAR541_tree=null;
        CommonTree RPAREN543_tree=null;
        CommonTree MEDIAN544_tree=null;
        CommonTree LPAREN545_tree=null;
        CommonTree ALL546_tree=null;
        CommonTree DISTINCT547_tree=null;
        CommonTree RPAREN550_tree=null;
        CommonTree STDDEV551_tree=null;
        CommonTree LPAREN552_tree=null;
        CommonTree ALL553_tree=null;
        CommonTree DISTINCT554_tree=null;
        CommonTree RPAREN557_tree=null;
        CommonTree AVEDEV558_tree=null;
        CommonTree LPAREN559_tree=null;
        CommonTree ALL560_tree=null;
        CommonTree DISTINCT561_tree=null;
        CommonTree RPAREN564_tree=null;
        CommonTree COALESCE568_tree=null;
        CommonTree LPAREN569_tree=null;
        CommonTree COMMA571_tree=null;
        CommonTree COMMA573_tree=null;
        CommonTree RPAREN575_tree=null;
        CommonTree PREVIOUS576_tree=null;
        CommonTree LPAREN577_tree=null;
        CommonTree COMMA579_tree=null;
        CommonTree RPAREN581_tree=null;
        CommonTree PREVIOUSTAIL584_tree=null;
        CommonTree LPAREN585_tree=null;
        CommonTree COMMA587_tree=null;
        CommonTree RPAREN589_tree=null;
        CommonTree PREVIOUSCOUNT592_tree=null;
        CommonTree LPAREN593_tree=null;
        CommonTree RPAREN595_tree=null;
        CommonTree PREVIOUSWINDOW596_tree=null;
        CommonTree LPAREN597_tree=null;
        CommonTree RPAREN599_tree=null;
        CommonTree PRIOR602_tree=null;
        CommonTree LPAREN603_tree=null;
        CommonTree NUM_INT604_tree=null;
        CommonTree COMMA605_tree=null;
        CommonTree RPAREN607_tree=null;
        CommonTree INSTANCEOF608_tree=null;
        CommonTree LPAREN609_tree=null;
        CommonTree COMMA611_tree=null;
        CommonTree COMMA613_tree=null;
        CommonTree RPAREN615_tree=null;
        CommonTree TYPEOF616_tree=null;
        CommonTree LPAREN617_tree=null;
        CommonTree RPAREN619_tree=null;
        CommonTree CAST620_tree=null;
        CommonTree LPAREN621_tree=null;
        CommonTree COMMA623_tree=null;
        CommonTree AS624_tree=null;
        CommonTree RPAREN626_tree=null;
        CommonTree EXISTS629_tree=null;
        CommonTree LPAREN630_tree=null;
        CommonTree RPAREN632_tree=null;
        CommonTree CURRENT_TIMESTAMP633_tree=null;
        CommonTree LPAREN634_tree=null;
        CommonTree RPAREN635_tree=null;
        RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PREVIOUSTAIL=new RewriteRuleTokenStream(adaptor,"token PREVIOUSTAIL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_CURRENT_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token CURRENT_TIMESTAMP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PREVIOUS=new RewriteRuleTokenStream(adaptor,"token PREVIOUS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_PREVIOUSWINDOW=new RewriteRuleTokenStream(adaptor,"token PREVIOUSWINDOW");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            int alt237=20;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt237=1;
                }
                break;
            case AVG:
                {
                alt237=2;
                }
                break;
            case COUNT:
                {
                alt237=3;
                }
                break;
            case MEDIAN:
                {
                alt237=4;
                }
                break;
            case STDDEV:
                {
                alt237=5;
                }
                break;
            case AVEDEV:
                {
                alt237=6;
                }
                break;
            case FIRST:
                {
                alt237=7;
                }
                break;
            case LAST:
                {
                alt237=8;
                }
                break;
            case WINDOW:
                {
                alt237=9;
                }
                break;
            case COALESCE:
                {
                alt237=10;
                }
                break;
            case PREVIOUS:
                {
                alt237=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt237=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt237=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt237=14;
                }
                break;
            case PRIOR:
                {
                alt237=15;
                }
                break;
            case INSTANCEOF:
                {
                alt237=16;
                }
                break;
            case TYPEOF:
                {
                alt237=17;
                }
                break;
            case CAST:
                {
                alt237=18;
                }
                break;
            case EXISTS:
                {
                alt237=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt237=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);
                throw nvae;
            }
            switch (alt237) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM522=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc8591); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM522_tree = (CommonTree)adaptor.create(SUM522);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM522_tree, root_0);
                    }
                    LPAREN523=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8594); if (state.failed) return retval;
                    int alt208=3;
                    int LA208_0 = input.LA(1);
                    if ( (LA208_0==ALL) ) {
                        alt208=1;
                    }
                    else if ( (LA208_0==DISTINCT) ) {
                        alt208=2;
                    }
                    switch (alt208) {
                        case 1 :
                            {
                            ALL524=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8598); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT525=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8603); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT525_tree = (CommonTree)adaptor.create(DISTINCT525);
                            adaptor.addChild(root_0, DISTINCT525_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8607);
                    expression526=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression526.getTree());
                    int alt209=2;
                    int LA209_0 = input.LA(1);
                    if ( (LA209_0==COMMA) ) {
                        alt209=1;
                    }
                    switch (alt209) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc8609);
                            aggregationFilterExpr527=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr527.getTree());
                            }
                            break;
                    }
                    RPAREN528=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8612); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG529=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc8618); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG529_tree = (CommonTree)adaptor.create(AVG529);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG529_tree, root_0);
                    }
                    LPAREN530=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8621); if (state.failed) return retval;
                    int alt210=3;
                    int LA210_0 = input.LA(1);
                    if ( (LA210_0==ALL) ) {
                        alt210=1;
                    }
                    else if ( (LA210_0==DISTINCT) ) {
                        alt210=2;
                    }
                    switch (alt210) {
                        case 1 :
                            {
                            ALL531=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8625); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT532=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8630); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT532_tree = (CommonTree)adaptor.create(DISTINCT532);
                            adaptor.addChild(root_0, DISTINCT532_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8634);
                    expression533=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression533.getTree());
                    int alt211=2;
                    int LA211_0 = input.LA(1);
                    if ( (LA211_0==COMMA) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc8636);
                            aggregationFilterExpr534=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr534.getTree());
                            }
                            break;
                    }
                    RPAREN535=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8639); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT536=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc8645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT536_tree = (CommonTree)adaptor.create(COUNT536);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT536_tree, root_0);
                    }
                    LPAREN537=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8648); if (state.failed) return retval;
                    int alt213=2;
                    int LA213_0 = input.LA(1);
                    if ( (LA213_0==WINDOW||LA213_0==ESCAPE||(LA213_0>=NOT_EXPR && LA213_0<=EVERY_EXPR)||LA213_0==WHERE||(LA213_0>=SUM && LA213_0<=COUNT)||LA213_0==CASE||LA213_0==OUTER||(LA213_0>=JOIN && LA213_0<=FULL)||(LA213_0>=DISTINCT && LA213_0<=ALL)||(LA213_0>=EVENTS && LA213_0<=LAST)||(LA213_0>=UNIDIRECTIONAL && LA213_0<=CURRENT_TIMESTAMP)||(LA213_0>=SNAPSHOT && LA213_0<=INDEX)||(LA213_0>=BOOLEAN_TRUE && LA213_0<=VALUE_NULL)||(LA213_0>=DEFINE && LA213_0<=AFTER)||LA213_0==WHILE||(LA213_0>=MERGE && LA213_0<=MATCHED)||LA213_0==NEWKW||LA213_0==NUM_DOUBLE||(LA213_0>=IDENT && LA213_0<=LCURLY)||LA213_0==LPAREN||(LA213_0>=PLUS && LA213_0<=QUESTION)||(LA213_0>=STRING_LITERAL && LA213_0<=QUOTED_STRING_LITERAL)||LA213_0==MINUS||LA213_0==NUM_INT||(LA213_0>=TICKED_STRING_LITERAL && LA213_0<=NUM_FLOAT)) ) {
                        alt213=1;
                    }
                    else if ( (LA213_0==STAR) ) {
                        alt213=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 213, 0, input);
                        throw nvae;
                    }
                    switch (alt213) {
                        case 1 :
                            {
                            {
                            int alt212=3;
                            int LA212_0 = input.LA(1);
                            if ( (LA212_0==ALL) ) {
                                alt212=1;
                            }
                            else if ( (LA212_0==DISTINCT) ) {
                                alt212=2;
                            }
                            switch (alt212) {
                                case 1 :
                                    {
                                    ALL538=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8660); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT539=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8665); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT539_tree = (CommonTree)adaptor.create(DISTINCT539);
                                    adaptor.addChild(root_0, DISTINCT539_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc8669);
                            expression540=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression540.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR541=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc8680); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    int alt214=2;
                    int LA214_0 = input.LA(1);
                    if ( (LA214_0==COMMA) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc8691);
                            aggregationFilterExpr542=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr542.getTree());
                            }
                            break;
                    }
                    RPAREN543=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8694); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN544=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc8700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN544_tree = (CommonTree)adaptor.create(MEDIAN544);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN544_tree, root_0);
                    }
                    LPAREN545=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8703); if (state.failed) return retval;
                    int alt215=3;
                    int LA215_0 = input.LA(1);
                    if ( (LA215_0==ALL) ) {
                        alt215=1;
                    }
                    else if ( (LA215_0==DISTINCT) ) {
                        alt215=2;
                    }
                    switch (alt215) {
                        case 1 :
                            {
                            ALL546=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8707); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT547=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8712); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT547_tree = (CommonTree)adaptor.create(DISTINCT547);
                            adaptor.addChild(root_0, DISTINCT547_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8716);
                    expression548=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression548.getTree());
                    int alt216=2;
                    int LA216_0 = input.LA(1);
                    if ( (LA216_0==COMMA) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc8718);
                            aggregationFilterExpr549=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr549.getTree());
                            }
                            break;
                    }
                    RPAREN550=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8721); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV551=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc8727); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV551_tree = (CommonTree)adaptor.create(STDDEV551);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV551_tree, root_0);
                    }
                    LPAREN552=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8730); if (state.failed) return retval;
                    int alt217=3;
                    int LA217_0 = input.LA(1);
                    if ( (LA217_0==ALL) ) {
                        alt217=1;
                    }
                    else if ( (LA217_0==DISTINCT) ) {
                        alt217=2;
                    }
                    switch (alt217) {
                        case 1 :
                            {
                            ALL553=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8734); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT554=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8739); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT554_tree = (CommonTree)adaptor.create(DISTINCT554);
                            adaptor.addChild(root_0, DISTINCT554_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8743);
                    expression555=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression555.getTree());
                    int alt218=2;
                    int LA218_0 = input.LA(1);
                    if ( (LA218_0==COMMA) ) {
                        alt218=1;
                    }
                    switch (alt218) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc8745);
                            aggregationFilterExpr556=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr556.getTree());
                            }
                            break;
                    }
                    RPAREN557=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8748); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV558=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc8754); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV558_tree = (CommonTree)adaptor.create(AVEDEV558);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV558_tree, root_0);
                    }
                    LPAREN559=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8757); if (state.failed) return retval;
                    int alt219=3;
                    int LA219_0 = input.LA(1);
                    if ( (LA219_0==ALL) ) {
                        alt219=1;
                    }
                    else if ( (LA219_0==DISTINCT) ) {
                        alt219=2;
                    }
                    switch (alt219) {
                        case 1 :
                            {
                            ALL560=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8761); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT561=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8766); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT561_tree = (CommonTree)adaptor.create(DISTINCT561);
                            adaptor.addChild(root_0, DISTINCT561_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8770);
                    expression562=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression562.getTree());
                    int alt220=2;
                    int LA220_0 = input.LA(1);
                    if ( (LA220_0==COMMA) ) {
                        alt220=1;
                    }
                    switch (alt220) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc8772);
                            aggregationFilterExpr563=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr563.getTree());
                            }
                            break;
                    }
                    RPAREN564=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8775); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc8781);
                    firstAggregation565=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation565.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc8786);
                    lastAggregation566=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation566.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc8791);
                    windowAggregation567=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation567.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE568=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc8796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE568_tree = (CommonTree)adaptor.create(COALESCE568);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE568_tree, root_0);
                    }
                    LPAREN569=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8799); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8802);
                    expression570=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression570.getTree());
                    COMMA571=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8804); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8807);
                    expression572=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression572.getTree());
                    loop221:
                    do {
                        int alt221=2;
                        int LA221_0 = input.LA(1);
                        if ( (LA221_0==COMMA) ) {
                            alt221=1;
                        }
                        switch (alt221) {
                    	case 1 :
                    	    {
                    	    COMMA573=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8810); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc8813);
                    	    expression574=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression574.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop221;
                        }
                    } while (true);
                    RPAREN575=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8817); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    PREVIOUS576=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc8823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUS.add(PREVIOUS576);
                    LPAREN577=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8825); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN577);
                    pushFollow(FOLLOW_expression_in_builtinFunc8827);
                    expression578=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression578.getTree());
                    int alt222=2;
                    int LA222_0 = input.LA(1);
                    if ( (LA222_0==COMMA) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            {
                            COMMA579=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8830); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA579);
                            pushFollow(FOLLOW_expression_in_builtinFunc8832);
                            expression580=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression580.getTree());
                            }
                            break;
                    }
                    RPAREN581=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8836); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN581);
                    int alt224=2;
                    int LA224_0 = input.LA(1);
                    if ( (LA224_0==DOT) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8841); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8843);
                            libFunctionNoClass582=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass582.getTree());
                            loop223:
                            do {
                                int alt223=2;
                                int LA223_0 = input.LA(1);
                                if ( (LA223_0==DOT) ) {
                                    alt223=1;
                                }
                                switch (alt223) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8848); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8850);
                            	    libFunctionNoClass583=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass583.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop223;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    {
                    PREVIOUSTAIL584=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc8897); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSTAIL.add(PREVIOUSTAIL584);
                    LPAREN585=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8899); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN585);
                    pushFollow(FOLLOW_expression_in_builtinFunc8901);
                    expression586=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression586.getTree());
                    int alt225=2;
                    int LA225_0 = input.LA(1);
                    if ( (LA225_0==COMMA) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            {
                            COMMA587=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8904); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA587);
                            pushFollow(FOLLOW_expression_in_builtinFunc8906);
                            expression588=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression588.getTree());
                            }
                            break;
                    }
                    RPAREN589=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN589);
                    int alt227=2;
                    int LA227_0 = input.LA(1);
                    if ( (LA227_0==DOT) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8915); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8917);
                            libFunctionNoClass590=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass590.getTree());
                            loop226:
                            do {
                                int alt226=2;
                                int LA226_0 = input.LA(1);
                                if ( (LA226_0==DOT) ) {
                                    alt226=1;
                                }
                                switch (alt226) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8922); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8924);
                            	    libFunctionNoClass591=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass591.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop226;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT592=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc8971); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT592_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT592);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT592_tree, root_0);
                    }
                    LPAREN593=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8974); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8977);
                    expression594=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression594.getTree());
                    RPAREN595=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8979); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    PREVIOUSWINDOW596=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc8985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSWINDOW.add(PREVIOUSWINDOW596);
                    LPAREN597=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN597);
                    pushFollow(FOLLOW_expression_in_builtinFunc8989);
                    expression598=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression598.getTree());
                    RPAREN599=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN599);
                    int alt229=2;
                    int LA229_0 = input.LA(1);
                    if ( (LA229_0==DOT) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8996); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8998);
                            libFunctionNoClass600=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass600.getTree());
                            loop228:
                            do {
                                int alt228=2;
                                int LA228_0 = input.LA(1);
                                if ( (LA228_0==DOT) ) {
                                    alt228=1;
                                }
                                switch (alt228) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9003); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9005);
                            	    libFunctionNoClass601=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass601.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop228;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR602=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc9050); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR602_tree = (CommonTree)adaptor.create(PRIOR602);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR602_tree, root_0);
                    }
                    LPAREN603=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9053); if (state.failed) return retval;
                    NUM_INT604=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc9056); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT604_tree = (CommonTree)adaptor.create(NUM_INT604);
                    adaptor.addChild(root_0, NUM_INT604_tree);
                    }
                    COMMA605=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9058); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc9061);
                    eventProperty606=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty606.getTree());
                    RPAREN607=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9063); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF608=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc9073); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF608_tree = (CommonTree)adaptor.create(INSTANCEOF608);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF608_tree, root_0);
                    }
                    LPAREN609=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9076); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9079);
                    expression610=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression610.getTree());
                    COMMA611=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9081); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9084);
                    classIdentifier612=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier612.getTree());
                    loop230:
                    do {
                        int alt230=2;
                        int LA230_0 = input.LA(1);
                        if ( (LA230_0==COMMA) ) {
                            alt230=1;
                        }
                        switch (alt230) {
                    	case 1 :
                    	    {
                    	    COMMA613=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9087); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9090);
                    	    classIdentifier614=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier614.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop230;
                        }
                    } while (true);
                    RPAREN615=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9094); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF616=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc9100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF616_tree = (CommonTree)adaptor.create(TYPEOF616);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF616_tree, root_0);
                    }
                    LPAREN617=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9103); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9106);
                    expression618=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression618.getTree());
                    RPAREN619=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9108); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    CAST620=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc9114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAST.add(CAST620);
                    LPAREN621=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN621);
                    pushFollow(FOLLOW_expression_in_builtinFunc9118);
                    expression622=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression622.getTree());
                    int alt231=2;
                    int LA231_0 = input.LA(1);
                    if ( (LA231_0==COMMA) ) {
                        alt231=1;
                    }
                    else if ( (LA231_0==AS) ) {
                        alt231=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 231, 0, input);
                        throw nvae;
                    }
                    switch (alt231) {
                        case 1 :
                            {
                            COMMA623=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9121); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA623);
                            }
                            break;
                        case 2 :
                            {
                            AS624=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc9125); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS624);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9128);
                    classIdentifier625=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier625.getTree());
                    RPAREN626=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9130); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN626);
                    int alt233=2;
                    int LA233_0 = input.LA(1);
                    if ( (LA233_0==DOT) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9135); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9137);
                            libFunctionNoClass627=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass627.getTree());
                            loop232:
                            do {
                                int alt232=2;
                                int LA232_0 = input.LA(1);
                                if ( (LA232_0==DOT) ) {
                                    alt232=1;
                                }
                                switch (alt232) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9142); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9144);
                            	    libFunctionNoClass628=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass628.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop232;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_2, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS629=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc9189); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS629_tree = (CommonTree)adaptor.create(EXISTS629);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS629_tree, root_0);
                    }
                    LPAREN630=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9192); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc9195);
                    eventProperty631=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty631.getTree());
                    RPAREN632=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9197); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    CURRENT_TIMESTAMP633=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc9203); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURRENT_TIMESTAMP.add(CURRENT_TIMESTAMP633);
                    int alt234=2;
                    int LA234_0 = input.LA(1);
                    if ( (LA234_0==LPAREN) ) {
                        alt234=1;
                    }
                    switch (alt234) {
                        case 1 :
                            {
                            LPAREN634=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9206); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN634);
                            RPAREN635=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9208); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN635);
                            }
                            break;
                    }
                    int alt236=2;
                    int LA236_0 = input.LA(1);
                    if ( (LA236_0==DOT) ) {
                        alt236=1;
                    }
                    switch (alt236) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9215); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9217);
                            libFunctionNoClass636=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass636.getTree());
                            loop235:
                            do {
                                int alt235=2;
                                int LA235_0 = input.LA(1);
                                if ( (LA235_0==DOT) ) {
                                    alt235=1;
                                }
                                switch (alt235) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9222); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9224);
                            	    libFunctionNoClass637=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass637.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop235;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_2);
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token FIRST638=null;
        Token LPAREN639=null;
        Token COMMA641=null;
        Token RPAREN643=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr640 = null;
        EsperEPL2GrammarParser.expression_return expression642 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass644 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass645 = null;
        CommonTree d_tree=null;
        CommonTree FIRST638_tree=null;
        CommonTree LPAREN639_tree=null;
        CommonTree COMMA641_tree=null;
        CommonTree RPAREN643_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            FIRST638=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation9268); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST638);
            LPAREN639=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation9270); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN639);
            int alt239=2;
            int LA239_0 = input.LA(1);
            if ( (LA239_0==WINDOW||LA239_0==ESCAPE||(LA239_0>=NOT_EXPR && LA239_0<=EVERY_EXPR)||LA239_0==WHERE||(LA239_0>=SUM && LA239_0<=COUNT)||LA239_0==CASE||LA239_0==OUTER||(LA239_0>=JOIN && LA239_0<=FULL)||(LA239_0>=EVENTS && LA239_0<=LAST)||(LA239_0>=UNIDIRECTIONAL && LA239_0<=CURRENT_TIMESTAMP)||(LA239_0>=SNAPSHOT && LA239_0<=INDEX)||(LA239_0>=BOOLEAN_TRUE && LA239_0<=VALUE_NULL)||(LA239_0>=DEFINE && LA239_0<=AFTER)||LA239_0==WHILE||(LA239_0>=MERGE && LA239_0<=MATCHED)||LA239_0==NEWKW||LA239_0==NUM_DOUBLE||(LA239_0>=IDENT && LA239_0<=LCURLY)||LA239_0==LPAREN||LA239_0==STAR||(LA239_0>=PLUS && LA239_0<=QUESTION)||(LA239_0>=STRING_LITERAL && LA239_0<=QUOTED_STRING_LITERAL)||LA239_0==MINUS||LA239_0==NUM_INT||(LA239_0>=TICKED_STRING_LITERAL && LA239_0<=NUM_FLOAT)) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_firstAggregation9273);
                    accessAggExpr640=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr640.getTree());
                    int alt238=2;
                    int LA238_0 = input.LA(1);
                    if ( (LA238_0==COMMA) ) {
                        alt238=1;
                    }
                    switch (alt238) {
                        case 1 :
                            {
                            COMMA641=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation9276); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA641);
                            pushFollow(FOLLOW_expression_in_firstAggregation9278);
                            expression642=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression642.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN643=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation9284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN643);
            int alt241=2;
            int LA241_0 = input.LA(1);
            if ( (LA241_0==DOT) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation9289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation9291);
                    libFunctionNoClass644=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass644.getTree());
                    loop240:
                    do {
                        int alt240=2;
                        int LA240_0 = input.LA(1);
                        if ( (LA240_0==DOT) ) {
                            alt240=1;
                        }
                        switch (alt240) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation9296); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation9298);
                    	    libFunctionNoClass645=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass645.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop240;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LAST646=null;
        Token LPAREN647=null;
        Token COMMA649=null;
        Token RPAREN651=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr648 = null;
        EsperEPL2GrammarParser.expression_return expression650 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass652 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass653 = null;
        CommonTree d_tree=null;
        CommonTree LAST646_tree=null;
        CommonTree LPAREN647_tree=null;
        CommonTree COMMA649_tree=null;
        CommonTree RPAREN651_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LAST646=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation9353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST646);
            LPAREN647=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation9355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN647);
            int alt243=2;
            int LA243_0 = input.LA(1);
            if ( (LA243_0==WINDOW||LA243_0==ESCAPE||(LA243_0>=NOT_EXPR && LA243_0<=EVERY_EXPR)||LA243_0==WHERE||(LA243_0>=SUM && LA243_0<=COUNT)||LA243_0==CASE||LA243_0==OUTER||(LA243_0>=JOIN && LA243_0<=FULL)||(LA243_0>=EVENTS && LA243_0<=LAST)||(LA243_0>=UNIDIRECTIONAL && LA243_0<=CURRENT_TIMESTAMP)||(LA243_0>=SNAPSHOT && LA243_0<=INDEX)||(LA243_0>=BOOLEAN_TRUE && LA243_0<=VALUE_NULL)||(LA243_0>=DEFINE && LA243_0<=AFTER)||LA243_0==WHILE||(LA243_0>=MERGE && LA243_0<=MATCHED)||LA243_0==NEWKW||LA243_0==NUM_DOUBLE||(LA243_0>=IDENT && LA243_0<=LCURLY)||LA243_0==LPAREN||LA243_0==STAR||(LA243_0>=PLUS && LA243_0<=QUESTION)||(LA243_0>=STRING_LITERAL && LA243_0<=QUOTED_STRING_LITERAL)||LA243_0==MINUS||LA243_0==NUM_INT||(LA243_0>=TICKED_STRING_LITERAL && LA243_0<=NUM_FLOAT)) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_lastAggregation9358);
                    accessAggExpr648=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr648.getTree());
                    int alt242=2;
                    int LA242_0 = input.LA(1);
                    if ( (LA242_0==COMMA) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            {
                            COMMA649=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation9361); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA649);
                            pushFollow(FOLLOW_expression_in_lastAggregation9363);
                            expression650=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression650.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN651=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation9369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN651);
            int alt245=2;
            int LA245_0 = input.LA(1);
            if ( (LA245_0==DOT) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation9374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation9376);
                    libFunctionNoClass652=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass652.getTree());
                    loop244:
                    do {
                        int alt244=2;
                        int LA244_0 = input.LA(1);
                        if ( (LA244_0==DOT) ) {
                            alt244=1;
                        }
                        switch (alt244) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation9381); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation9383);
                    	    libFunctionNoClass653=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass653.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop244;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token WINDOW654=null;
        Token LPAREN655=null;
        Token RPAREN657=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr656 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass658 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass659 = null;
        CommonTree d_tree=null;
        CommonTree WINDOW654_tree=null;
        CommonTree LPAREN655_tree=null;
        CommonTree RPAREN657_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            WINDOW654=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation9439); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW654);
            LPAREN655=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation9441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN655);
            int alt246=2;
            int LA246_0 = input.LA(1);
            if ( (LA246_0==WINDOW||LA246_0==ESCAPE||(LA246_0>=NOT_EXPR && LA246_0<=EVERY_EXPR)||LA246_0==WHERE||(LA246_0>=SUM && LA246_0<=COUNT)||LA246_0==CASE||LA246_0==OUTER||(LA246_0>=JOIN && LA246_0<=FULL)||(LA246_0>=EVENTS && LA246_0<=LAST)||(LA246_0>=UNIDIRECTIONAL && LA246_0<=CURRENT_TIMESTAMP)||(LA246_0>=SNAPSHOT && LA246_0<=INDEX)||(LA246_0>=BOOLEAN_TRUE && LA246_0<=VALUE_NULL)||(LA246_0>=DEFINE && LA246_0<=AFTER)||LA246_0==WHILE||(LA246_0>=MERGE && LA246_0<=MATCHED)||LA246_0==NEWKW||LA246_0==NUM_DOUBLE||(LA246_0>=IDENT && LA246_0<=LCURLY)||LA246_0==LPAREN||LA246_0==STAR||(LA246_0>=PLUS && LA246_0<=QUESTION)||(LA246_0>=STRING_LITERAL && LA246_0<=QUOTED_STRING_LITERAL)||LA246_0==MINUS||LA246_0==NUM_INT||(LA246_0>=TICKED_STRING_LITERAL && LA246_0<=NUM_FLOAT)) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_windowAggregation9443);
                    accessAggExpr656=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr656.getTree());
                    }
                    break;
            }
            RPAREN657=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation9446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN657);
            int alt248=2;
            int LA248_0 = input.LA(1);
            if ( (LA248_0==DOT) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation9451); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation9453);
                    libFunctionNoClass658=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass658.getTree());
                    loop247:
                    do {
                        int alt247=2;
                        int LA247_0 = input.LA(1);
                        if ( (LA247_0==DOT) ) {
                            alt247=1;
                        }
                        switch (alt247) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation9458); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation9460);
                    	    libFunctionNoClass659=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass659.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop247;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector660 = null;
        EsperEPL2GrammarParser.expression_return expression661 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyStreamSelector=new RewriteRuleSubtreeStream(adaptor,"rule propertyStreamSelector");
        try {
            int alt249=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt249=1;
                }
                break;
            case IDENT:
                {
                int LA249_2 = input.LA(2);
                if ( (LA249_2==DOT) ) {
                    int LA249_73 = input.LA(3);
                    if ( (LA249_73==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt249=2;
                    }
                    else if ( (LA249_73==WINDOW||LA249_73==ESCAPE||LA249_73==EVERY_EXPR||LA249_73==WHERE||(LA249_73>=SUM && LA249_73<=COUNT)||LA249_73==OUTER||(LA249_73>=JOIN && LA249_73<=FULL)||(LA249_73>=EVENTS && LA249_73<=LAST)||(LA249_73>=UNIDIRECTIONAL && LA249_73<=PREVIOUSTAIL)||LA249_73==PRIOR||(LA249_73>=WEEKDAY && LA249_73<=CAST)||(LA249_73>=SNAPSHOT && LA249_73<=INDEX)||(LA249_73>=DEFINE && LA249_73<=AFTER)||LA249_73==WHILE||(LA249_73>=MERGE && LA249_73<=MATCHED)||LA249_73==IDENT||LA249_73==TICKED_STRING_LITERAL) ) {
                        alt249=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 249, 73, input);
                        throw nvae;
                    }
                }
                else if ( ((LA249_2>=IN_SET && LA249_2<=REGEXP)||(LA249_2>=OR_EXPR && LA249_2<=NOT_EXPR)||LA249_2==IS||(LA249_2>=LPAREN && LA249_2<=RPAREN)||(LA249_2>=COMMA && LA249_2<=EQUALS)||LA249_2==LBRACK||(LA249_2>=STAR && LA249_2<=QUESTION)||(LA249_2>=BAND && LA249_2<=MOD)||LA249_2==ESCAPECHAR) ) {
                    alt249=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 249, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt249=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);
                throw nvae;
            }
            switch (alt249) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr9517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr9537);
                    propertyStreamSelector660=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyStreamSelector.add(propertyStreamSelector660.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_propertyStreamSelector.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_accessAggExpr9550);
                    expression661=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression661.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class aggregationFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.aggregationFilterExpr_return retval = new EsperEPL2GrammarParser.aggregationFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA662=null;
        EsperEPL2GrammarParser.expression_return expression663 = null;
        CommonTree COMMA662_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            COMMA662=(Token)match(input,COMMA,FOLLOW_COMMA_in_aggregationFilterExpr9569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA662);
            pushFollow(FOLLOW_expression_in_aggregationFilterExpr9571);
            expression663=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression663.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGG_FILTER_EXPR, "AGG_FILTER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty664 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction665 = null;
        try {
            int alt250=2;
            int LA250_0 = input.LA(1);
            if ( (LA250_0==IDENT) ) {
                int LA250_1 = input.LA(2);
                if ( (LA250_1==DOT) ) {
                    int LA250_51 = input.LA(3);
                    if ( (LA250_51==IDENT) ) {
                        int LA250_291 = input.LA(4);
                        if ( (LA250_291==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==LPAREN) ) {
                            int LA250_697 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 697, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_291==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==DOT) ) {
                            int LA250_754 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 754, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 291, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_51==TICKED_STRING_LITERAL) ) {
                        int LA250_292 = input.LA(4);
                        if ( (LA250_292==DOT) ) {
                            int LA250_755 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 755, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_292==LPAREN) ) {
                            int LA250_756 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 756, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_292==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 292, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_51==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==MAX) ) {
                        int LA250_299 = input.LA(4);
                        if ( (LA250_299==LPAREN) ) {
                            int LA250_815 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 815, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_299==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_299==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 299, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_51==MIN) ) {
                        int LA250_300 = input.LA(4);
                        if ( (LA250_300==LPAREN) ) {
                            int LA250_875 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 875, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_300==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_300==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 300, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_51==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_51==WHERE||LA250_51==SET||LA250_51==AFTER) ) {
                        alt250=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 51, input);
                        throw nvae;
                    }
                }
                else if ( (LA250_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt250=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA250_354 = input.LA(4);
                        if ( ((LA250_354>=IN_SET && LA250_354<=REGEXP)||(LA250_354>=OR_EXPR && LA250_354<=NOT_EXPR)||LA250_354==IS||(LA250_354>=ASC && LA250_354<=DESC)||(LA250_354>=TIMEPERIOD_SEC && LA250_354<=TIMEPERIOD_SECONDS)||(LA250_354>=COMMA && LA250_354<=EQUALS)||(LA250_354>=STAR && LA250_354<=PLUS)||(LA250_354>=BAND && LA250_354<=MOD)) ) {
                            alt250=2;
                        }
                        else if ( (LA250_354==RPAREN) ) {
                            int LA250_960 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 960, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 354, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA250_355 = input.LA(4);
                        if ( ((LA250_355>=IN_SET && LA250_355<=REGEXP)||(LA250_355>=OR_EXPR && LA250_355<=NOT_EXPR)||LA250_355==IS||(LA250_355>=ASC && LA250_355<=DESC)||(LA250_355>=TIMEPERIOD_SEC && LA250_355<=TIMEPERIOD_SECONDS)||(LA250_355>=COMMA && LA250_355<=EQUALS)||(LA250_355>=STAR && LA250_355<=PLUS)||(LA250_355>=BAND && LA250_355<=MOD)) ) {
                            alt250=2;
                        }
                        else if ( (LA250_355==RPAREN) ) {
                            int LA250_991 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 991, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 355, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 54, input);
                        throw nvae;
                    }
                }
                else if ( (LA250_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA250_0==TICKED_STRING_LITERAL) ) {
                int LA250_2 = input.LA(2);
                if ( (LA250_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt250=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA250_430 = input.LA(4);
                        if ( ((LA250_430>=IN_SET && LA250_430<=REGEXP)||(LA250_430>=OR_EXPR && LA250_430<=NOT_EXPR)||LA250_430==IS||(LA250_430>=ASC && LA250_430<=DESC)||(LA250_430>=TIMEPERIOD_SEC && LA250_430<=TIMEPERIOD_SECONDS)||(LA250_430>=COMMA && LA250_430<=EQUALS)||(LA250_430>=STAR && LA250_430<=PLUS)||(LA250_430>=BAND && LA250_430<=MOD)) ) {
                            alt250=2;
                        }
                        else if ( (LA250_430==RPAREN) ) {
                            int LA250_1022 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1022, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 430, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA250_431 = input.LA(4);
                        if ( ((LA250_431>=IN_SET && LA250_431<=REGEXP)||(LA250_431>=OR_EXPR && LA250_431<=NOT_EXPR)||LA250_431==IS||(LA250_431>=ASC && LA250_431<=DESC)||(LA250_431>=TIMEPERIOD_SEC && LA250_431<=TIMEPERIOD_SECONDS)||(LA250_431>=COMMA && LA250_431<=EQUALS)||(LA250_431>=STAR && LA250_431<=PLUS)||(LA250_431>=BAND && LA250_431<=MOD)) ) {
                            alt250=2;
                        }
                        else if ( (LA250_431==RPAREN) ) {
                            int LA250_1053 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1053, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 431, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 111, input);
                        throw nvae;
                    }
                }
                else if ( (LA250_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==DOT) ) {
                    int LA250_115 = input.LA(3);
                    if ( (LA250_115==IDENT) ) {
                        int LA250_493 = input.LA(4);
                        if ( (LA250_493==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==LPAREN) ) {
                            int LA250_1061 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1061, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_493==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_493==DOT) ) {
                            int LA250_1118 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1118, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 493, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_115==TICKED_STRING_LITERAL) ) {
                        int LA250_494 = input.LA(4);
                        if ( (LA250_494==DOT) ) {
                            int LA250_1119 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1119, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_494==LPAREN) ) {
                            int LA250_1120 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1120, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_494==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_494==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 494, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_115==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==MAX) ) {
                        int LA250_501 = input.LA(4);
                        if ( (LA250_501==LPAREN) ) {
                            int LA250_1179 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1179, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_501==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_501==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 501, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_115==MIN) ) {
                        int LA250_502 = input.LA(4);
                        if ( (LA250_502==LPAREN) ) {
                            int LA250_1239 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1239, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_502==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_502==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 502, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_115==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_115==WHERE||LA250_115==SET||LA250_115==AFTER) ) {
                        alt250=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 115, input);
                        throw nvae;
                    }
                }
                else if ( (LA250_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA250_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==MAX) ) {
                int LA250_9 = input.LA(2);
                if ( (LA250_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt250=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA250_556 = input.LA(4);
                        if ( ((LA250_556>=IN_SET && LA250_556<=REGEXP)||(LA250_556>=OR_EXPR && LA250_556<=NOT_EXPR)||LA250_556==IS||(LA250_556>=ASC && LA250_556<=DESC)||(LA250_556>=TIMEPERIOD_SEC && LA250_556<=TIMEPERIOD_SECONDS)||(LA250_556>=COMMA && LA250_556<=EQUALS)||(LA250_556>=STAR && LA250_556<=PLUS)||(LA250_556>=BAND && LA250_556<=MOD)) ) {
                            alt250=2;
                        }
                        else if ( (LA250_556==RPAREN) ) {
                            int LA250_1324 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1324, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 556, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA250_557 = input.LA(4);
                        if ( ((LA250_557>=IN_SET && LA250_557<=REGEXP)||(LA250_557>=OR_EXPR && LA250_557<=NOT_EXPR)||LA250_557==IS||(LA250_557>=ASC && LA250_557<=DESC)||(LA250_557>=TIMEPERIOD_SEC && LA250_557<=TIMEPERIOD_SECONDS)||(LA250_557>=COMMA && LA250_557<=EQUALS)||(LA250_557>=STAR && LA250_557<=PLUS)||(LA250_557>=BAND && LA250_557<=MOD)) ) {
                            alt250=2;
                        }
                        else if ( (LA250_557==RPAREN) ) {
                            int LA250_1355 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1355, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 557, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 171, input);
                        throw nvae;
                    }
                }
                else if ( (LA250_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA250_0==MIN) ) {
                int LA250_10 = input.LA(2);
                if ( (LA250_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case AFTER:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt250=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA250_632 = input.LA(4);
                        if ( ((LA250_632>=IN_SET && LA250_632<=REGEXP)||(LA250_632>=OR_EXPR && LA250_632<=NOT_EXPR)||LA250_632==IS||(LA250_632>=ASC && LA250_632<=DESC)||(LA250_632>=TIMEPERIOD_SEC && LA250_632<=TIMEPERIOD_SECONDS)||(LA250_632>=COMMA && LA250_632<=EQUALS)||(LA250_632>=STAR && LA250_632<=PLUS)||(LA250_632>=BAND && LA250_632<=MOD)) ) {
                            alt250=2;
                        }
                        else if ( (LA250_632==RPAREN) ) {
                            int LA250_1386 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1386, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 632, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA250_633 = input.LA(4);
                        if ( ((LA250_633>=IN_SET && LA250_633<=REGEXP)||(LA250_633>=OR_EXPR && LA250_633<=NOT_EXPR)||LA250_633==IS||(LA250_633>=ASC && LA250_633<=DESC)||(LA250_633>=TIMEPERIOD_SEC && LA250_633<=TIMEPERIOD_SECONDS)||(LA250_633>=COMMA && LA250_633<=EQUALS)||(LA250_633>=STAR && LA250_633<=PLUS)||(LA250_633>=BAND && LA250_633<=MOD)) ) {
                            alt250=2;
                        }
                        else if ( (LA250_633==RPAREN) ) {
                            int LA250_1417 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1417, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 633, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 231, input);
                        throw nvae;
                    }
                }
                else if ( (LA250_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA250_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==WHERE||LA250_0==SET||LA250_0==AFTER) ) {
                alt250=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 250, 0, input);
                throw nvae;
            }
            switch (alt250) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction9599);
                    eventProperty664=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty664.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction9604);
                    libFunction665=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction665.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT667=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass666 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass668 = null;
        CommonTree DOT667_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction9616);
            libFunctionWithClass666=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass666.getTree());
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);
                if ( (LA251_0==DOT) ) {
                    alt251=1;
                }
                switch (alt251) {
            	case 1 :
            	    {
            	    DOT667=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction9619); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT667);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction9621);
            	    libFunctionNoClass668=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass668.getTree());
            	    }
            	    break;
            	default :
            	    break loop251;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token DOT670=null;
        Token RPAREN673=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy669 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent671 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs672 = null;
        CommonTree l_tree=null;
        CommonTree DOT670_tree=null;
        CommonTree RPAREN673_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt252=2;
            int LA252_0 = input.LA(1);
            if ( (LA252_0==IDENT) ) {
                int LA252_1 = input.LA(2);
                if ( (LA252_1==DOT) ) {
                    alt252=1;
                }
            }
            else if ( (LA252_0==TICKED_STRING_LITERAL) ) {
                int LA252_2 = input.LA(2);
                if ( (LA252_2==DOT) ) {
                    alt252=1;
                }
            }
            switch (alt252) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass9651);
                    classIdentifierNonGreedy669=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy669.getTree());
                    DOT670=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass9653); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT670);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass9657);
            funcIdent671=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent671.getTree());
            l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass9661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(l);
            int alt253=2;
            int LA253_0 = input.LA(1);
            if ( (LA253_0==WINDOW||LA253_0==ESCAPE||(LA253_0>=NOT_EXPR && LA253_0<=EVERY_EXPR)||LA253_0==WHERE||(LA253_0>=SUM && LA253_0<=COUNT)||LA253_0==CASE||LA253_0==OUTER||(LA253_0>=JOIN && LA253_0<=FULL)||(LA253_0>=DISTINCT && LA253_0<=ALL)||(LA253_0>=EVENTS && LA253_0<=LAST)||(LA253_0>=UNIDIRECTIONAL && LA253_0<=CURRENT_TIMESTAMP)||(LA253_0>=SNAPSHOT && LA253_0<=INDEX)||(LA253_0>=BOOLEAN_TRUE && LA253_0<=VALUE_NULL)||(LA253_0>=DEFINE && LA253_0<=AFTER)||LA253_0==WHILE||(LA253_0>=MERGE && LA253_0<=MATCHED)||LA253_0==NEWKW||LA253_0==NUM_DOUBLE||(LA253_0>=IDENT && LA253_0<=LCURLY)||LA253_0==LPAREN||LA253_0==LBRACK||LA253_0==STAR||(LA253_0>=PLUS && LA253_0<=QUESTION)||(LA253_0>=STRING_LITERAL && LA253_0<=QUOTED_STRING_LITERAL)||LA253_0==MINUS||LA253_0==NUM_INT||(LA253_0>=TICKED_STRING_LITERAL && LA253_0<=NUM_FLOAT)) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass9664);
                    libFunctionArgs672=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs672.getTree());
                    }
                    break;
            }
            RPAREN673=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass9668); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN673);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token RPAREN676=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent674 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs675 = null;
        CommonTree l_tree=null;
        CommonTree RPAREN676_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass9701);
            funcIdent674=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent674.getTree());
            int alt255=2;
            int LA255_0 = input.LA(1);
            if ( (LA255_0==LPAREN) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass9706); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    int alt254=2;
                    int LA254_0 = input.LA(1);
                    if ( (LA254_0==WINDOW||LA254_0==ESCAPE||(LA254_0>=NOT_EXPR && LA254_0<=EVERY_EXPR)||LA254_0==WHERE||(LA254_0>=SUM && LA254_0<=COUNT)||LA254_0==CASE||LA254_0==OUTER||(LA254_0>=JOIN && LA254_0<=FULL)||(LA254_0>=DISTINCT && LA254_0<=ALL)||(LA254_0>=EVENTS && LA254_0<=LAST)||(LA254_0>=UNIDIRECTIONAL && LA254_0<=CURRENT_TIMESTAMP)||(LA254_0>=SNAPSHOT && LA254_0<=INDEX)||(LA254_0>=BOOLEAN_TRUE && LA254_0<=VALUE_NULL)||(LA254_0>=DEFINE && LA254_0<=AFTER)||LA254_0==WHILE||(LA254_0>=MERGE && LA254_0<=MATCHED)||LA254_0==NEWKW||LA254_0==NUM_DOUBLE||(LA254_0>=IDENT && LA254_0<=LCURLY)||LA254_0==LPAREN||LA254_0==LBRACK||LA254_0==STAR||(LA254_0>=PLUS && LA254_0<=QUESTION)||(LA254_0>=STRING_LITERAL && LA254_0<=QUOTED_STRING_LITERAL)||LA254_0==MINUS||LA254_0==NUM_INT||(LA254_0>=TICKED_STRING_LITERAL && LA254_0<=NUM_FLOAT)) ) {
                        alt254=1;
                    }
                    switch (alt254) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass9709);
                            libFunctionArgs675=libFunctionArgs();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs675.getTree());
                            }
                            break;
                    }
                    RPAREN676=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass9713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN676);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        Token w=null;
        Token s=null;
        Token after=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent677 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree w_tree=null;
        CommonTree s_tree=null;
        CommonTree after_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        try {
            int alt256=6;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt256=1;
                }
                break;
            case MAX:
                {
                alt256=2;
                }
                break;
            case MIN:
                {
                alt256=3;
                }
                break;
            case WHERE:
                {
                alt256=4;
                }
                break;
            case SET:
                {
                alt256=5;
                }
                break;
            case AFTER:
                {
                alt256=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);
                throw nvae;
            }
            switch (alt256) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent9745);
                    escapableIdent677=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent677.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent9752); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent9764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_funcIdent9776); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, w));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,SET,FOLLOW_SET_in_funcIdent9788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    {
                    after=(Token)match(input,AFTER,FOLLOW_AFTER_in_funcIdent9800); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AFTER.add(after);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, after));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL678=null;
        Token DISTINCT679=null;
        Token COMMA681=null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem680 = null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem682 = null;
        CommonTree ALL678_tree=null;
        CommonTree DISTINCT679_tree=null;
        CommonTree COMMA681_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt257=3;
            int LA257_0 = input.LA(1);
            if ( (LA257_0==ALL) ) {
                alt257=1;
            }
            else if ( (LA257_0==DISTINCT) ) {
                alt257=2;
            }
            switch (alt257) {
                case 1 :
                    {
                    ALL678=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs9817); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT679=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs9822); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT679_tree = (CommonTree)adaptor.create(DISTINCT679);
                    adaptor.addChild(root_0, DISTINCT679_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs9826);
            libFunctionArgItem680=libFunctionArgItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem680.getTree());
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);
                if ( (LA258_0==COMMA) ) {
                    alt258=1;
                }
                switch (alt258) {
            	case 1 :
            	    {
            	    COMMA681=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs9829); if (state.failed) return retval;
            	    pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs9832);
            	    libFunctionArgItem682=libFunctionArgItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem682.getTree());
            	    }
            	    break;
            	default :
            	    break loop258;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgItem_return retval = new EsperEPL2GrammarParser.libFunctionArgItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl683 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime684 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt259=2;
            int LA259_0 = input.LA(1);
            if ( (LA259_0==IDENT) ) {
                int LA259_1 = input.LA(2);
                if ( (LA259_1==GOES) ) {
                    alt259=1;
                }
            }
            else if ( (LA259_0==LPAREN) ) {
                int LA259_2 = input.LA(2);
                if ( (LA259_2==IDENT) ) {
                    int LA259_145 = input.LA(3);
                    if ( (LA259_145==RPAREN) ) {
                        int LA259_226 = input.LA(4);
                        if ( (LA259_226==GOES) ) {
                            alt259=1;
                        }
                    }
                    else if ( (LA259_145==COMMA) ) {
                        alt259=1;
                    }
                }
            }
            switch (alt259) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_libFunctionArgItem9846);
                    expressionLambdaDecl683=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionLambdaDecl683.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionWithTime_in_libFunctionArgItem9849);
            expressionWithTime684=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime684.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR686=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr685 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr687 = null;
        CommonTree AND_EXPR686_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList9860);
            concatenationExpr685=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr685.getTree());
            AND_EXPR686=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList9862); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList9865);
            concatenationExpr687=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr687.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression688 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression9893);
            followedByExpression688=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression688.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression689 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat690 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression9912);
            orExpression689=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression689.getTree());
            loop260:
            do {
                int alt260=2;
                int LA260_0 = input.LA(1);
                if ( ((LA260_0>=FOLLOWED_BY && LA260_0<=FOLLOWMAX_BEGIN)) ) {
                    alt260=1;
                }
                switch (alt260) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression9915);
            	    followedByRepeat690=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat690.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop260;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END692=null;
        EsperEPL2GrammarParser.expression_return expression691 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression693 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END692_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt261=2;
            int LA261_0 = input.LA(1);
            if ( (LA261_0==FOLLOWED_BY) ) {
                alt261=1;
            }
            else if ( (LA261_0==FOLLOWMAX_BEGIN) ) {
                alt261=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);
                throw nvae;
            }
            switch (alt261) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat9968); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat9975); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat9977);
                    expression691=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression691.getTree());
                    FOLLOWMAX_END692=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat9979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END692);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat9983);
            orExpression693=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression693.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression694 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression695 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression10012);
            andExpression694=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression694.getTree());
            loop262:
            do {
                int alt262=2;
                int LA262_0 = input.LA(1);
                if ( (LA262_0==OR_EXPR) ) {
                    alt262=1;
                }
                switch (alt262) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression10017); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression10019);
            	    andExpression695=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression695.getTree());
            	    }
            	    break;
            	default :
            	    break loop262;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression696 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression697 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression10051);
            matchUntilExpression696=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression696.getTree());
            loop263:
            do {
                int alt263=2;
                int LA263_0 = input.LA(1);
                if ( (LA263_0==AND_EXPR) ) {
                    alt263=1;
                }
                switch (alt263) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression10056); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression10058);
            	    matchUntilExpression697=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression697.getTree());
            	    }
            	    break;
            	default :
            	    break loop263;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression698 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression699 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt264=2;
            int LA264_0 = input.LA(1);
            if ( (LA264_0==LBRACK) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression10093);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression10097);
            qualifyExpression698=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression698.getTree());
            int alt265=2;
            int LA265_0 = input.LA(1);
            if ( (LA265_0==UNTIL) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression10102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression10104);
                    qualifyExpression699=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression699.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList700 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix701 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt268=2;
            int LA268_0 = input.LA(1);
            if ( ((LA268_0>=NOT_EXPR && LA268_0<=EVERY_DISTINCT_EXPR)) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    {
                    int alt266=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt266=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt266=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt266=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 266, 0, input);
                        throw nvae;
                    }
                    switch (alt266) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression10169); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression10175); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression10181); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression10183);
                            distinctExpressionList700=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList700.getTree());
                            }
                            break;
                    }
                    int alt267=2;
                    int LA267_0 = input.LA(1);
                    if ( (LA267_0==LBRACK) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression10189);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression10198);
            guardPostFix701=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix701.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN702=null;
        Token COMMA704=null;
        Token RPAREN706=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom703 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom705 = null;
        CommonTree LPAREN702_tree=null;
        CommonTree COMMA704_tree=null;
        CommonTree RPAREN706_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN702=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList10313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN702);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList10315);
            distinctExpressionAtom703=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom703.getTree());
            loop269:
            do {
                int alt269=2;
                int LA269_0 = input.LA(1);
                if ( (LA269_0==COMMA) ) {
                    alt269=1;
                }
                switch (alt269) {
            	case 1 :
            	    {
            	    COMMA704=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList10318); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA704);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList10320);
            	    distinctExpressionAtom705=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom705.getTree());
            	    }
            	    break;
            	default :
            	    break loop269;
                }
            } while (true);
            RPAREN706=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList10324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN706);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime707 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom10347);
            expressionWithTime707=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime707.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN710=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression708 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression709 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression711 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression712 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN710_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt270=2;
            int LA270_0 = input.LA(1);
            if ( (LA270_0==IDENT||LA270_0==TICKED_STRING_LITERAL) ) {
                alt270=1;
            }
            else if ( (LA270_0==LPAREN) ) {
                alt270=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);
                throw nvae;
            }
            switch (alt270) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix10362);
                    atomicExpression708=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression708.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix10368); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix10370);
                    patternExpression709=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression709.getTree());
                    RPAREN710=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix10372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN710);
                    }
                    break;
            }
            int alt271=3;
            int LA271_0 = input.LA(1);
            if ( (LA271_0==WHERE) ) {
                alt271=1;
            }
            else if ( (LA271_0==WHILE) ) {
                alt271=2;
            }
            switch (alt271) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix10379); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix10381);
                    guardWhereExpression711=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression711.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix10389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix10391);
                    guardWhileExpression712=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression712.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression713 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression714 = null;
        try {
            int alt272=2;
            int LA272_0 = input.LA(1);
            if ( (LA272_0==IDENT) ) {
                int LA272_1 = input.LA(2);
                if ( (LA272_1==COLON) ) {
                    alt272=1;
                }
                else if ( (LA272_1==EOF||(LA272_1>=OR_EXPR && LA272_1<=AND_EXPR)||LA272_1==WHERE||LA272_1==UNTIL||LA272_1==WHILE||(LA272_1>=LPAREN && LA272_1<=RPAREN)||(LA272_1>=EQUALS && LA272_1<=RBRACK)||(LA272_1>=FOLLOWED_BY && LA272_1<=FOLLOWMAX_BEGIN)||LA272_1==ATCHAR) ) {
                    alt272=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA272_0==TICKED_STRING_LITERAL) ) {
                alt272=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);
                throw nvae;
            }
            switch (alt272) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression10453);
                    observerExpression713=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression713.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression10457);
                    patternFilterExpression714=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression714.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON715=null;
        Token LPAREN716=null;
        Token RPAREN718=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList717 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON715_tree=null;
        CommonTree LPAREN716_tree=null;
        CommonTree RPAREN718_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression10472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON715=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression10474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON715);
            int alt273=2;
            int LA273_0 = input.LA(1);
            if ( (LA273_0==IDENT) ) {
                alt273=1;
            }
            else if ( (LA273_0==AT) ) {
                alt273=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);
                throw nvae;
            }
            switch (alt273) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression10479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression10485); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN716=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression10488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN716);
            int alt274=2;
            int LA274_0 = input.LA(1);
            if ( (LA274_0==WINDOW||LA274_0==ESCAPE||(LA274_0>=NOT_EXPR && LA274_0<=EVERY_EXPR)||LA274_0==WHERE||(LA274_0>=SUM && LA274_0<=COUNT)||LA274_0==CASE||LA274_0==OUTER||(LA274_0>=JOIN && LA274_0<=FULL)||(LA274_0>=EVENTS && LA274_0<=LAST)||(LA274_0>=UNIDIRECTIONAL && LA274_0<=CURRENT_TIMESTAMP)||(LA274_0>=SNAPSHOT && LA274_0<=INDEX)||(LA274_0>=BOOLEAN_TRUE && LA274_0<=VALUE_NULL)||(LA274_0>=DEFINE && LA274_0<=AFTER)||LA274_0==WHILE||(LA274_0>=MERGE && LA274_0<=MATCHED)||LA274_0==NEWKW||LA274_0==NUM_DOUBLE||(LA274_0>=IDENT && LA274_0<=LCURLY)||LA274_0==LPAREN||LA274_0==LBRACK||LA274_0==STAR||(LA274_0>=PLUS && LA274_0<=QUESTION)||(LA274_0>=STRING_LITERAL && LA274_0<=QUOTED_STRING_LITERAL)||LA274_0==MINUS||LA274_0==NUM_INT||(LA274_0>=TICKED_STRING_LITERAL && LA274_0<=NUM_FLOAT)) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression10490);
                    expressionWithTimeList717=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList717.getTree());
                    }
                    break;
            }
            RPAREN718=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression10493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN718);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT719=null;
        Token COLON720=null;
        Token IDENT721=null;
        Token LPAREN722=null;
        Token RPAREN724=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList723 = null;
        CommonTree IDENT719_tree=null;
        CommonTree COLON720_tree=null;
        CommonTree IDENT721_tree=null;
        CommonTree LPAREN722_tree=null;
        CommonTree RPAREN724_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT719=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression10542); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT719_tree = (CommonTree)adaptor.create(IDENT719);
            adaptor.addChild(root_0, IDENT719_tree);
            }
            COLON720=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression10544); if (state.failed) return retval;
            IDENT721=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression10547); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT721_tree = (CommonTree)adaptor.create(IDENT721);
            adaptor.addChild(root_0, IDENT721_tree);
            }
            LPAREN722=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression10549); if (state.failed) return retval;
            int alt275=2;
            int LA275_0 = input.LA(1);
            if ( (LA275_0==WINDOW||LA275_0==ESCAPE||(LA275_0>=NOT_EXPR && LA275_0<=EVERY_EXPR)||LA275_0==WHERE||(LA275_0>=SUM && LA275_0<=COUNT)||LA275_0==CASE||LA275_0==OUTER||(LA275_0>=JOIN && LA275_0<=FULL)||(LA275_0>=EVENTS && LA275_0<=LAST)||(LA275_0>=UNIDIRECTIONAL && LA275_0<=CURRENT_TIMESTAMP)||(LA275_0>=SNAPSHOT && LA275_0<=INDEX)||(LA275_0>=BOOLEAN_TRUE && LA275_0<=VALUE_NULL)||(LA275_0>=DEFINE && LA275_0<=AFTER)||LA275_0==WHILE||(LA275_0>=MERGE && LA275_0<=MATCHED)||LA275_0==NEWKW||LA275_0==NUM_DOUBLE||(LA275_0>=IDENT && LA275_0<=LCURLY)||LA275_0==LPAREN||LA275_0==LBRACK||LA275_0==STAR||(LA275_0>=PLUS && LA275_0<=QUESTION)||(LA275_0>=STRING_LITERAL && LA275_0<=QUOTED_STRING_LITERAL)||LA275_0==MINUS||LA275_0==NUM_INT||(LA275_0>=TICKED_STRING_LITERAL && LA275_0<=NUM_FLOAT)) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression10553);
                    expressionWithTimeList723=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList723.getTree());
                    }
                    break;
            }
            RPAREN724=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression10557); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN725=null;
        Token RPAREN727=null;
        EsperEPL2GrammarParser.expression_return expression726 = null;
        CommonTree LPAREN725_tree=null;
        CommonTree RPAREN727_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN725=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression10570); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression10573);
            expression726=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression726.getTree());
            RPAREN727=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression10575); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK728=null;
        Token RBRACK732=null;
        EsperEPL2GrammarParser.expression_return expression729 = null;
        EsperEPL2GrammarParser.expression_return expression730 = null;
        EsperEPL2GrammarParser.expression_return expression731 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK728_tree=null;
        CommonTree RBRACK732_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK728=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange10596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK728);
            int alt278=2;
            int LA278_0 = input.LA(1);
            if ( (LA278_0==WINDOW||LA278_0==ESCAPE||(LA278_0>=NOT_EXPR && LA278_0<=EVERY_EXPR)||LA278_0==WHERE||(LA278_0>=SUM && LA278_0<=COUNT)||LA278_0==CASE||LA278_0==OUTER||(LA278_0>=JOIN && LA278_0<=FULL)||(LA278_0>=EVENTS && LA278_0<=LAST)||(LA278_0>=UNIDIRECTIONAL && LA278_0<=CURRENT_TIMESTAMP)||(LA278_0>=SNAPSHOT && LA278_0<=INDEX)||(LA278_0>=BOOLEAN_TRUE && LA278_0<=VALUE_NULL)||(LA278_0>=DEFINE && LA278_0<=AFTER)||LA278_0==WHILE||(LA278_0>=MERGE && LA278_0<=MATCHED)||LA278_0==NEWKW||LA278_0==NUM_DOUBLE||(LA278_0>=IDENT && LA278_0<=LCURLY)||LA278_0==LPAREN||(LA278_0>=PLUS && LA278_0<=QUESTION)||(LA278_0>=STRING_LITERAL && LA278_0<=QUOTED_STRING_LITERAL)||LA278_0==MINUS||LA278_0==NUM_INT||(LA278_0>=TICKED_STRING_LITERAL && LA278_0<=NUM_FLOAT)) ) {
                alt278=1;
            }
            else if ( (LA278_0==COLON) ) {
                alt278=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 278, 0, input);
                throw nvae;
            }
            switch (alt278) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange10603);
                    expression729=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression729.getTree());
                    int alt277=2;
                    int LA277_0 = input.LA(1);
                    if ( (LA277_0==COLON) ) {
                        alt277=1;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange10608); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt276=2;
                            int LA276_0 = input.LA(1);
                            if ( (LA276_0==WINDOW||LA276_0==ESCAPE||(LA276_0>=NOT_EXPR && LA276_0<=EVERY_EXPR)||LA276_0==WHERE||(LA276_0>=SUM && LA276_0<=COUNT)||LA276_0==CASE||LA276_0==OUTER||(LA276_0>=JOIN && LA276_0<=FULL)||(LA276_0>=EVENTS && LA276_0<=LAST)||(LA276_0>=UNIDIRECTIONAL && LA276_0<=CURRENT_TIMESTAMP)||(LA276_0>=SNAPSHOT && LA276_0<=INDEX)||(LA276_0>=BOOLEAN_TRUE && LA276_0<=VALUE_NULL)||(LA276_0>=DEFINE && LA276_0<=AFTER)||LA276_0==WHILE||(LA276_0>=MERGE && LA276_0<=MATCHED)||LA276_0==NEWKW||LA276_0==NUM_DOUBLE||(LA276_0>=IDENT && LA276_0<=LCURLY)||LA276_0==LPAREN||(LA276_0>=PLUS && LA276_0<=QUESTION)||(LA276_0>=STRING_LITERAL && LA276_0<=QUOTED_STRING_LITERAL)||LA276_0==MINUS||LA276_0==NUM_INT||(LA276_0>=TICKED_STRING_LITERAL && LA276_0<=NUM_FLOAT)) ) {
                                alt276=1;
                            }
                            switch (alt276) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange10611);
                                    expression730=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression730.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange10631); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange10633);
                    expression731=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression731.getTree());
                    }
                    break;
            }
            RBRACK732=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange10644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK732);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS733=null;
        Token LPAREN735=null;
        Token RPAREN737=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier734 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList736 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression738 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS733_tree=null;
        CommonTree LPAREN735_tree=null;
        CommonTree RPAREN737_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt279=2;
            int LA279_0 = input.LA(1);
            if ( (LA279_0==IDENT) ) {
                int LA279_1 = input.LA(2);
                if ( (LA279_1==EQUALS) ) {
                    alt279=1;
                }
            }
            switch (alt279) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression10731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS733=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression10733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS733);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression10742);
            classIdentifier734=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier734.getTree());
            int alt281=2;
            int LA281_0 = input.LA(1);
            if ( (LA281_0==LPAREN) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    {
                    LPAREN735=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression10753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN735);
                    int alt280=2;
                    int LA280_0 = input.LA(1);
                    if ( (LA280_0==WINDOW||LA280_0==ESCAPE||(LA280_0>=NOT_EXPR && LA280_0<=EVERY_EXPR)||LA280_0==WHERE||(LA280_0>=SUM && LA280_0<=COUNT)||LA280_0==CASE||LA280_0==OUTER||(LA280_0>=JOIN && LA280_0<=FULL)||(LA280_0>=EVENTS && LA280_0<=LAST)||(LA280_0>=UNIDIRECTIONAL && LA280_0<=CURRENT_TIMESTAMP)||(LA280_0>=SNAPSHOT && LA280_0<=INDEX)||(LA280_0>=BOOLEAN_TRUE && LA280_0<=VALUE_NULL)||(LA280_0>=DEFINE && LA280_0<=AFTER)||LA280_0==WHILE||(LA280_0>=MERGE && LA280_0<=MATCHED)||LA280_0==NEWKW||LA280_0==NUM_DOUBLE||(LA280_0>=IDENT && LA280_0<=LCURLY)||LA280_0==LPAREN||(LA280_0>=PLUS && LA280_0<=QUESTION)||(LA280_0>=STRING_LITERAL && LA280_0<=QUOTED_STRING_LITERAL)||LA280_0==MINUS||LA280_0==NUM_INT||(LA280_0>=TICKED_STRING_LITERAL && LA280_0<=NUM_FLOAT)) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression10755);
                            expressionList736=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList736.getTree());
                            }
                            break;
                    }
                    RPAREN737=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression10758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN737);
                    }
                    break;
            }
            int alt282=2;
            int LA282_0 = input.LA(1);
            if ( (LA282_0==LBRACK) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression10770);
                    propertyExpression738=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression738.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic739 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic740 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression10815);
            propertyExpressionAtomic739=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic739.getTree());
            loop283:
            do {
                int alt283=2;
                int LA283_0 = input.LA(1);
                if ( (LA283_0==LBRACK) ) {
                    alt283=1;
                }
                switch (alt283) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression10818);
            	    propertyExpressionAtomic740=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic740.getTree());
            	    }
            	    break;
            	default :
            	    break loop283;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK741=null;
        Token SELECT742=null;
        Token FROM744=null;
        Token AS746=null;
        Token IDENT747=null;
        Token WHERE748=null;
        Token RBRACK750=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList743 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty745 = null;
        EsperEPL2GrammarParser.expression_return expression749 = null;
        CommonTree LBRACK741_tree=null;
        CommonTree SELECT742_tree=null;
        CommonTree FROM744_tree=null;
        CommonTree AS746_tree=null;
        CommonTree IDENT747_tree=null;
        CommonTree WHERE748_tree=null;
        CommonTree RBRACK750_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            LBRACK741=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic10848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK741);
            int alt284=2;
            int LA284_0 = input.LA(1);
            if ( (LA284_0==SELECT) ) {
                alt284=1;
            }
            switch (alt284) {
                case 1 :
                    {
                    SELECT742=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic10851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT742);
                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic10853);
                    propertySelectionList743=propertySelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList743.getTree());
                    FROM744=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic10855); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM744);
                    }
                    break;
            }
            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic10859);
            eventProperty745=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty745.getTree());
            int alt285=2;
            int LA285_0 = input.LA(1);
            if ( (LA285_0==AS) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    {
                    AS746=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic10862); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS746);
                    IDENT747=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic10864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT747);
                    }
                    break;
            }
            int alt286=2;
            int LA286_0 = input.LA(1);
            if ( (LA286_0==WHERE) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    {
                    WHERE748=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic10869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE748);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic10871);
                    expression749=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression749.getTree());
                    }
                    break;
            }
            RBRACK750=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic10875); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK750);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA752=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement751 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement753 = null;
        CommonTree COMMA752_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList10925);
            propertySelectionListElement751=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement751.getTree());
            loop287:
            do {
                int alt287=2;
                int LA287_0 = input.LA(1);
                if ( (LA287_0==COMMA) ) {
                    alt287=1;
                }
                switch (alt287) {
            	case 1 :
            	    {
            	    COMMA752=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList10928); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList10931);
            	    propertySelectionListElement753=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement753.getTree());
            	    }
            	    break;
            	default :
            	    break loop287;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS756=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector754 = null;
        EsperEPL2GrammarParser.expression_return expression755 = null;
        CommonTree s_tree=null;
        CommonTree AS756_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt289=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt289=1;
                }
                break;
            case IDENT:
                {
                int LA289_2 = input.LA(2);
                if ( (LA289_2==DOT) ) {
                    int LA289_73 = input.LA(3);
                    if ( (LA289_73==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt289=2;
                    }
                    else if ( (LA289_73==WINDOW||LA289_73==ESCAPE||LA289_73==EVERY_EXPR||LA289_73==WHERE||(LA289_73>=SUM && LA289_73<=COUNT)||LA289_73==OUTER||(LA289_73>=JOIN && LA289_73<=FULL)||(LA289_73>=EVENTS && LA289_73<=LAST)||(LA289_73>=UNIDIRECTIONAL && LA289_73<=PREVIOUSTAIL)||LA289_73==PRIOR||(LA289_73>=WEEKDAY && LA289_73<=CAST)||(LA289_73>=SNAPSHOT && LA289_73<=INDEX)||(LA289_73>=DEFINE && LA289_73<=AFTER)||LA289_73==WHILE||(LA289_73>=MERGE && LA289_73<=MATCHED)||LA289_73==IDENT||LA289_73==TICKED_STRING_LITERAL) ) {
                        alt289=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 289, 73, input);
                        throw nvae;
                    }
                }
                else if ( ((LA289_2>=IN_SET && LA289_2<=REGEXP)||(LA289_2>=OR_EXPR && LA289_2<=NOT_EXPR)||LA289_2==AS||LA289_2==FROM||LA289_2==IS||LA289_2==LPAREN||(LA289_2>=COMMA && LA289_2<=EQUALS)||LA289_2==LBRACK||(LA289_2>=STAR && LA289_2<=QUESTION)||(LA289_2>=BAND && LA289_2<=MOD)||LA289_2==ESCAPECHAR) ) {
                    alt289=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 289, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case AFTER:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt289=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);
                throw nvae;
            }
            switch (alt289) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement10957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement10973);
                    propertyStreamSelector754=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector754.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement10978);
                    expression755=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression755.getTree());
                    int alt288=2;
                    int LA288_0 = input.LA(1);
                    if ( (LA288_0==AS) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            {
                            AS756=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement10981); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS756);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement10985);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT757=null;
        Token STAR758=null;
        Token AS759=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT757_tree=null;
        CommonTree STAR758_tree=null;
        CommonTree AS759_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector11029); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT757=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector11031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT757);
            STAR758=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector11033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR758);
            int alt290=2;
            int LA290_0 = input.LA(1);
            if ( (LA290_0==AS) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    {
                    AS759=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector11036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS759);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector11040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS760=null;
        Token LPAREN762=null;
        Token RPAREN764=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier761 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList763 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression765 = null;
        EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation766 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS760_tree=null;
        CommonTree LPAREN762_tree=null;
        CommonTree RPAREN764_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        RewriteRuleSubtreeStream stream_patternFilterAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule patternFilterAnnotation");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt291=2;
            int LA291_0 = input.LA(1);
            if ( (LA291_0==IDENT) ) {
                int LA291_1 = input.LA(2);
                if ( (LA291_1==EQUALS) ) {
                    alt291=1;
                }
            }
            switch (alt291) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression11087); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS760=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression11089); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS760);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression11098);
            classIdentifier761=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier761.getTree());
            int alt293=2;
            int LA293_0 = input.LA(1);
            if ( (LA293_0==LPAREN) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    {
                    LPAREN762=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression11109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN762);
                    int alt292=2;
                    int LA292_0 = input.LA(1);
                    if ( (LA292_0==WINDOW||LA292_0==ESCAPE||(LA292_0>=NOT_EXPR && LA292_0<=EVERY_EXPR)||LA292_0==WHERE||(LA292_0>=SUM && LA292_0<=COUNT)||LA292_0==CASE||LA292_0==OUTER||(LA292_0>=JOIN && LA292_0<=FULL)||(LA292_0>=EVENTS && LA292_0<=LAST)||(LA292_0>=UNIDIRECTIONAL && LA292_0<=CURRENT_TIMESTAMP)||(LA292_0>=SNAPSHOT && LA292_0<=INDEX)||(LA292_0>=BOOLEAN_TRUE && LA292_0<=VALUE_NULL)||(LA292_0>=DEFINE && LA292_0<=AFTER)||LA292_0==WHILE||(LA292_0>=MERGE && LA292_0<=MATCHED)||LA292_0==NEWKW||LA292_0==NUM_DOUBLE||(LA292_0>=IDENT && LA292_0<=LCURLY)||LA292_0==LPAREN||(LA292_0>=PLUS && LA292_0<=QUESTION)||(LA292_0>=STRING_LITERAL && LA292_0<=QUOTED_STRING_LITERAL)||LA292_0==MINUS||LA292_0==NUM_INT||(LA292_0>=TICKED_STRING_LITERAL && LA292_0<=NUM_FLOAT)) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression11111);
                            expressionList763=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList763.getTree());
                            }
                            break;
                    }
                    RPAREN764=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression11114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN764);
                    }
                    break;
            }
            int alt294=2;
            int LA294_0 = input.LA(1);
            if ( (LA294_0==LBRACK) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression11126);
                    propertyExpression765=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression765.getTree());
                    }
                    break;
            }
            int alt295=2;
            int LA295_0 = input.LA(1);
            if ( (LA295_0==ATCHAR) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    {
                    pushFollow(FOLLOW_patternFilterAnnotation_in_patternFilterExpression11137);
                    patternFilterAnnotation766=patternFilterAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternFilterAnnotation.add(patternFilterAnnotation766.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_patternFilterAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternFilterAnnotation.nextTree());
                }
                stream_patternFilterAnnotation.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterAnnotation_return retval = new EsperEPL2GrammarParser.patternFilterAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR767=null;
        Token LPAREN768=null;
        Token RPAREN770=null;
        EsperEPL2GrammarParser.number_return number769 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR767_tree=null;
        CommonTree LPAREN768_tree=null;
        CommonTree RPAREN770_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            ATCHAR767=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_patternFilterAnnotation11189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR767);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterAnnotation11193); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt296=2;
            int LA296_0 = input.LA(1);
            if ( (LA296_0==LPAREN) ) {
                alt296=1;
            }
            switch (alt296) {
                case 1 :
                    {
                    LPAREN768=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterAnnotation11196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN768);
                    pushFollow(FOLLOW_number_in_patternFilterAnnotation11198);
                    number769=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number769.getTree());
                    RPAREN770=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterAnnotation11200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN770);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT771=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT771_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier11236);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop297:
            do {
                int alt297=2;
                int LA297_0 = input.LA(1);
                if ( (LA297_0==DOT) ) {
                    int LA297_22 = input.LA(2);
                    if ( (LA297_22==IDENT) ) {
                        int LA297_47 = input.LA(3);
                        if ( (LA297_47==EOF||LA297_47==CREATE||(LA297_47>=OR_EXPR && LA297_47<=AS)||LA297_47==SELECT||(LA297_47>=INNER && LA297_47<=ON)||(LA297_47>=GROUP && LA297_47<=HAVING)||LA297_47==OUTPUT||LA297_47==INSERT||LA297_47==ORDER||(LA297_47>=UNIDIRECTIONAL && LA297_47<=RETAININTERSECTION)||LA297_47==DELETE||LA297_47==SET||LA297_47==UNTIL||LA297_47==ROW_LIMIT_EXPR||(LA297_47>=UPDATE && LA297_47<=MATCH_RECOGNIZE)||(LA297_47>=FOR && LA297_47<=WHILE)||LA297_47==MERGE||LA297_47==EXPRESSIONDECL||LA297_47==IDENT||(LA297_47>=RCURLY && LA297_47<=RPAREN)||LA297_47==COMMA||(LA297_47>=DOT && LA297_47<=RBRACK)||(LA297_47>=FOLLOWED_BY && LA297_47<=FOLLOWMAX_BEGIN)||LA297_47==ATCHAR||LA297_47==TICKED_STRING_LITERAL) ) {
                            alt297=1;
                        }
                    }
                    else if ( (LA297_22==TICKED_STRING_LITERAL) ) {
                        alt297=1;
                    }
                }
                switch (alt297) {
            	case 1 :
            	    {
            	    DOT771=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier11255); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT771);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier11259);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop297;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT772=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT772_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy11304);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop298:
            do {
                int alt298=2;
                int LA298_0 = input.LA(1);
                if ( (LA298_0==IDENT||LA298_0==TICKED_STRING_LITERAL) ) {
                    alt298=2;
                }
                else if ( (LA298_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA298_4 = input.LA(3);
                        if ( (LA298_4==IDENT||LA298_4==DOT||LA298_4==TICKED_STRING_LITERAL) ) {
                            alt298=1;
                        }
                        else if ( (LA298_4==LPAREN) ) {
                            alt298=2;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA298_5 = input.LA(3);
                        if ( (LA298_5==IDENT||LA298_5==DOT||LA298_5==TICKED_STRING_LITERAL) ) {
                            alt298=1;
                        }
                        else if ( (LA298_5==LPAREN) ) {
                            alt298=2;
                        }
                        }
                        break;
                    case WHERE:
                    case MAX:
                    case MIN:
                    case SET:
                    case AFTER:
                        {
                        alt298=2;
                        }
                        break;
                    }
                }
                switch (alt298) {
            	case 1 :
            	    {
            	    DOT772=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy11339); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT772);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy11343);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop298;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA774=null;
        EsperEPL2GrammarParser.expression_return expression773 = null;
        EsperEPL2GrammarParser.expression_return expression775 = null;
        CommonTree COMMA774_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList11385);
            expression773=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression773.getTree());
            loop299:
            do {
                int alt299=2;
                int LA299_0 = input.LA(1);
                if ( (LA299_0==COMMA) ) {
                    alt299=1;
                }
                switch (alt299) {
            	case 1 :
            	    {
            	    COMMA774=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList11388); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList11391);
            	    expression775=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression775.getTree());
            	    }
            	    break;
            	default :
            	    break loop299;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA777=null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast776 = null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast778 = null;
        CommonTree COMMA777_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11419);
            expressionWithTimeInclLast776=expressionWithTimeInclLast();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast776.getTree());
            loop300:
            do {
                int alt300=2;
                int LA300_0 = input.LA(1);
                if ( (LA300_0==COMMA) ) {
                    alt300=1;
                }
                switch (alt300) {
            	case 1 :
            	    {
            	    COMMA777=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList11422); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11425);
            	    expressionWithTimeInclLast778=expressionWithTimeInclLast();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast778.getTree());
            	    }
            	    break;
            	default :
            	    break loop300;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand779 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod780 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable781 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand782 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand783 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator784 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator785 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList786 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar787 = null;
        try {
            int alt301=9;
            int LA301_0 = input.LA(1);
            if ( (LA301_0==LW) ) {
                int LA301_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt301=1;
                }
                else if ( (synpred9_EsperEPL2Grammar()) ) {
                    alt301=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==MINUS) ) {
                int LA301_2 = input.LA(2);
                if ( (LA301_2==NUM_INT) ) {
                    int LA301_111 = input.LA(3);
                    if ( (LA301_111==TIMEPERIOD_SECONDS) ) {
                        int LA301_474 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 474, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_111==TIMEPERIOD_SECOND) ) {
                        int LA301_475 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 475, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_111==TIMEPERIOD_SEC) ) {
                        int LA301_476 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 476, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_111==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_111==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_111==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 111, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_2==NUM_LONG) ) {
                    int LA301_112 = input.LA(3);
                    if ( (LA301_112==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_SECONDS) ) {
                        int LA301_528 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 528, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_112==TIMEPERIOD_SECOND) ) {
                        int LA301_529 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 529, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_112==TIMEPERIOD_SEC) ) {
                        int LA301_530 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 530, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_112==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_112==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_112==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 112, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_2==NUM_FLOAT) ) {
                    int LA301_113 = input.LA(3);
                    if ( (LA301_113==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_SECONDS) ) {
                        int LA301_579 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 579, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_113==TIMEPERIOD_SECOND) ) {
                        int LA301_580 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 580, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_113==TIMEPERIOD_SEC) ) {
                        int LA301_581 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 581, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_113==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_113==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_113==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 113, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_2==NUM_DOUBLE) ) {
                    int LA301_114 = input.LA(3);
                    if ( (LA301_114==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_SECONDS) ) {
                        int LA301_629 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 629, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_114==TIMEPERIOD_SECOND) ) {
                        int LA301_630 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 630, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_114==TIMEPERIOD_SEC) ) {
                        int LA301_631 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 631, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_114==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_114==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_114==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 114, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_2==IDENT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==AT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==COUNT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==SUM) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==AVG) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==MAX) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==FIRST) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==LAST) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==WHILE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==MERGE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==SQL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==LW) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==CAST) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==INDEX) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==LEFT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==OUTER) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==FULL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==JOIN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==PLUS) ) {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    int LA301_162 = input.LA(3);
                    if ( (LA301_162==TIMEPERIOD_SECONDS) ) {
                        int LA301_662 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 662, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_162==TIMEPERIOD_SECOND) ) {
                        int LA301_663 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 663, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_162==TIMEPERIOD_SEC) ) {
                        int LA301_664 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 664, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_162==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_162==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_162==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 162, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    int LA301_163 = input.LA(3);
                    if ( (LA301_163==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_SECONDS) ) {
                        int LA301_716 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 716, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_163==TIMEPERIOD_SECOND) ) {
                        int LA301_717 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 717, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_163==TIMEPERIOD_SEC) ) {
                        int LA301_718 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 718, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_163==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_163==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_163==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 163, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    int LA301_164 = input.LA(3);
                    if ( (LA301_164==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_SECONDS) ) {
                        int LA301_767 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 767, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_164==TIMEPERIOD_SECOND) ) {
                        int LA301_768 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 768, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_164==TIMEPERIOD_SEC) ) {
                        int LA301_769 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 769, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_164==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_164==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_164==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 164, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    int LA301_165 = input.LA(3);
                    if ( (LA301_165==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==MIN) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_SECONDS) ) {
                        int LA301_817 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 817, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_165==TIMEPERIOD_SECOND) ) {
                        int LA301_818 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 818, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_165==TIMEPERIOD_SEC) ) {
                        int LA301_819 = input.LA(4);
                        if ( (synpred8_EsperEPL2Grammar()) ) {
                            alt301=2;
                        }
                        else if ( (synpred9_EsperEPL2Grammar()) ) {
                            alt301=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 301, 819, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA301_165==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                        alt301=2;
                    }
                    else if ( (LA301_165==STAR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==DIV) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==MOD) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==PLUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==MINUS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==LOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==LT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==GT) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==LE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==GE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==IS) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==BAND) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==BOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==BXOR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==ASC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==DESC) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==COMMA) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==LIKE) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else if ( (LA301_165==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 165, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==NUM_INT) ) {
                int LA301_4 = input.LA(2);
                if ( (LA301_4==TIMEPERIOD_SECONDS) ) {
                    int LA301_166 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 166, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_4==TIMEPERIOD_SECOND) ) {
                    int LA301_167 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 167, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_4==TIMEPERIOD_SEC) ) {
                    int LA301_168 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 168, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt301=7;
                }
                else if ( (LA301_4==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt301=4;
                }
                else if ( (LA301_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt301=6;
                }
                else if ( (LA301_4==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==NUM_LONG) ) {
                int LA301_5 = input.LA(2);
                if ( (LA301_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt301=4;
                }
                else if ( (LA301_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt301=6;
                }
                else if ( (LA301_5==TIMEPERIOD_SECONDS) ) {
                    int LA301_225 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 225, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_5==TIMEPERIOD_SECOND) ) {
                    int LA301_226 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 226, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_5==TIMEPERIOD_SEC) ) {
                    int LA301_227 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 227, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_5==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt301=7;
                }
                else if ( (LA301_5==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==NUM_FLOAT) ) {
                int LA301_6 = input.LA(2);
                if ( (LA301_6==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt301=6;
                }
                else if ( (LA301_6==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt301=4;
                }
                else if ( (LA301_6==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt301=7;
                }
                else if ( (LA301_6==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_SECONDS) ) {
                    int LA301_280 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 280, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_6==TIMEPERIOD_SECOND) ) {
                    int LA301_281 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 281, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_6==TIMEPERIOD_SEC) ) {
                    int LA301_282 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 282, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_6==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==NUM_DOUBLE) ) {
                int LA301_7 = input.LA(2);
                if ( (LA301_7==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt301=4;
                }
                else if ( (LA301_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt301=6;
                }
                else if ( (LA301_7==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt301=7;
                }
                else if ( (LA301_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_SECONDS) ) {
                    int LA301_333 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 333, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_7==TIMEPERIOD_SECOND) ) {
                    int LA301_334 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 334, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_7==TIMEPERIOD_SEC) ) {
                    int LA301_335 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 335, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_7==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==IDENT) ) {
                int LA301_8 = input.LA(2);
                if ( (LA301_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt301=7;
                }
                else if ( (LA301_8==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==LBRACK) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==QUESTION) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==DOT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==TIMEPERIOD_SECONDS) ) {
                    int LA301_400 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 400, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_8==TIMEPERIOD_SECOND) ) {
                    int LA301_401 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 401, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_8==TIMEPERIOD_SEC) ) {
                    int LA301_402 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 402, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_8==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_8==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt301=6;
                }
                else if ( (LA301_8==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_8==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt301=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==QUESTION) ) {
                int LA301_9 = input.LA(2);
                if ( (LA301_9==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt301=7;
                }
                else if ( (LA301_9==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==TIMEPERIOD_SECONDS) ) {
                    int LA301_443 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 443, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_9==TIMEPERIOD_SECOND) ) {
                    int LA301_444 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 444, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_9==TIMEPERIOD_SEC) ) {
                    int LA301_445 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 445, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_9==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_9==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt301=6;
                }
                else if ( (LA301_9==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt301=4;
                }
                else if ( (LA301_9==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_9==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==CASE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==AT) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==COUNT) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==SUM) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==AVG) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MAX) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MIN) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==FIRST) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==LAST) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==WHILE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MERGE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==SQL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==CAST) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==INDEX) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==LEFT) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==OUTER) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==FULL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==JOIN) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==WHERE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==SET) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==AFTER) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PREVIOUSCOUNT) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PREVIOUSWINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==NEWKW) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==STAR) ) {
                int LA301_72 = input.LA(2);
                if ( (LA301_72==DIV) && (synpred11_EsperEPL2Grammar())) {
                    alt301=5;
                }
                else if ( (LA301_72==RPAREN||LA301_72==COMMA) ) {
                    alt301=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 72, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {
                alt301=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 301, 0, input);
                throw nvae;
            }
            switch (alt301) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime11454);
                    lastWeekdayOperand779=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand779.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime11465);
                    timePeriod780=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod780.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime11476);
                    expressionQualifyable781=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable781.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime11487);
                    rangeOperand782=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand782.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime11499);
                    frequencyOperand783=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand783.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime11510);
                    lastOperator784=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator784.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime11522);
                    weekDayOperator785=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator785.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime11534);
                    numericParameterList786=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList786.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime11539);
                    numberSetStar787=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar787.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeInclLast_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return retval = new EsperEPL2GrammarParser.expressionWithTimeInclLast_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand788 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime789 = null;
        try {
            int alt302=2;
            int LA302_0 = input.LA(1);
            if ( (LA302_0==LAST) ) {
                int LA302_1 = input.LA(2);
                if ( (synpred15_EsperEPL2Grammar()) ) {
                    alt302=1;
                }
                else if ( (true) ) {
                    alt302=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 302, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA302_0==WINDOW||LA302_0==ESCAPE||(LA302_0>=NOT_EXPR && LA302_0<=EVERY_EXPR)||LA302_0==WHERE||(LA302_0>=SUM && LA302_0<=COUNT)||LA302_0==CASE||LA302_0==OUTER||(LA302_0>=JOIN && LA302_0<=FULL)||(LA302_0>=EVENTS && LA302_0<=FIRST)||(LA302_0>=UNIDIRECTIONAL && LA302_0<=CURRENT_TIMESTAMP)||(LA302_0>=SNAPSHOT && LA302_0<=INDEX)||(LA302_0>=BOOLEAN_TRUE && LA302_0<=VALUE_NULL)||(LA302_0>=DEFINE && LA302_0<=AFTER)||LA302_0==WHILE||(LA302_0>=MERGE && LA302_0<=MATCHED)||LA302_0==NEWKW||LA302_0==NUM_DOUBLE||(LA302_0>=IDENT && LA302_0<=LCURLY)||LA302_0==LPAREN||LA302_0==LBRACK||LA302_0==STAR||(LA302_0>=PLUS && LA302_0<=QUESTION)||(LA302_0>=STRING_LITERAL && LA302_0<=QUOTED_STRING_LITERAL)||LA302_0==MINUS||LA302_0==NUM_INT||(LA302_0>=TICKED_STRING_LITERAL && LA302_0<=NUM_FLOAT)) ) {
                alt302=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 302, 0, input);
                throw nvae;
            }
            switch (alt302) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTimeInclLast11559);
                    lastOperand788=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand788.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeInclLast11564);
                    expressionWithTime789=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime789.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression790 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable11575);
            expression790=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression790.getTree());
            int alt303=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt303=1;
                    }
                    break;
                case DESC:
                    {
                    alt303=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt303=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt303=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt303=5;
                    }
                    break;
            }
            switch (alt303) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable11580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable11584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable11588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable11592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable11596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR791=null;
        CommonTree STAR791_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR791=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar11653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR791);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW792=null;
        CommonTree LW792_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW792=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand11673); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW792_tree = (CommonTree)adaptor.create(LW792);
            root_0 = (CommonTree)adaptor.becomeRoot(LW792_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST793=null;
        CommonTree LAST793_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST793=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand11686); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST793_tree = (CommonTree)adaptor.create(LAST793);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST793_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR794=null;
        Token DIV795=null;
        EsperEPL2GrammarParser.number_return number796 = null;
        EsperEPL2GrammarParser.substitution_return substitution797 = null;
        CommonTree i_tree=null;
        CommonTree STAR794_tree=null;
        CommonTree DIV795_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR794=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand11698); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR794);
            DIV795=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand11700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV795);
            int alt304=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt304=1;
                }
                break;
            case IDENT:
                {
                alt304=2;
                }
                break;
            case QUESTION:
                {
                alt304=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 304, 0, input);
                throw nvae;
            }
            switch (alt304) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand11703);
                    number796=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number796.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand11707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand11709);
                    substitution797=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution797.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON800=null;
        EsperEPL2GrammarParser.number_return number798 = null;
        EsperEPL2GrammarParser.substitution_return substitution799 = null;
        EsperEPL2GrammarParser.number_return number801 = null;
        EsperEPL2GrammarParser.substitution_return substitution802 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON800_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt305=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt305=1;
                }
                break;
            case IDENT:
                {
                alt305=2;
                }
                break;
            case QUESTION:
                {
                alt305=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 305, 0, input);
                throw nvae;
            }
            switch (alt305) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand11758);
                    number798=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number798.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand11762); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand11764);
                    substitution799=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution799.getTree());
                    }
                    break;
            }
            COLON800=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand11767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON800);
            int alt306=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt306=1;
                }
                break;
            case IDENT:
                {
                alt306=2;
                }
                break;
            case QUESTION:
                {
                alt306=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 306, 0, input);
                throw nvae;
            }
            switch (alt306) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand11770);
                    number801=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number801.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand11774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand11776);
                    substitution802=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution802.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST805=null;
        EsperEPL2GrammarParser.number_return number803 = null;
        EsperEPL2GrammarParser.substitution_return substitution804 = null;
        CommonTree i_tree=null;
        CommonTree LAST805_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt307=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt307=1;
                }
                break;
            case IDENT:
                {
                alt307=2;
                }
                break;
            case QUESTION:
                {
                alt307=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 307, 0, input);
                throw nvae;
            }
            switch (alt307) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator11890);
                    number803=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number803.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator11894); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator11896);
                    substitution804=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution804.getTree());
                    }
                    break;
            }
            LAST805=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator11899); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST805);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY808=null;
        EsperEPL2GrammarParser.number_return number806 = null;
        EsperEPL2GrammarParser.substitution_return substitution807 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY808_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt308=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt308=1;
                }
                break;
            case IDENT:
                {
                alt308=2;
                }
                break;
            case QUESTION:
                {
                alt308=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 308, 0, input);
                throw nvae;
            }
            switch (alt308) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator11947);
                    number806=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number806.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator11951); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator11953);
                    substitution807=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution807.getTree());
                    }
                    break;
            }
            WEEKDAY808=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator11956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY808);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK809=null;
        Token COMMA811=null;
        Token RBRACK813=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter810 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter812 = null;
        CommonTree LBRACK809_tree=null;
        CommonTree COMMA811_tree=null;
        CommonTree RBRACK813_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK809=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList12003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK809);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList12005);
            numericListParameter810=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter810.getTree());
            loop309:
            do {
                int alt309=2;
                int LA309_0 = input.LA(1);
                if ( (LA309_0==COMMA) ) {
                    alt309=1;
                }
                switch (alt309) {
            	case 1 :
            	    {
            	    COMMA811=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList12008); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA811);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList12010);
            	    numericListParameter812=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter812.getTree());
            	    }
            	    break;
            	default :
            	    break loop309;
                }
            } while (true);
            RBRACK813=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList12014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK813);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand814 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand815 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant816 = null;
        try {
            int alt310=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA310_1 = input.LA(2);
                if ( (LA310_1==COLON) ) {
                    alt310=1;
                }
                else if ( (LA310_1==COMMA||LA310_1==RBRACK) ) {
                    alt310=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA310_2 = input.LA(2);
                if ( (LA310_2==COLON) ) {
                    alt310=1;
                }
                else if ( (LA310_2==COMMA||LA310_2==RBRACK) ) {
                    alt310=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA310_3 = input.LA(2);
                if ( (LA310_3==COLON) ) {
                    alt310=1;
                }
                else if ( (LA310_3==COMMA||LA310_3==RBRACK) ) {
                    alt310=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA310_4 = input.LA(2);
                if ( (LA310_4==COMMA||LA310_4==RBRACK) ) {
                    alt310=3;
                }
                else if ( (LA310_4==COLON) ) {
                    alt310=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt310=1;
                }
                break;
            case STAR:
                {
                alt310=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt310=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 310, 0, input);
                throw nvae;
            }
            switch (alt310) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter12036);
                    rangeOperand814=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand814.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter12042);
                    frequencyOperand815=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand815.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter12047);
                    numberconstant816=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant816.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT818=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic817 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic819 = null;
        CommonTree DOT818_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty12063);
            eventPropertyAtomic817=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic817.getTree());
            loop311:
            do {
                int alt311=2;
                int LA311_0 = input.LA(1);
                if ( (LA311_0==DOT) ) {
                    alt311=1;
                }
                switch (alt311) {
            	case 1 :
            	    {
            	    DOT818=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty12066); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT818);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty12068);
            	    eventPropertyAtomic819=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic819.getTree());
            	    }
            	    break;
            	default :
            	    break loop311;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK821=null;
        Token RPAREN822=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent820 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK821_tree=null;
        CommonTree RPAREN822_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic12094);
            eventPropertyIdent820=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent820.getTree());
            int alt315=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt315=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt315=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt315=3;
                    }
                    break;
            }
            switch (alt315) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic12103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic12107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK821=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic12109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK821);
                    int alt312=2;
                    int LA312_0 = input.LA(1);
                    if ( (LA312_0==QUESTION) ) {
                        alt312=1;
                    }
                    switch (alt312) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic12114); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic12128); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt313=2;
                    int LA313_0 = input.LA(1);
                    if ( (LA313_0==STRING_LITERAL) ) {
                        alt313=1;
                    }
                    else if ( (LA313_0==QUOTED_STRING_LITERAL) ) {
                        alt313=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 313, 0, input);
                        throw nvae;
                    }
                    switch (alt313) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic12133); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic12139); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN822=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic12142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN822);
                    int alt314=2;
                    int LA314_0 = input.LA(1);
                    if ( (LA314_0==QUESTION) ) {
                        alt314=1;
                    }
                    switch (alt314) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic12147); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic12161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR823=null;
        Token DOT824=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR823_tree=null;
        CommonTree DOT824_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12284);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop317:
            do {
                int alt317=2;
                int LA317_0 = input.LA(1);
                if ( (LA317_0==ESCAPECHAR) ) {
                    alt317=1;
                }
                switch (alt317) {
            	case 1 :
            	    {
            	    ESCAPECHAR823=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent12296); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR823);
            	    DOT824=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent12298); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT824);
            	    int alt316=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt316=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA316_5 = input.LA(2);
            	            if ( (LA316_5==EOF||(LA316_5>=IN_SET && LA316_5<=NOT_EXPR)||(LA316_5>=WHERE && LA316_5<=AS)||(LA316_5>=ELSE && LA316_5<=FROM)||(LA316_5>=INNER && LA316_5<=FULL)||LA316_5==IS||(LA316_5>=GROUP && LA316_5<=HAVING)||LA316_5==ALL||LA316_5==OUTPUT||LA316_5==INSERT||(LA316_5>=ORDER && LA316_5<=DESC)||LA316_5==PATTERN||(LA316_5>=TIMEPERIOD_SEC && LA316_5<=TIMEPERIOD_SECONDS)||LA316_5==ROW_LIMIT_EXPR||(LA316_5>=MATCH_RECOGNIZE && LA316_5<=MEASURES)||(LA316_5>=AFTER && LA316_5<=FOR)||(LA316_5>=RCURLY && LA316_5<=RPAREN)||(LA316_5>=COMMA && LA316_5<=COLON)||(LA316_5>=BAND && LA316_5<=MOD)||LA316_5==FOLLOWMAX_END||LA316_5==ESCAPECHAR) ) {
            	                alt316=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA316_25 = input.LA(2);
            	            if ( (LA316_25==LPAREN) ) {
            	                int LA316_176 = input.LA(3);
            	                if ( ((LA316_176>=STRING_LITERAL && LA316_176<=QUOTED_STRING_LITERAL)) ) {
            	                    alt316=1;
            	                }
            	            }
            	            else if ( (LA316_25==EOF||(LA316_25>=IN_SET && LA316_25<=NOT_EXPR)||(LA316_25>=WHERE && LA316_25<=AS)||(LA316_25>=ELSE && LA316_25<=FROM)||(LA316_25>=INNER && LA316_25<=FULL)||LA316_25==IS||(LA316_25>=GROUP && LA316_25<=HAVING)||LA316_25==ALL||LA316_25==OUTPUT||LA316_25==INSERT||(LA316_25>=ORDER && LA316_25<=DESC)||LA316_25==PATTERN||(LA316_25>=TIMEPERIOD_SEC && LA316_25<=TIMEPERIOD_SECONDS)||LA316_25==ROW_LIMIT_EXPR||(LA316_25>=MATCH_RECOGNIZE && LA316_25<=MEASURES)||(LA316_25>=AFTER && LA316_25<=FOR)||LA316_25==RCURLY||LA316_25==RPAREN||(LA316_25>=COMMA && LA316_25<=COLON)||(LA316_25>=BAND && LA316_25<=MOD)||LA316_25==FOLLOWMAX_END||LA316_25==ESCAPECHAR) ) {
            	                alt316=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA316_40 = input.LA(2);
            	            if ( (LA316_40==EOF||(LA316_40>=IN_SET && LA316_40<=NOT_EXPR)||(LA316_40>=WHERE && LA316_40<=AS)||(LA316_40>=ELSE && LA316_40<=FROM)||(LA316_40>=INNER && LA316_40<=FULL)||LA316_40==IS||(LA316_40>=GROUP && LA316_40<=HAVING)||LA316_40==ALL||LA316_40==OUTPUT||LA316_40==INSERT||(LA316_40>=ORDER && LA316_40<=DESC)||LA316_40==PATTERN||(LA316_40>=TIMEPERIOD_SEC && LA316_40<=TIMEPERIOD_SECONDS)||LA316_40==ROW_LIMIT_EXPR||(LA316_40>=MATCH_RECOGNIZE && LA316_40<=MEASURES)||(LA316_40>=AFTER && LA316_40<=FOR)||(LA316_40>=RCURLY && LA316_40<=RPAREN)||(LA316_40>=COMMA && LA316_40<=COLON)||(LA316_40>=BAND && LA316_40<=MOD)||LA316_40==FOLLOWMAX_END||LA316_40==ESCAPECHAR) ) {
            	                alt316=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA316_41 = input.LA(2);
            	            if ( (LA316_41==EOF||(LA316_41>=IN_SET && LA316_41<=NOT_EXPR)||(LA316_41>=WHERE && LA316_41<=AS)||(LA316_41>=ELSE && LA316_41<=FROM)||(LA316_41>=INNER && LA316_41<=FULL)||LA316_41==IS||(LA316_41>=GROUP && LA316_41<=HAVING)||LA316_41==ALL||LA316_41==OUTPUT||LA316_41==INSERT||(LA316_41>=ORDER && LA316_41<=DESC)||LA316_41==PATTERN||(LA316_41>=TIMEPERIOD_SEC && LA316_41<=TIMEPERIOD_SECONDS)||LA316_41==ROW_LIMIT_EXPR||(LA316_41>=MATCH_RECOGNIZE && LA316_41<=MEASURES)||(LA316_41>=AFTER && LA316_41<=FOR)||(LA316_41>=RCURLY && LA316_41<=RPAREN)||(LA316_41>=COMMA && LA316_41<=COLON)||(LA316_41>=BAND && LA316_41<=MOD)||LA316_41==FOLLOWMAX_END||LA316_41==ESCAPECHAR) ) {
            	                alt316=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA316_43 = input.LA(2);
            	            if ( (LA316_43==EOF||(LA316_43>=IN_SET && LA316_43<=NOT_EXPR)||(LA316_43>=WHERE && LA316_43<=AS)||(LA316_43>=ELSE && LA316_43<=FROM)||(LA316_43>=INNER && LA316_43<=FULL)||LA316_43==IS||(LA316_43>=GROUP && LA316_43<=HAVING)||LA316_43==ALL||LA316_43==OUTPUT||LA316_43==INSERT||(LA316_43>=ORDER && LA316_43<=DESC)||LA316_43==PATTERN||(LA316_43>=TIMEPERIOD_SEC && LA316_43<=TIMEPERIOD_SECONDS)||LA316_43==ROW_LIMIT_EXPR||(LA316_43>=MATCH_RECOGNIZE && LA316_43<=MEASURES)||(LA316_43>=AFTER && LA316_43<=FOR)||(LA316_43>=RCURLY && LA316_43<=RPAREN)||(LA316_43>=COMMA && LA316_43<=COLON)||(LA316_43>=BAND && LA316_43<=MOD)||LA316_43==FOLLOWMAX_END||LA316_43==ESCAPECHAR) ) {
            	                alt316=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA316_44 = input.LA(2);
            	            if ( (LA316_44==PATTERN) ) {
            	                int LA316_445 = input.LA(3);
            	                if ( (LA316_445==LPAREN) ) {
            	                    alt316=1;
            	                }
            	            }
            	            else if ( (LA316_44==EOF||(LA316_44>=IN_SET && LA316_44<=NOT_EXPR)||(LA316_44>=WHERE && LA316_44<=AS)||(LA316_44>=ELSE && LA316_44<=FROM)||(LA316_44>=INNER && LA316_44<=FULL)||LA316_44==IS||(LA316_44>=GROUP && LA316_44<=HAVING)||LA316_44==ALL||LA316_44==OUTPUT||LA316_44==INSERT||(LA316_44>=ORDER && LA316_44<=DESC)||(LA316_44>=TIMEPERIOD_SEC && LA316_44<=TIMEPERIOD_SECONDS)||LA316_44==ROW_LIMIT_EXPR||(LA316_44>=MATCH_RECOGNIZE && LA316_44<=MEASURES)||(LA316_44>=AFTER && LA316_44<=FOR)||(LA316_44>=RCURLY && LA316_44<=RPAREN)||(LA316_44>=COMMA && LA316_44<=COLON)||(LA316_44>=BAND && LA316_44<=MOD)||LA316_44==FOLLOWMAX_END||LA316_44==ESCAPECHAR) ) {
            	                alt316=1;
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt316) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12302);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop317;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT825=null;
        Token COUNT826=null;
        Token ESCAPE827=null;
        Token EVERY_EXPR828=null;
        Token SUM829=null;
        Token AVG830=null;
        Token MAX831=null;
        Token MIN832=null;
        Token COALESCE833=null;
        Token MEDIAN834=null;
        Token STDDEV835=null;
        Token AVEDEV836=null;
        Token EVENTS837=null;
        Token FIRST838=null;
        Token LAST839=null;
        Token WHILE840=null;
        Token MERGE841=null;
        Token MATCHED842=null;
        Token UNIDIRECTIONAL843=null;
        Token RETAINUNION844=null;
        Token RETAININTERSECTION845=null;
        Token UNTIL846=null;
        Token PATTERN847=null;
        Token SQL848=null;
        Token METADATASQL849=null;
        Token PREVIOUS850=null;
        Token PREVIOUSTAIL851=null;
        Token PRIOR852=null;
        Token WEEKDAY853=null;
        Token LW854=null;
        Token INSTANCEOF855=null;
        Token TYPEOF856=null;
        Token CAST857=null;
        Token SNAPSHOT858=null;
        Token VARIABLE859=null;
        Token INDEX860=null;
        Token WINDOW861=null;
        Token LEFT862=null;
        Token RIGHT863=null;
        Token OUTER864=null;
        Token FULL865=null;
        Token JOIN866=null;
        Token DEFINE867=null;
        Token PARTITION868=null;
        Token MATCHES869=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT825_tree=null;
        CommonTree COUNT826_tree=null;
        CommonTree ESCAPE827_tree=null;
        CommonTree EVERY_EXPR828_tree=null;
        CommonTree SUM829_tree=null;
        CommonTree AVG830_tree=null;
        CommonTree MAX831_tree=null;
        CommonTree MIN832_tree=null;
        CommonTree COALESCE833_tree=null;
        CommonTree MEDIAN834_tree=null;
        CommonTree STDDEV835_tree=null;
        CommonTree AVEDEV836_tree=null;
        CommonTree EVENTS837_tree=null;
        CommonTree FIRST838_tree=null;
        CommonTree LAST839_tree=null;
        CommonTree WHILE840_tree=null;
        CommonTree MERGE841_tree=null;
        CommonTree MATCHED842_tree=null;
        CommonTree UNIDIRECTIONAL843_tree=null;
        CommonTree RETAINUNION844_tree=null;
        CommonTree RETAININTERSECTION845_tree=null;
        CommonTree UNTIL846_tree=null;
        CommonTree PATTERN847_tree=null;
        CommonTree SQL848_tree=null;
        CommonTree METADATASQL849_tree=null;
        CommonTree PREVIOUS850_tree=null;
        CommonTree PREVIOUSTAIL851_tree=null;
        CommonTree PRIOR852_tree=null;
        CommonTree WEEKDAY853_tree=null;
        CommonTree LW854_tree=null;
        CommonTree INSTANCEOF855_tree=null;
        CommonTree TYPEOF856_tree=null;
        CommonTree CAST857_tree=null;
        CommonTree SNAPSHOT858_tree=null;
        CommonTree VARIABLE859_tree=null;
        CommonTree INDEX860_tree=null;
        CommonTree WINDOW861_tree=null;
        CommonTree LEFT862_tree=null;
        CommonTree RIGHT863_tree=null;
        CommonTree OUTER864_tree=null;
        CommonTree FULL865_tree=null;
        CommonTree JOIN866_tree=null;
        CommonTree DEFINE867_tree=null;
        CommonTree PARTITION868_tree=null;
        CommonTree MATCHES869_tree=null;
        try {
            int alt318=47;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt318=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt318=2;
                }
                break;
            case AT:
                {
                alt318=3;
                }
                break;
            case COUNT:
                {
                alt318=4;
                }
                break;
            case ESCAPE:
                {
                alt318=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt318=6;
                }
                break;
            case SUM:
                {
                alt318=7;
                }
                break;
            case AVG:
                {
                alt318=8;
                }
                break;
            case MAX:
                {
                alt318=9;
                }
                break;
            case MIN:
                {
                alt318=10;
                }
                break;
            case COALESCE:
                {
                alt318=11;
                }
                break;
            case MEDIAN:
                {
                alt318=12;
                }
                break;
            case STDDEV:
                {
                alt318=13;
                }
                break;
            case AVEDEV:
                {
                alt318=14;
                }
                break;
            case EVENTS:
                {
                alt318=15;
                }
                break;
            case FIRST:
                {
                alt318=16;
                }
                break;
            case LAST:
                {
                alt318=17;
                }
                break;
            case WHILE:
                {
                alt318=18;
                }
                break;
            case MERGE:
                {
                alt318=19;
                }
                break;
            case MATCHED:
                {
                alt318=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt318=21;
                }
                break;
            case RETAINUNION:
                {
                alt318=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt318=23;
                }
                break;
            case UNTIL:
                {
                alt318=24;
                }
                break;
            case PATTERN:
                {
                alt318=25;
                }
                break;
            case SQL:
                {
                alt318=26;
                }
                break;
            case METADATASQL:
                {
                alt318=27;
                }
                break;
            case PREVIOUS:
                {
                alt318=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt318=29;
                }
                break;
            case PRIOR:
                {
                alt318=30;
                }
                break;
            case WEEKDAY:
                {
                alt318=31;
                }
                break;
            case LW:
                {
                alt318=32;
                }
                break;
            case INSTANCEOF:
                {
                alt318=33;
                }
                break;
            case TYPEOF:
                {
                alt318=34;
                }
                break;
            case CAST:
                {
                alt318=35;
                }
                break;
            case SNAPSHOT:
                {
                alt318=36;
                }
                break;
            case VARIABLE:
                {
                alt318=37;
                }
                break;
            case INDEX:
                {
                alt318=38;
                }
                break;
            case WINDOW:
                {
                alt318=39;
                }
                break;
            case LEFT:
                {
                alt318=40;
                }
                break;
            case RIGHT:
                {
                alt318=41;
                }
                break;
            case OUTER:
                {
                alt318=42;
                }
                break;
            case FULL:
                {
                alt318=43;
                }
                break;
            case JOIN:
                {
                alt318=44;
                }
                break;
            case DEFINE:
                {
                alt318=45;
                }
                break;
            case PARTITION:
                {
                alt318=46;
                }
                break;
            case MATCHES:
                {
                alt318=47;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 318, 0, input);
                throw nvae;
            }
            switch (alt318) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent12341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent12350); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT825=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent12357); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT825_tree = (CommonTree)adaptor.create(AT825);
                    adaptor.addChild(root_0, AT825_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT826=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent12364); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT826_tree = (CommonTree)adaptor.create(COUNT826);
                    adaptor.addChild(root_0, COUNT826_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE827=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent12371); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE827_tree = (CommonTree)adaptor.create(ESCAPE827);
                    adaptor.addChild(root_0, ESCAPE827_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR828=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent12382); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR828_tree = (CommonTree)adaptor.create(EVERY_EXPR828);
                    adaptor.addChild(root_0, EVERY_EXPR828_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM829=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent12389); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM829_tree = (CommonTree)adaptor.create(SUM829);
                    adaptor.addChild(root_0, SUM829_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG830=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent12396); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG830_tree = (CommonTree)adaptor.create(AVG830);
                    adaptor.addChild(root_0, AVG830_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX831=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent12403); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX831_tree = (CommonTree)adaptor.create(MAX831);
                    adaptor.addChild(root_0, MAX831_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN832=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent12410); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN832_tree = (CommonTree)adaptor.create(MIN832);
                    adaptor.addChild(root_0, MIN832_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE833=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent12417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE833_tree = (CommonTree)adaptor.create(COALESCE833);
                    adaptor.addChild(root_0, COALESCE833_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN834=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent12424); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN834_tree = (CommonTree)adaptor.create(MEDIAN834);
                    adaptor.addChild(root_0, MEDIAN834_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV835=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent12431); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV835_tree = (CommonTree)adaptor.create(STDDEV835);
                    adaptor.addChild(root_0, STDDEV835_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV836=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent12438); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV836_tree = (CommonTree)adaptor.create(AVEDEV836);
                    adaptor.addChild(root_0, AVEDEV836_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS837=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent12445); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS837_tree = (CommonTree)adaptor.create(EVENTS837);
                    adaptor.addChild(root_0, EVENTS837_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST838=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent12452); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST838_tree = (CommonTree)adaptor.create(FIRST838);
                    adaptor.addChild(root_0, FIRST838_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST839=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent12459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST839_tree = (CommonTree)adaptor.create(LAST839);
                    adaptor.addChild(root_0, LAST839_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE840=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent12466); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE840_tree = (CommonTree)adaptor.create(WHILE840);
                    adaptor.addChild(root_0, WHILE840_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE841=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent12473); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE841_tree = (CommonTree)adaptor.create(MERGE841);
                    adaptor.addChild(root_0, MERGE841_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED842=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent12480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED842_tree = (CommonTree)adaptor.create(MATCHED842);
                    adaptor.addChild(root_0, MATCHED842_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL843=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent12487); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL843_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL843);
                    adaptor.addChild(root_0, UNIDIRECTIONAL843_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION844=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent12494); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION844_tree = (CommonTree)adaptor.create(RETAINUNION844);
                    adaptor.addChild(root_0, RETAINUNION844_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION845=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent12501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION845_tree = (CommonTree)adaptor.create(RETAININTERSECTION845);
                    adaptor.addChild(root_0, RETAININTERSECTION845_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL846=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent12508); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL846_tree = (CommonTree)adaptor.create(UNTIL846);
                    adaptor.addChild(root_0, UNTIL846_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN847=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent12515); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN847_tree = (CommonTree)adaptor.create(PATTERN847);
                    adaptor.addChild(root_0, PATTERN847_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL848=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent12522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL848_tree = (CommonTree)adaptor.create(SQL848);
                    adaptor.addChild(root_0, SQL848_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL849=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent12529); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL849_tree = (CommonTree)adaptor.create(METADATASQL849);
                    adaptor.addChild(root_0, METADATASQL849_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS850=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent12536); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS850_tree = (CommonTree)adaptor.create(PREVIOUS850);
                    adaptor.addChild(root_0, PREVIOUS850_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL851=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent12543); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL851_tree = (CommonTree)adaptor.create(PREVIOUSTAIL851);
                    adaptor.addChild(root_0, PREVIOUSTAIL851_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR852=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent12550); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR852_tree = (CommonTree)adaptor.create(PRIOR852);
                    adaptor.addChild(root_0, PRIOR852_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY853=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent12557); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY853_tree = (CommonTree)adaptor.create(WEEKDAY853);
                    adaptor.addChild(root_0, WEEKDAY853_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW854=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent12564); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW854_tree = (CommonTree)adaptor.create(LW854);
                    adaptor.addChild(root_0, LW854_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF855=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent12571); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF855_tree = (CommonTree)adaptor.create(INSTANCEOF855);
                    adaptor.addChild(root_0, INSTANCEOF855_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF856=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent12578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF856_tree = (CommonTree)adaptor.create(TYPEOF856);
                    adaptor.addChild(root_0, TYPEOF856_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST857=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent12585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST857_tree = (CommonTree)adaptor.create(CAST857);
                    adaptor.addChild(root_0, CAST857_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT858=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent12592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT858_tree = (CommonTree)adaptor.create(SNAPSHOT858);
                    adaptor.addChild(root_0, SNAPSHOT858_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE859=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent12599); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE859_tree = (CommonTree)adaptor.create(VARIABLE859);
                    adaptor.addChild(root_0, VARIABLE859_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX860=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent12608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX860_tree = (CommonTree)adaptor.create(INDEX860);
                    adaptor.addChild(root_0, INDEX860_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW861=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent12617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW861_tree = (CommonTree)adaptor.create(WINDOW861);
                    adaptor.addChild(root_0, WINDOW861_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT862=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent12624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT862_tree = (CommonTree)adaptor.create(LEFT862);
                    adaptor.addChild(root_0, LEFT862_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT863=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent12631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT863_tree = (CommonTree)adaptor.create(RIGHT863);
                    adaptor.addChild(root_0, RIGHT863_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER864=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent12638); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER864_tree = (CommonTree)adaptor.create(OUTER864);
                    adaptor.addChild(root_0, OUTER864_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL865=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent12645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL865_tree = (CommonTree)adaptor.create(FULL865);
                    adaptor.addChild(root_0, FULL865_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN866=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent12652); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN866_tree = (CommonTree)adaptor.create(JOIN866);
                    adaptor.addChild(root_0, JOIN866_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE867=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent12659); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE867_tree = (CommonTree)adaptor.create(DEFINE867);
                    adaptor.addChild(root_0, DEFINE867_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION868=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent12666); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION868_tree = (CommonTree)adaptor.create(PARTITION868);
                    adaptor.addChild(root_0, PARTITION868_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES869=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent12673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES869_tree = (CommonTree)adaptor.create(MATCHES869);
                    adaptor.addChild(root_0, MATCHES869_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt319=2;
            int LA319_0 = input.LA(1);
            if ( (LA319_0==IDENT) ) {
                alt319=1;
            }
            else if ( (LA319_0==TICKED_STRING_LITERAL) ) {
                alt319=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);
                throw nvae;
            }
            switch (alt319) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr12694); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr12703); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT870=null;
        CommonTree t_tree=null;
        CommonTree IDENT870_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt320=2;
            int LA320_0 = input.LA(1);
            if ( (LA320_0==IDENT) ) {
                alt320=1;
            }
            else if ( (LA320_0==TICKED_STRING_LITERAL) ) {
                alt320=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);
                throw nvae;
            }
            switch (alt320) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT870=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent12717); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT870_tree = (CommonTree)adaptor.create(IDENT870);
                    adaptor.addChild(root_0, IDENT870_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent12725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart871 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart872 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart873 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart874 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart875 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart876 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart877 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart878 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart879 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart880 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart881 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart882 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart883 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart884 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart885 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart886 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart887 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart888 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart889 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart890 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart891 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart892 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart893 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart894 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart895 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart896 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart897 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart898 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart899 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart900 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart901 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart902 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart903 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart904 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart905 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart906 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt349=8;
            switch ( input.LA(1) ) {
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt349=4;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt349=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt349=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt349=3;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt349=8;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt349=7;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt349=6;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt349=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 349, 9, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt349=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt349=4;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt349=6;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt349=8;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt349=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt349=3;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt349=2;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt349=7;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 349, 10, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt349=1;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt349=6;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt349=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt349=8;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt349=5;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt349=3;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt349=2;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt349=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 349, 11, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt349=8;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt349=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt349=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt349=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt349=6;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt349=5;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt349=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt349=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 349, 12, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 1, input);
                    throw nvae;
                }
                }
                break;
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case NUM_INT:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt349=4;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt349=5;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt349=1;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt349=3;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt349=8;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt349=7;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt349=6;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt349=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 349, 13, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_LONG:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt349=5;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt349=4;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt349=6;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt349=8;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt349=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt349=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt349=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt349=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 349, 14, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_FLOAT:
                    {
                    switch ( input.LA(3) ) {
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt349=6;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt349=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt349=7;
                        }
                        break;
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt349=8;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt349=5;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt349=2;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt349=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt349=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 349, 15, input);
                        throw nvae;
                    }
                    }
                    break;
                case NUM_DOUBLE:
                    {
                    switch ( input.LA(3) ) {
                    case TIMEPERIOD_MILLISEC:
                    case TIMEPERIOD_MILLISECOND:
                    case TIMEPERIOD_MILLISECONDS:
                        {
                        alt349=8;
                        }
                        break;
                    case TIMEPERIOD_YEAR:
                    case TIMEPERIOD_YEARS:
                        {
                        alt349=1;
                        }
                        break;
                    case TIMEPERIOD_SEC:
                    case TIMEPERIOD_SECOND:
                    case TIMEPERIOD_SECONDS:
                        {
                        alt349=7;
                        }
                        break;
                    case TIMEPERIOD_MONTH:
                    case TIMEPERIOD_MONTHS:
                        {
                        alt349=2;
                        }
                        break;
                    case MIN:
                    case TIMEPERIOD_MINUTE:
                    case TIMEPERIOD_MINUTES:
                        {
                        alt349=6;
                        }
                        break;
                    case TIMEPERIOD_HOUR:
                    case TIMEPERIOD_HOURS:
                        {
                        alt349=5;
                        }
                        break;
                    case TIMEPERIOD_WEEK:
                    case TIMEPERIOD_WEEKS:
                        {
                        alt349=3;
                        }
                        break;
                    case TIMEPERIOD_DAY:
                    case TIMEPERIOD_DAYS:
                        {
                        alt349=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 349, 16, input);
                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt349=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt349=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt349=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt349=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt349=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt349=7;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt349=6;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt349=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt349=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt349=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt349=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt349=8;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt349=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt349=7;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt349=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt349=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 4, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt349=6;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt349=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt349=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt349=8;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt349=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt349=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt349=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt349=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 5, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt349=8;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt349=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt349=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt349=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt349=6;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt349=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt349=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt349=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 6, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt349=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt349=6;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt349=8;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt349=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt349=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt349=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt349=7;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt349=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 7, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt349=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt349=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt349=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt349=6;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt349=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt349=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt349=4;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt349=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 8, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 349, 0, input);
                throw nvae;
            }
            switch (alt349) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod12750);
                    yearPart871=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart871.getTree());
                    int alt321=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA321_23 = input.LA(3);
                                    if ( ((LA321_23>=TIMEPERIOD_MONTH && LA321_23<=TIMEPERIOD_MONTHS)) ) {
                                        alt321=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA321_24 = input.LA(3);
                                    if ( ((LA321_24>=TIMEPERIOD_MONTH && LA321_24<=TIMEPERIOD_MONTHS)) ) {
                                        alt321=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA321_25 = input.LA(3);
                                    if ( ((LA321_25>=TIMEPERIOD_MONTH && LA321_25<=TIMEPERIOD_MONTHS)) ) {
                                        alt321=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA321_26 = input.LA(3);
                                    if ( ((LA321_26>=TIMEPERIOD_MONTH && LA321_26<=TIMEPERIOD_MONTHS)) ) {
                                        alt321=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA321_27 = input.LA(3);
                                    if ( ((LA321_27>=TIMEPERIOD_MONTH && LA321_27<=TIMEPERIOD_MONTHS)) ) {
                                        alt321=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA321_28 = input.LA(3);
                                    if ( ((LA321_28>=TIMEPERIOD_MONTH && LA321_28<=TIMEPERIOD_MONTHS)) ) {
                                        alt321=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA321_29 = input.LA(3);
                                    if ( ((LA321_29>=TIMEPERIOD_MONTH && LA321_29<=TIMEPERIOD_MONTHS)) ) {
                                        alt321=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA321_30 = input.LA(3);
                                    if ( ((LA321_30>=TIMEPERIOD_MONTH && LA321_30<=TIMEPERIOD_MONTHS)) ) {
                                        alt321=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA321_3 = input.LA(2);
                            if ( ((LA321_3>=TIMEPERIOD_MONTH && LA321_3<=TIMEPERIOD_MONTHS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA321_4 = input.LA(2);
                            if ( ((LA321_4>=TIMEPERIOD_MONTH && LA321_4<=TIMEPERIOD_MONTHS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA321_5 = input.LA(2);
                            if ( ((LA321_5>=TIMEPERIOD_MONTH && LA321_5<=TIMEPERIOD_MONTHS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA321_6 = input.LA(2);
                            if ( ((LA321_6>=TIMEPERIOD_MONTH && LA321_6<=TIMEPERIOD_MONTHS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA321_7 = input.LA(2);
                            if ( ((LA321_7>=TIMEPERIOD_MONTH && LA321_7<=TIMEPERIOD_MONTHS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA321_8 = input.LA(2);
                            if ( ((LA321_8>=TIMEPERIOD_MONTH && LA321_8<=TIMEPERIOD_MONTHS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                    }
                    switch (alt321) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod12752);
                            monthPart872=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart872.getTree());
                            }
                            break;
                    }
                    int alt322=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA322_23 = input.LA(3);
                                    if ( ((LA322_23>=TIMEPERIOD_WEEK && LA322_23<=TIMEPERIOD_WEEKS)) ) {
                                        alt322=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA322_24 = input.LA(3);
                                    if ( ((LA322_24>=TIMEPERIOD_WEEK && LA322_24<=TIMEPERIOD_WEEKS)) ) {
                                        alt322=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA322_25 = input.LA(3);
                                    if ( ((LA322_25>=TIMEPERIOD_WEEK && LA322_25<=TIMEPERIOD_WEEKS)) ) {
                                        alt322=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA322_26 = input.LA(3);
                                    if ( ((LA322_26>=TIMEPERIOD_WEEK && LA322_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt322=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA322_27 = input.LA(3);
                                    if ( ((LA322_27>=TIMEPERIOD_WEEK && LA322_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt322=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA322_28 = input.LA(3);
                                    if ( ((LA322_28>=TIMEPERIOD_WEEK && LA322_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt322=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA322_29 = input.LA(3);
                                    if ( ((LA322_29>=TIMEPERIOD_WEEK && LA322_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt322=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA322_30 = input.LA(3);
                                    if ( ((LA322_30>=TIMEPERIOD_WEEK && LA322_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt322=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA322_3 = input.LA(2);
                            if ( ((LA322_3>=TIMEPERIOD_WEEK && LA322_3<=TIMEPERIOD_WEEKS)) ) {
                                alt322=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA322_4 = input.LA(2);
                            if ( ((LA322_4>=TIMEPERIOD_WEEK && LA322_4<=TIMEPERIOD_WEEKS)) ) {
                                alt322=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA322_5 = input.LA(2);
                            if ( ((LA322_5>=TIMEPERIOD_WEEK && LA322_5<=TIMEPERIOD_WEEKS)) ) {
                                alt322=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA322_6 = input.LA(2);
                            if ( ((LA322_6>=TIMEPERIOD_WEEK && LA322_6<=TIMEPERIOD_WEEKS)) ) {
                                alt322=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA322_7 = input.LA(2);
                            if ( ((LA322_7>=TIMEPERIOD_WEEK && LA322_7<=TIMEPERIOD_WEEKS)) ) {
                                alt322=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA322_8 = input.LA(2);
                            if ( ((LA322_8>=TIMEPERIOD_WEEK && LA322_8<=TIMEPERIOD_WEEKS)) ) {
                                alt322=1;
                            }
                            }
                            break;
                    }
                    switch (alt322) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod12755);
                            weekPart873=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart873.getTree());
                            }
                            break;
                    }
                    int alt323=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA323_23 = input.LA(3);
                                    if ( ((LA323_23>=TIMEPERIOD_DAY && LA323_23<=TIMEPERIOD_DAYS)) ) {
                                        alt323=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA323_24 = input.LA(3);
                                    if ( ((LA323_24>=TIMEPERIOD_DAY && LA323_24<=TIMEPERIOD_DAYS)) ) {
                                        alt323=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA323_25 = input.LA(3);
                                    if ( ((LA323_25>=TIMEPERIOD_DAY && LA323_25<=TIMEPERIOD_DAYS)) ) {
                                        alt323=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA323_26 = input.LA(3);
                                    if ( ((LA323_26>=TIMEPERIOD_DAY && LA323_26<=TIMEPERIOD_DAYS)) ) {
                                        alt323=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA323_27 = input.LA(3);
                                    if ( ((LA323_27>=TIMEPERIOD_DAY && LA323_27<=TIMEPERIOD_DAYS)) ) {
                                        alt323=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA323_28 = input.LA(3);
                                    if ( ((LA323_28>=TIMEPERIOD_DAY && LA323_28<=TIMEPERIOD_DAYS)) ) {
                                        alt323=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA323_29 = input.LA(3);
                                    if ( ((LA323_29>=TIMEPERIOD_DAY && LA323_29<=TIMEPERIOD_DAYS)) ) {
                                        alt323=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA323_30 = input.LA(3);
                                    if ( ((LA323_30>=TIMEPERIOD_DAY && LA323_30<=TIMEPERIOD_DAYS)) ) {
                                        alt323=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA323_3 = input.LA(2);
                            if ( ((LA323_3>=TIMEPERIOD_DAY && LA323_3<=TIMEPERIOD_DAYS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA323_4 = input.LA(2);
                            if ( ((LA323_4>=TIMEPERIOD_DAY && LA323_4<=TIMEPERIOD_DAYS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA323_5 = input.LA(2);
                            if ( ((LA323_5>=TIMEPERIOD_DAY && LA323_5<=TIMEPERIOD_DAYS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA323_6 = input.LA(2);
                            if ( ((LA323_6>=TIMEPERIOD_DAY && LA323_6<=TIMEPERIOD_DAYS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA323_7 = input.LA(2);
                            if ( ((LA323_7>=TIMEPERIOD_DAY && LA323_7<=TIMEPERIOD_DAYS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA323_8 = input.LA(2);
                            if ( ((LA323_8>=TIMEPERIOD_DAY && LA323_8<=TIMEPERIOD_DAYS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                    }
                    switch (alt323) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod12758);
                            dayPart874=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart874.getTree());
                            }
                            break;
                    }
                    int alt324=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA324_23 = input.LA(3);
                                    if ( ((LA324_23>=TIMEPERIOD_HOUR && LA324_23<=TIMEPERIOD_HOURS)) ) {
                                        alt324=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA324_24 = input.LA(3);
                                    if ( ((LA324_24>=TIMEPERIOD_HOUR && LA324_24<=TIMEPERIOD_HOURS)) ) {
                                        alt324=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA324_25 = input.LA(3);
                                    if ( ((LA324_25>=TIMEPERIOD_HOUR && LA324_25<=TIMEPERIOD_HOURS)) ) {
                                        alt324=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA324_26 = input.LA(3);
                                    if ( ((LA324_26>=TIMEPERIOD_HOUR && LA324_26<=TIMEPERIOD_HOURS)) ) {
                                        alt324=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA324_27 = input.LA(3);
                                    if ( ((LA324_27>=TIMEPERIOD_HOUR && LA324_27<=TIMEPERIOD_HOURS)) ) {
                                        alt324=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA324_28 = input.LA(3);
                                    if ( ((LA324_28>=TIMEPERIOD_HOUR && LA324_28<=TIMEPERIOD_HOURS)) ) {
                                        alt324=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA324_29 = input.LA(3);
                                    if ( ((LA324_29>=TIMEPERIOD_HOUR && LA324_29<=TIMEPERIOD_HOURS)) ) {
                                        alt324=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA324_30 = input.LA(3);
                                    if ( ((LA324_30>=TIMEPERIOD_HOUR && LA324_30<=TIMEPERIOD_HOURS)) ) {
                                        alt324=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA324_3 = input.LA(2);
                            if ( ((LA324_3>=TIMEPERIOD_HOUR && LA324_3<=TIMEPERIOD_HOURS)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA324_4 = input.LA(2);
                            if ( ((LA324_4>=TIMEPERIOD_HOUR && LA324_4<=TIMEPERIOD_HOURS)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA324_5 = input.LA(2);
                            if ( ((LA324_5>=TIMEPERIOD_HOUR && LA324_5<=TIMEPERIOD_HOURS)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA324_6 = input.LA(2);
                            if ( ((LA324_6>=TIMEPERIOD_HOUR && LA324_6<=TIMEPERIOD_HOURS)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA324_7 = input.LA(2);
                            if ( ((LA324_7>=TIMEPERIOD_HOUR && LA324_7<=TIMEPERIOD_HOURS)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA324_8 = input.LA(2);
                            if ( ((LA324_8>=TIMEPERIOD_HOUR && LA324_8<=TIMEPERIOD_HOURS)) ) {
                                alt324=1;
                            }
                            }
                            break;
                    }
                    switch (alt324) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod12761);
                            hourPart875=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart875.getTree());
                            }
                            break;
                    }
                    int alt325=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA325_23 = input.LA(3);
                                    if ( (LA325_23==MIN||(LA325_23>=TIMEPERIOD_MINUTE && LA325_23<=TIMEPERIOD_MINUTES)) ) {
                                        alt325=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA325_24 = input.LA(3);
                                    if ( (LA325_24==MIN||(LA325_24>=TIMEPERIOD_MINUTE && LA325_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt325=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA325_25 = input.LA(3);
                                    if ( (LA325_25==MIN||(LA325_25>=TIMEPERIOD_MINUTE && LA325_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt325=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA325_26 = input.LA(3);
                                    if ( (LA325_26==MIN||(LA325_26>=TIMEPERIOD_MINUTE && LA325_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt325=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA325_27 = input.LA(3);
                                    if ( (LA325_27==MIN||(LA325_27>=TIMEPERIOD_MINUTE && LA325_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt325=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA325_28 = input.LA(3);
                                    if ( (LA325_28==MIN||(LA325_28>=TIMEPERIOD_MINUTE && LA325_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt325=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA325_29 = input.LA(3);
                                    if ( (LA325_29==MIN||(LA325_29>=TIMEPERIOD_MINUTE && LA325_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt325=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA325_30 = input.LA(3);
                                    if ( (LA325_30==MIN||(LA325_30>=TIMEPERIOD_MINUTE && LA325_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt325=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA325_3 = input.LA(2);
                            if ( (LA325_3==MIN||(LA325_3>=TIMEPERIOD_MINUTE && LA325_3<=TIMEPERIOD_MINUTES)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA325_4 = input.LA(2);
                            if ( (LA325_4==MIN||(LA325_4>=TIMEPERIOD_MINUTE && LA325_4<=TIMEPERIOD_MINUTES)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA325_5 = input.LA(2);
                            if ( (LA325_5==MIN||(LA325_5>=TIMEPERIOD_MINUTE && LA325_5<=TIMEPERIOD_MINUTES)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA325_6 = input.LA(2);
                            if ( (LA325_6==MIN||(LA325_6>=TIMEPERIOD_MINUTE && LA325_6<=TIMEPERIOD_MINUTES)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA325_7 = input.LA(2);
                            if ( (LA325_7==MIN||(LA325_7>=TIMEPERIOD_MINUTE && LA325_7<=TIMEPERIOD_MINUTES)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA325_8 = input.LA(2);
                            if ( (LA325_8==MIN||(LA325_8>=TIMEPERIOD_MINUTE && LA325_8<=TIMEPERIOD_MINUTES)) ) {
                                alt325=1;
                            }
                            }
                            break;
                    }
                    switch (alt325) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12764);
                            minutePart876=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart876.getTree());
                            }
                            break;
                    }
                    int alt326=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA326_23 = input.LA(3);
                                    if ( ((LA326_23>=TIMEPERIOD_SEC && LA326_23<=TIMEPERIOD_SECONDS)) ) {
                                        alt326=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA326_24 = input.LA(3);
                                    if ( ((LA326_24>=TIMEPERIOD_SEC && LA326_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt326=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA326_25 = input.LA(3);
                                    if ( ((LA326_25>=TIMEPERIOD_SEC && LA326_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt326=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA326_26 = input.LA(3);
                                    if ( ((LA326_26>=TIMEPERIOD_SEC && LA326_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt326=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA326_27 = input.LA(3);
                                    if ( ((LA326_27>=TIMEPERIOD_SEC && LA326_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt326=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA326_28 = input.LA(3);
                                    if ( ((LA326_28>=TIMEPERIOD_SEC && LA326_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt326=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA326_29 = input.LA(3);
                                    if ( ((LA326_29>=TIMEPERIOD_SEC && LA326_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt326=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA326_30 = input.LA(3);
                                    if ( ((LA326_30>=TIMEPERIOD_SEC && LA326_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt326=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA326_3 = input.LA(2);
                            if ( ((LA326_3>=TIMEPERIOD_SEC && LA326_3<=TIMEPERIOD_SECONDS)) ) {
                                alt326=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA326_4 = input.LA(2);
                            if ( ((LA326_4>=TIMEPERIOD_SEC && LA326_4<=TIMEPERIOD_SECONDS)) ) {
                                alt326=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA326_5 = input.LA(2);
                            if ( ((LA326_5>=TIMEPERIOD_SEC && LA326_5<=TIMEPERIOD_SECONDS)) ) {
                                alt326=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA326_6 = input.LA(2);
                            if ( ((LA326_6>=TIMEPERIOD_SEC && LA326_6<=TIMEPERIOD_SECONDS)) ) {
                                alt326=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA326_7 = input.LA(2);
                            if ( ((LA326_7>=TIMEPERIOD_SEC && LA326_7<=TIMEPERIOD_SECONDS)) ) {
                                alt326=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA326_8 = input.LA(2);
                            if ( ((LA326_8>=TIMEPERIOD_SEC && LA326_8<=TIMEPERIOD_SECONDS)) ) {
                                alt326=1;
                            }
                            }
                            break;
                    }
                    switch (alt326) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12767);
                            secondPart877=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart877.getTree());
                            }
                            break;
                    }
                    int alt327=2;
                    int LA327_0 = input.LA(1);
                    if ( (LA327_0==NUM_DOUBLE||LA327_0==IDENT||(LA327_0>=PLUS && LA327_0<=QUESTION)||LA327_0==MINUS||LA327_0==NUM_INT||(LA327_0>=NUM_LONG && LA327_0<=NUM_FLOAT)) ) {
                        alt327=1;
                    }
                    switch (alt327) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12770);
                            millisecondPart878=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart878.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod12776);
                    monthPart879=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart879.getTree());
                    int alt328=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA328_23 = input.LA(3);
                                    if ( ((LA328_23>=TIMEPERIOD_WEEK && LA328_23<=TIMEPERIOD_WEEKS)) ) {
                                        alt328=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA328_24 = input.LA(3);
                                    if ( ((LA328_24>=TIMEPERIOD_WEEK && LA328_24<=TIMEPERIOD_WEEKS)) ) {
                                        alt328=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA328_25 = input.LA(3);
                                    if ( ((LA328_25>=TIMEPERIOD_WEEK && LA328_25<=TIMEPERIOD_WEEKS)) ) {
                                        alt328=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA328_26 = input.LA(3);
                                    if ( ((LA328_26>=TIMEPERIOD_WEEK && LA328_26<=TIMEPERIOD_WEEKS)) ) {
                                        alt328=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA328_27 = input.LA(3);
                                    if ( ((LA328_27>=TIMEPERIOD_WEEK && LA328_27<=TIMEPERIOD_WEEKS)) ) {
                                        alt328=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA328_28 = input.LA(3);
                                    if ( ((LA328_28>=TIMEPERIOD_WEEK && LA328_28<=TIMEPERIOD_WEEKS)) ) {
                                        alt328=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA328_29 = input.LA(3);
                                    if ( ((LA328_29>=TIMEPERIOD_WEEK && LA328_29<=TIMEPERIOD_WEEKS)) ) {
                                        alt328=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA328_30 = input.LA(3);
                                    if ( ((LA328_30>=TIMEPERIOD_WEEK && LA328_30<=TIMEPERIOD_WEEKS)) ) {
                                        alt328=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA328_3 = input.LA(2);
                            if ( ((LA328_3>=TIMEPERIOD_WEEK && LA328_3<=TIMEPERIOD_WEEKS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA328_4 = input.LA(2);
                            if ( ((LA328_4>=TIMEPERIOD_WEEK && LA328_4<=TIMEPERIOD_WEEKS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA328_5 = input.LA(2);
                            if ( ((LA328_5>=TIMEPERIOD_WEEK && LA328_5<=TIMEPERIOD_WEEKS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA328_6 = input.LA(2);
                            if ( ((LA328_6>=TIMEPERIOD_WEEK && LA328_6<=TIMEPERIOD_WEEKS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA328_7 = input.LA(2);
                            if ( ((LA328_7>=TIMEPERIOD_WEEK && LA328_7<=TIMEPERIOD_WEEKS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA328_8 = input.LA(2);
                            if ( ((LA328_8>=TIMEPERIOD_WEEK && LA328_8<=TIMEPERIOD_WEEKS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                    }
                    switch (alt328) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod12778);
                            weekPart880=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart880.getTree());
                            }
                            break;
                    }
                    int alt329=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA329_23 = input.LA(3);
                                    if ( ((LA329_23>=TIMEPERIOD_DAY && LA329_23<=TIMEPERIOD_DAYS)) ) {
                                        alt329=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA329_24 = input.LA(3);
                                    if ( ((LA329_24>=TIMEPERIOD_DAY && LA329_24<=TIMEPERIOD_DAYS)) ) {
                                        alt329=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA329_25 = input.LA(3);
                                    if ( ((LA329_25>=TIMEPERIOD_DAY && LA329_25<=TIMEPERIOD_DAYS)) ) {
                                        alt329=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA329_26 = input.LA(3);
                                    if ( ((LA329_26>=TIMEPERIOD_DAY && LA329_26<=TIMEPERIOD_DAYS)) ) {
                                        alt329=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA329_27 = input.LA(3);
                                    if ( ((LA329_27>=TIMEPERIOD_DAY && LA329_27<=TIMEPERIOD_DAYS)) ) {
                                        alt329=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA329_28 = input.LA(3);
                                    if ( ((LA329_28>=TIMEPERIOD_DAY && LA329_28<=TIMEPERIOD_DAYS)) ) {
                                        alt329=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA329_29 = input.LA(3);
                                    if ( ((LA329_29>=TIMEPERIOD_DAY && LA329_29<=TIMEPERIOD_DAYS)) ) {
                                        alt329=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA329_30 = input.LA(3);
                                    if ( ((LA329_30>=TIMEPERIOD_DAY && LA329_30<=TIMEPERIOD_DAYS)) ) {
                                        alt329=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA329_3 = input.LA(2);
                            if ( ((LA329_3>=TIMEPERIOD_DAY && LA329_3<=TIMEPERIOD_DAYS)) ) {
                                alt329=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA329_4 = input.LA(2);
                            if ( ((LA329_4>=TIMEPERIOD_DAY && LA329_4<=TIMEPERIOD_DAYS)) ) {
                                alt329=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA329_5 = input.LA(2);
                            if ( ((LA329_5>=TIMEPERIOD_DAY && LA329_5<=TIMEPERIOD_DAYS)) ) {
                                alt329=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA329_6 = input.LA(2);
                            if ( ((LA329_6>=TIMEPERIOD_DAY && LA329_6<=TIMEPERIOD_DAYS)) ) {
                                alt329=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA329_7 = input.LA(2);
                            if ( ((LA329_7>=TIMEPERIOD_DAY && LA329_7<=TIMEPERIOD_DAYS)) ) {
                                alt329=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA329_8 = input.LA(2);
                            if ( ((LA329_8>=TIMEPERIOD_DAY && LA329_8<=TIMEPERIOD_DAYS)) ) {
                                alt329=1;
                            }
                            }
                            break;
                    }
                    switch (alt329) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod12781);
                            dayPart881=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart881.getTree());
                            }
                            break;
                    }
                    int alt330=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA330_23 = input.LA(3);
                                    if ( ((LA330_23>=TIMEPERIOD_HOUR && LA330_23<=TIMEPERIOD_HOURS)) ) {
                                        alt330=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA330_24 = input.LA(3);
                                    if ( ((LA330_24>=TIMEPERIOD_HOUR && LA330_24<=TIMEPERIOD_HOURS)) ) {
                                        alt330=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA330_25 = input.LA(3);
                                    if ( ((LA330_25>=TIMEPERIOD_HOUR && LA330_25<=TIMEPERIOD_HOURS)) ) {
                                        alt330=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA330_26 = input.LA(3);
                                    if ( ((LA330_26>=TIMEPERIOD_HOUR && LA330_26<=TIMEPERIOD_HOURS)) ) {
                                        alt330=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA330_27 = input.LA(3);
                                    if ( ((LA330_27>=TIMEPERIOD_HOUR && LA330_27<=TIMEPERIOD_HOURS)) ) {
                                        alt330=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA330_28 = input.LA(3);
                                    if ( ((LA330_28>=TIMEPERIOD_HOUR && LA330_28<=TIMEPERIOD_HOURS)) ) {
                                        alt330=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA330_29 = input.LA(3);
                                    if ( ((LA330_29>=TIMEPERIOD_HOUR && LA330_29<=TIMEPERIOD_HOURS)) ) {
                                        alt330=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA330_30 = input.LA(3);
                                    if ( ((LA330_30>=TIMEPERIOD_HOUR && LA330_30<=TIMEPERIOD_HOURS)) ) {
                                        alt330=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA330_3 = input.LA(2);
                            if ( ((LA330_3>=TIMEPERIOD_HOUR && LA330_3<=TIMEPERIOD_HOURS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA330_4 = input.LA(2);
                            if ( ((LA330_4>=TIMEPERIOD_HOUR && LA330_4<=TIMEPERIOD_HOURS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA330_5 = input.LA(2);
                            if ( ((LA330_5>=TIMEPERIOD_HOUR && LA330_5<=TIMEPERIOD_HOURS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA330_6 = input.LA(2);
                            if ( ((LA330_6>=TIMEPERIOD_HOUR && LA330_6<=TIMEPERIOD_HOURS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA330_7 = input.LA(2);
                            if ( ((LA330_7>=TIMEPERIOD_HOUR && LA330_7<=TIMEPERIOD_HOURS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA330_8 = input.LA(2);
                            if ( ((LA330_8>=TIMEPERIOD_HOUR && LA330_8<=TIMEPERIOD_HOURS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                    }
                    switch (alt330) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod12784);
                            hourPart882=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart882.getTree());
                            }
                            break;
                    }
                    int alt331=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA331_23 = input.LA(3);
                                    if ( (LA331_23==MIN||(LA331_23>=TIMEPERIOD_MINUTE && LA331_23<=TIMEPERIOD_MINUTES)) ) {
                                        alt331=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA331_24 = input.LA(3);
                                    if ( (LA331_24==MIN||(LA331_24>=TIMEPERIOD_MINUTE && LA331_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt331=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA331_25 = input.LA(3);
                                    if ( (LA331_25==MIN||(LA331_25>=TIMEPERIOD_MINUTE && LA331_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt331=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA331_26 = input.LA(3);
                                    if ( (LA331_26==MIN||(LA331_26>=TIMEPERIOD_MINUTE && LA331_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt331=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA331_27 = input.LA(3);
                                    if ( (LA331_27==MIN||(LA331_27>=TIMEPERIOD_MINUTE && LA331_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt331=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA331_28 = input.LA(3);
                                    if ( (LA331_28==MIN||(LA331_28>=TIMEPERIOD_MINUTE && LA331_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt331=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA331_29 = input.LA(3);
                                    if ( (LA331_29==MIN||(LA331_29>=TIMEPERIOD_MINUTE && LA331_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt331=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA331_30 = input.LA(3);
                                    if ( (LA331_30==MIN||(LA331_30>=TIMEPERIOD_MINUTE && LA331_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt331=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA331_3 = input.LA(2);
                            if ( (LA331_3==MIN||(LA331_3>=TIMEPERIOD_MINUTE && LA331_3<=TIMEPERIOD_MINUTES)) ) {
                                alt331=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA331_4 = input.LA(2);
                            if ( (LA331_4==MIN||(LA331_4>=TIMEPERIOD_MINUTE && LA331_4<=TIMEPERIOD_MINUTES)) ) {
                                alt331=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA331_5 = input.LA(2);
                            if ( (LA331_5==MIN||(LA331_5>=TIMEPERIOD_MINUTE && LA331_5<=TIMEPERIOD_MINUTES)) ) {
                                alt331=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA331_6 = input.LA(2);
                            if ( (LA331_6==MIN||(LA331_6>=TIMEPERIOD_MINUTE && LA331_6<=TIMEPERIOD_MINUTES)) ) {
                                alt331=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA331_7 = input.LA(2);
                            if ( (LA331_7==MIN||(LA331_7>=TIMEPERIOD_MINUTE && LA331_7<=TIMEPERIOD_MINUTES)) ) {
                                alt331=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA331_8 = input.LA(2);
                            if ( (LA331_8==MIN||(LA331_8>=TIMEPERIOD_MINUTE && LA331_8<=TIMEPERIOD_MINUTES)) ) {
                                alt331=1;
                            }
                            }
                            break;
                    }
                    switch (alt331) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12787);
                            minutePart883=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart883.getTree());
                            }
                            break;
                    }
                    int alt332=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA332_23 = input.LA(3);
                                    if ( ((LA332_23>=TIMEPERIOD_SEC && LA332_23<=TIMEPERIOD_SECONDS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA332_24 = input.LA(3);
                                    if ( ((LA332_24>=TIMEPERIOD_SEC && LA332_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA332_25 = input.LA(3);
                                    if ( ((LA332_25>=TIMEPERIOD_SEC && LA332_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA332_26 = input.LA(3);
                                    if ( ((LA332_26>=TIMEPERIOD_SEC && LA332_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA332_27 = input.LA(3);
                                    if ( ((LA332_27>=TIMEPERIOD_SEC && LA332_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA332_28 = input.LA(3);
                                    if ( ((LA332_28>=TIMEPERIOD_SEC && LA332_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA332_29 = input.LA(3);
                                    if ( ((LA332_29>=TIMEPERIOD_SEC && LA332_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA332_30 = input.LA(3);
                                    if ( ((LA332_30>=TIMEPERIOD_SEC && LA332_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt332=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA332_3 = input.LA(2);
                            if ( ((LA332_3>=TIMEPERIOD_SEC && LA332_3<=TIMEPERIOD_SECONDS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA332_4 = input.LA(2);
                            if ( ((LA332_4>=TIMEPERIOD_SEC && LA332_4<=TIMEPERIOD_SECONDS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA332_5 = input.LA(2);
                            if ( ((LA332_5>=TIMEPERIOD_SEC && LA332_5<=TIMEPERIOD_SECONDS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA332_6 = input.LA(2);
                            if ( ((LA332_6>=TIMEPERIOD_SEC && LA332_6<=TIMEPERIOD_SECONDS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA332_7 = input.LA(2);
                            if ( ((LA332_7>=TIMEPERIOD_SEC && LA332_7<=TIMEPERIOD_SECONDS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA332_8 = input.LA(2);
                            if ( ((LA332_8>=TIMEPERIOD_SEC && LA332_8<=TIMEPERIOD_SECONDS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                    }
                    switch (alt332) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12790);
                            secondPart884=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart884.getTree());
                            }
                            break;
                    }
                    int alt333=2;
                    int LA333_0 = input.LA(1);
                    if ( (LA333_0==NUM_DOUBLE||LA333_0==IDENT||(LA333_0>=PLUS && LA333_0<=QUESTION)||LA333_0==MINUS||LA333_0==NUM_INT||(LA333_0>=NUM_LONG && LA333_0<=NUM_FLOAT)) ) {
                        alt333=1;
                    }
                    switch (alt333) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12793);
                            millisecondPart885=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart885.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod12799);
                    weekPart886=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart886.getTree());
                    int alt334=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA334_23 = input.LA(3);
                                    if ( ((LA334_23>=TIMEPERIOD_DAY && LA334_23<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA334_24 = input.LA(3);
                                    if ( ((LA334_24>=TIMEPERIOD_DAY && LA334_24<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA334_25 = input.LA(3);
                                    if ( ((LA334_25>=TIMEPERIOD_DAY && LA334_25<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA334_26 = input.LA(3);
                                    if ( ((LA334_26>=TIMEPERIOD_DAY && LA334_26<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA334_27 = input.LA(3);
                                    if ( ((LA334_27>=TIMEPERIOD_DAY && LA334_27<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA334_28 = input.LA(3);
                                    if ( ((LA334_28>=TIMEPERIOD_DAY && LA334_28<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA334_29 = input.LA(3);
                                    if ( ((LA334_29>=TIMEPERIOD_DAY && LA334_29<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA334_30 = input.LA(3);
                                    if ( ((LA334_30>=TIMEPERIOD_DAY && LA334_30<=TIMEPERIOD_DAYS)) ) {
                                        alt334=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA334_3 = input.LA(2);
                            if ( ((LA334_3>=TIMEPERIOD_DAY && LA334_3<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA334_4 = input.LA(2);
                            if ( ((LA334_4>=TIMEPERIOD_DAY && LA334_4<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA334_5 = input.LA(2);
                            if ( ((LA334_5>=TIMEPERIOD_DAY && LA334_5<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA334_6 = input.LA(2);
                            if ( ((LA334_6>=TIMEPERIOD_DAY && LA334_6<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA334_7 = input.LA(2);
                            if ( ((LA334_7>=TIMEPERIOD_DAY && LA334_7<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA334_8 = input.LA(2);
                            if ( ((LA334_8>=TIMEPERIOD_DAY && LA334_8<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                    }
                    switch (alt334) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod12801);
                            dayPart887=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart887.getTree());
                            }
                            break;
                    }
                    int alt335=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA335_23 = input.LA(3);
                                    if ( ((LA335_23>=TIMEPERIOD_HOUR && LA335_23<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA335_24 = input.LA(3);
                                    if ( ((LA335_24>=TIMEPERIOD_HOUR && LA335_24<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA335_25 = input.LA(3);
                                    if ( ((LA335_25>=TIMEPERIOD_HOUR && LA335_25<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA335_26 = input.LA(3);
                                    if ( ((LA335_26>=TIMEPERIOD_HOUR && LA335_26<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA335_27 = input.LA(3);
                                    if ( ((LA335_27>=TIMEPERIOD_HOUR && LA335_27<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA335_28 = input.LA(3);
                                    if ( ((LA335_28>=TIMEPERIOD_HOUR && LA335_28<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA335_29 = input.LA(3);
                                    if ( ((LA335_29>=TIMEPERIOD_HOUR && LA335_29<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA335_30 = input.LA(3);
                                    if ( ((LA335_30>=TIMEPERIOD_HOUR && LA335_30<=TIMEPERIOD_HOURS)) ) {
                                        alt335=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA335_3 = input.LA(2);
                            if ( ((LA335_3>=TIMEPERIOD_HOUR && LA335_3<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA335_4 = input.LA(2);
                            if ( ((LA335_4>=TIMEPERIOD_HOUR && LA335_4<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA335_5 = input.LA(2);
                            if ( ((LA335_5>=TIMEPERIOD_HOUR && LA335_5<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA335_6 = input.LA(2);
                            if ( ((LA335_6>=TIMEPERIOD_HOUR && LA335_6<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA335_7 = input.LA(2);
                            if ( ((LA335_7>=TIMEPERIOD_HOUR && LA335_7<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA335_8 = input.LA(2);
                            if ( ((LA335_8>=TIMEPERIOD_HOUR && LA335_8<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                    }
                    switch (alt335) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod12804);
                            hourPart888=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart888.getTree());
                            }
                            break;
                    }
                    int alt336=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA336_23 = input.LA(3);
                                    if ( (LA336_23==MIN||(LA336_23>=TIMEPERIOD_MINUTE && LA336_23<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA336_24 = input.LA(3);
                                    if ( (LA336_24==MIN||(LA336_24>=TIMEPERIOD_MINUTE && LA336_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA336_25 = input.LA(3);
                                    if ( (LA336_25==MIN||(LA336_25>=TIMEPERIOD_MINUTE && LA336_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA336_26 = input.LA(3);
                                    if ( (LA336_26==MIN||(LA336_26>=TIMEPERIOD_MINUTE && LA336_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA336_27 = input.LA(3);
                                    if ( (LA336_27==MIN||(LA336_27>=TIMEPERIOD_MINUTE && LA336_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA336_28 = input.LA(3);
                                    if ( (LA336_28==MIN||(LA336_28>=TIMEPERIOD_MINUTE && LA336_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA336_29 = input.LA(3);
                                    if ( (LA336_29==MIN||(LA336_29>=TIMEPERIOD_MINUTE && LA336_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA336_30 = input.LA(3);
                                    if ( (LA336_30==MIN||(LA336_30>=TIMEPERIOD_MINUTE && LA336_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt336=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA336_3 = input.LA(2);
                            if ( (LA336_3==MIN||(LA336_3>=TIMEPERIOD_MINUTE && LA336_3<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA336_4 = input.LA(2);
                            if ( (LA336_4==MIN||(LA336_4>=TIMEPERIOD_MINUTE && LA336_4<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA336_5 = input.LA(2);
                            if ( (LA336_5==MIN||(LA336_5>=TIMEPERIOD_MINUTE && LA336_5<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA336_6 = input.LA(2);
                            if ( (LA336_6==MIN||(LA336_6>=TIMEPERIOD_MINUTE && LA336_6<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA336_7 = input.LA(2);
                            if ( (LA336_7==MIN||(LA336_7>=TIMEPERIOD_MINUTE && LA336_7<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA336_8 = input.LA(2);
                            if ( (LA336_8==MIN||(LA336_8>=TIMEPERIOD_MINUTE && LA336_8<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                    }
                    switch (alt336) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12807);
                            minutePart889=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart889.getTree());
                            }
                            break;
                    }
                    int alt337=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA337_23 = input.LA(3);
                                    if ( ((LA337_23>=TIMEPERIOD_SEC && LA337_23<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA337_24 = input.LA(3);
                                    if ( ((LA337_24>=TIMEPERIOD_SEC && LA337_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA337_25 = input.LA(3);
                                    if ( ((LA337_25>=TIMEPERIOD_SEC && LA337_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA337_26 = input.LA(3);
                                    if ( ((LA337_26>=TIMEPERIOD_SEC && LA337_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA337_27 = input.LA(3);
                                    if ( ((LA337_27>=TIMEPERIOD_SEC && LA337_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA337_28 = input.LA(3);
                                    if ( ((LA337_28>=TIMEPERIOD_SEC && LA337_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA337_29 = input.LA(3);
                                    if ( ((LA337_29>=TIMEPERIOD_SEC && LA337_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA337_30 = input.LA(3);
                                    if ( ((LA337_30>=TIMEPERIOD_SEC && LA337_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt337=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA337_3 = input.LA(2);
                            if ( ((LA337_3>=TIMEPERIOD_SEC && LA337_3<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA337_4 = input.LA(2);
                            if ( ((LA337_4>=TIMEPERIOD_SEC && LA337_4<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA337_5 = input.LA(2);
                            if ( ((LA337_5>=TIMEPERIOD_SEC && LA337_5<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA337_6 = input.LA(2);
                            if ( ((LA337_6>=TIMEPERIOD_SEC && LA337_6<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA337_7 = input.LA(2);
                            if ( ((LA337_7>=TIMEPERIOD_SEC && LA337_7<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA337_8 = input.LA(2);
                            if ( ((LA337_8>=TIMEPERIOD_SEC && LA337_8<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                    }
                    switch (alt337) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12810);
                            secondPart890=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart890.getTree());
                            }
                            break;
                    }
                    int alt338=2;
                    int LA338_0 = input.LA(1);
                    if ( (LA338_0==NUM_DOUBLE||LA338_0==IDENT||(LA338_0>=PLUS && LA338_0<=QUESTION)||LA338_0==MINUS||LA338_0==NUM_INT||(LA338_0>=NUM_LONG && LA338_0<=NUM_FLOAT)) ) {
                        alt338=1;
                    }
                    switch (alt338) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12813);
                            millisecondPart891=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart891.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod12819);
                    dayPart892=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart892.getTree());
                    int alt339=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA339_23 = input.LA(3);
                                    if ( ((LA339_23>=TIMEPERIOD_HOUR && LA339_23<=TIMEPERIOD_HOURS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA339_24 = input.LA(3);
                                    if ( ((LA339_24>=TIMEPERIOD_HOUR && LA339_24<=TIMEPERIOD_HOURS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA339_25 = input.LA(3);
                                    if ( ((LA339_25>=TIMEPERIOD_HOUR && LA339_25<=TIMEPERIOD_HOURS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA339_26 = input.LA(3);
                                    if ( ((LA339_26>=TIMEPERIOD_HOUR && LA339_26<=TIMEPERIOD_HOURS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA339_27 = input.LA(3);
                                    if ( ((LA339_27>=TIMEPERIOD_HOUR && LA339_27<=TIMEPERIOD_HOURS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA339_28 = input.LA(3);
                                    if ( ((LA339_28>=TIMEPERIOD_HOUR && LA339_28<=TIMEPERIOD_HOURS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA339_29 = input.LA(3);
                                    if ( ((LA339_29>=TIMEPERIOD_HOUR && LA339_29<=TIMEPERIOD_HOURS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA339_30 = input.LA(3);
                                    if ( ((LA339_30>=TIMEPERIOD_HOUR && LA339_30<=TIMEPERIOD_HOURS)) ) {
                                        alt339=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA339_3 = input.LA(2);
                            if ( ((LA339_3>=TIMEPERIOD_HOUR && LA339_3<=TIMEPERIOD_HOURS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA339_4 = input.LA(2);
                            if ( ((LA339_4>=TIMEPERIOD_HOUR && LA339_4<=TIMEPERIOD_HOURS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA339_5 = input.LA(2);
                            if ( ((LA339_5>=TIMEPERIOD_HOUR && LA339_5<=TIMEPERIOD_HOURS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA339_6 = input.LA(2);
                            if ( ((LA339_6>=TIMEPERIOD_HOUR && LA339_6<=TIMEPERIOD_HOURS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA339_7 = input.LA(2);
                            if ( ((LA339_7>=TIMEPERIOD_HOUR && LA339_7<=TIMEPERIOD_HOURS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA339_8 = input.LA(2);
                            if ( ((LA339_8>=TIMEPERIOD_HOUR && LA339_8<=TIMEPERIOD_HOURS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                    }
                    switch (alt339) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod12821);
                            hourPart893=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart893.getTree());
                            }
                            break;
                    }
                    int alt340=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA340_23 = input.LA(3);
                                    if ( (LA340_23==MIN||(LA340_23>=TIMEPERIOD_MINUTE && LA340_23<=TIMEPERIOD_MINUTES)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA340_24 = input.LA(3);
                                    if ( (LA340_24==MIN||(LA340_24>=TIMEPERIOD_MINUTE && LA340_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA340_25 = input.LA(3);
                                    if ( (LA340_25==MIN||(LA340_25>=TIMEPERIOD_MINUTE && LA340_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA340_26 = input.LA(3);
                                    if ( (LA340_26==MIN||(LA340_26>=TIMEPERIOD_MINUTE && LA340_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA340_27 = input.LA(3);
                                    if ( (LA340_27==MIN||(LA340_27>=TIMEPERIOD_MINUTE && LA340_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA340_28 = input.LA(3);
                                    if ( (LA340_28==MIN||(LA340_28>=TIMEPERIOD_MINUTE && LA340_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA340_29 = input.LA(3);
                                    if ( (LA340_29==MIN||(LA340_29>=TIMEPERIOD_MINUTE && LA340_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA340_30 = input.LA(3);
                                    if ( (LA340_30==MIN||(LA340_30>=TIMEPERIOD_MINUTE && LA340_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt340=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA340_3 = input.LA(2);
                            if ( (LA340_3==MIN||(LA340_3>=TIMEPERIOD_MINUTE && LA340_3<=TIMEPERIOD_MINUTES)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA340_4 = input.LA(2);
                            if ( (LA340_4==MIN||(LA340_4>=TIMEPERIOD_MINUTE && LA340_4<=TIMEPERIOD_MINUTES)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA340_5 = input.LA(2);
                            if ( (LA340_5==MIN||(LA340_5>=TIMEPERIOD_MINUTE && LA340_5<=TIMEPERIOD_MINUTES)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA340_6 = input.LA(2);
                            if ( (LA340_6==MIN||(LA340_6>=TIMEPERIOD_MINUTE && LA340_6<=TIMEPERIOD_MINUTES)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA340_7 = input.LA(2);
                            if ( (LA340_7==MIN||(LA340_7>=TIMEPERIOD_MINUTE && LA340_7<=TIMEPERIOD_MINUTES)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA340_8 = input.LA(2);
                            if ( (LA340_8==MIN||(LA340_8>=TIMEPERIOD_MINUTE && LA340_8<=TIMEPERIOD_MINUTES)) ) {
                                alt340=1;
                            }
                            }
                            break;
                    }
                    switch (alt340) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12824);
                            minutePart894=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart894.getTree());
                            }
                            break;
                    }
                    int alt341=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA341_23 = input.LA(3);
                                    if ( ((LA341_23>=TIMEPERIOD_SEC && LA341_23<=TIMEPERIOD_SECONDS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA341_24 = input.LA(3);
                                    if ( ((LA341_24>=TIMEPERIOD_SEC && LA341_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA341_25 = input.LA(3);
                                    if ( ((LA341_25>=TIMEPERIOD_SEC && LA341_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA341_26 = input.LA(3);
                                    if ( ((LA341_26>=TIMEPERIOD_SEC && LA341_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA341_27 = input.LA(3);
                                    if ( ((LA341_27>=TIMEPERIOD_SEC && LA341_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA341_28 = input.LA(3);
                                    if ( ((LA341_28>=TIMEPERIOD_SEC && LA341_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA341_29 = input.LA(3);
                                    if ( ((LA341_29>=TIMEPERIOD_SEC && LA341_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA341_30 = input.LA(3);
                                    if ( ((LA341_30>=TIMEPERIOD_SEC && LA341_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt341=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA341_3 = input.LA(2);
                            if ( ((LA341_3>=TIMEPERIOD_SEC && LA341_3<=TIMEPERIOD_SECONDS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA341_4 = input.LA(2);
                            if ( ((LA341_4>=TIMEPERIOD_SEC && LA341_4<=TIMEPERIOD_SECONDS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA341_5 = input.LA(2);
                            if ( ((LA341_5>=TIMEPERIOD_SEC && LA341_5<=TIMEPERIOD_SECONDS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA341_6 = input.LA(2);
                            if ( ((LA341_6>=TIMEPERIOD_SEC && LA341_6<=TIMEPERIOD_SECONDS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA341_7 = input.LA(2);
                            if ( ((LA341_7>=TIMEPERIOD_SEC && LA341_7<=TIMEPERIOD_SECONDS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA341_8 = input.LA(2);
                            if ( ((LA341_8>=TIMEPERIOD_SEC && LA341_8<=TIMEPERIOD_SECONDS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                    }
                    switch (alt341) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12827);
                            secondPart895=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart895.getTree());
                            }
                            break;
                    }
                    int alt342=2;
                    int LA342_0 = input.LA(1);
                    if ( (LA342_0==NUM_DOUBLE||LA342_0==IDENT||(LA342_0>=PLUS && LA342_0<=QUESTION)||LA342_0==MINUS||LA342_0==NUM_INT||(LA342_0>=NUM_LONG && LA342_0<=NUM_FLOAT)) ) {
                        alt342=1;
                    }
                    switch (alt342) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12830);
                            millisecondPart896=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart896.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod12836);
                    hourPart897=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart897.getTree());
                    int alt343=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA343_23 = input.LA(3);
                                    if ( (LA343_23==MIN||(LA343_23>=TIMEPERIOD_MINUTE && LA343_23<=TIMEPERIOD_MINUTES)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA343_24 = input.LA(3);
                                    if ( (LA343_24==MIN||(LA343_24>=TIMEPERIOD_MINUTE && LA343_24<=TIMEPERIOD_MINUTES)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA343_25 = input.LA(3);
                                    if ( (LA343_25==MIN||(LA343_25>=TIMEPERIOD_MINUTE && LA343_25<=TIMEPERIOD_MINUTES)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA343_26 = input.LA(3);
                                    if ( (LA343_26==MIN||(LA343_26>=TIMEPERIOD_MINUTE && LA343_26<=TIMEPERIOD_MINUTES)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA343_27 = input.LA(3);
                                    if ( (LA343_27==MIN||(LA343_27>=TIMEPERIOD_MINUTE && LA343_27<=TIMEPERIOD_MINUTES)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA343_28 = input.LA(3);
                                    if ( (LA343_28==MIN||(LA343_28>=TIMEPERIOD_MINUTE && LA343_28<=TIMEPERIOD_MINUTES)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA343_29 = input.LA(3);
                                    if ( (LA343_29==MIN||(LA343_29>=TIMEPERIOD_MINUTE && LA343_29<=TIMEPERIOD_MINUTES)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA343_30 = input.LA(3);
                                    if ( (LA343_30==MIN||(LA343_30>=TIMEPERIOD_MINUTE && LA343_30<=TIMEPERIOD_MINUTES)) ) {
                                        alt343=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA343_3 = input.LA(2);
                            if ( (LA343_3==MIN||(LA343_3>=TIMEPERIOD_MINUTE && LA343_3<=TIMEPERIOD_MINUTES)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA343_4 = input.LA(2);
                            if ( (LA343_4==MIN||(LA343_4>=TIMEPERIOD_MINUTE && LA343_4<=TIMEPERIOD_MINUTES)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA343_5 = input.LA(2);
                            if ( (LA343_5==MIN||(LA343_5>=TIMEPERIOD_MINUTE && LA343_5<=TIMEPERIOD_MINUTES)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA343_6 = input.LA(2);
                            if ( (LA343_6==MIN||(LA343_6>=TIMEPERIOD_MINUTE && LA343_6<=TIMEPERIOD_MINUTES)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA343_7 = input.LA(2);
                            if ( (LA343_7==MIN||(LA343_7>=TIMEPERIOD_MINUTE && LA343_7<=TIMEPERIOD_MINUTES)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA343_8 = input.LA(2);
                            if ( (LA343_8==MIN||(LA343_8>=TIMEPERIOD_MINUTE && LA343_8<=TIMEPERIOD_MINUTES)) ) {
                                alt343=1;
                            }
                            }
                            break;
                    }
                    switch (alt343) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12838);
                            minutePart898=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart898.getTree());
                            }
                            break;
                    }
                    int alt344=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA344_23 = input.LA(3);
                                    if ( ((LA344_23>=TIMEPERIOD_SEC && LA344_23<=TIMEPERIOD_SECONDS)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA344_24 = input.LA(3);
                                    if ( ((LA344_24>=TIMEPERIOD_SEC && LA344_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA344_25 = input.LA(3);
                                    if ( ((LA344_25>=TIMEPERIOD_SEC && LA344_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA344_26 = input.LA(3);
                                    if ( ((LA344_26>=TIMEPERIOD_SEC && LA344_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA344_27 = input.LA(3);
                                    if ( ((LA344_27>=TIMEPERIOD_SEC && LA344_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA344_28 = input.LA(3);
                                    if ( ((LA344_28>=TIMEPERIOD_SEC && LA344_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA344_29 = input.LA(3);
                                    if ( ((LA344_29>=TIMEPERIOD_SEC && LA344_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA344_30 = input.LA(3);
                                    if ( ((LA344_30>=TIMEPERIOD_SEC && LA344_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt344=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA344_3 = input.LA(2);
                            if ( ((LA344_3>=TIMEPERIOD_SEC && LA344_3<=TIMEPERIOD_SECONDS)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA344_4 = input.LA(2);
                            if ( ((LA344_4>=TIMEPERIOD_SEC && LA344_4<=TIMEPERIOD_SECONDS)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA344_5 = input.LA(2);
                            if ( ((LA344_5>=TIMEPERIOD_SEC && LA344_5<=TIMEPERIOD_SECONDS)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA344_6 = input.LA(2);
                            if ( ((LA344_6>=TIMEPERIOD_SEC && LA344_6<=TIMEPERIOD_SECONDS)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA344_7 = input.LA(2);
                            if ( ((LA344_7>=TIMEPERIOD_SEC && LA344_7<=TIMEPERIOD_SECONDS)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA344_8 = input.LA(2);
                            if ( ((LA344_8>=TIMEPERIOD_SEC && LA344_8<=TIMEPERIOD_SECONDS)) ) {
                                alt344=1;
                            }
                            }
                            break;
                    }
                    switch (alt344) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12841);
                            secondPart899=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart899.getTree());
                            }
                            break;
                    }
                    int alt345=2;
                    int LA345_0 = input.LA(1);
                    if ( (LA345_0==NUM_DOUBLE||LA345_0==IDENT||(LA345_0>=PLUS && LA345_0<=QUESTION)||LA345_0==MINUS||LA345_0==NUM_INT||(LA345_0>=NUM_LONG && LA345_0<=NUM_FLOAT)) ) {
                        alt345=1;
                    }
                    switch (alt345) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12844);
                            millisecondPart900=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart900.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod12850);
                    minutePart901=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart901.getTree());
                    int alt346=2;
                    switch ( input.LA(1) ) {
                        case MINUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA346_23 = input.LA(3);
                                    if ( ((LA346_23>=TIMEPERIOD_SEC && LA346_23<=TIMEPERIOD_SECONDS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA346_24 = input.LA(3);
                                    if ( ((LA346_24>=TIMEPERIOD_SEC && LA346_24<=TIMEPERIOD_SECONDS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA346_25 = input.LA(3);
                                    if ( ((LA346_25>=TIMEPERIOD_SEC && LA346_25<=TIMEPERIOD_SECONDS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA346_26 = input.LA(3);
                                    if ( ((LA346_26>=TIMEPERIOD_SEC && LA346_26<=TIMEPERIOD_SECONDS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(2) ) {
                                case NUM_INT:
                                    {
                                    int LA346_27 = input.LA(3);
                                    if ( ((LA346_27>=TIMEPERIOD_SEC && LA346_27<=TIMEPERIOD_SECONDS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                                case NUM_LONG:
                                    {
                                    int LA346_28 = input.LA(3);
                                    if ( ((LA346_28>=TIMEPERIOD_SEC && LA346_28<=TIMEPERIOD_SECONDS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                                case NUM_FLOAT:
                                    {
                                    int LA346_29 = input.LA(3);
                                    if ( ((LA346_29>=TIMEPERIOD_SEC && LA346_29<=TIMEPERIOD_SECONDS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                                case NUM_DOUBLE:
                                    {
                                    int LA346_30 = input.LA(3);
                                    if ( ((LA346_30>=TIMEPERIOD_SEC && LA346_30<=TIMEPERIOD_SECONDS)) ) {
                                        alt346=1;
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                        case NUM_INT:
                            {
                            int LA346_3 = input.LA(2);
                            if ( ((LA346_3>=TIMEPERIOD_SEC && LA346_3<=TIMEPERIOD_SECONDS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA346_4 = input.LA(2);
                            if ( ((LA346_4>=TIMEPERIOD_SEC && LA346_4<=TIMEPERIOD_SECONDS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA346_5 = input.LA(2);
                            if ( ((LA346_5>=TIMEPERIOD_SEC && LA346_5<=TIMEPERIOD_SECONDS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA346_6 = input.LA(2);
                            if ( ((LA346_6>=TIMEPERIOD_SEC && LA346_6<=TIMEPERIOD_SECONDS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA346_7 = input.LA(2);
                            if ( ((LA346_7>=TIMEPERIOD_SEC && LA346_7<=TIMEPERIOD_SECONDS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA346_8 = input.LA(2);
                            if ( ((LA346_8>=TIMEPERIOD_SEC && LA346_8<=TIMEPERIOD_SECONDS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                    }
                    switch (alt346) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12852);
                            secondPart902=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart902.getTree());
                            }
                            break;
                    }
                    int alt347=2;
                    int LA347_0 = input.LA(1);
                    if ( (LA347_0==NUM_DOUBLE||LA347_0==IDENT||(LA347_0>=PLUS && LA347_0<=QUESTION)||LA347_0==MINUS||LA347_0==NUM_INT||(LA347_0>=NUM_LONG && LA347_0<=NUM_FLOAT)) ) {
                        alt347=1;
                    }
                    switch (alt347) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12855);
                            millisecondPart903=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart903.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod12861);
                    secondPart904=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart904.getTree());
                    int alt348=2;
                    int LA348_0 = input.LA(1);
                    if ( (LA348_0==NUM_DOUBLE||LA348_0==IDENT||(LA348_0>=PLUS && LA348_0<=QUESTION)||LA348_0==MINUS||LA348_0==NUM_INT||(LA348_0>=NUM_LONG && LA348_0<=NUM_FLOAT)) ) {
                        alt348=1;
                    }
                    switch (alt348) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12863);
                            millisecondPart905=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart905.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod12869);
                    millisecondPart906=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart906.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS909=null;
        Token TIMEPERIOD_YEAR910=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant907 = null;
        EsperEPL2GrammarParser.substitution_return substitution908 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS909_tree=null;
        CommonTree TIMEPERIOD_YEAR910_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt350=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt350=1;
                }
                break;
            case IDENT:
                {
                alt350=2;
                }
                break;
            case QUESTION:
                {
                alt350=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 350, 0, input);
                throw nvae;
            }
            switch (alt350) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_yearPart12916);
                    numberconstant907=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant907.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart12920); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart12922);
                    substitution908=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution908.getTree());
                    }
                    break;
            }
            int alt351=2;
            int LA351_0 = input.LA(1);
            if ( (LA351_0==TIMEPERIOD_YEARS) ) {
                alt351=1;
            }
            else if ( (LA351_0==TIMEPERIOD_YEAR) ) {
                alt351=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 351, 0, input);
                throw nvae;
            }
            switch (alt351) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS909=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart12926); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS909);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR910=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart12930); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR910);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS913=null;
        Token TIMEPERIOD_MONTH914=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant911 = null;
        EsperEPL2GrammarParser.substitution_return substitution912 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS913_tree=null;
        CommonTree TIMEPERIOD_MONTH914_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt352=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt352=1;
                }
                break;
            case IDENT:
                {
                alt352=2;
                }
                break;
            case QUESTION:
                {
                alt352=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 352, 0, input);
                throw nvae;
            }
            switch (alt352) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_monthPart12978);
                    numberconstant911=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant911.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart12982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart12984);
                    substitution912=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution912.getTree());
                    }
                    break;
            }
            int alt353=2;
            int LA353_0 = input.LA(1);
            if ( (LA353_0==TIMEPERIOD_MONTHS) ) {
                alt353=1;
            }
            else if ( (LA353_0==TIMEPERIOD_MONTH) ) {
                alt353=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 353, 0, input);
                throw nvae;
            }
            switch (alt353) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS913=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart12988); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS913);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH914=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart12992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH914);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS917=null;
        Token TIMEPERIOD_WEEK918=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant915 = null;
        EsperEPL2GrammarParser.substitution_return substitution916 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS917_tree=null;
        CommonTree TIMEPERIOD_WEEK918_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt354=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt354=1;
                }
                break;
            case IDENT:
                {
                alt354=2;
                }
                break;
            case QUESTION:
                {
                alt354=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 354, 0, input);
                throw nvae;
            }
            switch (alt354) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_weekPart13040);
                    numberconstant915=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant915.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart13044); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart13046);
                    substitution916=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution916.getTree());
                    }
                    break;
            }
            int alt355=2;
            int LA355_0 = input.LA(1);
            if ( (LA355_0==TIMEPERIOD_WEEKS) ) {
                alt355=1;
            }
            else if ( (LA355_0==TIMEPERIOD_WEEK) ) {
                alt355=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 355, 0, input);
                throw nvae;
            }
            switch (alt355) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS917=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart13050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS917);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK918=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart13054); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK918);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS921=null;
        Token TIMEPERIOD_DAY922=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant919 = null;
        EsperEPL2GrammarParser.substitution_return substitution920 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS921_tree=null;
        CommonTree TIMEPERIOD_DAY922_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt356=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt356=1;
                }
                break;
            case IDENT:
                {
                alt356=2;
                }
                break;
            case QUESTION:
                {
                alt356=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 356, 0, input);
                throw nvae;
            }
            switch (alt356) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_dayPart13102);
                    numberconstant919=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant919.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart13106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart13108);
                    substitution920=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution920.getTree());
                    }
                    break;
            }
            int alt357=2;
            int LA357_0 = input.LA(1);
            if ( (LA357_0==TIMEPERIOD_DAYS) ) {
                alt357=1;
            }
            else if ( (LA357_0==TIMEPERIOD_DAY) ) {
                alt357=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 357, 0, input);
                throw nvae;
            }
            switch (alt357) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS921=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart13112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS921);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY922=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart13116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY922);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS925=null;
        Token TIMEPERIOD_HOUR926=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant923 = null;
        EsperEPL2GrammarParser.substitution_return substitution924 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS925_tree=null;
        CommonTree TIMEPERIOD_HOUR926_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt358=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt358=1;
                }
                break;
            case IDENT:
                {
                alt358=2;
                }
                break;
            case QUESTION:
                {
                alt358=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 358, 0, input);
                throw nvae;
            }
            switch (alt358) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_hourPart13165);
                    numberconstant923=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant923.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart13169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart13171);
                    substitution924=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution924.getTree());
                    }
                    break;
            }
            int alt359=2;
            int LA359_0 = input.LA(1);
            if ( (LA359_0==TIMEPERIOD_HOURS) ) {
                alt359=1;
            }
            else if ( (LA359_0==TIMEPERIOD_HOUR) ) {
                alt359=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 359, 0, input);
                throw nvae;
            }
            switch (alt359) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS925=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart13175); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS925);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR926=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart13179); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR926);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES929=null;
        Token TIMEPERIOD_MINUTE930=null;
        Token MIN931=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant927 = null;
        EsperEPL2GrammarParser.substitution_return substitution928 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES929_tree=null;
        CommonTree TIMEPERIOD_MINUTE930_tree=null;
        CommonTree MIN931_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt360=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt360=1;
                }
                break;
            case IDENT:
                {
                alt360=2;
                }
                break;
            case QUESTION:
                {
                alt360=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 360, 0, input);
                throw nvae;
            }
            switch (alt360) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_minutePart13228);
                    numberconstant927=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant927.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart13232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart13234);
                    substitution928=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution928.getTree());
                    }
                    break;
            }
            int alt361=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt361=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt361=2;
                }
                break;
            case MIN:
                {
                alt361=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 361, 0, input);
                throw nvae;
            }
            switch (alt361) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES929=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart13238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES929);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE930=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart13242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE930);
                    }
                    break;
                case 3 :
                    {
                    MIN931=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart13246); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN931);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS934=null;
        Token TIMEPERIOD_SECOND935=null;
        Token TIMEPERIOD_SEC936=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant932 = null;
        EsperEPL2GrammarParser.substitution_return substitution933 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS934_tree=null;
        CommonTree TIMEPERIOD_SECOND935_tree=null;
        CommonTree TIMEPERIOD_SEC936_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt362=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt362=1;
                }
                break;
            case IDENT:
                {
                alt362=2;
                }
                break;
            case QUESTION:
                {
                alt362=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 362, 0, input);
                throw nvae;
            }
            switch (alt362) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_secondPart13296);
                    numberconstant932=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant932.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart13300); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart13302);
                    substitution933=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution933.getTree());
                    }
                    break;
            }
            int alt363=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt363=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt363=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt363=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 363, 0, input);
                throw nvae;
            }
            switch (alt363) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS934=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart13306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS934);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND935=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart13310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND935);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC936=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart13314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC936);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS939=null;
        Token TIMEPERIOD_MILLISECOND940=null;
        Token TIMEPERIOD_MILLISEC941=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant937 = null;
        EsperEPL2GrammarParser.substitution_return substitution938 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS939_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND940_tree=null;
        CommonTree TIMEPERIOD_MILLISEC941_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
        try {
            {
            int alt364=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt364=1;
                }
                break;
            case IDENT:
                {
                alt364=2;
                }
                break;
            case QUESTION:
                {
                alt364=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 364, 0, input);
                throw nvae;
            }
            switch (alt364) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_millisecondPart13364);
                    numberconstant937=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(numberconstant937.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart13368); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart13370);
                    substitution938=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution938.getTree());
                    }
                    break;
            }
            int alt365=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt365=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt365=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt365=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 365, 0, input);
                throw nvae;
            }
            switch (alt365) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS939=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart13374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS939);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND940=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart13378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND940);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC941=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart13382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC941);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_numberconstant.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberconstant.nextTree());
                }
                stream_numberconstant.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt366=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt366=1;
                }
                break;
            case NUM_LONG:
                {
                alt366=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt366=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt366=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 366, 0, input);
                throw nvae;
            }
            switch (alt366) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number13437); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number13454); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number13471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number13488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution13509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant942 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant943 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt367=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt367=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt367=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt367=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt367=4;
                }
                break;
            case VALUE_NULL:
                {
                alt367=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 367, 0, input);
                throw nvae;
            }
            switch (alt367) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant13528);
                    numberconstant942=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant942.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant13535);
                    stringconstant943=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant943.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant13548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant13568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant13588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number944 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt368=3;
            int LA368_0 = input.LA(1);
            if ( (LA368_0==MINUS) ) {
                alt368=1;
            }
            else if ( (LA368_0==PLUS) ) {
                alt368=2;
            }
            switch (alt368) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant13610); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant13616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant13620);
            number944=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number944.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number944!=null?((CommonTree)number944.tree):null).getType(), "-" + (number944!=null?input.toString(number944.start,number944.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt369=2;
            int LA369_0 = input.LA(1);
            if ( (LA369_0==STRING_LITERAL) ) {
                alt369=1;
            }
            else if ( (LA369_0==QUOTED_STRING_LITERAL) ) {
                alt369=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 369, 0, input);
                throw nvae;
            }
            switch (alt369) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant13649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant13665); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4851);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6251);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar8147);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar9532);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar9594);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar10968);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar11449);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar11460);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar11471);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar11482);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar11494);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar11505);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar11516);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar11529);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar11554);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA196 dfa196 = new DFA196(this);
    static final String DFA196_eotS =
        "\u0bfb\uffff";
    static final String DFA196_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0bc6\uffff";
    static final String DFA196_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\15\uffff\1\u0129\176\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\u0136\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73"+
        "\uffff\1\5\73\uffff\1\5\2\6\110\uffff\2\6\107\uffff\2\6\116\uffff"+
        "\2\6\76\uffff\2\6\120\uffff\2\6\76\uffff\2\6\120\uffff\2\6\76\uffff"+
        "\2\6\107\uffff\2\6\105\uffff\2\6\110\uffff\2\6\105\uffff\2\6\105"+
        "\uffff\2\6\105\uffff\2\6\167\uffff\1\0\31\uffff\1\0\31\uffff\1\0"+
        "\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0\71\uffff\1\0\55\uffff\1\0"+
        "\5\uffff\1\0\31\uffff\1\0\55\uffff\1\0\31\uffff\1\0\5\uffff\1\0"+
        "\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff\1"+
        "\0\5\uffff\1\0\31\uffff\1\0\140\uffff\1\0\30\uffff\1\0\73\uffff"+
        "\1\0\53\uffff\1\0\5\uffff";
    static final String DFA196_maxS =
        "\2\u014c\13\uffff\1\u014c\3\uffff\1\u0149\2\uffff\2\u0149\2\uffff"+
        "\4\u0149\1\uffff\2\u0149\12\uffff\3\u0149\2\uffff\3\u0149\3\uffff"+
        "\1\u0149\15\uffff\1\u0129\176\uffff\1\u014c\73\uffff\1\u014c\73"+
        "\uffff\1\u014c\73\uffff\1\u014c\73\uffff\1\u014c\73\uffff\1\u014c"+
        "\73\uffff\1\u014c\73\uffff\1\u014c\73\uffff\1\u014c\73\uffff\1\u014c"+
        "\73\uffff\1\u014c\73\uffff\1\u0144\73\uffff\1\u014c\73\uffff\1\u014c"+
        "\73\uffff\1\u014c\73\uffff\1\u014c\73\uffff\1\u014a\2\u0143\110"+
        "\uffff\2\u0143\107\uffff\2\u0143\116\uffff\2\u0143\76\uffff\2\u0143"+
        "\120\uffff\2\u0143\76\uffff\2\u0143\120\uffff\2\u0143\76\uffff\2"+
        "\u0143\107\uffff\2\u0143\105\uffff\2\u0143\110\uffff\2\u0143\105"+
        "\uffff\2\u0143\105\uffff\2\u0143\105\uffff\2\u0143\167\uffff\1\0"+
        "\31\uffff\1\0\31\uffff\1\0\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0"+
        "\71\uffff\1\0\55\uffff\1\0\5\uffff\1\0\31\uffff\1\0\55\uffff\1\0"+
        "\31\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0"+
        "\31\uffff\1\0\55\uffff\1\0\5\uffff\1\0\31\uffff\1\0\140\uffff\1"+
        "\0\30\uffff\1\0\73\uffff\1\0\53\uffff\1\0\5\uffff";
    static final String DFA196_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\61\uffff\2\6\1\uffff\1\6"+
        "\1\7\1\12\4\uffff\1\1\56\uffff\1\10\1\4\u0409\uffff\110\6\2\uffff"+
        "\107\6\2\uffff\116\6\2\uffff\76\6\2\uffff\120\6\2\uffff\76\6\2\uffff"+
        "\120\6\2\uffff\76\6\2\uffff\107\6\2\uffff\105\6\2\uffff\106\6\4"+
        "\uffff\105\6\2\uffff\105\6\2\uffff\105\6\2\uffff\107\6\1\11\57\6"+
        "\1\uffff\31\6\1\uffff\31\6\1\uffff\55\6\1\uffff\5\6\1\uffff\55\6"+
        "\1\uffff\5\6\1\uffff\31\6\1\uffff\31\6\1\uffff\55\6\1\uffff\5\6"+
        "\1\uffff\31\6\1\uffff\55\6\1\uffff\31\6\1\uffff\5\6\1\uffff\31\6"+
        "\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\55\6\1\uffff\5\6"+
        "\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\54\6\1\uffff\30"+
        "\6\1\uffff\5\6\1\uffff\32\6\1\uffff\32\6\1\uffff\53\6\1\uffff\5"+
        "\6";
    static final String DFA196_specialS =
        "\1\0\u00c0\uffff\1\1\73\uffff\1\2\73\uffff\1\3\73\uffff\1\4\73"+
        "\uffff\1\5\73\uffff\1\6\73\uffff\1\7\73\uffff\1\10\73\uffff\1\11"+
        "\73\uffff\1\12\73\uffff\1\13\73\uffff\1\14\73\uffff\1\15\73\uffff"+
        "\1\16\73\uffff\1\17\73\uffff\1\20\73\uffff\1\21\1\22\1\23\110\uffff"+
        "\1\24\1\25\107\uffff\1\26\1\27\116\uffff\1\30\1\31\76\uffff\1\32"+
        "\1\33\120\uffff\1\34\1\35\76\uffff\1\36\1\37\120\uffff\1\40\1\41"+
        "\76\uffff\1\42\1\43\107\uffff\1\44\1\45\105\uffff\1\46\1\47\110"+
        "\uffff\1\50\1\51\105\uffff\1\52\1\53\105\uffff\1\54\1\55\105\uffff"+
        "\1\56\1\57\167\uffff\1\60\31\uffff\1\61\31\uffff\1\62\55\uffff\1"+
        "\63\5\uffff\1\64\55\uffff\1\65\71\uffff\1\66\55\uffff\1\67\5\uffff"+
        "\1\70\31\uffff\1\71\55\uffff\1\72\31\uffff\1\73\5\uffff\1\74\31"+
        "\uffff\1\75\31\uffff\1\76\31\uffff\1\77\31\uffff\1\100\55\uffff"+
        "\1\101\5\uffff\1\102\31\uffff\1\103\140\uffff\1\104\30\uffff\1\105"+
        "\73\uffff\1\106\53\uffff\1\107\5\uffff}>";
    static final String[] DFA196_transitionS = {
            "\1\64\4\uffff\1\16\3\uffff\1\16\1\uffff\1\16\1\uffff\1\24\1"+
            "\25\2\16\1\30\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16"+
            "\12\uffff\1\16\1\35\1\36\11\uffff\6\16\1\51\1\52\1\100\1\101"+
            "\1\53\1\102\2\16\1\56\1\57\1\60\1\103\1\uffff\6\16\22\uffff"+
            "\3\2\5\uffff\4\16\1\uffff\1\16\1\uffff\2\16\1\uffff\1\105\u009b"+
            "\uffff\1\2\15\uffff\1\16\1\104\1\uffff\1\15\11\uffff\1\2\1\14"+
            "\1\uffff\2\2\11\uffff\1\1\2\uffff\1\2\5\uffff\1\16\2\2",
            "\1\112\4\uffff\1\112\3\uffff\1\112\3\uffff\11\112\10\uffff"+
            "\1\112\1\uffff\4\112\12\uffff\3\112\11\uffff\10\112\2\uffff"+
            "\1\112\1\uffff\5\112\2\uffff\1\112\1\uffff\4\112\32\uffff\3"+
            "\112\2\uffff\1\112\1\uffff\2\112\u009d\uffff\1\2\15\uffff\1"+
            "\112\35\uffff\1\2\5\uffff\1\112\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\172\4\uffff\1\172\2\uffff\2\172\1\uffff\1\172\1\uffff\11"+
            "\172\1\171\1\172\6\uffff\1\172\1\uffff\4\172\12\uffff\3\172"+
            "\11\uffff\22\172\1\uffff\6\172\22\uffff\3\172\5\uffff\4\172"+
            "\1\uffff\1\172\1\uffff\2\172\1\uffff\1\172\u009b\uffff\1\172"+
            "\15\uffff\2\172\1\uffff\1\172\11\uffff\2\172\1\uffff\2\172\11"+
            "\uffff\1\172\2\uffff\1\172\5\uffff\3\172",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u00c1\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u00fd\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u0139\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u0175\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u01b1\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u01ed\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u0229\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u0265\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u02a1\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u02dd\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u0319\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u0355\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u0391\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u03cd\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u0409\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00b1"+
            "\uffff\1\16\1\u0445\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0481",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04b8\4\uffff\1\u0496\2\uffff\1\u04ca\1\u0497\1\uffff\1"+
            "\u04c1\1\uffff\1\u0498\1\u0499\1\u049a\1\u049b\1\u049c\1\u049d"+
            "\1\u049e\1\u049f\1\u0495\1\uffff\1\u0486\6\uffff\1\u04bb\1\uffff"+
            "\1\u04bd\1\u04b9\1\u04ba\1\u04bc\5\uffff\1\u0485\1\u0484\3\uffff"+
            "\1\u04a0\1\u04a1\1\u04a2\11\uffff\1\u04a6\1\u04a7\1\u04a8\1"+
            "\u04aa\1\u04ab\1\u04ac\1\u04ad\1\u04ae\1\u04c4\1\u04c5\1\u04af"+
            "\1\u04c6\1\u04b0\1\u04b1\1\u04b2\1\u04b3\1\u04b4\1\u04c7\1\uffff"+
            "\1\u04b5\1\u04c2\1\u04b6\1\u04a9\1\u0494\1\u04b7\22\uffff\1"+
            "\u048d\1\u048e\1\u048f\5\uffff\1\u04be\1\u04bf\1\u04c0\1\u04c3"+
            "\1\uffff\1\u04a3\1\uffff\1\u04a4\1\u04a5\1\uffff\1\u04c9\u009b"+
            "\uffff\1\u048c\15\uffff\1\u0492\1\u04c8\1\uffff\1\u0491\7\uffff"+
            "\1\u04cb\1\uffff\1\u0488\1\u0490\1\uffff\1\u0482\1\u0483\11"+
            "\uffff\1\u0487\2\uffff\1\u0489\5\uffff\1\u0493\1\u048a\1\u048b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0502\4\uffff\1\u04e0\2\uffff\1\u0514\1\u04e1\1\uffff\1"+
            "\u050b\1\uffff\1\u04e2\1\u04e3\1\u04e4\1\u04e5\1\u04e6\1\u04e7"+
            "\1\u04e8\1\u04e9\1\u04df\1\uffff\1\u04d0\6\uffff\1\u0505\1\uffff"+
            "\1\u0507\1\u0503\1\u0504\1\u0506\5\uffff\1\u04cf\1\u04ce\3\uffff"+
            "\1\u04ea\1\u04eb\1\u04ec\11\uffff\1\u04f0\1\u04f1\1\u04f2\1"+
            "\u04f4\1\u04f5\1\u04f6\1\u04f7\1\u04f8\1\u050e\1\u050f\1\u04f9"+
            "\1\u0510\1\u04fa\1\u04fb\1\u04fc\1\u04fd\1\u04fe\1\u0511\1\uffff"+
            "\1\u04ff\1\u050c\1\u0500\1\u04f3\1\u04de\1\u0501\22\uffff\1"+
            "\u04d7\1\u04d8\1\u04d9\5\uffff\1\u0508\1\u0509\1\u050a\1\u050d"+
            "\1\uffff\1\u04ed\1\uffff\1\u04ee\1\u04ef\1\uffff\1\u0513\u009b"+
            "\uffff\1\u04d6\15\uffff\1\u04dc\1\u0512\1\uffff\1\u04db\11\uffff"+
            "\1\u04d2\1\u04da\1\uffff\1\u04cc\1\u04cd\11\uffff\1\u04d1\2"+
            "\uffff\1\u04d3\5\uffff\1\u04dd\1\u04d4\1\u04d5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u054b\4\uffff\1\u0529\2\uffff\1\u055d\1\u052a\1\uffff\1"+
            "\u0554\1\uffff\1\u052b\1\u052c\1\u052d\1\u052e\1\u052f\1\u0530"+
            "\1\u0531\1\u0532\1\u0528\1\uffff\1\u0519\6\uffff\1\u054e\1\uffff"+
            "\1\u0550\1\u054c\1\u054d\1\u054f\5\uffff\1\u0518\1\u0517\3\uffff"+
            "\1\u0533\1\u0534\1\u0535\11\uffff\1\u0539\1\u053a\1\u053b\1"+
            "\u053d\1\u053e\1\u053f\1\u0540\1\u0541\1\u0557\1\u0558\1\u0542"+
            "\1\u0559\1\u0543\1\u0544\1\u0545\1\u0546\1\u0547\1\u055a\1\uffff"+
            "\1\u0548\1\u0555\1\u0549\1\u053c\1\u0527\1\u054a\22\uffff\1"+
            "\u0520\1\u0521\1\u0522\5\uffff\1\u0551\1\u0552\1\u0553\1\u0556"+
            "\1\uffff\1\u0536\1\uffff\1\u0537\1\u0538\1\uffff\1\u055c\u009b"+
            "\uffff\1\u051f\15\uffff\1\u0525\1\u055b\1\uffff\1\u0524\11\uffff"+
            "\1\u051b\1\u0523\1\uffff\1\u0515\1\u0516\11\uffff\1\u051a\2"+
            "\uffff\1\u051c\5\uffff\1\u0526\1\u051d\1\u051e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0592\4\uffff\1\u0570\2\uffff\1\u05a4\1\u0571\1\uffff\1"+
            "\u059b\1\uffff\1\u0572\1\u0573\1\u0574\1\u0575\1\u0576\1\u0577"+
            "\1\u0578\1\u0579\1\u056f\1\uffff\1\u055e\6\uffff\1\u0595\1\uffff"+
            "\1\u0597\1\u0593\1\u0594\1\u0596\12\uffff\1\u057a\1\u057b\1"+
            "\u057c\11\uffff\1\u0580\1\u0581\1\u0582\1\u0584\1\u0585\1\u0586"+
            "\1\u0587\1\u0588\1\u059e\1\u059f\1\u0589\1\u05a0\1\u058a\1\u058b"+
            "\1\u058c\1\u058d\1\u058e\1\u05a1\1\uffff\1\u058f\1\u059c\1\u0590"+
            "\1\u0583\1\u056e\1\u0591\22\uffff\1\u0567\1\u0568\1\u0569\5"+
            "\uffff\1\u0598\1\u0599\1\u059a\1\u059d\1\uffff\1\u057d\1\uffff"+
            "\1\u057e\1\u057f\1\uffff\1\u05a3\u009b\uffff\1\u0564\15\uffff"+
            "\1\u056c\1\u05a2\1\uffff\1\u056b\11\uffff\1\u0560\1\u056a\1"+
            "\uffff\1\u0565\1\u0566\11\uffff\1\u055f\2\uffff\1\u0561\5\uffff"+
            "\1\u056d\1\u0562\1\u0563",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05db\4\uffff\1\u05b9\2\uffff\1\u05ed\1\u05ba\1\uffff\1"+
            "\u05e4\1\uffff\1\u05bb\1\u05bc\1\u05bd\1\u05be\1\u05bf\1\u05c0"+
            "\1\u05c1\1\u05c2\1\u05b8\1\uffff\1\u05a9\6\uffff\1\u05de\1\uffff"+
            "\1\u05e0\1\u05dc\1\u05dd\1\u05df\5\uffff\1\u05a8\1\u05a7\3\uffff"+
            "\1\u05c3\1\u05c4\1\u05c5\11\uffff\1\u05c9\1\u05ca\1\u05cb\1"+
            "\u05cd\1\u05ce\1\u05cf\1\u05d0\1\u05d1\1\u05e7\1\u05e8\1\u05d2"+
            "\1\u05e9\1\u05d3\1\u05d4\1\u05d5\1\u05d6\1\u05d7\1\u05ea\1\uffff"+
            "\1\u05d8\1\u05e5\1\u05d9\1\u05cc\1\u05b7\1\u05da\22\uffff\1"+
            "\u05b0\1\u05b1\1\u05b2\5\uffff\1\u05e1\1\u05e2\1\u05e3\1\u05e6"+
            "\1\uffff\1\u05c6\1\uffff\1\u05c7\1\u05c8\1\uffff\1\u05ec\u009b"+
            "\uffff\1\u05af\15\uffff\1\u05b5\1\u05eb\1\uffff\1\u05b4\11\uffff"+
            "\1\u05ab\1\u05b3\1\uffff\1\u05a5\1\u05a6\11\uffff\1\u05aa\2"+
            "\uffff\1\u05ac\5\uffff\1\u05b6\1\u05ad\1\u05ae",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0624\4\uffff\1\u0602\2\uffff\1\u0636\1\u0603\1\uffff\1"+
            "\u062d\1\uffff\1\u0604\1\u0605\1\u0606\1\u0607\1\u0608\1\u0609"+
            "\1\u060a\1\u060b\1\u0601\1\uffff\1\u05f0\6\uffff\1\u0627\1\uffff"+
            "\1\u0629\1\u0625\1\u0626\1\u0628\5\uffff\1\u05ef\1\u05ee\3\uffff"+
            "\1\u060c\1\u060d\1\u060e\11\uffff\1\u0612\1\u0613\1\u0614\1"+
            "\u0616\1\u0617\1\u0618\1\u0619\1\u061a\1\u0630\1\u0631\1\u061b"+
            "\1\u0632\1\u061c\1\u061d\1\u061e\1\u061f\1\u0620\1\u0633\1\uffff"+
            "\1\u0621\1\u062e\1\u0622\1\u0615\1\u0600\1\u0623\22\uffff\1"+
            "\u05f9\1\u05fa\1\u05fb\5\uffff\1\u062a\1\u062b\1\u062c\1\u062f"+
            "\1\uffff\1\u060f\1\uffff\1\u0610\1\u0611\1\uffff\1\u0635\u009b"+
            "\uffff\1\u05f6\15\uffff\1\u05fe\1\u0634\1\uffff\1\u05fd\11\uffff"+
            "\1\u05f2\1\u05fc\1\uffff\1\u05f7\1\u05f8\11\uffff\1\u05f1\2"+
            "\uffff\1\u05f3\5\uffff\1\u05ff\1\u05f4\1\u05f5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u066d\4\uffff\1\u064b\2\uffff\1\u067f\1\u064c\1\uffff\1"+
            "\u0676\1\uffff\1\u064d\1\u064e\1\u064f\1\u0650\1\u0651\1\u0652"+
            "\1\u0653\1\u0654\1\u064a\1\uffff\1\u063b\6\uffff\1\u0670\1\uffff"+
            "\1\u0672\1\u066e\1\u066f\1\u0671\5\uffff\1\u063a\1\u0639\3\uffff"+
            "\1\u0655\1\u0656\1\u0657\11\uffff\1\u065b\1\u065c\1\u065d\1"+
            "\u065f\1\u0660\1\u0661\1\u0662\1\u0663\1\u0679\1\u067a\1\u0664"+
            "\1\u067b\1\u0665\1\u0666\1\u0667\1\u0668\1\u0669\1\u067c\1\uffff"+
            "\1\u066a\1\u0677\1\u066b\1\u065e\1\u0649\1\u066c\22\uffff\1"+
            "\u0642\1\u0643\1\u0644\5\uffff\1\u0673\1\u0674\1\u0675\1\u0678"+
            "\1\uffff\1\u0658\1\uffff\1\u0659\1\u065a\1\uffff\1\u067e\u009b"+
            "\uffff\1\u0641\15\uffff\1\u0647\1\u067d\1\uffff\1\u0646\11\uffff"+
            "\1\u063d\1\u0645\1\uffff\1\u0637\1\u0638\11\uffff\1\u063c\2"+
            "\uffff\1\u063e\5\uffff\1\u0648\1\u063f\1\u0640",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06b5\4\uffff\1\u0693\2\uffff\1\u06c7\1\u0694\1\uffff\1"+
            "\u06be\1\uffff\1\u0695\1\u0696\1\u0697\1\u0698\1\u0699\1\u069a"+
            "\1\u069b\1\u069c\1\u0692\1\uffff\1\u0682\6\uffff\1\u06b8\1\uffff"+
            "\1\u06ba\1\u06b6\1\u06b7\1\u06b9\12\uffff\1\u069d\1\u069e\1"+
            "\u069f\11\uffff\1\u06a3\1\u06a4\1\u06a5\1\u06a7\1\u06a8\1\u06a9"+
            "\1\u06aa\1\u06ab\1\u06c1\1\u06c2\1\u06ac\1\u06c3\1\u06ad\1\u06ae"+
            "\1\u06af\1\u06b0\1\u06b1\1\u06c4\1\uffff\1\u06b2\1\u06bf\1\u06b3"+
            "\1\u06a6\1\u0691\1\u06b4\22\uffff\1\u068b\1\u068c\1\u068d\5"+
            "\uffff\1\u06bb\1\u06bc\1\u06bd\1\u06c0\1\uffff\1\u06a0\1\uffff"+
            "\1\u06a1\1\u06a2\1\uffff\1\u06c6\u009b\uffff\1\u0688\15\uffff"+
            "\1\u0681\1\u06c5\1\uffff\1\u068f\1\u06c8\6\uffff\1\u0680\1\uffff"+
            "\1\u0684\1\u068e\1\uffff\1\u0689\1\u068a\11\uffff\1\u0683\2"+
            "\uffff\1\u0685\5\uffff\1\u0690\1\u0686\1\u0687",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06fe\4\uffff\1\u06dc\2\uffff\1\u0710\1\u06dd\1\uffff\1"+
            "\u0707\1\uffff\1\u06de\1\u06df\1\u06e0\1\u06e1\1\u06e2\1\u06e3"+
            "\1\u06e4\1\u06e5\1\u06db\1\uffff\1\u06cd\6\uffff\1\u0701\1\uffff"+
            "\1\u0703\1\u06ff\1\u0700\1\u0702\12\uffff\1\u06e6\1\u06e7\1"+
            "\u06e8\11\uffff\1\u06ec\1\u06ed\1\u06ee\1\u06f0\1\u06f1\1\u06f2"+
            "\1\u06f3\1\u06f4\1\u070a\1\u070b\1\u06f5\1\u070c\1\u06f6\1\u06f7"+
            "\1\u06f8\1\u06f9\1\u06fa\1\u070d\1\uffff\1\u06fb\1\u0708\1\u06fc"+
            "\1\u06ef\1\u06da\1\u06fd\22\uffff\1\u06d4\1\u06d5\1\u06d6\5"+
            "\uffff\1\u0704\1\u0705\1\u0706\1\u0709\1\uffff\1\u06e9\1\uffff"+
            "\1\u06ea\1\u06eb\1\uffff\1\u070f\u009b\uffff\1\u06d3\15\uffff"+
            "\1\u06cc\1\u070e\1\uffff\1\u06d8\1\u0711\6\uffff\1\u06cb\1\uffff"+
            "\1\u06cf\1\u06d7\1\uffff\1\u06c9\1\u06ca\11\uffff\1\u06ce\2"+
            "\uffff\1\u06d0\5\uffff\1\u06d9\1\u06d1\1\u06d2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0746\4\uffff\1\u0724\2\uffff\1\u0758\1\u0725\1\uffff\1"+
            "\u074f\1\uffff\1\u0726\1\u0727\1\u0728\1\u0729\1\u072a\1\u072b"+
            "\1\u072c\1\u072d\1\u0723\1\uffff\1\u0714\6\uffff\1\u0749\1\uffff"+
            "\1\u074b\1\u0747\1\u0748\1\u074a\12\uffff\1\u072e\1\u072f\1"+
            "\u0730\11\uffff\1\u0734\1\u0735\1\u0736\1\u0738\1\u0739\1\u073a"+
            "\1\u073b\1\u073c\1\u0752\1\u0753\1\u073d\1\u0754\1\u073e\1\u073f"+
            "\1\u0740\1\u0741\1\u0742\1\u0755\1\uffff\1\u0743\1\u0750\1\u0744"+
            "\1\u0737\1\u0722\1\u0745\22\uffff\1\u071b\1\u071c\1\u071d\5"+
            "\uffff\1\u074c\1\u074d\1\u074e\1\u0751\1\uffff\1\u0731\1\uffff"+
            "\1\u0732\1\u0733\1\uffff\1\u0757\u009b\uffff\1\u071a\15\uffff"+
            "\1\u0720\1\u0756\1\uffff\1\u071f\11\uffff\1\u0716\1\u071e\1"+
            "\uffff\1\u0712\1\u0713\11\uffff\1\u0715\2\uffff\1\u0717\5\uffff"+
            "\1\u0721\1\u0718\1\u0719",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u078d\4\uffff\1\u076b\2\uffff\1\u079f\1\u076c\1\uffff\1"+
            "\u0796\1\uffff\1\u076d\1\u076e\1\u076f\1\u0770\1\u0771\1\u0772"+
            "\1\u0773\1\u0774\1\u076a\1\uffff\1\u075b\6\uffff\1\u0790\1\uffff"+
            "\1\u0792\1\u078e\1\u078f\1\u0791\12\uffff\1\u0775\1\u0776\1"+
            "\u0777\11\uffff\1\u077b\1\u077c\1\u077d\1\u077f\1\u0780\1\u0781"+
            "\1\u0782\1\u0783\1\u0799\1\u079a\1\u0784\1\u079b\1\u0785\1\u0786"+
            "\1\u0787\1\u0788\1\u0789\1\u079c\1\uffff\1\u078a\1\u0797\1\u078b"+
            "\1\u077e\1\u0769\1\u078c\22\uffff\1\u0762\1\u0763\1\u0764\5"+
            "\uffff\1\u0793\1\u0794\1\u0795\1\u0798\1\uffff\1\u0778\1\uffff"+
            "\1\u0779\1\u077a\1\uffff\1\u079e\u009b\uffff\1\u0761\15\uffff"+
            "\1\u0767\1\u079d\1\uffff\1\u0766\11\uffff\1\u075d\1\u0765\1"+
            "\uffff\1\u0759\1\u075a\11\uffff\1\u075c\2\uffff\1\u075e\5\uffff"+
            "\1\u0768\1\u075f\1\u0760",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\14\uffff\1\u07a0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07d7\4\uffff\1\u07b5\2\uffff\1\u07e9\1\u07b6\1\uffff\1"+
            "\u07e0\1\uffff\1\u07b7\1\u07b8\1\u07b9\1\u07ba\1\u07bb\1\u07bc"+
            "\1\u07bd\1\u07be\1\u07b4\1\uffff\1\u07a5\6\uffff\1\u07da\1\uffff"+
            "\1\u07dc\1\u07d8\1\u07d9\1\u07db\12\uffff\1\u07bf\1\u07c0\1"+
            "\u07c1\11\uffff\1\u07c5\1\u07c6\1\u07c7\1\u07c9\1\u07ca\1\u07cb"+
            "\1\u07cc\1\u07cd\1\u07e3\1\u07e4\1\u07ce\1\u07e5\1\u07cf\1\u07d0"+
            "\1\u07d1\1\u07d2\1\u07d3\1\u07e6\1\uffff\1\u07d4\1\u07e1\1\u07d5"+
            "\1\u07c8\1\u07b3\1\u07d6\22\uffff\1\u07ac\1\u07ad\1\u07ae\5"+
            "\uffff\1\u07dd\1\u07de\1\u07df\1\u07e2\1\uffff\1\u07c2\1\uffff"+
            "\1\u07c3\1\u07c4\1\uffff\1\u07e8\u009b\uffff\1\u07ab\15\uffff"+
            "\1\u07b1\1\u07e7\1\uffff\1\u07b0\11\uffff\1\u07a7\1\u07af\1"+
            "\uffff\1\u07a3\1\u07a4\11\uffff\1\u07a6\2\uffff\1\u07a8\5\uffff"+
            "\1\u07b2\1\u07a9\1\u07aa",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u081e\4\uffff\1\u07fc\2\uffff\1\u0830\1\u07fd\1\uffff\1"+
            "\u0827\1\uffff\1\u07fe\1\u07ff\1\u0800\1\u0801\1\u0802\1\u0803"+
            "\1\u0804\1\u0805\1\u07fb\1\uffff\1\u07ec\6\uffff\1\u0821\1\uffff"+
            "\1\u0823\1\u081f\1\u0820\1\u0822\12\uffff\1\u0806\1\u0807\1"+
            "\u0808\11\uffff\1\u080c\1\u080d\1\u080e\1\u0810\1\u0811\1\u0812"+
            "\1\u0813\1\u0814\1\u082a\1\u082b\1\u0815\1\u082c\1\u0816\1\u0817"+
            "\1\u0818\1\u0819\1\u081a\1\u082d\1\uffff\1\u081b\1\u0828\1\u081c"+
            "\1\u080f\1\u07fa\1\u081d\22\uffff\1\u07f3\1\u07f4\1\u07f5\5"+
            "\uffff\1\u0824\1\u0825\1\u0826\1\u0829\1\uffff\1\u0809\1\uffff"+
            "\1\u080a\1\u080b\1\uffff\1\u082f\u009b\uffff\1\u07f2\15\uffff"+
            "\1\u07f8\1\u082e\1\uffff\1\u07f7\11\uffff\1\u07ee\1\u07f6\1"+
            "\uffff\1\u07ea\1\u07eb\11\uffff\1\u07ed\2\uffff\1\u07ef\5\uffff"+
            "\1\u07f9\1\u07f0\1\u07f1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0865\4\uffff\1\u0843\2\uffff\1\u0877\1\u0844\1\uffff\1"+
            "\u086e\1\uffff\1\u0845\1\u0846\1\u0847\1\u0848\1\u0849\1\u084a"+
            "\1\u084b\1\u084c\1\u0842\1\uffff\1\u0833\6\uffff\1\u0868\1\uffff"+
            "\1\u086a\1\u0866\1\u0867\1\u0869\12\uffff\1\u084d\1\u084e\1"+
            "\u084f\11\uffff\1\u0853\1\u0854\1\u0855\1\u0857\1\u0858\1\u0859"+
            "\1\u085a\1\u085b\1\u0871\1\u0872\1\u085c\1\u0873\1\u085d\1\u085e"+
            "\1\u085f\1\u0860\1\u0861\1\u0874\1\uffff\1\u0862\1\u086f\1\u0863"+
            "\1\u0856\1\u0841\1\u0864\22\uffff\1\u083a\1\u083b\1\u083c\5"+
            "\uffff\1\u086b\1\u086c\1\u086d\1\u0870\1\uffff\1\u0850\1\uffff"+
            "\1\u0851\1\u0852\1\uffff\1\u0876\u009b\uffff\1\u0839\15\uffff"+
            "\1\u083f\1\u0875\1\uffff\1\u083e\11\uffff\1\u0835\1\u083d\1"+
            "\uffff\1\u0831\1\u0832\11\uffff\1\u0834\2\uffff\1\u0836\5\uffff"+
            "\1\u0840\1\u0837\1\u0838",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08ad\4\uffff\1\u088b\2\uffff\1\u08bf\1\u088c\1\uffff\1"+
            "\u08b6\1\uffff\1\u088d\1\u088e\1\u088f\1\u0890\1\u0891\1\u0892"+
            "\1\u0893\1\u0894\1\u088a\1\uffff\1\u087c\6\uffff\1\u08b0\1\uffff"+
            "\1\u08b2\1\u08ae\1\u08af\1\u08b1\12\uffff\1\u0895\1\u0896\1"+
            "\u0897\11\uffff\1\u089b\1\u089c\1\u089d\1\u089f\1\u08a0\1\u08a1"+
            "\1\u08a2\1\u08a3\1\u08b9\1\u08ba\1\u08a4\1\u08bb\1\u08a5\1\u08a6"+
            "\1\u08a7\1\u08a8\1\u08a9\1\u08bc\1\uffff\1\u08aa\1\u08b7\1\u08ab"+
            "\1\u089e\1\u0889\1\u08ac\22\uffff\1\u0883\1\u0884\1\u0885\5"+
            "\uffff\1\u08b3\1\u08b4\1\u08b5\1\u08b8\1\uffff\1\u0898\1\uffff"+
            "\1\u0899\1\u089a\1\uffff\1\u08be\u009b\uffff\1\u0882\15\uffff"+
            "\1\u087b\1\u08bd\1\uffff\1\u0887\1\u08c0\6\uffff\1\u087a\1\uffff"+
            "\1\u087e\1\u0886\1\uffff\1\u0878\1\u0879\11\uffff\1\u087d\2"+
            "\uffff\1\u087f\5\uffff\1\u0888\1\u0880\1\u0881",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08e8\4\uffff\1\u08c6\3\uffff\1\u08c7\3\uffff\1\u08c8\1"+
            "\u08c9\1\u08ca\1\u08cb\1\u08cc\1\u08cd\1\u08ce\1\u08cf\1\u08c5"+
            "\1\u08c1\7\uffff\1\u08eb\1\uffff\1\u08ed\1\u08e9\1\u08ea\1\u08ec"+
            "\12\uffff\1\u08d0\1\u08d1\1\u08d2\11\uffff\1\u08d6\1\u08d7\1"+
            "\u08d8\1\u08da\1\u08db\1\u08dc\1\u08dd\1\u08de\2\uffff\1\u08df"+
            "\1\uffff\1\u08e0\1\u08e1\1\u08e2\1\u08e3\1\u08e4\2\uffff\1\u08e5"+
            "\1\uffff\1\u08e6\1\u08d9\1\u08c4\1\u08e7\32\uffff\1\u08ee\1"+
            "\u08ef\1\u08f0\2\uffff\1\u08d3\1\uffff\1\u08d4\1\u08d5\u00ab"+
            "\uffff\1\u08c2\43\uffff\1\u08c3",
            "\1\u0907\1\u0908\1\u0909\1\u090a\1\uffff\1\u0904\1\u0903\1"+
            "\u0906\34\uffff\1\u08fd\u00ff\uffff\1\u08f1\1\uffff\1\u0905"+
            "\1\u08fc\3\uffff\1\u08f2\1\u0901\1\u08f5\4\uffff\1\u0900\1\u0902"+
            "\1\u08fe\1\u08ff\1\u08f8\1\u08f9\1\u08fa\1\u08fb\1\u08f7\1\u08f6"+
            "\1\u08f3\1\u08f4",
            "\1\u0921\1\u0922\1\u0923\1\u0924\1\uffff\1\u091e\1\u091d\1"+
            "\u0920\34\uffff\1\u0917\u00ff\uffff\1\u090b\1\uffff\1\u091f"+
            "\1\u0916\3\uffff\1\u090c\1\u091b\1\u090f\4\uffff\1\u091a\1\u091c"+
            "\1\u0918\1\u0919\1\u0912\1\u0913\1\u0914\1\u0915\1\u0911\1\u0910"+
            "\1\u090d\1\u090e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u093b\1\u093c\1\u093d\1\u093e\1\uffff\1\u0938\1\u0937\1"+
            "\u093a\34\uffff\1\u0931\u00ff\uffff\1\u0925\1\uffff\1\u0939"+
            "\1\u0930\3\uffff\1\u0926\1\u0935\1\u0929\4\uffff\1\u0934\1\u0936"+
            "\1\u0932\1\u0933\1\u092c\1\u092d\1\u092e\1\u092f\1\u092b\1\u092a"+
            "\1\u0927\1\u0928",
            "\1\u0955\1\u0956\1\u0957\1\u0958\1\uffff\1\u0951\1\u0950\1"+
            "\u0954\34\uffff\1\u094a\u00ff\uffff\1\u0953\1\uffff\1\u0952"+
            "\1\u0949\3\uffff\1\u093f\1\u094e\1\u0942\4\uffff\1\u094d\1\u094f"+
            "\1\u094b\1\u094c\1\u0945\1\u0946\1\u0947\1\u0948\1\u0944\1\u0943"+
            "\1\u0940\1\u0941",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u096f\1\u0970\1\u0971\1\u0972\1\uffff\1\u096c\1\u096b\1"+
            "\u096e\34\uffff\1\u0965\u00ff\uffff\1\u0959\1\uffff\1\u096d"+
            "\1\u0964\3\uffff\1\u095a\1\u0969\1\u095d\4\uffff\1\u0968\1\u096a"+
            "\1\u0966\1\u0967\1\u0960\1\u0961\1\u0962\1\u0963\1\u095f\1\u095e"+
            "\1\u095b\1\u095c",
            "\1\u0989\1\u098a\1\u098b\1\u098c\1\uffff\1\u0985\1\u0984\1"+
            "\u0988\34\uffff\1\u097e\u00ff\uffff\1\u0987\1\uffff\1\u0986"+
            "\1\u097d\3\uffff\1\u0973\1\u0982\1\u0976\4\uffff\1\u0981\1\u0983"+
            "\1\u097f\1\u0980\1\u0979\1\u097a\1\u097b\1\u097c\1\u0978\1\u0977"+
            "\1\u0974\1\u0975",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09a3\1\u09a4\1\u09a5\1\u09a6\1\uffff\1\u09a0\1\u099f\1"+
            "\u09a2\34\uffff\1\u0999\u00ff\uffff\1\16\1\uffff\1\u09a1\1\u0998"+
            "\3\uffff\1\u098e\1\u099d\1\u0991\4\uffff\1\u099c\1\u099e\1\u099a"+
            "\1\u099b\1\u0994\1\u0995\1\u0996\1\u0997\1\u0993\1\u0992\1\u098f"+
            "\1\u0990",
            "\1\u09bd\1\u09be\1\u09bf\1\u09c0\1\uffff\1\u09ba\1\u09b9\1"+
            "\u09bc\34\uffff\1\u09b3\u00ff\uffff\1\16\1\uffff\1\u09bb\1\u09b2"+
            "\3\uffff\1\u09a8\1\u09b7\1\u09ab\4\uffff\1\u09b6\1\u09b8\1\u09b4"+
            "\1\u09b5\1\u09ae\1\u09af\1\u09b0\1\u09b1\1\u09ad\1\u09ac\1\u09a9"+
            "\1\u09aa",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09d7\1\u09d8\1\u09d9\1\u09da\1\uffff\1\u09d4\1\u09d3\1"+
            "\u09d6\34\uffff\1\u09cd\u00ff\uffff\1\u09c1\1\uffff\1\u09d5"+
            "\1\u09cc\3\uffff\1\u09c2\1\u09d1\1\u09c5\4\uffff\1\u09d0\1\u09d2"+
            "\1\u09ce\1\u09cf\1\u09c8\1\u09c9\1\u09ca\1\u09cb\1\u09c7\1\u09c6"+
            "\1\u09c3\1\u09c4",
            "\1\u09f1\1\u09f2\1\u09f3\1\u09f4\1\uffff\1\u09ed\1\u09ec\1"+
            "\u09f0\34\uffff\1\u09e6\u00ff\uffff\1\u09ef\1\uffff\1\u09ee"+
            "\1\u09e5\3\uffff\1\u09db\1\u09ea\1\u09de\4\uffff\1\u09e9\1\u09eb"+
            "\1\u09e7\1\u09e8\1\u09e1\1\u09e2\1\u09e3\1\u09e4\1\u09e0\1\u09df"+
            "\1\u09dc\1\u09dd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a0b\1\u0a0c\1\u0a0d\1\u0a0e\1\uffff\1\u0a08\1\u0a07\1"+
            "\u0a0a\34\uffff\1\u0a01\u00ff\uffff\1\u09f5\1\uffff\1\u0a09"+
            "\1\u0a00\3\uffff\1\u09f6\1\u0a05\1\u09f9\4\uffff\1\u0a04\1\u0a06"+
            "\1\u0a02\1\u0a03\1\u09fc\1\u09fd\1\u09fe\1\u09ff\1\u09fb\1\u09fa"+
            "\1\u09f7\1\u09f8",
            "\1\u0a25\1\u0a26\1\u0a27\1\u0a28\1\uffff\1\u0a22\1\u0a21\1"+
            "\u0a24\34\uffff\1\u0a1b\u00ff\uffff\1\u0a0f\1\uffff\1\u0a23"+
            "\1\u0a1a\3\uffff\1\u0a10\1\u0a1f\1\u0a13\4\uffff\1\u0a1e\1\u0a20"+
            "\1\u0a1c\1\u0a1d\1\u0a16\1\u0a17\1\u0a18\1\u0a19\1\u0a15\1\u0a14"+
            "\1\u0a11\1\u0a12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a3f\1\u0a40\1\u0a41\1\u0a42\1\uffff\1\u0a3b\1\u0a3a\1"+
            "\u0a3e\34\uffff\1\u0a34\u00ff\uffff\1\u0a3d\1\uffff\1\u0a3c"+
            "\1\u0a33\3\uffff\1\u0a29\1\u0a38\1\u0a2c\4\uffff\1\u0a37\1\u0a39"+
            "\1\u0a35\1\u0a36\1\u0a2f\1\u0a30\1\u0a31\1\u0a32\1\u0a2e\1\u0a2d"+
            "\1\u0a2a\1\u0a2b",
            "\1\u0a59\1\u0a5a\1\u0a5b\1\u0a5c\1\uffff\1\u0a55\1\u0a54\1"+
            "\u0a58\34\uffff\1\u0a4e\u00ff\uffff\1\u0a57\1\uffff\1\u0a56"+
            "\1\u0a4d\3\uffff\1\u0a43\1\u0a52\1\u0a46\4\uffff\1\u0a51\1\u0a53"+
            "\1\u0a4f\1\u0a50\1\u0a49\1\u0a4a\1\u0a4b\1\u0a4c\1\u0a48\1\u0a47"+
            "\1\u0a44\1\u0a45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a73\1\u0a74\1\u0a75\1\u0a76\1\uffff\1\u0a70\1\u0a6f\1"+
            "\u0a72\34\uffff\1\u0a69\u00ff\uffff\1\u0a5d\1\uffff\1\u0a71"+
            "\1\u0a68\3\uffff\1\u0a5e\1\u0a6d\1\u0a61\4\uffff\1\u0a6c\1\u0a6e"+
            "\1\u0a6a\1\u0a6b\1\u0a64\1\u0a65\1\u0a66\1\u0a67\1\u0a63\1\u0a62"+
            "\1\u0a5f\1\u0a60",
            "\1\u0a8d\1\u0a8e\1\u0a8f\1\u0a90\1\uffff\1\u0a8a\1\u0a89\1"+
            "\u0a8c\34\uffff\1\u0a83\u00ff\uffff\1\u0a77\1\uffff\1\u0a8b"+
            "\1\u0a82\3\uffff\1\u0a78\1\u0a87\1\u0a7b\4\uffff\1\u0a86\1\u0a88"+
            "\1\u0a84\1\u0a85\1\u0a7e\1\u0a7f\1\u0a80\1\u0a81\1\u0a7d\1\u0a7c"+
            "\1\u0a79\1\u0a7a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0aa7\1\u0aa8\1\u0aa9\1\u0aaa\1\uffff\1\u0aa4\1\u0aa3\1"+
            "\u0aa6\34\uffff\1\u0a9d\u00ff\uffff\1\u0a91\1\uffff\1\u0aa5"+
            "\1\u0a9c\3\uffff\1\u0a92\1\u0aa1\1\u0a95\4\uffff\1\u0aa0\1\u0aa2"+
            "\1\u0a9e\1\u0a9f\1\u0a98\1\u0a99\1\u0a9a\1\u0a9b\1\u0a97\1\u0a96"+
            "\1\u0a93\1\u0a94",
            "\1\u0ac1\1\u0ac2\1\u0ac3\1\u0ac4\1\uffff\1\u0abe\1\u0abd\1"+
            "\u0ac0\34\uffff\1\u0ab7\u00ff\uffff\1\u0aab\1\uffff\1\u0abf"+
            "\1\u0ab6\3\uffff\1\u0aac\1\u0abb\1\u0aaf\4\uffff\1\u0aba\1\u0abc"+
            "\1\u0ab8\1\u0ab9\1\u0ab2\1\u0ab3\1\u0ab4\1\u0ab5\1\u0ab1\1\u0ab0"+
            "\1\u0aad\1\u0aae",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0adb\1\u0adc\1\u0add\1\u0ade\1\uffff\1\u0ad8\1\u0ad7\1"+
            "\u0ada\34\uffff\1\u0ad1\u00ff\uffff\1\u0ac5\1\uffff\1\u0ad9"+
            "\1\u0ad0\3\uffff\1\u0ac6\1\u0ad5\1\u0ac9\4\uffff\1\u0ad4\1\u0ad6"+
            "\1\u0ad2\1\u0ad3\1\u0acc\1\u0acd\1\u0ace\1\u0acf\1\u0acb\1\u0aca"+
            "\1\u0ac7\1\u0ac8",
            "\1\u0af5\1\u0af6\1\u0af7\1\u0af8\1\uffff\1\u0af1\1\u0af0\1"+
            "\u0af4\34\uffff\1\u0aea\u00ff\uffff\1\u0af3\1\uffff\1\u0af2"+
            "\1\u0ae9\3\uffff\1\u0adf\1\u0aee\1\u0ae2\4\uffff\1\u0aed\1\u0aef"+
            "\1\u0aeb\1\u0aec\1\u0ae5\1\u0ae6\1\u0ae7\1\u0ae8\1\u0ae4\1\u0ae3"+
            "\1\u0ae0\1\u0ae1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b0f\1\u0b10\1\u0b11\1\u0b12\1\uffff\1\u0b0c\1\u0b0b\1"+
            "\u0b0e\34\uffff\1\u0b05\u00ff\uffff\1\u0af9\1\uffff\1\u0b0d"+
            "\1\u0b04\3\uffff\1\u0afa\1\u0b09\1\u0afd\4\uffff\1\u0b08\1\u0b0a"+
            "\1\u0b06\1\u0b07\1\u0b00\1\u0b01\1\u0b02\1\u0b03\1\u0aff\1\u0afe"+
            "\1\u0afb\1\u0afc",
            "\1\u0b29\1\u0b2a\1\u0b2b\1\u0b2c\1\uffff\1\u0b26\1\u0b25\1"+
            "\u0b28\34\uffff\1\u0b1f\u00ff\uffff\1\u0b13\1\uffff\1\u0b27"+
            "\1\u0b1e\3\uffff\1\u0b14\1\u0b23\1\u0b17\4\uffff\1\u0b22\1\u0b24"+
            "\1\u0b20\1\u0b21\1\u0b1a\1\u0b1b\1\u0b1c\1\u0b1d\1\u0b19\1\u0b18"+
            "\1\u0b15\1\u0b16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b43\1\u0b44\1\u0b45\1\u0b46\1\uffff\1\u0b40\1\u0b3f\1"+
            "\u0b42\34\uffff\1\u0b39\u00ff\uffff\1\16\1\uffff\1\u0b41\1\u0b38"+
            "\3\uffff\1\u0b2e\1\u0b3d\1\u0b31\4\uffff\1\u0b3c\1\u0b3e\1\u0b3a"+
            "\1\u0b3b\1\u0b34\1\u0b35\1\u0b36\1\u0b37\1\u0b33\1\u0b32\1\u0b2f"+
            "\1\u0b30",
            "\1\u0b5d\1\u0b5e\1\u0b5f\1\u0b60\1\uffff\1\u0b5a\1\u0b59\1"+
            "\u0b5c\34\uffff\1\u0b53\u00ff\uffff\1\16\1\uffff\1\u0b5b\1\u0b52"+
            "\3\uffff\1\u0b48\1\u0b57\1\u0b4b\4\uffff\1\u0b56\1\u0b58\1\u0b54"+
            "\1\u0b55\1\u0b4e\1\u0b4f\1\u0b50\1\u0b51\1\u0b4d\1\u0b4c\1\u0b49"+
            "\1\u0b4a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b76\1\u0b77\1\u0b78\1\u0b79\1\uffff\1\u0b73\1\u0b72\1"+
            "\u0b75\34\uffff\1\u0b6c\u00ff\uffff\1\u0b74\2\uffff\1\u0b6b"+
            "\3\uffff\1\u0b61\1\u0b70\1\u0b64\4\uffff\1\u0b6f\1\u0b71\1\u0b6d"+
            "\1\u0b6e\1\u0b67\1\u0b68\1\u0b69\1\u0b6a\1\u0b66\1\u0b65\1\u0b62"+
            "\1\u0b63",
            "\1\u0b8f\1\u0b90\1\u0b91\1\u0b92\1\uffff\1\u0b8c\1\u0b8b\1"+
            "\u0b8e\34\uffff\1\u0b85\u00ff\uffff\1\u0b8d\2\uffff\1\u0b84"+
            "\3\uffff\1\u0b7a\1\u0b89\1\u0b7d\4\uffff\1\u0b88\1\u0b8a\1\u0b86"+
            "\1\u0b87\1\u0b80\1\u0b81\1\u0b82\1\u0b83\1\u0b7f\1\u0b7e\1\u0b7b"+
            "\1\u0b7c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0baa\1\u0bab\1\u0bac\1\u0bad\1\uffff\1\u0ba6\1\u0ba5\1"+
            "\u0ba9\3\uffff\1\u0ba8\30\uffff\1\u0b9f\u00ff\uffff\1\16\1\uffff"+
            "\1\u0ba7\1\u0b9e\3\uffff\1\u0b94\1\u0ba3\1\u0b97\4\uffff\1\u0ba2"+
            "\1\u0ba4\1\u0ba0\1\u0ba1\1\u0b9a\1\u0b9b\1\u0b9c\1\u0b9d\1\u0b99"+
            "\1\u0b98\1\u0b95\1\u0b96",
            "\1\u0bc5\1\u0bc6\1\u0bc7\1\u0bc8\1\uffff\1\u0bc1\1\u0bc0\1"+
            "\u0bc4\3\uffff\1\u0bc3\30\uffff\1\u0bba\u00ff\uffff\1\16\1\uffff"+
            "\1\u0bc2\1\u0bb9\3\uffff\1\u0baf\1\u0bbe\1\u0bb2\4\uffff\1\u0bbd"+
            "\1\u0bbf\1\u0bbb\1\u0bbc\1\u0bb5\1\u0bb6\1\u0bb7\1\u0bb8\1\u0bb4"+
            "\1\u0bb3\1\u0bb0\1\u0bb1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0bde\1\u0bdf\1\u0be0\1\u0be1\1\uffff\1\u0bdc\1\u0bdb\1"+
            "\u0bdd\34\uffff\1\u0bd5\u00ff\uffff\1\u0bc9\2\uffff\1\u0bd4"+
            "\3\uffff\1\u0bca\1\u0bd9\1\u0bcd\4\uffff\1\u0bd8\1\u0bda\1\u0bd6"+
            "\1\u0bd7\1\u0bd0\1\u0bd1\1\u0bd2\1\u0bd3\1\u0bcf\1\u0bce\1\u0bcb"+
            "\1\u0bcc",
            "\1\u0bf7\1\u0bf8\1\u0bf9\1\u0bfa\1\uffff\1\u0bf4\1\u0bf3\1"+
            "\u0bf6\34\uffff\1\u0bed\u00ff\uffff\1\u0bf5\2\uffff\1\u0bec"+
            "\3\uffff\1\u0be2\1\u0bf1\1\u0be5\4\uffff\1\u0bf0\1\u0bf2\1\u0bee"+
            "\1\u0bef\1\u0be8\1\u0be9\1\u0bea\1\u0beb\1\u0be7\1\u0be6\1\u0be3"+
            "\1\u0be4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA196_eot = DFA.unpackEncodedString(DFA196_eotS);
    static final short[] DFA196_eof = DFA.unpackEncodedString(DFA196_eofS);
    static final char[] DFA196_min = DFA.unpackEncodedStringToUnsignedChars(DFA196_minS);
    static final char[] DFA196_max = DFA.unpackEncodedStringToUnsignedChars(DFA196_maxS);
    static final short[] DFA196_accept = DFA.unpackEncodedString(DFA196_acceptS);
    static final short[] DFA196_special = DFA.unpackEncodedString(DFA196_specialS);
    static final short[][] DFA196_transition;
    static {
        int numStates = DFA196_transitionS.length;
        DFA196_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA196_transition[i] = DFA.unpackEncodedString(DFA196_transitionS[i]);
        }
    }
    class DFA196 extends DFA {
        public DFA196(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 196;
            this.eot = DFA196_eot;
            this.eof = DFA196_eof;
            this.min = DFA196_min;
            this.max = DFA196_max;
            this.accept = DFA196_accept;
            this.special = DFA196_special;
            this.transition = DFA196_transition;
        }
        public String getDescription() {
            return "1307:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR subSelectExpression ( libFunctionNoClass )+ ) -> subSelectExpression | existsSubSelectExpression | NEWKW LCURLY newAssign ( COMMA newAssign )* RCURLY -> ^( NEWKW ( newAssign )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 196, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA196_0 = input.LA(1);
                        int index196_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_0==MINUS) ) {s = 1;}
                        else if ( ((LA196_0>=BOOLEAN_TRUE && LA196_0<=VALUE_NULL)||LA196_0==NUM_DOUBLE||LA196_0==PLUS||(LA196_0>=STRING_LITERAL && LA196_0<=QUOTED_STRING_LITERAL)||LA196_0==NUM_INT||(LA196_0>=NUM_LONG && LA196_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA196_0==QUESTION) ) {s = 12;}
                        else if ( (LA196_0==LPAREN) ) {s = 13;}
                        else if ( (LA196_0==ESCAPE||LA196_0==EVERY_EXPR||LA196_0==WHERE||(LA196_0>=MAX && LA196_0<=MIN)||LA196_0==OUTER||(LA196_0>=JOIN && LA196_0<=FULL)||LA196_0==EVENTS||(LA196_0>=UNIDIRECTIONAL && LA196_0<=METADATASQL)||(LA196_0>=WEEKDAY && LA196_0<=LW)||(LA196_0>=SNAPSHOT && LA196_0<=INDEX)||(LA196_0>=DEFINE && LA196_0<=AFTER)||LA196_0==WHILE||(LA196_0>=MERGE && LA196_0<=MATCHED)||LA196_0==IDENT||LA196_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA196_0==COUNT) ) {s = 17;}
                        else if ( (LA196_0==SUM) ) {s = 20;}
                        else if ( (LA196_0==AVG) ) {s = 21;}
                        else if ( (LA196_0==COALESCE) ) {s = 24;}
                        else if ( (LA196_0==MEDIAN) ) {s = 25;}
                        else if ( (LA196_0==STDDEV) ) {s = 26;}
                        else if ( (LA196_0==AVEDEV) ) {s = 27;}
                        else if ( (LA196_0==FIRST) ) {s = 29;}
                        else if ( (LA196_0==LAST) ) {s = 30;}
                        else if ( (LA196_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA196_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA196_0==PRIOR) ) {s = 43;}
                        else if ( (LA196_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA196_0==TYPEOF) ) {s = 47;}
                        else if ( (LA196_0==CAST) ) {s = 48;}
                        else if ( (LA196_0==WINDOW) ) {s = 52;}
                        else if ( (LA196_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 64;}
                        else if ( (LA196_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 65;}
                        else if ( (LA196_0==EXISTS) ) {s = 66;}
                        else if ( (LA196_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 67;}
                        else if ( (LA196_0==LCURLY) ) {s = 68;}
                        else if ( (LA196_0==NEWKW) ) {s = 69;}
                        input.seek(index196_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA196_193 = input.LA(1);
                        int index196_193 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_193==STRING_LITERAL) ) {s = 1154;}
                        else if ( (LA196_193==QUOTED_STRING_LITERAL) ) {s = 1155;}
                        else if ( (LA196_193==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1156;}
                        else if ( (LA196_193==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA196_193==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA196_193==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA196_193==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA196_193==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA196_193==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA196_193==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA196_193==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA196_193==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA196_193==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA196_193==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA196_193==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA196_193==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA196_193==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA196_193==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA196_193==AT) && (synpred3_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA196_193==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA196_193==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA196_193==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA196_193==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA196_193==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA196_193==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA196_193==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA196_193==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA196_193==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA196_193==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA196_193==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA196_193==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA196_193==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA196_193==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA196_193==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA196_193==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA196_193==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA196_193==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA196_193==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA196_193==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA196_193==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA196_193==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA196_193==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA196_193==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA196_193==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA196_193==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA196_193==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA196_193==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA196_193==LW) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA196_193==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA196_193==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA196_193==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA196_193==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA196_193==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA196_193==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA196_193==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA196_193==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA196_193==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA196_193==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA196_193==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA196_193==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA196_193==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA196_193==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA196_193==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA196_193==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA196_193==SET) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA196_193==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA196_193==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA196_193==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA196_193==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA196_193==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA196_193==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA196_193==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA196_193==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA196_193==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        input.seek(index196_193);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA196_253 = input.LA(1);
                        int index196_253 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_253==STRING_LITERAL) ) {s = 1228;}
                        else if ( (LA196_253==QUOTED_STRING_LITERAL) ) {s = 1229;}
                        else if ( (LA196_253==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA196_253==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA196_253==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA196_253==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA196_253==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA196_253==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA196_253==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA196_253==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA196_253==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA196_253==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA196_253==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA196_253==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA196_253==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA196_253==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA196_253==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA196_253==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA196_253==AT) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA196_253==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA196_253==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA196_253==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA196_253==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA196_253==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA196_253==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA196_253==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA196_253==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA196_253==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA196_253==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA196_253==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA196_253==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA196_253==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA196_253==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA196_253==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA196_253==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA196_253==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA196_253==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA196_253==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA196_253==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA196_253==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA196_253==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA196_253==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA196_253==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA196_253==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA196_253==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA196_253==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA196_253==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA196_253==LW) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA196_253==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA196_253==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA196_253==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA196_253==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA196_253==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA196_253==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA196_253==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA196_253==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA196_253==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA196_253==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA196_253==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA196_253==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA196_253==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA196_253==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA196_253==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA196_253==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA196_253==SET) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA196_253==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA196_253==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA196_253==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA196_253==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA196_253==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA196_253==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA196_253==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA196_253==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        input.seek(index196_253);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA196_313 = input.LA(1);
                        int index196_313 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_313==STRING_LITERAL) ) {s = 1301;}
                        else if ( (LA196_313==QUOTED_STRING_LITERAL) ) {s = 1302;}
                        else if ( (LA196_313==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA196_313==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA196_313==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA196_313==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA196_313==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA196_313==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA196_313==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA196_313==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA196_313==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA196_313==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA196_313==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA196_313==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA196_313==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA196_313==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA196_313==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA196_313==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA196_313==AT) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA196_313==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA196_313==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA196_313==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA196_313==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA196_313==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA196_313==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA196_313==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA196_313==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA196_313==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA196_313==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA196_313==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA196_313==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA196_313==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA196_313==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA196_313==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA196_313==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA196_313==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA196_313==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA196_313==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA196_313==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA196_313==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA196_313==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA196_313==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA196_313==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA196_313==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA196_313==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA196_313==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA196_313==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA196_313==LW) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA196_313==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA196_313==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA196_313==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA196_313==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA196_313==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA196_313==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA196_313==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA196_313==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA196_313==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA196_313==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA196_313==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA196_313==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA196_313==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA196_313==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA196_313==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA196_313==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA196_313==SET) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA196_313==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA196_313==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA196_313==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA196_313==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA196_313==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA196_313==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA196_313==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA196_313==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        input.seek(index196_313);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA196_373 = input.LA(1);
                        int index196_373 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_373==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA196_373==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA196_373==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA196_373==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA196_373==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA196_373==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA196_373==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA196_373==STRING_LITERAL) ) {s = 1381;}
                        else if ( (LA196_373==QUOTED_STRING_LITERAL) ) {s = 1382;}
                        else if ( (LA196_373==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA196_373==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA196_373==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA196_373==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA196_373==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA196_373==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA196_373==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA196_373==AT) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA196_373==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA196_373==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA196_373==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA196_373==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA196_373==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA196_373==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA196_373==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA196_373==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA196_373==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA196_373==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA196_373==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA196_373==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA196_373==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA196_373==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA196_373==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA196_373==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA196_373==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA196_373==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA196_373==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA196_373==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA196_373==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA196_373==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA196_373==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA196_373==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA196_373==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA196_373==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA196_373==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA196_373==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA196_373==LW) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA196_373==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA196_373==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA196_373==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA196_373==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA196_373==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA196_373==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA196_373==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA196_373==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA196_373==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA196_373==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA196_373==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA196_373==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA196_373==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA196_373==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA196_373==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA196_373==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA196_373==SET) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA196_373==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA196_373==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA196_373==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA196_373==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA196_373==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA196_373==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA196_373==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA196_373==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        input.seek(index196_373);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA196_433 = input.LA(1);
                        int index196_433 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_433==STRING_LITERAL) ) {s = 1445;}
                        else if ( (LA196_433==QUOTED_STRING_LITERAL) ) {s = 1446;}
                        else if ( (LA196_433==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA196_433==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA196_433==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA196_433==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA196_433==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA196_433==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA196_433==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA196_433==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA196_433==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA196_433==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA196_433==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA196_433==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA196_433==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA196_433==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA196_433==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA196_433==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA196_433==AT) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA196_433==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA196_433==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA196_433==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA196_433==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA196_433==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA196_433==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA196_433==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA196_433==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA196_433==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA196_433==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA196_433==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA196_433==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA196_433==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA196_433==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA196_433==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA196_433==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA196_433==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA196_433==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA196_433==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA196_433==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA196_433==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA196_433==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA196_433==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA196_433==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA196_433==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA196_433==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA196_433==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA196_433==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA196_433==LW) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA196_433==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA196_433==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA196_433==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA196_433==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA196_433==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA196_433==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA196_433==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA196_433==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA196_433==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA196_433==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA196_433==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA196_433==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA196_433==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA196_433==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA196_433==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA196_433==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA196_433==SET) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA196_433==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA196_433==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA196_433==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA196_433==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA196_433==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA196_433==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA196_433==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA196_433==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        input.seek(index196_433);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA196_493 = input.LA(1);
                        int index196_493 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_493==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA196_493==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA196_493==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA196_493==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA196_493==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA196_493==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA196_493==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA196_493==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA196_493==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA196_493==STRING_LITERAL) ) {s = 1527;}
                        else if ( (LA196_493==QUOTED_STRING_LITERAL) ) {s = 1528;}
                        else if ( (LA196_493==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA196_493==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA196_493==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA196_493==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA196_493==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA196_493==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA196_493==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA196_493==AT) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA196_493==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA196_493==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA196_493==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA196_493==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA196_493==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA196_493==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA196_493==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA196_493==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA196_493==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA196_493==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA196_493==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA196_493==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA196_493==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA196_493==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA196_493==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA196_493==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA196_493==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA196_493==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA196_493==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA196_493==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA196_493==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA196_493==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA196_493==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA196_493==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA196_493==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA196_493==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA196_493==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA196_493==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA196_493==LW) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA196_493==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA196_493==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA196_493==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA196_493==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA196_493==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA196_493==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA196_493==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA196_493==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA196_493==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA196_493==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA196_493==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA196_493==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA196_493==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA196_493==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA196_493==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA196_493==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA196_493==SET) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA196_493==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA196_493==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA196_493==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA196_493==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA196_493==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA196_493==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA196_493==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA196_493==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        input.seek(index196_493);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA196_553 = input.LA(1);
                        int index196_553 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_553==STRING_LITERAL) ) {s = 1591;}
                        else if ( (LA196_553==QUOTED_STRING_LITERAL) ) {s = 1592;}
                        else if ( (LA196_553==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA196_553==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA196_553==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA196_553==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA196_553==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA196_553==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA196_553==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA196_553==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA196_553==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA196_553==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA196_553==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA196_553==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA196_553==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA196_553==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA196_553==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA196_553==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA196_553==AT) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA196_553==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA196_553==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA196_553==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA196_553==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA196_553==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA196_553==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA196_553==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA196_553==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA196_553==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA196_553==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA196_553==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA196_553==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA196_553==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA196_553==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA196_553==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA196_553==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA196_553==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA196_553==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA196_553==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA196_553==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA196_553==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA196_553==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA196_553==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA196_553==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA196_553==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA196_553==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA196_553==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA196_553==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA196_553==LW) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA196_553==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA196_553==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA196_553==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA196_553==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA196_553==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA196_553==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA196_553==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA196_553==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA196_553==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA196_553==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA196_553==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA196_553==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA196_553==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA196_553==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA196_553==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA196_553==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA196_553==SET) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA196_553==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA196_553==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA196_553==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA196_553==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA196_553==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA196_553==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA196_553==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA196_553==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        input.seek(index196_553);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA196_613 = input.LA(1);
                        int index196_613 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_613==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA196_613==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA196_613==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA196_613==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA196_613==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA196_613==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA196_613==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA196_613==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA196_613==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA196_613==STRING_LITERAL) ) {s = 1673;}
                        else if ( (LA196_613==QUOTED_STRING_LITERAL) ) {s = 1674;}
                        else if ( (LA196_613==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA196_613==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA196_613==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA196_613==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA196_613==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA196_613==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA196_613==AT) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA196_613==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA196_613==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA196_613==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA196_613==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA196_613==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA196_613==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA196_613==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA196_613==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA196_613==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA196_613==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA196_613==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA196_613==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA196_613==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA196_613==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA196_613==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA196_613==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA196_613==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA196_613==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA196_613==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA196_613==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA196_613==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA196_613==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA196_613==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA196_613==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA196_613==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA196_613==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA196_613==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA196_613==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA196_613==LW) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA196_613==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA196_613==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA196_613==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA196_613==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA196_613==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA196_613==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA196_613==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA196_613==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA196_613==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA196_613==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA196_613==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA196_613==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA196_613==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA196_613==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA196_613==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA196_613==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA196_613==SET) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA196_613==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA196_613==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA196_613==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA196_613==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA196_613==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA196_613==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA196_613==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA196_613==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA196_613==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        input.seek(index196_613);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA196_673 = input.LA(1);
                        int index196_673 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_673==STRING_LITERAL) ) {s = 1737;}
                        else if ( (LA196_673==QUOTED_STRING_LITERAL) ) {s = 1738;}
                        else if ( (LA196_673==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA196_673==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA196_673==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA196_673==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA196_673==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA196_673==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA196_673==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA196_673==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA196_673==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA196_673==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA196_673==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA196_673==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA196_673==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA196_673==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA196_673==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA196_673==AT) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA196_673==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA196_673==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA196_673==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA196_673==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA196_673==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA196_673==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA196_673==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA196_673==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA196_673==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA196_673==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA196_673==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA196_673==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA196_673==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA196_673==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA196_673==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA196_673==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA196_673==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA196_673==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA196_673==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA196_673==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA196_673==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA196_673==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA196_673==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA196_673==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA196_673==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA196_673==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA196_673==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA196_673==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA196_673==LW) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA196_673==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA196_673==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA196_673==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA196_673==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA196_673==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA196_673==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA196_673==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA196_673==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA196_673==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA196_673==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA196_673==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA196_673==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA196_673==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA196_673==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA196_673==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA196_673==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA196_673==SET) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA196_673==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA196_673==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA196_673==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA196_673==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA196_673==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA196_673==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA196_673==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA196_673==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA196_673==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        input.seek(index196_673);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA196_733 = input.LA(1);
                        int index196_733 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_733==STRING_LITERAL) ) {s = 1810;}
                        else if ( (LA196_733==QUOTED_STRING_LITERAL) ) {s = 1811;}
                        else if ( (LA196_733==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA196_733==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA196_733==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA196_733==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA196_733==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA196_733==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA196_733==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA196_733==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA196_733==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA196_733==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA196_733==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA196_733==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA196_733==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA196_733==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA196_733==AT) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA196_733==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA196_733==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA196_733==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA196_733==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA196_733==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA196_733==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA196_733==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA196_733==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA196_733==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA196_733==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA196_733==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA196_733==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA196_733==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA196_733==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA196_733==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA196_733==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA196_733==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA196_733==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA196_733==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA196_733==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA196_733==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA196_733==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA196_733==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA196_733==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA196_733==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA196_733==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA196_733==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA196_733==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA196_733==LW) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA196_733==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA196_733==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA196_733==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA196_733==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA196_733==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA196_733==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA196_733==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA196_733==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA196_733==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA196_733==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA196_733==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA196_733==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA196_733==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA196_733==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA196_733==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA196_733==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA196_733==SET) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA196_733==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA196_733==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA196_733==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA196_733==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA196_733==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA196_733==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA196_733==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA196_733==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        input.seek(index196_733);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA196_793 = input.LA(1);
                        int index196_793 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_793==STRING_LITERAL) ) {s = 1881;}
                        else if ( (LA196_793==QUOTED_STRING_LITERAL) ) {s = 1882;}
                        else if ( (LA196_793==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA196_793==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA196_793==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA196_793==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA196_793==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA196_793==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA196_793==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA196_793==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA196_793==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA196_793==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA196_793==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA196_793==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA196_793==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA196_793==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA196_793==AT) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA196_793==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA196_793==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA196_793==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA196_793==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA196_793==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA196_793==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA196_793==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA196_793==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA196_793==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA196_793==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA196_793==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA196_793==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA196_793==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA196_793==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA196_793==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA196_793==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA196_793==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA196_793==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA196_793==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA196_793==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA196_793==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA196_793==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA196_793==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA196_793==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA196_793==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA196_793==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA196_793==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA196_793==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA196_793==LW) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA196_793==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA196_793==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA196_793==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA196_793==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA196_793==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA196_793==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA196_793==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA196_793==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA196_793==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA196_793==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA196_793==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA196_793==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA196_793==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA196_793==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA196_793==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA196_793==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA196_793==SET) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA196_793==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA196_793==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA196_793==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA196_793==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA196_793==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA196_793==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA196_793==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA196_793==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        input.seek(index196_793);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA196_853 = input.LA(1);
                        int index196_853 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_853==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( ((LA196_853>=STRING_LITERAL && LA196_853<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index196_853);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA196_913 = input.LA(1);
                        int index196_913 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_913==STRING_LITERAL) ) {s = 1955;}
                        else if ( (LA196_913==QUOTED_STRING_LITERAL) ) {s = 1956;}
                        else if ( (LA196_913==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA196_913==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA196_913==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA196_913==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA196_913==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA196_913==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA196_913==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA196_913==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA196_913==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA196_913==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA196_913==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA196_913==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA196_913==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA196_913==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA196_913==AT) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA196_913==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA196_913==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA196_913==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA196_913==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA196_913==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA196_913==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA196_913==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA196_913==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA196_913==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA196_913==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA196_913==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA196_913==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA196_913==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA196_913==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA196_913==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA196_913==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA196_913==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA196_913==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA196_913==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA196_913==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA196_913==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA196_913==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA196_913==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA196_913==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA196_913==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA196_913==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA196_913==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA196_913==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA196_913==LW) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA196_913==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA196_913==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA196_913==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA196_913==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA196_913==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA196_913==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA196_913==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA196_913==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA196_913==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA196_913==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA196_913==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA196_913==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA196_913==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA196_913==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA196_913==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA196_913==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA196_913==SET) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA196_913==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA196_913==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA196_913==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA196_913==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA196_913==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA196_913==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA196_913==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA196_913==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        input.seek(index196_913);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA196_973 = input.LA(1);
                        int index196_973 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_973==STRING_LITERAL) ) {s = 2026;}
                        else if ( (LA196_973==QUOTED_STRING_LITERAL) ) {s = 2027;}
                        else if ( (LA196_973==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA196_973==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA196_973==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA196_973==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA196_973==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA196_973==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA196_973==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA196_973==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA196_973==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA196_973==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA196_973==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA196_973==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA196_973==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA196_973==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA196_973==AT) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA196_973==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA196_973==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA196_973==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA196_973==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA196_973==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA196_973==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA196_973==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA196_973==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA196_973==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA196_973==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA196_973==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA196_973==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA196_973==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA196_973==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA196_973==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA196_973==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA196_973==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA196_973==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA196_973==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA196_973==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA196_973==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA196_973==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA196_973==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA196_973==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA196_973==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA196_973==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA196_973==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA196_973==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA196_973==LW) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA196_973==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA196_973==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA196_973==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA196_973==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA196_973==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA196_973==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA196_973==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA196_973==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA196_973==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA196_973==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA196_973==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA196_973==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA196_973==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA196_973==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA196_973==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA196_973==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA196_973==SET) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA196_973==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA196_973==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA196_973==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA196_973==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA196_973==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA196_973==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA196_973==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA196_973==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        input.seek(index196_973);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA196_1033 = input.LA(1);
                        int index196_1033 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1033==STRING_LITERAL) ) {s = 2097;}
                        else if ( (LA196_1033==QUOTED_STRING_LITERAL) ) {s = 2098;}
                        else if ( (LA196_1033==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA196_1033==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA196_1033==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA196_1033==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA196_1033==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA196_1033==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA196_1033==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA196_1033==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA196_1033==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA196_1033==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA196_1033==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA196_1033==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA196_1033==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA196_1033==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA196_1033==AT) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA196_1033==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA196_1033==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA196_1033==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA196_1033==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA196_1033==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA196_1033==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA196_1033==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA196_1033==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA196_1033==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA196_1033==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA196_1033==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA196_1033==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA196_1033==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA196_1033==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA196_1033==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA196_1033==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA196_1033==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA196_1033==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA196_1033==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA196_1033==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA196_1033==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA196_1033==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA196_1033==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA196_1033==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA196_1033==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA196_1033==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA196_1033==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA196_1033==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA196_1033==LW) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA196_1033==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA196_1033==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA196_1033==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA196_1033==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA196_1033==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA196_1033==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA196_1033==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA196_1033==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA196_1033==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA196_1033==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA196_1033==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA196_1033==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA196_1033==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA196_1033==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA196_1033==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA196_1033==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA196_1033==SET) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA196_1033==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA196_1033==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA196_1033==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA196_1033==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA196_1033==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA196_1033==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA196_1033==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA196_1033==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        input.seek(index196_1033);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA196_1093 = input.LA(1);
                        int index196_1093 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1093==STRING_LITERAL) ) {s = 2168;}
                        else if ( (LA196_1093==QUOTED_STRING_LITERAL) ) {s = 2169;}
                        else if ( (LA196_1093==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA196_1093==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA196_1093==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA196_1093==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA196_1093==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA196_1093==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA196_1093==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA196_1093==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA196_1093==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA196_1093==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA196_1093==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA196_1093==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA196_1093==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA196_1093==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA196_1093==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA196_1093==AT) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA196_1093==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA196_1093==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA196_1093==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA196_1093==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA196_1093==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA196_1093==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA196_1093==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA196_1093==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA196_1093==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA196_1093==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA196_1093==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA196_1093==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA196_1093==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA196_1093==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA196_1093==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA196_1093==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA196_1093==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA196_1093==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA196_1093==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA196_1093==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA196_1093==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA196_1093==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA196_1093==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA196_1093==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA196_1093==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA196_1093==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA196_1093==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA196_1093==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA196_1093==LW) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA196_1093==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA196_1093==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA196_1093==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA196_1093==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA196_1093==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA196_1093==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA196_1093==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA196_1093==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA196_1093==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA196_1093==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA196_1093==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA196_1093==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA196_1093==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA196_1093==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA196_1093==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA196_1093==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA196_1093==SET) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA196_1093==AFTER) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA196_1093==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA196_1093==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA196_1093==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA196_1093==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA196_1093==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA196_1093==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA196_1093==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA196_1093==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        input.seek(index196_1093);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA196_1153 = input.LA(1);
                        int index196_1153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1153==SELECT) ) {s = 2241;}
                        else if ( (LA196_1153==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA196_1153==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA196_1153==AT) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA196_1153==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA196_1153==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA196_1153==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA196_1153==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA196_1153==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA196_1153==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA196_1153==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA196_1153==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA196_1153==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA196_1153==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA196_1153==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA196_1153==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA196_1153==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA196_1153==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA196_1153==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA196_1153==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA196_1153==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA196_1153==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA196_1153==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA196_1153==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA196_1153==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA196_1153==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA196_1153==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA196_1153==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA196_1153==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA196_1153==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA196_1153==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA196_1153==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA196_1153==LW) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA196_1153==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA196_1153==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA196_1153==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA196_1153==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA196_1153==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA196_1153==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA196_1153==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA196_1153==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA196_1153==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA196_1153==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA196_1153==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA196_1153==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA196_1153==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA196_1153==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA196_1153==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        input.seek(index196_1153);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA196_1154 = input.LA(1);
                        int index196_1154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1154==RPAREN) ) {s = 2289;}
                        else if ( (LA196_1154==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA196_1154==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA196_1154==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        else if ( (LA196_1154==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA196_1154==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA196_1154==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA196_1154==LT) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA196_1154==GT) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA196_1154==LE) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA196_1154==GE) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA196_1154==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA196_1154==IS) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA196_1154==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA196_1154==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA196_1154==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA196_1154==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA196_1154==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA196_1154==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA196_1154==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA196_1154==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA196_1154==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA196_1154==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA196_1154==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA196_1154==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA196_1154==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        input.seek(index196_1154);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA196_1155 = input.LA(1);
                        int index196_1155 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1155==RPAREN) ) {s = 2315;}
                        else if ( (LA196_1155==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA196_1155==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA196_1155==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA196_1155==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA196_1155==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA196_1155==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA196_1155==LT) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA196_1155==GT) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA196_1155==LE) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA196_1155==GE) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA196_1155==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA196_1155==IS) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA196_1155==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA196_1155==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA196_1155==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA196_1155==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA196_1155==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA196_1155==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA196_1155==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA196_1155==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA196_1155==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA196_1155==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA196_1155==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA196_1155==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA196_1155==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        input.seek(index196_1155);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA196_1228 = input.LA(1);
                        int index196_1228 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1228==RPAREN) ) {s = 2341;}
                        else if ( (LA196_1228==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA196_1228==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA196_1228==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA196_1228==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA196_1228==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA196_1228==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA196_1228==LT) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA196_1228==GT) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA196_1228==LE) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA196_1228==GE) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA196_1228==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA196_1228==IS) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA196_1228==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA196_1228==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA196_1228==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA196_1228==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA196_1228==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA196_1228==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA196_1228==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA196_1228==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA196_1228==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA196_1228==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA196_1228==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA196_1228==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA196_1228==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        input.seek(index196_1228);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA196_1229 = input.LA(1);
                        int index196_1229 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1229==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA196_1229==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA196_1229==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA196_1229==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA196_1229==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA196_1229==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA196_1229==LT) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA196_1229==GT) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA196_1229==LE) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA196_1229==GE) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA196_1229==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA196_1229==IS) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA196_1229==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA196_1229==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA196_1229==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA196_1229==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA196_1229==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA196_1229==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA196_1229==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA196_1229==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA196_1229==RPAREN) ) {s = 2387;}
                        else if ( (LA196_1229==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA196_1229==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA196_1229==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA196_1229==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA196_1229==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        input.seek(index196_1229);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA196_1301 = input.LA(1);
                        int index196_1301 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1301==RPAREN) ) {s = 2393;}
                        else if ( (LA196_1301==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA196_1301==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA196_1301==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA196_1301==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA196_1301==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA196_1301==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA196_1301==LT) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA196_1301==GT) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA196_1301==LE) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA196_1301==GE) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA196_1301==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA196_1301==IS) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA196_1301==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA196_1301==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA196_1301==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA196_1301==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA196_1301==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA196_1301==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA196_1301==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA196_1301==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA196_1301==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA196_1301==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA196_1301==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA196_1301==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA196_1301==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        input.seek(index196_1301);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA196_1302 = input.LA(1);
                        int index196_1302 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1302==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA196_1302==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA196_1302==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA196_1302==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA196_1302==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA196_1302==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA196_1302==LT) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA196_1302==GT) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA196_1302==LE) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA196_1302==GE) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA196_1302==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA196_1302==IS) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA196_1302==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA196_1302==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA196_1302==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA196_1302==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA196_1302==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA196_1302==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA196_1302==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA196_1302==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA196_1302==RPAREN) ) {s = 2439;}
                        else if ( (LA196_1302==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA196_1302==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA196_1302==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA196_1302==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA196_1302==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        input.seek(index196_1302);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA196_1381 = input.LA(1);
                        int index196_1381 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1381==RPAREN) ) {s = 14;}
                        else if ( (LA196_1381==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA196_1381==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA196_1381==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA196_1381==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA196_1381==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA196_1381==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA196_1381==LT) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA196_1381==GT) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA196_1381==LE) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA196_1381==GE) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA196_1381==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA196_1381==IS) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA196_1381==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA196_1381==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA196_1381==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA196_1381==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA196_1381==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA196_1381==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA196_1381==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA196_1381==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA196_1381==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA196_1381==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA196_1381==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA196_1381==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA196_1381==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        input.seek(index196_1381);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA196_1382 = input.LA(1);
                        int index196_1382 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1382==RPAREN) ) {s = 14;}
                        else if ( (LA196_1382==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA196_1382==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA196_1382==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA196_1382==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA196_1382==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA196_1382==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA196_1382==LT) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA196_1382==GT) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA196_1382==LE) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA196_1382==GE) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA196_1382==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA196_1382==IS) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA196_1382==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA196_1382==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA196_1382==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA196_1382==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA196_1382==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA196_1382==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA196_1382==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA196_1382==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA196_1382==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA196_1382==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA196_1382==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA196_1382==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA196_1382==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        input.seek(index196_1382);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA196_1445 = input.LA(1);
                        int index196_1445 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1445==RPAREN) ) {s = 2497;}
                        else if ( (LA196_1445==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA196_1445==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA196_1445==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA196_1445==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA196_1445==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA196_1445==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA196_1445==LT) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA196_1445==GT) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA196_1445==LE) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA196_1445==GE) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA196_1445==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA196_1445==IS) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA196_1445==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA196_1445==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA196_1445==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA196_1445==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA196_1445==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA196_1445==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA196_1445==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA196_1445==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA196_1445==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA196_1445==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA196_1445==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA196_1445==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA196_1445==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        input.seek(index196_1445);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA196_1446 = input.LA(1);
                        int index196_1446 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1446==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA196_1446==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA196_1446==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA196_1446==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA196_1446==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA196_1446==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA196_1446==LT) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA196_1446==GT) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA196_1446==LE) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA196_1446==GE) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA196_1446==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA196_1446==IS) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA196_1446==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA196_1446==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA196_1446==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA196_1446==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA196_1446==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA196_1446==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA196_1446==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA196_1446==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA196_1446==RPAREN) ) {s = 2543;}
                        else if ( (LA196_1446==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA196_1446==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA196_1446==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA196_1446==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA196_1446==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        input.seek(index196_1446);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA196_1527 = input.LA(1);
                        int index196_1527 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1527==RPAREN) ) {s = 2549;}
                        else if ( (LA196_1527==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA196_1527==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA196_1527==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA196_1527==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA196_1527==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA196_1527==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA196_1527==LT) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA196_1527==GT) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA196_1527==LE) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA196_1527==GE) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA196_1527==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA196_1527==IS) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA196_1527==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA196_1527==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA196_1527==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA196_1527==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA196_1527==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA196_1527==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA196_1527==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA196_1527==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA196_1527==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA196_1527==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA196_1527==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA196_1527==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA196_1527==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        input.seek(index196_1527);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA196_1528 = input.LA(1);
                        int index196_1528 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1528==RPAREN) ) {s = 2575;}
                        else if ( (LA196_1528==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA196_1528==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA196_1528==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA196_1528==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA196_1528==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA196_1528==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA196_1528==LT) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA196_1528==GT) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA196_1528==LE) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA196_1528==GE) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA196_1528==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA196_1528==IS) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA196_1528==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA196_1528==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA196_1528==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA196_1528==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA196_1528==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA196_1528==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA196_1528==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA196_1528==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA196_1528==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA196_1528==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA196_1528==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA196_1528==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA196_1528==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        input.seek(index196_1528);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA196_1591 = input.LA(1);
                        int index196_1591 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1591==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA196_1591==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA196_1591==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA196_1591==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA196_1591==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA196_1591==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA196_1591==LT) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA196_1591==GT) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA196_1591==LE) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA196_1591==GE) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA196_1591==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA196_1591==IS) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA196_1591==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA196_1591==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA196_1591==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA196_1591==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA196_1591==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA196_1591==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA196_1591==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA196_1591==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA196_1591==RPAREN) ) {s = 2621;}
                        else if ( (LA196_1591==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA196_1591==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA196_1591==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA196_1591==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA196_1591==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        input.seek(index196_1591);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA196_1592 = input.LA(1);
                        int index196_1592 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1592==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA196_1592==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA196_1592==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA196_1592==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA196_1592==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA196_1592==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA196_1592==LT) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA196_1592==GT) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA196_1592==LE) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA196_1592==GE) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA196_1592==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA196_1592==IS) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA196_1592==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA196_1592==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA196_1592==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA196_1592==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA196_1592==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA196_1592==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA196_1592==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA196_1592==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA196_1592==RPAREN) ) {s = 2647;}
                        else if ( (LA196_1592==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA196_1592==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA196_1592==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA196_1592==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA196_1592==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        input.seek(index196_1592);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA196_1673 = input.LA(1);
                        int index196_1673 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1673==RPAREN) ) {s = 2653;}
                        else if ( (LA196_1673==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA196_1673==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA196_1673==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA196_1673==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA196_1673==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA196_1673==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA196_1673==LT) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA196_1673==GT) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA196_1673==LE) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA196_1673==GE) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA196_1673==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA196_1673==IS) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA196_1673==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA196_1673==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA196_1673==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA196_1673==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA196_1673==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA196_1673==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA196_1673==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA196_1673==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA196_1673==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA196_1673==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA196_1673==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA196_1673==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA196_1673==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        input.seek(index196_1673);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA196_1674 = input.LA(1);
                        int index196_1674 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1674==RPAREN) ) {s = 2679;}
                        else if ( (LA196_1674==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA196_1674==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA196_1674==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA196_1674==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA196_1674==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA196_1674==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA196_1674==LT) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA196_1674==GT) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA196_1674==LE) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA196_1674==GE) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA196_1674==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA196_1674==IS) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA196_1674==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA196_1674==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA196_1674==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA196_1674==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA196_1674==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA196_1674==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA196_1674==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA196_1674==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA196_1674==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA196_1674==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA196_1674==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA196_1674==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA196_1674==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        input.seek(index196_1674);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA196_1737 = input.LA(1);
                        int index196_1737 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1737==RPAREN) ) {s = 2705;}
                        else if ( (LA196_1737==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA196_1737==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA196_1737==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA196_1737==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA196_1737==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA196_1737==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA196_1737==LT) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA196_1737==GT) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA196_1737==LE) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA196_1737==GE) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA196_1737==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA196_1737==IS) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA196_1737==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA196_1737==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA196_1737==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA196_1737==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA196_1737==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA196_1737==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA196_1737==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA196_1737==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA196_1737==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA196_1737==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA196_1737==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA196_1737==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA196_1737==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        input.seek(index196_1737);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA196_1738 = input.LA(1);
                        int index196_1738 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1738==RPAREN) ) {s = 2731;}
                        else if ( (LA196_1738==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA196_1738==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA196_1738==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA196_1738==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA196_1738==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA196_1738==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA196_1738==LT) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA196_1738==GT) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA196_1738==LE) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA196_1738==GE) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA196_1738==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA196_1738==IS) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA196_1738==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA196_1738==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA196_1738==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA196_1738==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA196_1738==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA196_1738==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA196_1738==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA196_1738==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA196_1738==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA196_1738==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA196_1738==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA196_1738==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA196_1738==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        input.seek(index196_1738);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA196_1810 = input.LA(1);
                        int index196_1810 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1810==RPAREN) ) {s = 2757;}
                        else if ( (LA196_1810==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA196_1810==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA196_1810==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA196_1810==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA196_1810==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA196_1810==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA196_1810==LT) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA196_1810==GT) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA196_1810==LE) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA196_1810==GE) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA196_1810==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA196_1810==IS) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA196_1810==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA196_1810==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA196_1810==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA196_1810==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA196_1810==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA196_1810==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA196_1810==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA196_1810==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        else if ( (LA196_1810==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA196_1810==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA196_1810==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA196_1810==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA196_1810==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        input.seek(index196_1810);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA196_1811 = input.LA(1);
                        int index196_1811 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1811==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA196_1811==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA196_1811==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA196_1811==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA196_1811==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA196_1811==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA196_1811==LT) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA196_1811==GT) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA196_1811==LE) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA196_1811==GE) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        else if ( (LA196_1811==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA196_1811==IS) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA196_1811==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA196_1811==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA196_1811==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA196_1811==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA196_1811==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA196_1811==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA196_1811==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA196_1811==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA196_1811==RPAREN) ) {s = 2803;}
                        else if ( (LA196_1811==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA196_1811==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA196_1811==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA196_1811==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA196_1811==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        input.seek(index196_1811);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA196_1881 = input.LA(1);
                        int index196_1881 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1881==RPAREN) ) {s = 2809;}
                        else if ( (LA196_1881==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA196_1881==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA196_1881==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA196_1881==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        else if ( (LA196_1881==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA196_1881==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA196_1881==LT) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA196_1881==GT) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA196_1881==LE) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        else if ( (LA196_1881==GE) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA196_1881==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA196_1881==IS) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA196_1881==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA196_1881==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA196_1881==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA196_1881==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA196_1881==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA196_1881==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA196_1881==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA196_1881==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        else if ( (LA196_1881==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA196_1881==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA196_1881==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA196_1881==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA196_1881==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        input.seek(index196_1881);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA196_1882 = input.LA(1);
                        int index196_1882 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1882==RPAREN) ) {s = 2835;}
                        else if ( (LA196_1882==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA196_1882==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA196_1882==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA196_1882==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2839;}
                        else if ( (LA196_1882==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA196_1882==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA196_1882==LT) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA196_1882==GT) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA196_1882==LE) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        else if ( (LA196_1882==GE) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA196_1882==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA196_1882==IS) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA196_1882==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA196_1882==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA196_1882==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA196_1882==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA196_1882==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA196_1882==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA196_1882==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        else if ( (LA196_1882==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA196_1882==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA196_1882==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA196_1882==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA196_1882==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA196_1882==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        input.seek(index196_1882);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA196_1955 = input.LA(1);
                        int index196_1955 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1955==RPAREN) ) {s = 14;}
                        else if ( (LA196_1955==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA196_1955==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        else if ( (LA196_1955==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA196_1955==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA196_1955==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA196_1955==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA196_1955==LT) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA196_1955==GT) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA196_1955==LE) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        else if ( (LA196_1955==GE) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA196_1955==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA196_1955==IS) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA196_1955==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2874;}
                        else if ( (LA196_1955==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA196_1955==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA196_1955==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA196_1955==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA196_1955==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        else if ( (LA196_1955==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA196_1955==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA196_1955==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA196_1955==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA196_1955==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA196_1955==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA196_1955==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        input.seek(index196_1955);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA196_1956 = input.LA(1);
                        int index196_1956 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1956==RPAREN) ) {s = 14;}
                        else if ( (LA196_1956==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA196_1956==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA196_1956==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA196_1956==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2891;}
                        else if ( (LA196_1956==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA196_1956==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA196_1956==LT) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA196_1956==GT) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA196_1956==LE) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        else if ( (LA196_1956==GE) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA196_1956==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA196_1956==IS) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA196_1956==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA196_1956==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA196_1956==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA196_1956==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA196_1956==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA196_1956==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA196_1956==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        else if ( (LA196_1956==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2907;}
                        else if ( (LA196_1956==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA196_1956==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA196_1956==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA196_1956==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA196_1956==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        input.seek(index196_1956);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA196_2026 = input.LA(1);
                        int index196_2026 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_2026==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA196_2026==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA196_2026==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA196_2026==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA196_2026==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA196_2026==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA196_2026==LT) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA196_2026==GT) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA196_2026==LE) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA196_2026==GE) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA196_2026==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA196_2026==IS) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA196_2026==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA196_2026==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA196_2026==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA196_2026==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA196_2026==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA196_2026==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA196_2026==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA196_2026==RPAREN) ) {s = 2932;}
                        else if ( (LA196_2026==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        else if ( (LA196_2026==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA196_2026==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA196_2026==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA196_2026==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        input.seek(index196_2026);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA196_2027 = input.LA(1);
                        int index196_2027 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_2027==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA196_2027==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA196_2027==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA196_2027==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA196_2027==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA196_2027==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA196_2027==LT) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA196_2027==GT) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA196_2027==LE) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA196_2027==GE) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA196_2027==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA196_2027==IS) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA196_2027==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA196_2027==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA196_2027==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA196_2027==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA196_2027==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA196_2027==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA196_2027==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA196_2027==RPAREN) ) {s = 2957;}
                        else if ( (LA196_2027==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        else if ( (LA196_2027==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA196_2027==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA196_2027==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA196_2027==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        input.seek(index196_2027);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA196_2097 = input.LA(1);
                        int index196_2097 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_2097==RPAREN) ) {s = 14;}
                        else if ( (LA196_2097==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA196_2097==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA196_2097==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA196_2097==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        else if ( (LA196_2097==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2968;}
                        else if ( (LA196_2097==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA196_2097==LT) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA196_2097==GT) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA196_2097==LE) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA196_2097==GE) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        else if ( (LA196_2097==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA196_2097==IS) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA196_2097==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2976;}
                        else if ( (LA196_2097==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA196_2097==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2978;}
                        else if ( (LA196_2097==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA196_2097==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA196_2097==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA196_2097==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA196_2097==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        else if ( (LA196_2097==AS) && (synpred3_EsperEPL2Grammar())) {s = 2984;}
                        else if ( (LA196_2097==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2985;}
                        else if ( (LA196_2097==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2986;}
                        else if ( (LA196_2097==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2987;}
                        else if ( (LA196_2097==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2988;}
                        else if ( (LA196_2097==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2989;}
                        input.seek(index196_2097);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA196_2098 = input.LA(1);
                        int index196_2098 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_2098==RPAREN) ) {s = 14;}
                        else if ( (LA196_2098==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2991;}
                        else if ( (LA196_2098==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2992;}
                        else if ( (LA196_2098==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2993;}
                        else if ( (LA196_2098==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2994;}
                        else if ( (LA196_2098==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2995;}
                        else if ( (LA196_2098==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2996;}
                        else if ( (LA196_2098==LT) && (synpred3_EsperEPL2Grammar())) {s = 2997;}
                        else if ( (LA196_2098==GT) && (synpred3_EsperEPL2Grammar())) {s = 2998;}
                        else if ( (LA196_2098==LE) && (synpred3_EsperEPL2Grammar())) {s = 2999;}
                        else if ( (LA196_2098==GE) && (synpred3_EsperEPL2Grammar())) {s = 3000;}
                        else if ( (LA196_2098==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3001;}
                        else if ( (LA196_2098==IS) && (synpred3_EsperEPL2Grammar())) {s = 3002;}
                        else if ( (LA196_2098==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3003;}
                        else if ( (LA196_2098==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3004;}
                        else if ( (LA196_2098==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3005;}
                        else if ( (LA196_2098==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3006;}
                        else if ( (LA196_2098==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3007;}
                        else if ( (LA196_2098==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3008;}
                        else if ( (LA196_2098==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3009;}
                        else if ( (LA196_2098==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 3010;}
                        else if ( (LA196_2098==AS) && (synpred3_EsperEPL2Grammar())) {s = 3011;}
                        else if ( (LA196_2098==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3012;}
                        else if ( (LA196_2098==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3013;}
                        else if ( (LA196_2098==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3014;}
                        else if ( (LA196_2098==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3015;}
                        else if ( (LA196_2098==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3016;}
                        input.seek(index196_2098);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA196_2168 = input.LA(1);
                        int index196_2168 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_2168==RPAREN) ) {s = 3017;}
                        else if ( (LA196_2168==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3018;}
                        else if ( (LA196_2168==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3019;}
                        else if ( (LA196_2168==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3020;}
                        else if ( (LA196_2168==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3021;}
                        else if ( (LA196_2168==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3022;}
                        else if ( (LA196_2168==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3023;}
                        else if ( (LA196_2168==LT) && (synpred3_EsperEPL2Grammar())) {s = 3024;}
                        else if ( (LA196_2168==GT) && (synpred3_EsperEPL2Grammar())) {s = 3025;}
                        else if ( (LA196_2168==LE) && (synpred3_EsperEPL2Grammar())) {s = 3026;}
                        else if ( (LA196_2168==GE) && (synpred3_EsperEPL2Grammar())) {s = 3027;}
                        else if ( (LA196_2168==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3028;}
                        else if ( (LA196_2168==IS) && (synpred3_EsperEPL2Grammar())) {s = 3029;}
                        else if ( (LA196_2168==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3030;}
                        else if ( (LA196_2168==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3031;}
                        else if ( (LA196_2168==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3032;}
                        else if ( (LA196_2168==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3033;}
                        else if ( (LA196_2168==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3034;}
                        else if ( (LA196_2168==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3035;}
                        else if ( (LA196_2168==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3036;}
                        else if ( (LA196_2168==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3037;}
                        else if ( (LA196_2168==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3038;}
                        else if ( (LA196_2168==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3039;}
                        else if ( (LA196_2168==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3040;}
                        else if ( (LA196_2168==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3041;}
                        input.seek(index196_2168);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA196_2169 = input.LA(1);
                        int index196_2169 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_2169==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3042;}
                        else if ( (LA196_2169==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3043;}
                        else if ( (LA196_2169==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3044;}
                        else if ( (LA196_2169==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3045;}
                        else if ( (LA196_2169==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3046;}
                        else if ( (LA196_2169==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3047;}
                        else if ( (LA196_2169==LT) && (synpred3_EsperEPL2Grammar())) {s = 3048;}
                        else if ( (LA196_2169==GT) && (synpred3_EsperEPL2Grammar())) {s = 3049;}
                        else if ( (LA196_2169==LE) && (synpred3_EsperEPL2Grammar())) {s = 3050;}
                        else if ( (LA196_2169==GE) && (synpred3_EsperEPL2Grammar())) {s = 3051;}
                        else if ( (LA196_2169==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3052;}
                        else if ( (LA196_2169==IS) && (synpred3_EsperEPL2Grammar())) {s = 3053;}
                        else if ( (LA196_2169==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3054;}
                        else if ( (LA196_2169==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3055;}
                        else if ( (LA196_2169==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3056;}
                        else if ( (LA196_2169==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3057;}
                        else if ( (LA196_2169==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3058;}
                        else if ( (LA196_2169==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3059;}
                        else if ( (LA196_2169==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3060;}
                        else if ( (LA196_2169==RPAREN) ) {s = 3061;}
                        else if ( (LA196_2169==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3062;}
                        else if ( (LA196_2169==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3063;}
                        else if ( (LA196_2169==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3064;}
                        else if ( (LA196_2169==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3065;}
                        else if ( (LA196_2169==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3066;}
                        input.seek(index196_2169);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA196_2289 = input.LA(1);
                        int index196_2289 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2289);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA196_2315 = input.LA(1);
                        int index196_2315 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2315);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA196_2341 = input.LA(1);
                        int index196_2341 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2341);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA196_2387 = input.LA(1);
                        int index196_2387 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2387);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA196_2393 = input.LA(1);
                        int index196_2393 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2393);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA196_2439 = input.LA(1);
                        int index196_2439 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2439);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA196_2497 = input.LA(1);
                        int index196_2497 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2497);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA196_2543 = input.LA(1);
                        int index196_2543 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2543);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA196_2549 = input.LA(1);
                        int index196_2549 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2549);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA196_2575 = input.LA(1);
                        int index196_2575 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2575);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA196_2621 = input.LA(1);
                        int index196_2621 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2621);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA196_2647 = input.LA(1);
                        int index196_2647 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2647);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA196_2653 = input.LA(1);
                        int index196_2653 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2653);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA196_2679 = input.LA(1);
                        int index196_2679 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2679);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA196_2705 = input.LA(1);
                        int index196_2705 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2705);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA196_2731 = input.LA(1);
                        int index196_2731 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2731);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA196_2757 = input.LA(1);
                        int index196_2757 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2757);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA196_2803 = input.LA(1);
                        int index196_2803 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2803);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA196_2809 = input.LA(1);
                        int index196_2809 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2809);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA196_2835 = input.LA(1);
                        int index196_2835 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2835);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA196_2932 = input.LA(1);
                        int index196_2932 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2932);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA196_2957 = input.LA(1);
                        int index196_2957 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_2957);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA196_3017 = input.LA(1);
                        int index196_3017 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_3017);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA196_3061 = input.LA(1);
                        int index196_3061 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3066;}
                        input.seek(index196_3061);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1778 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_expressionDecl_in_startPatternExpressionRule1782 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1788 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1807 = new BitSet(new long[]{0x004002000800E010L,0x0800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_expressionDecl_in_startEPLExpressionRule1811 = new BitSet(new long[]{0x004002000800E010L,0x0800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000500L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1817 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1850 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPRESSIONDECL_in_expressionDecl1873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_expressionDecl1877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LCURLY_in_expressionDecl1879 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_expressionDecl1881 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_expressionDecl1884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RCURLY_in_expressionDecl1886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_expressionLambdaDecl1920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_expressionLambdaDecl1925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_columnList_in_expressionLambdaDecl1927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expressionLambdaDecl1929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_GOES_in_expressionLambdaDecl1933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationNoEnum1968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1970 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1974 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x00C804C001000000L,0x0000000000001912L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationEnum2028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum2030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum2034 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x00C804C001000000L,0x0000000000001D12L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum2038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum2042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2088 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum2091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum2118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum2144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum2146 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x00C8008001000000L,0x0000000000001912L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum2185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum2187 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x00C800C001000000L,0x0000000000001D12L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum2189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2319 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x00C8118001000000L,0x0000000000001912L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000110000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2325 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x00C8008001000000L,0x0000000000001912L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000110000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2367 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x00C811C001000000L,0x0000000000001D12L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000110000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2373 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x00C800C001000000L,0x0000000000001D12L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000110000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2419 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2424 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2429 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2434 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2439 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2444 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2449 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2466 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2469 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2475 = new BitSet(new long[]{0xB83841E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2478 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2482 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2485 = new BitSet(new long[]{0x0104300000010002L,0x0001200000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2489 = new BitSet(new long[]{0x0104300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2495 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2498 = new BitSet(new long[]{0x0104300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2505 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2508 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2511 = new BitSet(new long[]{0x0104200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2518 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2521 = new BitSet(new long[]{0x0104000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2528 = new BitSet(new long[]{0x0130800080004000L,0x0020200000440000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2531 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2538 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2541 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2544 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2571 = new BitSet(new long[]{0x0040000008000000L,0x02008000000A0000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2580 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2583 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2646 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2650 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2695 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2699 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2718 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2720 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2723 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2725 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2733 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr2770 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr2772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2777 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr2780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2784 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2790 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr2797 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr2799 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_mergeItem_in_onMergeExpr2807 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeItem2841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeItem2845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched2858 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched2860 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched2863 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_mergeMatched2865 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeMatchedItem_in_mergeMatched2869 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeMatchedItem2895 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatchedItem2910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_mergeMatchedItem2912 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem2914 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatchedItem2917 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem2919 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem2925 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem2927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatchedItem2939 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem2942 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem2944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeMatchedItem2955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched3012 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched3014 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched3016 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeUnmatched3019 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_mergeUnmatched3021 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3025 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatchedItem3052 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeUnmatchedItem3055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_mergeInsert3070 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_INTO_in_mergeInsert3073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_mergeInsert3075 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeInsert3080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_columnList_in_mergeInsert3082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeInsert3084 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeInsert3088 = new BitSet(new long[]{0xB83841E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_selectionList_in_mergeInsert3090 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeInsert3093 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_whereClause_in_mergeInsert3095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr3141 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr3143 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr3149 = new BitSet(new long[]{0xB83841E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr3151 = new BitSet(new long[]{0xB83841E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr3154 = new BitSet(new long[]{0x0100300400010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr3158 = new BitSet(new long[]{0x0100300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr3164 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr3166 = new BitSet(new long[]{0x0100300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr3175 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3177 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr3179 = new BitSet(new long[]{0x0100200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr3186 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr3188 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr3195 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3197 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr3199 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr3208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr3268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3275 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr3278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr3294 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3296 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr3299 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3301 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr3308 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr3310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr3361 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr3363 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3367 = new BitSet(new long[]{0xB83841E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3369 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3374 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3407 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3460 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3464 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3469 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3511 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3513 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3516 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3518 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3545 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3576 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3617 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3623 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000424000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3628 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000424000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3633 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000424000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3642 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000024000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3646 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000024000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3650 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000024000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3665 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3684 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3701 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3704 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3793 = new BitSet(new long[]{0x803801E807FC4420L,0x069C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x00CA004001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3796 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3822 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_createIndexColumnList_in_createIndexExpr3832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_createIndexColumnList3866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3868 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn3895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn3897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3930 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3933 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3977 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3982 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_createColumnListElement4010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement4013 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement4018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement4020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4063 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList4066 = new BitSet(new long[]{0x803801E807FC4420L,0x069C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x00CA004001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement4097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement4109 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement4137 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr4168 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4172 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr4175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4179 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002024000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr4181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002024000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr4194 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr4205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000044000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr4207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr4210 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_createSchemaQual_in_createSchemaExpr4219 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaQual4282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaQual4284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4310 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_variantList4313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement4342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement4348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr4373 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr4379 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr4383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_insertIntoExpr4385 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr4388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr4390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr4392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList4425 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnList4428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_columnList4430 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause4468 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause4471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause4475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin4489 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin4492 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4506 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4509 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin4552 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin4556 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin4560 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin4563 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin4584 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin4598 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin4600 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin4602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent4667 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4670 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent4673 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4676 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair4693 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4754 = new BitSet(new long[]{0xB83841E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4760 = new BitSet(new long[]{0xB83841E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4766 = new BitSet(new long[]{0xB83841E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4772 = new BitSet(new long[]{0xB83841E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4809 = new BitSet(new long[]{0xB83841E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4812 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4861 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4864 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4928 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4966 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4970 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4974 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4978 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4987 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4992 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression4999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression5003 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression5009 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression5016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression5023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression5027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr5083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr5087 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr5090 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D806C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionList_in_forExpr5092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr5095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog5131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog5145 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog5151 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog5158 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog5163 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5169 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog5175 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog5181 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog5187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog5194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy5231 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy5233 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5235 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy5238 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5240 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures5269 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures5274 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5276 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem5301 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem5304 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem5309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection5340 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection5343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern5358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern5360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000024000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern5364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5386 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5390 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5394 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5398 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5402 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval5442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval5444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration5475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000024000000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000024000000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested5553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000024000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested5557 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x001A000000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested5562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested5568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested5574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom5613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x001A000000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom5619 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom5625 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine5681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5683 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine5686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5688 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5715 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5717 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5746 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5877 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5880 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D806C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5940 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MERGE_in_viewExpression5949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5952 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA86C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr6017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr6020 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr6022 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr6060 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6062 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement6087 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement6092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement6096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause6134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit6172 = new BitSet(new long[]{0x0030800080004002L,0x0000000000440000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit6187 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit6191 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit6195 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit6199 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit6230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit6256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit6267 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit6273 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit6279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit6310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit6312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit6329 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_outputLimit6331 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit6334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit6336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter6486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter6489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter6493 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter6495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6541 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6547 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit6554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit6560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet6624 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6628 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6632 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6636 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6640 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6645 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet6651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause6681 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_whenClause6684 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause6686 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_whenClause6689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause6702 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_elseClause6705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression6718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6732 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6735 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6738 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6752 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_caseExpression6754 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6756 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6759 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6797 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6802 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6804 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6836 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6841 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6843 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0304000000000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6880 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6883 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6886 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6890 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0304000000000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6911 = new BitSet(new long[]{0x803801E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6927 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00200000000000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6940 = new BitSet(new long[]{0x803B81E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6958 = new BitSet(new long[]{0x803B81E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6972 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6974 = new BitSet(new long[]{0x803B81E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6988 = new BitSet(new long[]{0x803B81E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression7002 = new BitSet(new long[]{0x803B81E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression7032 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00200000000000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression7049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression7055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression7061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression7067 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D806C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression7069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression7072 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00200000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7077 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0C00200000000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7237 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xF000000000000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression7269 = new BitSet(new long[]{0x803B81E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression7273 = new BitSet(new long[]{0x803B81E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression7277 = new BitSet(new long[]{0x803B81E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression7281 = new BitSet(new long[]{0x803B81E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7305 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xF000000000000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression7322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression7328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression7334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7340 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D806C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression7342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7345 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xF000000000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7350 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xF000000000000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression7446 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000820000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7485 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression7491 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0021140000000000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression7516 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001040000000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression7545 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001140000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression7579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression7704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression7750 = new BitSet(new long[]{0x803801E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression7752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7802 = new BitSet(new long[]{0x803801E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7804 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7861 = new BitSet(new long[]{0x803801E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7950 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7956 = new BitSet(new long[]{0x803801E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7958 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7962 = new BitSet(new long[]{0x803801E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7964 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression8005 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression8010 = new BitSet(new long[]{0x803801E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression8013 = new BitSet(new long[]{0x803801E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression8017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression8031 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression8036 = new BitSet(new long[]{0x803801E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression8039 = new BitSet(new long[]{0x803801E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression8042 = new BitSet(new long[]{0x803801E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression8046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression8061 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression8063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression8076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression8081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression8086 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_unaryExpression8088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression8090 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8095 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8097 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8102 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8104 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression8141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression8153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression8159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression8164 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8169 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8171 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8176 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8178 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression8215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWKW_in_unaryExpression8220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LCURLY_in_unaryExpression8222 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression8224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000110000000000L});
    public static final BitSet FOLLOW_COMMA_in_unaryExpression8227 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression8229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000110000000000L});
    public static final BitSet FOLLOW_RCURLY_in_unaryExpression8233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_newAssign8255 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_EQUALS_in_newAssign8258 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_newAssign8260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression8288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression8310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression8332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression8334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr8367 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr8373 = new BitSet(new long[]{0xB83841E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr8376 = new BitSet(new long[]{0xB83841E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr8379 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr8386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr8389 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr8397 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr8400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr8409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr8433 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8440 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8445 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr8452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8462 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr8469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression8513 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D803C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000110000000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression8519 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000110000000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression8528 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression8533 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression8535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression8540 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression8542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc8591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8594 = new BitSet(new long[]{0x8038C1E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8598 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8603 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc8609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc8618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8621 = new BitSet(new long[]{0x8038C1E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8625 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8630 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc8636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc8645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8648 = new BitSet(new long[]{0x8038C1E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8660 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8665 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc8680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc8691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc8700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8703 = new BitSet(new long[]{0x8038C1E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8707 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8712 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc8718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc8727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8730 = new BitSet(new long[]{0x8038C1E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8734 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8739 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc8745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc8754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8757 = new BitSet(new long[]{0x8038C1E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8761 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8766 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc8772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc8781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc8786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc8791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc8796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8799 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8804 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8810 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc8823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8825 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8830 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8836 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8841 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8843 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8848 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc8897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8899 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8904 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8915 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8917 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8922 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc8971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8974 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc8985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8987 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8991 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8996 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9003 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9005 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc9050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc9056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9058 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc9061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc9073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9076 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_builtinFunc9100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9103 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc9114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9116 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9118 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_AS_in_builtinFunc9125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9130 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9135 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9137 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9142 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9144 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc9189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9192 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc9195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc9203 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000420000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9208 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9215 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9217 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9222 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9224 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation9268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation9270 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA06C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation9273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation9276 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_firstAggregation9278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation9284 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation9289 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation9291 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation9296 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation9298 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation9353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation9355 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA06C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation9358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation9361 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_lastAggregation9363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation9369 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation9374 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation9376 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation9381 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation9383 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation9439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation9441 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA06C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation9443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation9446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation9451 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation9453 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation9458 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation9460 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr9517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr9537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr9550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_aggregationFilterExpr9569 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_aggregationFilterExpr9571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction9599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction9604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction9616 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction9619 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction9621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass9651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass9653 = new BitSet(new long[]{0x803801E807FD4420L,0x06BC000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass9657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass9661 = new BitSet(new long[]{0x8038C1E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA86C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass9664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass9668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass9701 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass9706 = new BitSet(new long[]{0x8038C1E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA86C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass9709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass9713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent9745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent9752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent9764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_funcIdent9776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_funcIdent9788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_funcIdent9800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs9817 = new BitSet(new long[]{0x8038C1E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs9822 = new BitSet(new long[]{0x8038C1E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs9826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs9829 = new BitSet(new long[]{0x8038C1E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs9832 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_libFunctionArgItem9846 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionWithTime_in_libFunctionArgItem9849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList9860 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList9862 = new BitSet(new long[]{0x803801E807FD4420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList9865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression9893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression9912 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_followedByRepeat_in_followedByExpression9915 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByRepeat9968 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat9975 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_followedByRepeat9977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_FOLLOWMAX_END_in_followedByRepeat9979 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_orExpression_in_followedByRepeat9983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_orExpression10012 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression10017 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_andExpression_in_orExpression10019 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression10051 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression10056 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression10058 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression10093 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression10097 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression10102 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression10104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression10169 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression10175 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression10181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression10183 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression10189 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression10198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList10313 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList10315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList10318 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList10320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList10324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_distinctExpressionAtom10347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix10362 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix10368 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000824000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix10370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix10372 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix10379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix10381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix10389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix10391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression10453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression10457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression10472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression10474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression10479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression10485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression10488 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA86C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression10490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression10493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression10542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression10544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression10547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression10549 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA86C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression10553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression10557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression10570 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression10573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression10575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange10596 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00F802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange10603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0021000000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange10608 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D902C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange10611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange10631 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange10633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange10644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression10731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression10733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression10742 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000820000000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression10753 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D806C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression10755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression10758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression10770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression10815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression10818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic10848 = new BitSet(new long[]{0x803801E80FFC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic10851 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic10853 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic10855 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic10859 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic10862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic10864 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic10869 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic10871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic10875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList10925 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList10928 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA02C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList10931 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement10957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement10973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement10978 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement10981 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement10985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector11029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector11031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector11033 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector11036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector11040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression11087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression11089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression11098 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000820000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression11109 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D806C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression11111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression11114 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression11126 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_patternFilterAnnotation_in_patternFilterExpression11137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_patternFilterAnnotation11189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterAnnotation11193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterAnnotation11196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_number_in_patternFilterAnnotation11198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterAnnotation11200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier11236 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier11255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier11259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy11304 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy11339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy11343 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList11385 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList11388 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00D802C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expression_in_expressionList11391 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11419 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList11422 = new BitSet(new long[]{0x803801E817FD6420L,0x16BC1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x00DA82C001000000L,0x0000000000001C12L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11425 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime11454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime11465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime11476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime11487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime11499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime11510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime11522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime11534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime11539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTimeInclLast11559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeInclLast11564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable11575 = new BitSet(new long[]{0x0600000000000002L,0x0000007000000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable11580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable11584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable11588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable11592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable11596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar11653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand11673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand11686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand11698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand11700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_number_in_frequencyOperand11703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand11707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand11709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand11758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand11762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand11764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand11767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_number_in_rangeOperand11770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand11774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand11776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator11890 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator11894 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator11896 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator11899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator11947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator11951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator11953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator11956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList12003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x001A004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList12005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001100000000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList12008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x001A004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList12010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001100000000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList12014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter12036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter12042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter12047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty12063 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty12066 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty12068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic12094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010820000000000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic12103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic12107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic12109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic12114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic12128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic12133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic12139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic12142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic12147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic12161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12284 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent12296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent12298 = new BitSet(new long[]{0x803801E807FC4422L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent12341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent12350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent12357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent12364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent12371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent12382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent12389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent12396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent12403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent12410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent12417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent12424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent12431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent12438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent12445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent12452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent12459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent12466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent12473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent12480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent12487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent12494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent12501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent12508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent12515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent12522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent12529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent12536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent12543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent12550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent12557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent12564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent12571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keywordAllowedIdent12578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent12585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent12592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent12599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent12608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent12617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent12624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent12631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent12638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent12645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent12652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent12659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent12666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent12673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr12694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr12703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent12717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent12725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yearPart_in_timePeriod12750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod12752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod12755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod12758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12761 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12767 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod12776 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod12778 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod12781 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12784 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12787 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod12799 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod12801 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12804 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12807 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod12819 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12824 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12827 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12836 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12838 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12841 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12852 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12861 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018004001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_yearPart12916 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_yearPart12920 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_yearPart12922 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEARS_in_yearPart12926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEAR_in_yearPart12930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_monthPart12978 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_IDENT_in_monthPart12982 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_substitution_in_monthPart12984 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTHS_in_monthPart12988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTH_in_monthPart12992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_weekPart13040 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_IDENT_in_weekPart13044 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_substitution_in_weekPart13046 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEKS_in_weekPart13050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEK_in_weekPart13054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_dayPart13102 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart13106 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_substitution_in_dayPart13108 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart13112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart13116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_hourPart13165 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart13169 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart13171 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart13175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart13179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_minutePart13228 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart13232 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart13234 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart13238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart13242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart13246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_secondPart13296 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart13300 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart13302 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart13306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart13310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart13314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_millisecondPart13364 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart13368 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart13370 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart13374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart13378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart13382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number13437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number13454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number13471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number13488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution13509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant13528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant13535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant13548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant13568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant13588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant13610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant13616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000001000000L,0x0000000000001812L});
    public static final BitSet FOLLOW_number_in_numberconstant13620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant13649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant13665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar8147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar9532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar9594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar10968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar11449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar11460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar11471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar11482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar11494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar11505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar11516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar11529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar11554 = new BitSet(new long[]{0x0000000000000002L});
}
