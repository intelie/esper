// $ANTLR 3.1.1 EsperEPL2Grammar.g 2009-08-08 07:47:43

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "INSERTINTO_EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_WINDOW_COL_TYPE_LIST", "CREATE_WINDOW_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "STAR", "BOR", "PLUS", "QUESTION", "LBRACK", "RBRACK", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=167;
    public static final int FLOAT_SUFFIX=315;
    public static final int STAR=256;
    public static final int NUMERIC_PARAM_LIST=107;
    public static final int MOD=276;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=149;
    public static final int BSR=297;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=173;
    public static final int TIMEPERIOD_MILLISECONDS=93;
    public static final int FULL_OUTERJOIN_EXPR=153;
    public static final int MATCHREC_PATTERN_CONCAT=240;
    public static final int INC=290;
    public static final int LNOT=286;
    public static final int RPAREN=255;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=263;
    public static final int BSR_ASSIGN=298;
    public static final int CAST_EXPR=202;
    public static final int MATCHES=104;
    public static final int STREAM_EXPR=148;
    public static final int TIMEPERIOD_SECONDS=90;
    public static final int NOT_EQUAL=268;
    public static final int METADATASQL=67;
    public static final int EVENT_FILTER_PROPERTY_EXPR=116;
    public static final int LAST_AGGREG=226;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=110;
    public static final int FOLLOWED_BY=280;
    public static final int HOUR_PART=178;
    public static final int RBRACK=261;
    public static final int MATCHREC_PATTERN_NESTED=242;
    public static final int MATCH_UNTIL_RANGE_CLOSED=217;
    public static final int GE=272;
    public static final int METHOD_JOIN_EXPR=213;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=115;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=114;
    public static final int MINUS_ASSIGN=291;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=126;
    public static final int NUM_DOUBLE=236;
    public static final int INSERTINTO_STREAM_NAME=190;
    public static final int LCURLY=277;
    public static final int TIMEPERIOD_MILLISEC=91;
    public static final int UNARY_MINUS=174;
    public static final int RETAINUNION=63;
    public static final int DBWHERE_CLAUSE=188;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=124;
    public static final int WS=307;
    public static final int EMAILAT=306;
    public static final int SUBSELECT_GROUP_EXPR=194;
    public static final int ON_SELECT_INSERT_EXPR=208;
    public static final int ESCAPECHAR=281;
    public static final int SL_COMMENT=308;
    public static final int NULL_TYPE=235;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=215;
    public static final int GT=270;
    public static final int BNOT=287;
    public static final int WHERE_EXPR=135;
    public static final int END=33;
    public static final int LAND=304;
    public static final int INNERJOIN_EXPR=150;
    public static final int NOT_REGEXP=185;
    public static final int MATCH_UNTIL_EXPR=214;
    public static final int EVENT_PROP_EXPR=157;
    public static final int LBRACK=260;
    public static final int VIEW_EXPR=132;
    public static final int ANNOTATION=222;
    public static final int LONG_TYPE=230;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=117;
    public static final int MATCHREC_PATTERN=238;
    public static final int TIMEPERIOD_SEC=88;
    public static final int TICKED_STRING_LITERAL=282;
    public static final int ON_SELECT_EXPR=207;
    public static final int MINUTE_PART=179;
    public static final int PATTERN_NOT_EXPR=113;
    public static final int SQL_NE=267;
    public static final int SUM=18;
    public static final int HexDigit=313;
    public static final int UPDATE_EXPR=227;
    public static final int LPAREN=254;
    public static final int IN_SUBSELECT_EXPR=196;
    public static final int AT=81;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=94;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=244;
    public static final int NOT_IN_RANGE=192;
    public static final int OFFSET=98;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int PREVIOUS=68;
    public static final int SECOND_PART=180;
    public static final int MATCH_RECOGNIZE=100;
    public static final int IDENT=251;
    public static final int DATABASE_JOIN_EXPR=134;
    public static final int BXOR=266;
    public static final int PLUS=258;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=82;
    public static final int EXISTS=70;
    public static final int EVENT_PROP_INDEXED=160;
    public static final int TIMEPERIOD_MILLISECOND=92;
    public static final int EVAL_NOTEQUALS_EXPR=141;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=216;
    public static final int CREATE_VARIABLE_EXPR=212;
    public static final int CREATE_WINDOW_COL_TYPE=220;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=245;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=111;
    public static final int RIGHT_OUTERJOIN_EXPR=152;
    public static final int NUMBERSETSTAR=221;
    public static final int LAST_OPERATOR=199;
    public static final int PATTERN_FILTER_EXPR=112;
    public static final int EVAL_AND_EXPR=138;
    public static final int LEFT_OUTERJOIN_EXPR=151;
    public static final int EPL_EXPR=237;
    public static final int GROUP_BY_EXPR=154;
    public static final int SET=78;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=73;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=158;
    public static final int MINUS=274;
    public static final int SEMI=305;
    public static final int STAR_ASSIGN=293;
    public static final int FIRST_AGGREG=225;
    public static final int COLON=262;
    public static final int EVAL_EQUALS_GROUP_EXPR=142;
    public static final int BAND_ASSIGN=303;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=168;
    public static final int VALUE_NULL=96;
    public static final int NOT_IN_SET=182;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=161;
    public static final int SL=299;
    public static final int NOT_IN_SUBSELECT_EXPR=197;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=130;
    public static final int SR=295;
    public static final int RCURLY=278;
    public static final int PLUS_ASSIGN=289;
    public static final int EXISTS_SUBSELECT_EXPR=195;
    public static final int DAY_PART=177;
    public static final int EVENT_FILTER_IN=125;
    public static final int DIV=275;
    public static final int OBJECT_PARAM_ORDERED_EXPR=109;
    public static final int OctalEscape=312;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=181;
    public static final int PRIOR=69;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=97;
    public static final int SELECTION_EXPR=145;
    public static final int LOR=273;
    public static final int CAST=74;
    public static final int LW=72;
    public static final int WILDCARD_SELECT=189;
    public static final int EXPONENT=314;
    public static final int LT=269;
    public static final int PATTERN_INCL_EXPR=133;
    public static final int ORDER_BY_EXPR=155;
    public static final int BOOL_TYPE=234;
    public static final int MOD_ASSIGN=294;
    public static final int ANNOTATION_ARRAY=223;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=198;
    public static final int EQUALS=252;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=64;
    public static final int DIV_ASSIGN=288;
    public static final int SL_ASSIGN=300;
    public static final int PATTERN=65;
    public static final int SQL=66;
    public static final int MATCHREC_AFTER_SKIP=243;
    public static final int WEEKDAY=71;
    public static final int FULL=40;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=176;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=95;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=143;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=231;
    public static final int TIMEPERIOD_SECOND=89;
    public static final int COALESCE=22;
    public static final int EVENT_FILTER_BETWEEN=127;
    public static final int ANNOTATION_VALUE=224;
    public static final int SUBSELECT_EXPR=193;
    public static final int NUMERIC_PARAM_RANGE=106;
    public static final int CONCAT=172;
    public static final int CLASS_IDENT=129;
    public static final int MATCHREC_PATTERN_ALTER=241;
    public static final int ON_EXPR=205;
    public static final int CREATE_WINDOW_EXPR=203;
    public static final int PROPERTY_SELECTION_STREAM=119;
    public static final int ON_DELETE_EXPR=206;
    public static final int NUM_LONG=283;
    public static final int ON=41;
    public static final int TIME_PERIOD=175;
    public static final int DOUBLE_TYPE=232;
    public static final int DELETE=76;
    public static final int INT_TYPE=229;
    public static final int MATCHREC_PARTITION=249;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=137;
    public static final int ORDER_ELEMENT_EXPR=156;
    public static final int TIMEPERIOD_HOURS=85;
    public static final int VARIABLE=79;
    public static final int SUBSTITUTION=201;
    public static final int UNTIL=80;
    public static final int STRING_TYPE=233;
    public static final int NUM_INT=279;
    public static final int MATCHREC_DEFINE_ITEM=246;
    public static final int ON_SET_EXPR=211;
    public static final int STDDEV=24;
    public static final int NUM_FLOAT=284;
    public static final int ON_EXPR_FROM=210;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=310;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=118;
    public static final int WEEKDAY_OPERATOR=200;
    public static final int DEC=292;
    public static final int CREATE_WINDOW_COL_TYPE_LIST=219;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=301;
    public static final int NUMERIC_PARAM_FREQUENCY=108;
    public static final int SNAPSHOT=77;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=166;
    public static final int EVENT_FILTER_PARAM=122;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=163;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=99;
    public static final int DEFINE=102;
    public static final int TIMEPERIOD_DAYS=83;
    public static final int EVENT_FILTER_RANGE=123;
    public static final int ML_COMMENT=309;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=162;
    public static final int BOR_ASSIGN=302;
    public static final int COMMA=250;
    public static final int IS=42;
    public static final int PARTITION=103;
    public static final int WHEN_LIMIT_EXPR=169;
    public static final int TIMEPERIOD_LIMIT_EXPR=165;
    public static final int SOME=49;
    public static final int EQUAL=285;
    public static final int BOR=257;
    public static final int MATCHREC_MEASURE_ITEM=248;
    public static final int TIMEPERIOD_HOUR=84;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=128;
    public static final int IN_RANGE=191;
    public static final int DOT=253;
    public static final int MATCHREC_MEASURES=247;
    public static final int CURRENT_TIMESTAMP=75;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=120;
    public static final int INSERTINTO_EXPR=170;
    public static final int UNIDIRECTIONAL=62;
    public static final int HAVING_EXPR=136;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=218;
    public static final int EVAL_EQUALS_EXPR=140;
    public static final int TIMEPERIOD_MINUTES=87;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=184;
    public static final int EVENT_LIMIT_EXPR=164;
    public static final int TIMEPERIOD_MINUTE=86;
    public static final int NOT_BETWEEN=183;
    public static final int EVAL_OR_EXPR=139;
    public static final int ON_SELECT_INSERT_OUTPUT=209;
    public static final int MEASURES=101;
    public static final int AFTER=105;
    public static final int BAND=265;
    public static final int MATCHREC_PATTERN_ATOM=239;
    public static final int QUOTED_STRING_LITERAL=264;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=259;
    public static final int OBSERVER_EXPR=131;
    public static final int EVENT_FILTER_IDENT=121;
    public static final int EVENT_PROP_MAPPED=159;
    public static final int UnicodeEscape=311;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=186;
    public static final int SELECTION_ELEMENT_EXPR=146;
    public static final int CREATE_WINDOW_SELECT_EXPR=204;
    public static final int WINDOW=5;
    public static final int INSERTINTO_EXPRCOL=171;
    public static final int ON_SET_EXPR_ITEM=228;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=147;
    public static final int SR_ASSIGN=296;
    public static final int LE=271;
    public static final int DBFROM_CLAUSE=187;
    public static final int EVAL_IDENT=144;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after';");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:509:1: startPatternExpressionRule : ( annotationNoEnum )* patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:510:2: ( ( annotationNoEnum )* patternExpression EOF )
            // EsperEPL2Grammar.g:510:4: ( annotationNoEnum )* patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:510:4: ( annotationNoEnum )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // EsperEPL2Grammar.g:510:4: annotationNoEnum
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1552);
            	    annotationNoEnum1=annotationNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1557);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1561); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:515:1: startEPLExpressionRule : ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:516:2: ( ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) )
            // EsperEPL2Grammar.g:516:4: ( annotationEnum )* eplExpression EOF
            {
            // EsperEPL2Grammar.g:516:4: ( annotationEnum )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // EsperEPL2Grammar.g:516:4: annotationEnum
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1575);
            	    annotationEnum4=annotationEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1581);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1585); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: eplExpression, annotationEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 519:3: -> ^( EPL_EXPR ( annotationEnum )* eplExpression )
            {
                // EsperEPL2Grammar.g:519:6: ^( EPL_EXPR ( annotationEnum )* eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                // EsperEPL2Grammar.g:519:17: ( annotationEnum )*
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());

                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:522:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:523:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:523:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1611);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1615); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationNoEnum"
    // EsperEPL2Grammar.g:530:1: annotationNoEnum : '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;

        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;


        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:531:5: ( '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) )
            // EsperEPL2Grammar.g:531:9: '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);

            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1637);
            classIdentifier10=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            // EsperEPL2Grammar.g:531:29: ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==IDENT) ) {
                    int LA4_13 = input.LA(3);

                    if ( (LA4_13==EQUALS) ) {
                        int LA4_31 = input.LA(4);

                        if ( ((LA4_31>=BOOLEAN_TRUE && LA4_31<=VALUE_NULL)||LA4_31==NUM_DOUBLE||LA4_31==PLUS||(LA4_31>=STRING_LITERAL && LA4_31<=QUOTED_STRING_LITERAL)||LA4_31==MINUS||LA4_31==LCURLY||LA4_31==NUM_INT||(LA4_31>=NUM_LONG && LA4_31<=NUM_FLOAT)||LA4_31==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:531:31: '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')'
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);

                    // EsperEPL2Grammar.g:531:35: ( elementValuePairsNoEnum | elementValueNoEnum )?
                    int alt3=3;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            // EsperEPL2Grammar.g:531:37: elementValuePairsNoEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1645);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:531:63: elementValueNoEnum
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1649);
                            elementValueNoEnum13=elementValueNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());

                            }
                            break;

                    }

                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, elementValueNoEnum, elementValuePairsNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 532:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
            {
                // EsperEPL2Grammar.g:532:5: ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:532:34: ( elementValuePairsNoEnum )?
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());

                }
                stream_elementValuePairsNoEnum.reset();
                // EsperEPL2Grammar.g:532:59: ( elementValueNoEnum )?
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationNoEnum"

    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationEnum"
    // EsperEPL2Grammar.g:535:1: annotationEnum : '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;

        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;


        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:536:5: ( '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) )
            // EsperEPL2Grammar.g:536:9: '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);

            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1697);
            classIdentifier16=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            // EsperEPL2Grammar.g:536:29: ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:536:31: '(' ( elementValuePairsEnum | elementValueEnum )? ')'
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1701); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);

                    // EsperEPL2Grammar.g:536:35: ( elementValuePairsEnum | elementValueEnum )?
                    int alt5=3;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);

                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==DOT||LA5_1==RPAREN) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            // EsperEPL2Grammar.g:536:37: elementValuePairsEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1705);
                            elementValuePairsEnum18=elementValuePairsEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:536:61: elementValueEnum
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1709);
                            elementValueEnum19=elementValueEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());

                            }
                            break;

                    }

                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, elementValueEnum, elementValuePairsEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 537:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
            {
                // EsperEPL2Grammar.g:537:5: ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:537:34: ( elementValuePairsEnum )?
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());

                }
                stream_elementValuePairsEnum.reset();
                // EsperEPL2Grammar.g:537:57: ( elementValueEnum )?
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationEnum"

    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsNoEnum"
    // EsperEPL2Grammar.g:540:1: elementValuePairsNoEnum : elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;

        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;


        CommonTree COMMA22_tree=null;

        try {
            // EsperEPL2Grammar.g:541:5: ( elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* )
            // EsperEPL2Grammar.g:541:9: elementValuePairNoEnum ( COMMA elementValuePairNoEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1755);
            elementValuePairNoEnum21=elementValuePairNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            // EsperEPL2Grammar.g:541:32: ( COMMA elementValuePairNoEnum )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // EsperEPL2Grammar.g:541:33: COMMA elementValuePairNoEnum
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1758); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1761);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsNoEnum"

    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsEnum"
    // EsperEPL2Grammar.g:544:1: elementValuePairsEnum : elementValuePairEnum ( COMMA elementValuePairEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;

        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;


        CommonTree COMMA25_tree=null;

        try {
            // EsperEPL2Grammar.g:545:5: ( elementValuePairEnum ( COMMA elementValuePairEnum )* )
            // EsperEPL2Grammar.g:545:9: elementValuePairEnum ( COMMA elementValuePairEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1782);
            elementValuePairEnum24=elementValuePairEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            // EsperEPL2Grammar.g:545:30: ( COMMA elementValuePairEnum )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // EsperEPL2Grammar.g:545:31: COMMA elementValuePairEnum
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1785); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1788);
            	    elementValuePairEnum26=elementValuePairEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsEnum"

    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairNoEnum"
    // EsperEPL2Grammar.g:548:1: elementValuePairNoEnum : i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;


        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:549:5: (i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) )
            // EsperEPL2Grammar.g:549:9: i= IDENT '=' elementValueNoEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);

            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1815);
            elementValueNoEnum28=elementValueNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());


            // AST REWRITE
            // elements: elementValueNoEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 550:2: -> ^( ANNOTATION_VALUE $i elementValueNoEnum )
            {
                // EsperEPL2Grammar.g:550:5: ^( ANNOTATION_VALUE $i elementValueNoEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairNoEnum"

    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairEnum"
    // EsperEPL2Grammar.g:553:1: elementValuePairEnum : i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;


        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:554:5: (i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) )
            // EsperEPL2Grammar.g:554:9: i= IDENT '=' elementValueEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1852); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1854); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);

            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1856);
            elementValueEnum30=elementValueEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());


            // AST REWRITE
            // elements: i, elementValueEnum
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 555:2: -> ^( ANNOTATION_VALUE $i elementValueEnum )
            {
                // EsperEPL2Grammar.g:555:5: ^( ANNOTATION_VALUE $i elementValueEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairEnum"

    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueNoEnum"
    // EsperEPL2Grammar.g:558:1: elementValueNoEnum : ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant );
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;

        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;

        EsperEPL2GrammarParser.constant_return constant33 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            // EsperEPL2Grammar.g:559:5: ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant )
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:559:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1887);
                    annotationEnum31=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:560:9: ( elementValueArrayNoEnum )
                    {
                    // EsperEPL2Grammar.g:560:9: ( elementValueArrayNoEnum )
                    // EsperEPL2Grammar.g:560:10: elementValueArrayNoEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1898);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayNoEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 560:35: -> elementValueArrayNoEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:561:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueNoEnum1911);
                    constant33=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueNoEnum"

    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueEnum"
    // EsperEPL2Grammar.g:564:1: elementValueEnum : ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier );
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;

        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;

        EsperEPL2GrammarParser.constant_return constant36 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            // EsperEPL2Grammar.g:565:5: ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier )
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // EsperEPL2Grammar.g:565:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum1934);
                    annotationEnum34=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:566:9: ( elementValueArrayEnum )
                    {
                    // EsperEPL2Grammar.g:566:9: ( elementValueArrayEnum )
                    // EsperEPL2Grammar.g:566:10: elementValueArrayEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum1945);
                    elementValueArrayEnum35=elementValueArrayEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 566:33: -> elementValueArrayEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:567:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueEnum1958);
                    constant36=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:568:7: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum1966);
                    classIdentifier37=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueEnum"

    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayNoEnum"
    // EsperEPL2Grammar.g:571:1: elementValueArrayNoEnum : '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;


        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:572:5: ( '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) )
            // EsperEPL2Grammar.g:572:9: '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}'
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum1986); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);

            // EsperEPL2Grammar.g:572:13: ( elementValueNoEnum ( ',' elementValueNoEnum )* )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:572:14: elementValueNoEnum ( ',' elementValueNoEnum )*
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1989);
                    elementValueNoEnum39=elementValueNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    // EsperEPL2Grammar.g:572:33: ( ',' elementValueNoEnum )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:572:34: ',' elementValueNoEnum
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum1992); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);

                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1994);
                    	    elementValueNoEnum41=elementValueNoEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:572:61: ( ',' )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // EsperEPL2Grammar.g:572:62: ','
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2001); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);


                    }
                    break;

            }

            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2005); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);



            // AST REWRITE
            // elements: elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 573:2: -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
            {
                // EsperEPL2Grammar.g:573:5: ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:573:24: ( elementValueNoEnum )*
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayNoEnum"

    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayEnum"
    // EsperEPL2Grammar.g:576:1: elementValueArrayEnum : '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;


        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:577:5: ( '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) )
            // EsperEPL2Grammar.g:577:9: '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}'
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);

            // EsperEPL2Grammar.g:577:13: ( elementValueEnum ( ',' elementValueEnum )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:577:14: elementValueEnum ( ',' elementValueEnum )*
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2037);
                    elementValueEnum45=elementValueEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    // EsperEPL2Grammar.g:577:31: ( ',' elementValueEnum )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }


                        }


                        switch (alt14) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:577:32: ',' elementValueEnum
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2040); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);

                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2042);
                    	    elementValueEnum47=elementValueEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:577:57: ( ',' )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:577:58: ','
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);


                    }
                    break;

            }

            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);



            // AST REWRITE
            // elements: elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 578:2: -> ^( ANNOTATION_ARRAY ( elementValueEnum )* )
            {
                // EsperEPL2Grammar.g:578:5: ^( ANNOTATION_ARRAY ( elementValueEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:578:24: ( elementValueEnum )*
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayEnum"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:584:1: eplExpression : ( selectExpr | createWindowExpr | createVariableExpr | onExpr | updateExpr );
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr52 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr53 = null;

        EsperEPL2GrammarParser.updateExpr_return updateExpr54 = null;



        try {
            // EsperEPL2Grammar.g:585:2: ( selectExpr | createWindowExpr | createVariableExpr | onExpr | updateExpr )
            int alt17=5;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                int LA17_3 = input.LA(2);

                if ( (LA17_3==WINDOW) ) {
                    alt17=2;
                }
                else if ( (LA17_3==VARIABLE) ) {
                    alt17=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);

                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt17=4;
                }
                break;
            case UPDATE:
                {
                alt17=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:585:4: selectExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectExpr_in_eplExpression2085);
                    selectExpr50=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:586:4: createWindowExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2090);
                    createWindowExpr51=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:587:4: createVariableExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2095);
                    createVariableExpr52=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr52.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:588:4: onExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_onExpr_in_eplExpression2100);
                    onExpr53=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr53.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:589:4: updateExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_updateExpr_in_eplExpression2105);
                    updateExpr54=updateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr54.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:592:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT55=null;
        Token SELECT57=null;
        Token FROM59=null;
        Token WHERE62=null;
        Token GROUP64=null;
        Token BY65=null;
        Token HAVING67=null;
        Token OUTPUT69=null;
        Token ORDER71=null;
        Token BY72=null;
        Token ROW_LIMIT_EXPR74=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr56 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause58 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause60 = null;

        EsperEPL2GrammarParser.matchRecog_return matchRecog61 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause63 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr66 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause68 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit70 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr73 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit75 = null;


        CommonTree INSERT55_tree=null;
        CommonTree SELECT57_tree=null;
        CommonTree FROM59_tree=null;
        CommonTree WHERE62_tree=null;
        CommonTree GROUP64_tree=null;
        CommonTree BY65_tree=null;
        CommonTree HAVING67_tree=null;
        CommonTree OUTPUT69_tree=null;
        CommonTree ORDER71_tree=null;
        CommonTree BY72_tree=null;
        CommonTree ROW_LIMIT_EXPR74_tree=null;

        try {
            // EsperEPL2Grammar.g:593:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:593:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:593:4: ( INSERT insertIntoExpr )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==INSERT) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:593:5: INSERT insertIntoExpr
                    {
                    INSERT55=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2118); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2121);
                    insertIntoExpr56=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr56.getTree());

                    }
                    break;

            }

            SELECT57=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2127); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2130);
            selectClause58=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause58.getTree());
            FROM59=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2134); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2137);
            fromClause60=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause60.getTree());
            // EsperEPL2Grammar.g:596:3: ( matchRecog )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==MATCH_RECOGNIZE) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:596:3: matchRecog
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2141);
                    matchRecog61=matchRecog();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog61.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:597:3: ( WHERE whereClause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==WHERE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:597:4: WHERE whereClause
                    {
                    WHERE62=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2147); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2150);
                    whereClause63=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause63.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:598:3: ( GROUP BY groupByListExpr )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==GROUP) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:598:4: GROUP BY groupByListExpr
                    {
                    GROUP64=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2157); if (state.failed) return retval;
                    BY65=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2160); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2163);
                    groupByListExpr66=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr66.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:599:3: ( HAVING havingClause )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==HAVING) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:599:4: HAVING havingClause
                    {
                    HAVING67=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2170); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2173);
                    havingClause68=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause68.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:600:3: ( OUTPUT outputLimit )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==OUTPUT) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:600:4: OUTPUT outputLimit
                    {
                    OUTPUT69=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2180); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2183);
                    outputLimit70=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit70.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:601:3: ( ORDER BY orderByListExpr )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ORDER) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:601:4: ORDER BY orderByListExpr
                    {
                    ORDER71=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2190); if (state.failed) return retval;
                    BY72=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2193); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2196);
                    orderByListExpr73=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr73.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:602:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ROW_LIMIT_EXPR) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:602:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR74=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2203); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2206);
                    rowLimit75=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit75.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:605:1: onExpr : ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ON76=null;
        Token AS79=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression77 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression78 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr80 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr81 = null;

        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr82 = null;

        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert83 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr84 = null;


        CommonTree i_tree=null;
        CommonTree ON76_tree=null;
        CommonTree AS79_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:606:2: ( ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:606:4: ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr )
            {
            ON76=(Token)match(input,ON,FOLLOW_ON_in_onExpr2221); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON76);

            // EsperEPL2Grammar.g:606:7: ( eventFilterExpression | patternInclusionExpression )
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==IDENT||LA26_0==TICKED_STRING_LITERAL) ) {
                alt26=1;
            }
            else if ( (LA26_0==PATTERN) ) {
                alt26=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    // EsperEPL2Grammar.g:606:8: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onExpr2224);
                    eventFilterExpression77=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression77.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:606:32: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onExpr2228);
                    patternInclusionExpression78=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression78.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:606:60: ( AS i= IDENT | i= IDENT )?
            int alt27=3;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==AS) ) {
                alt27=1;
            }
            else if ( (LA27_0==IDENT) ) {
                alt27=2;
            }
            switch (alt27) {
                case 1 :
                    // EsperEPL2Grammar.g:606:61: AS i= IDENT
                    {
                    AS79=(Token)match(input,AS,FOLLOW_AS_in_onExpr2232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS79);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2236); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:606:74: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:607:3: ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr )
            int alt31=3;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt31=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt31=2;
                }
                break;
            case SET:
                {
                alt31=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }

            switch (alt31) {
                case 1 :
                    // EsperEPL2Grammar.g:607:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2250);
                    onDeleteExpr80=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr80.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:607:19: onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2254);
                    onSelectExpr81=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr81.getTree());
                    // EsperEPL2Grammar.g:607:32: ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==INSERT) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // EsperEPL2Grammar.g:607:33: ( onSelectInsertExpr )+ ( outputClauseInsert )?
                            {
                            // EsperEPL2Grammar.g:607:33: ( onSelectInsertExpr )+
                            int cnt28=0;
                            loop28:
                            do {
                                int alt28=2;
                                int LA28_0 = input.LA(1);

                                if ( (LA28_0==INSERT) ) {
                                    alt28=1;
                                }


                                switch (alt28) {
                            	case 1 :
                            	    // EsperEPL2Grammar.g:607:33: onSelectInsertExpr
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2257);
                            	    onSelectInsertExpr82=onSelectInsertExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr82.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt28 >= 1 ) break loop28;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(28, input);
                                        throw eee;
                                }
                                cnt28++;
                            } while (true);

                            // EsperEPL2Grammar.g:607:53: ( outputClauseInsert )?
                            int alt29=2;
                            int LA29_0 = input.LA(1);

                            if ( (LA29_0==OUTPUT) ) {
                                alt29=1;
                            }
                            switch (alt29) {
                                case 1 :
                                    // EsperEPL2Grammar.g:607:53: outputClauseInsert
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2260);
                                    outputClauseInsert83=outputClauseInsert();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert83.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:607:77: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2267);
                    onSetExpr84=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr84.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: eventFilterExpression, onSelectInsertExpr, patternInclusionExpression, i, onSetExpr, onDeleteExpr, outputClauseInsert, onSelectExpr
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 608:3: -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:608:6: ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                // EsperEPL2Grammar.g:608:16: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:608:39: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:608:67: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:608:71: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:608:85: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:608:99: ( onSelectInsertExpr )*
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());

                }
                stream_onSelectInsertExpr.reset();
                // EsperEPL2Grammar.g:608:119: ( outputClauseInsert )?
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());

                }
                stream_outputClauseInsert.reset();
                // EsperEPL2Grammar.g:608:139: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updateExpr"
    // EsperEPL2Grammar.g:611:1: updateExpr : UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token UPDATE85=null;
        Token ISTREAM86=null;
        Token AS88=null;
        Token SET89=null;
        Token COMMA91=null;
        Token WHERE93=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier87 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment90 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment92 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause94 = null;


        CommonTree i_tree=null;
        CommonTree UPDATE85_tree=null;
        CommonTree ISTREAM86_tree=null;
        CommonTree AS88_tree=null;
        CommonTree SET89_tree=null;
        CommonTree COMMA91_tree=null;
        CommonTree WHERE93_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:612:2: ( UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:612:4: UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE85=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE85);

            ISTREAM86=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM86);

            pushFollow(FOLLOW_classIdentifier_in_updateExpr2317);
            classIdentifier87=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier87.getTree());
            // EsperEPL2Grammar.g:612:35: ( AS i= IDENT | i= IDENT )?
            int alt32=3;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:612:36: AS i= IDENT
                    {
                    AS88=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS88);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2324); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:612:49: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET89=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET89);

            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2338);
            onSetAssignment90=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment90.getTree());
            // EsperEPL2Grammar.g:613:23: ( COMMA onSetAssignment )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==COMMA) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // EsperEPL2Grammar.g:613:24: COMMA onSetAssignment
            	    {
            	    COMMA91=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2341); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA91);

            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2343);
            	    onSetAssignment92=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment92.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);

            // EsperEPL2Grammar.g:614:3: ( WHERE whereClause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==WHERE) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // EsperEPL2Grammar.g:614:4: WHERE whereClause
                    {
                    WHERE93=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE93);

                    pushFollow(FOLLOW_whereClause_in_updateExpr2353);
                    whereClause94=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause94.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, onSetAssignment, whereClause, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 615:3: -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:615:6: ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:615:36: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:615:57: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "updateExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:618:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT95=null;
        Token SELECT97=null;
        Token DISTINCT98=null;
        Token WHERE101=null;
        Token GROUP103=null;
        Token BY104=null;
        Token HAVING106=null;
        Token ORDER108=null;
        Token BY109=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr96 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList99 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom100 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause102 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr105 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause107 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr110 = null;


        CommonTree INSERT95_tree=null;
        CommonTree SELECT97_tree=null;
        CommonTree DISTINCT98_tree=null;
        CommonTree WHERE101_tree=null;
        CommonTree GROUP103_tree=null;
        CommonTree BY104_tree=null;
        CommonTree HAVING106_tree=null;
        CommonTree ORDER108_tree=null;
        CommonTree BY109_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:621:2: ( ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) )
            // EsperEPL2Grammar.g:621:4: ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )?
            {
            // EsperEPL2Grammar.g:621:4: ( INSERT insertIntoExpr )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==INSERT) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // EsperEPL2Grammar.g:621:5: INSERT insertIntoExpr
                    {
                    INSERT95=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT95);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2403);
                    insertIntoExpr96=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr96.getTree());

                    }
                    break;

            }

            SELECT97=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT97);

            // EsperEPL2Grammar.g:622:10: ( DISTINCT )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==DISTINCT) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:622:10: DISTINCT
                    {
                    DISTINCT98=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT98);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_onSelectExpr2414);
            selectionList99=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList99.getTree());
            // EsperEPL2Grammar.g:623:3: ( onExprFrom )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==FROM) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:623:3: onExprFrom
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2418);
                    onExprFrom100=onExprFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom100.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:624:3: ( WHERE whereClause )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:624:4: WHERE whereClause
                    {
                    WHERE101=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE101);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2426);
                    whereClause102=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause102.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:625:3: ( GROUP BY groupByListExpr )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==GROUP) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // EsperEPL2Grammar.g:625:4: GROUP BY groupByListExpr
                    {
                    GROUP103=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2435); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP103);

                    BY104=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2437); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY104);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2439);
                    groupByListExpr105=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr105.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:626:3: ( HAVING havingClause )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==HAVING) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // EsperEPL2Grammar.g:626:4: HAVING havingClause
                    {
                    HAVING106=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2446); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING106);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2448);
                    havingClause107=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause107.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:627:3: ( ORDER BY orderByListExpr )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==ORDER) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // EsperEPL2Grammar.g:627:4: ORDER BY orderByListExpr
                    {
                    ORDER108=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER108);

                    BY109=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2457); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY109);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2459);
                    orderByListExpr110=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr110.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, havingClause, DISTINCT, orderByListExpr, groupByListExpr, onExprFrom, insertIntoExpr, selectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 628:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
            {
                // EsperEPL2Grammar.g:628:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:628:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                // EsperEPL2Grammar.g:628:39: ( DISTINCT )?
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:628:63: ( onExprFrom )?
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());

                }
                stream_onExprFrom.reset();
                // EsperEPL2Grammar.g:628:75: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:628:88: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:628:105: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:628:119: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectInsertExpr"
    // EsperEPL2Grammar.g:631:1: onSelectInsertExpr : INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT111=null;
        Token SELECT113=null;
        Token WHERE115=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr112 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList114 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause116 = null;


        CommonTree INSERT111_tree=null;
        CommonTree SELECT113_tree=null;
        CommonTree WHERE115_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            // EsperEPL2Grammar.g:634:2: ( INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) )
            // EsperEPL2Grammar.g:634:4: INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )?
            {
            INSERT111=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT111);

            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2517);
            insertIntoExpr112=insertIntoExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr112.getTree());
            SELECT113=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr2521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT113);

            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr2523);
            selectionList114=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList114.getTree());
            // EsperEPL2Grammar.g:636:3: ( WHERE whereClause )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==WHERE) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // EsperEPL2Grammar.g:636:4: WHERE whereClause
                    {
                    WHERE115=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr2528); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE115);

                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr2530);
                    whereClause116=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause116.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, selectionList, insertIntoExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 637:3: -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
            {
                // EsperEPL2Grammar.g:637:6: ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:637:59: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectInsertExpr"

    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputClauseInsert"
    // EsperEPL2Grammar.g:640:1: outputClauseInsert : OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) ;
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        Token a=null;
        Token OUTPUT117=null;

        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT117_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

        try {
            // EsperEPL2Grammar.g:641:2: ( OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) )
            // EsperEPL2Grammar.g:641:4: OUTPUT (f= FIRST | a= ALL )
            {
            OUTPUT117=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert2561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT117);

            // EsperEPL2Grammar.g:641:11: (f= FIRST | a= ALL )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==FIRST) ) {
                alt43=1;
            }
            else if ( (LA43_0==ALL) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:641:12: f= FIRST
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert2566); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:641:22: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert2572); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;

            }



            // AST REWRITE
            // elements: a, f
            // token labels: f, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 642:3: -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
            {
                // EsperEPL2Grammar.g:642:6: ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);

                // EsperEPL2Grammar.g:642:32: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());

                }
                stream_f.reset();
                // EsperEPL2Grammar.g:642:36: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputClauseInsert"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:645:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE118=null;
        Token WHERE120=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom119 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause121 = null;


        CommonTree DELETE118_tree=null;
        CommonTree WHERE120_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:648:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:648:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE118=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE118);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2618);
            onExprFrom119=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom119.getTree());
            // EsperEPL2Grammar.g:650:3: ( WHERE whereClause )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==WHERE) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // EsperEPL2Grammar.g:650:4: WHERE whereClause
                    {
                    WHERE120=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2623); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE120);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2625);
                    whereClause121=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause121.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, onExprFrom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 651:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:651:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:651:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:654:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET122=null;
        Token COMMA124=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment123 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment125 = null;


        CommonTree SET122_tree=null;
        CommonTree COMMA124_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:657:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:657:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET122=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2665); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET122);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2667);
            onSetAssignment123=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment123.getTree());
            // EsperEPL2Grammar.g:657:24: ( COMMA onSetAssignment )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==COMMA) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // EsperEPL2Grammar.g:657:25: COMMA onSetAssignment
            	    {
            	    COMMA124=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2670); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA124);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2672);
            	    onSetAssignment125=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment125.getTree());

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 658:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:658:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:661:1: onSetAssignment : i= IDENT EQUALS expression -> ^( ON_SET_EXPR_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS126=null;
        EsperEPL2GrammarParser.expression_return expression127 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS126_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:662:2: (i= IDENT EQUALS expression -> ^( ON_SET_EXPR_ITEM $i expression ) )
            // EsperEPL2Grammar.g:662:4: i= IDENT EQUALS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onSetAssignment2699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            EQUALS126=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS126);

            pushFollow(FOLLOW_expression_in_onSetAssignment2703);
            expression127=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression127.getTree());


            // AST REWRITE
            // elements: expression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 663:3: -> ^( ON_SET_EXPR_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:663:6: ^( ON_SET_EXPR_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:666:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM128=null;
        Token AS129=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM128_tree=null;
        CommonTree AS129_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:667:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:667:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM128=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2729); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM128);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:667:17: ( AS i= IDENT | i= IDENT )?
            int alt46=3;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==AS) ) {
                alt46=1;
            }
            else if ( (LA46_0==IDENT) ) {
                alt46=2;
            }
            switch (alt46) {
                case 1 :
                    // EsperEPL2Grammar.g:667:18: AS i= IDENT
                    {
                    AS129=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS129);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:667:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, n
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 668:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:668:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:668:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:671:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE130=null;
        Token WINDOW131=null;
        Token DOT132=null;
        Token DOT134=null;
        Token AS136=null;
        Token LPAREN138=null;
        Token RPAREN140=null;
        Token WHERE141=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression133 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression135 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter137 = null;

        EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList139 = null;

        EsperEPL2GrammarParser.expression_return expression142 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE130_tree=null;
        CommonTree WINDOW131_tree=null;
        CommonTree DOT132_tree=null;
        CommonTree DOT134_tree=null;
        CommonTree AS136_tree=null;
        CommonTree LPAREN138_tree=null;
        CommonTree RPAREN140_tree=null;
        CommonTree WHERE141_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_createWindowColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnList");
        try {
            // EsperEPL2Grammar.g:672:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) )
            // EsperEPL2Grammar.g:672:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE130=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2774); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE130);

            WINDOW131=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW131);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr2780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:672:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==DOT) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // EsperEPL2Grammar.g:672:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT132=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT132);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2785);
                    viewExpression133=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression133.getTree());
                    // EsperEPL2Grammar.g:672:46: ( DOT viewExpression )*
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( (LA47_0==DOT) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:672:47: DOT viewExpression
                    	    {
                    	    DOT134=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2788); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT134);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2790);
                    	    viewExpression135=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression135.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop47;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:672:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt49=3;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==RETAINUNION) ) {
                alt49=1;
            }
            else if ( (LA49_0==RETAININTERSECTION) ) {
                alt49=2;
            }
            switch (alt49) {
                case 1 :
                    // EsperEPL2Grammar.g:672:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr2799); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:672:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr2803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:672:110: ( AS )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==AS) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // EsperEPL2Grammar.g:672:110: AS
                    {
                    AS136=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr2807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS136);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:673:5: ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==SELECT||LA51_0==IDENT||LA51_0==TICKED_STRING_LITERAL) ) {
                alt51=1;
            }
            else if ( (LA51_0==LPAREN) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // EsperEPL2Grammar.g:674:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr2822);
                    createWindowExprModelAfter137=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter137.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:675:10: LPAREN createWindowColumnList RPAREN
                    {
                    LPAREN138=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr2837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN138);

                    pushFollow(FOLLOW_createWindowColumnList_in_createWindowExpr2839);
                    createWindowColumnList139=createWindowColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowColumnList.add(createWindowColumnList139.getTree());
                    RPAREN140=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr2841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN140);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:677:5: (i1= INSERT ( WHERE expression )? )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==INSERT) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // EsperEPL2Grammar.g:677:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr2858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:677:16: ( WHERE expression )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==WHERE) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // EsperEPL2Grammar.g:677:17: WHERE expression
                            {
                            WHERE141=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr2861); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE141);

                            pushFollow(FOLLOW_expression_in_createWindowExpr2863);
                            expression142=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression142.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: ri, INSERT, ri, createWindowExprModelAfter, createWindowColumnList, viewExpression, ru, createWindowColumnList, expression, viewExpression, createWindowExprModelAfter, ru, i, i
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 678:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:678:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:678:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:678:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:678:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:678:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:678:98: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();
                // EsperEPL2Grammar.g:679:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:679:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 680:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
            {
                // EsperEPL2Grammar.g:680:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:680:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:680:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:680:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:680:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:680:84: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:683:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT143=null;
        Token FROM145=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList144 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier146 = null;


        CommonTree SELECT143_tree=null;
        CommonTree FROM145_tree=null;

        try {
            // EsperEPL2Grammar.g:684:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:684:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:684:4: ( SELECT createSelectionList FROM )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==SELECT) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // EsperEPL2Grammar.g:684:5: SELECT createSelectionList FROM
                    {
                    SELECT143=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter2950); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter2953);
                    createSelectionList144=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList144.getTree());
                    FROM145=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter2955); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter2960);
            classIdentifier146=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier146.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:687:1: createVariableExpr : CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token n=null;
        Token CREATE147=null;
        Token VARIABLE148=null;
        Token EQUALS149=null;
        EsperEPL2GrammarParser.expression_return expression150 = null;


        CommonTree t_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE147_tree=null;
        CommonTree VARIABLE148_tree=null;
        CommonTree EQUALS149_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:688:2: ( CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) )
            // EsperEPL2Grammar.g:688:4: CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )?
            {
            CREATE147=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr2973); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE147);

            VARIABLE148=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr2975); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE148);

            t=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(t);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:688:36: ( EQUALS expression )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==EQUALS) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // EsperEPL2Grammar.g:688:37: EQUALS expression
                    {
                    EQUALS149=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr2986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS149);

                    pushFollow(FOLLOW_expression_in_createVariableExpr2988);
                    expression150=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression150.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, t, n
            // token labels: t, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 689:3: -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
            {
                // EsperEPL2Grammar.g:689:6: ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:689:35: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createWindowColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnList"
    // EsperEPL2Grammar.g:692:1: createWindowColumnList : createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnList_return retval = new EsperEPL2GrammarParser.createWindowColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA152=null;
        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement151 = null;

        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement153 = null;


        CommonTree COMMA152_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createWindowColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnListElement");
         paraphrases.push("create window column list"); 
        try {
            // EsperEPL2Grammar.g:695:2: ( createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) )
            // EsperEPL2Grammar.g:695:4: createWindowColumnListElement ( COMMA createWindowColumnListElement )*
            {
            pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList3031);
            createWindowColumnListElement151=createWindowColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement151.getTree());
            // EsperEPL2Grammar.g:695:34: ( COMMA createWindowColumnListElement )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==COMMA) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // EsperEPL2Grammar.g:695:35: COMMA createWindowColumnListElement
            	    {
            	    COMMA152=(Token)match(input,COMMA,FOLLOW_COMMA_in_createWindowColumnList3034); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA152);

            	    pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList3036);
            	    createWindowColumnListElement153=createWindowColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement153.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);



            // AST REWRITE
            // elements: createWindowColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 696:3: -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:696:6: ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE_LIST, "CREATE_WINDOW_COL_TYPE_LIST"), root_1);

                if ( !(stream_createWindowColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createWindowColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnListElement.nextTree());

                }
                stream_createWindowColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnList"

    public static class createWindowColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnListElement"
    // EsperEPL2Grammar.g:699:1: createWindowColumnListElement : name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) ;
    public final EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnListElement_return retval = new EsperEPL2GrammarParser.createWindowColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token type=null;

        CommonTree name_tree=null;
        CommonTree type_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            // EsperEPL2Grammar.g:700:2: (name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) )
            // EsperEPL2Grammar.g:700:7: name= IDENT type= IDENT
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement3066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            type=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement3070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(type);



            // AST REWRITE
            // elements: name, type
            // token labels: name, type
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_type=new RewriteRuleTokenStream(adaptor,"token type",type);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 701:3: -> ^( CREATE_WINDOW_COL_TYPE $name $type)
            {
                // EsperEPL2Grammar.g:701:6: ^( CREATE_WINDOW_COL_TYPE $name $type)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE, "CREATE_WINDOW_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_type.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:704:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA155=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement154 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement156 = null;


        CommonTree COMMA155_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:707:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:707:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3108);
            createSelectionListElement154=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement154.getTree());
            // EsperEPL2Grammar.g:707:31: ( COMMA createSelectionListElement )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==COMMA) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // EsperEPL2Grammar.g:707:32: COMMA createSelectionListElement
            	    {
            	    COMMA155=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3111); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA155);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3113);
            	    createSelectionListElement156=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement156.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 708:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:708:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:711:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS158=null;
        Token AS160=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty157 = null;

        EsperEPL2GrammarParser.constant_return constant159 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS158_tree=null;
        CommonTree AS160_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:712:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt59=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt59=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt59=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt59=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }

            switch (alt59) {
                case 1 :
                    // EsperEPL2Grammar.g:712:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 713:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:714:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3154);
                    eventProperty157=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty157.getTree());
                    // EsperEPL2Grammar.g:714:18: ( AS i= IDENT )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==AS) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // EsperEPL2Grammar.g:714:19: AS i= IDENT
                            {
                            AS158=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3157); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS158);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3161); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: i, eventProperty
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 715:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:715:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:715:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:716:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3182);
                    constant159=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant159.getTree());
                    AS160=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS160);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: constant, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 717:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:717:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:717:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:720:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO161=null;
        EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList162 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO161_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_insertIntoColumnList=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoColumnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:723:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) )
            // EsperEPL2Grammar.g:723:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )?
            {
            // EsperEPL2Grammar.g:723:4: (s= ISTREAM | s= RSTREAM )?
            int alt60=3;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==ISTREAM) ) {
                alt60=1;
            }
            else if ( (LA60_0==RSTREAM) ) {
                alt60=2;
            }
            switch (alt60) {
                case 1 :
                    // EsperEPL2Grammar.g:723:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3227); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:723:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO161=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO161);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:723:42: ( insertIntoColumnList )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==LPAREN) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // EsperEPL2Grammar.g:723:43: insertIntoColumnList
                    {
                    pushFollow(FOLLOW_insertIntoColumnList_in_insertIntoExpr3244);
                    insertIntoColumnList162=insertIntoColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoColumnList.add(insertIntoColumnList162.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: insertIntoColumnList, i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 724:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
            {
                // EsperEPL2Grammar.g:724:6: ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:724:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:724:31: ( insertIntoColumnList )?
                if ( stream_insertIntoColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoColumnList.nextTree());

                }
                stream_insertIntoColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class insertIntoColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoColumnList"
    // EsperEPL2Grammar.g:727:1: insertIntoColumnList : LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoColumnList_return retval = new EsperEPL2GrammarParser.insertIntoColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN163=null;
        Token IDENT164=null;
        Token COMMA165=null;
        Token IDENT166=null;
        Token RPAREN167=null;

        CommonTree LPAREN163_tree=null;
        CommonTree IDENT164_tree=null;
        CommonTree COMMA165_tree=null;
        CommonTree IDENT166_tree=null;
        CommonTree RPAREN167_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");

        try {
            // EsperEPL2Grammar.g:728:2: ( LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:728:5: LPAREN IDENT ( COMMA IDENT )* RPAREN
            {
            LPAREN163=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoColumnList3278); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN163);

            IDENT164=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList3280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT164);

            // EsperEPL2Grammar.g:728:18: ( COMMA IDENT )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==COMMA) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // EsperEPL2Grammar.g:728:19: COMMA IDENT
            	    {
            	    COMMA165=(Token)match(input,COMMA,FOLLOW_COMMA_in_insertIntoColumnList3283); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA165);

            	    IDENT166=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList3285); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT166);


            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            RPAREN167=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoColumnList3289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN167);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 729:3: -> ^( INSERTINTO_EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:729:6: ^( INSERTINTO_EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPRCOL, "INSERTINTO_EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:729:27: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoColumnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:732:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression168 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin169 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList170 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:735:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:735:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause3324);
            streamExpression168=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression168.getTree());
            // EsperEPL2Grammar.g:735:21: ( regularJoin | outerJoinList )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==EOF||LA63_0==WHERE||(LA63_0>=GROUP && LA63_0<=HAVING)||LA63_0==OUTPUT||LA63_0==ORDER||LA63_0==ROW_LIMIT_EXPR||LA63_0==MATCH_RECOGNIZE||LA63_0==COMMA) ) {
                alt63=1;
            }
            else if ( ((LA63_0>=INNER && LA63_0<=FULL)) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }
            switch (alt63) {
                case 1 :
                    // EsperEPL2Grammar.g:735:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause3327);
                    regularJoin169=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin169.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:735:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause3331);
                    outerJoinList170=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList170.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:738:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA171=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression172 = null;


        CommonTree COMMA171_tree=null;

        try {
            // EsperEPL2Grammar.g:739:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:739:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:739:4: ( COMMA streamExpression )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==COMMA) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // EsperEPL2Grammar.g:739:5: COMMA streamExpression
            	    {
            	    COMMA171=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin3345); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin3348);
            	    streamExpression172=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression172.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:742:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin173 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin174 = null;



        try {
            // EsperEPL2Grammar.g:743:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:743:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList3362);
            outerJoin173=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin173.getTree());
            // EsperEPL2Grammar.g:743:14: ( outerJoin )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( ((LA65_0>=INNER && LA65_0<=FULL)) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // EsperEPL2Grammar.g:743:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList3365);
            	    outerJoin174=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin174.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:746:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER175=null;
        Token JOIN176=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression177 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent178 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER175_tree=null;
        CommonTree JOIN176_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:749:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:749:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:749:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( ((LA68_0>=JOIN && LA68_0<=FULL)) ) {
                alt68=1;
            }
            else if ( (LA68_0==INNER) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // EsperEPL2Grammar.g:750:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:750:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( ((LA67_0>=LEFT && LA67_0<=FULL)) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // EsperEPL2Grammar.g:750:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:750:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt66=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt66=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt66=2;
                                }
                                break;
                            case FULL:
                                {
                                alt66=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 66, 0, input);

                                throw nvae;
                            }

                            switch (alt66) {
                                case 1 :
                                    // EsperEPL2Grammar.g:750:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin3408); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:750:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin3412); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:750:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin3416); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER175=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin3419); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER175);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:751:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:751:14: (i= INNER )
                    // EsperEPL2Grammar.g:751:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin3440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN176=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin3454); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN176);

            pushFollow(FOLLOW_streamExpression_in_outerJoin3456);
            streamExpression177=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression177.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin3458);
            outerJoinIdent178=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent178.getTree());


            // AST REWRITE
            // elements: streamExpression, streamExpression, streamExpression, outerJoinIdent, outerJoinIdent, streamExpression, outerJoinIdent, outerJoinIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 753:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:753:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 754:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:754:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 755:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:755:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 756:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:756:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:759:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON179=null;
        Token AND_EXPR181=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair180 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair182 = null;


        CommonTree ON179_tree=null;
        CommonTree AND_EXPR181_tree=null;

        try {
            // EsperEPL2Grammar.g:760:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:760:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON179=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent3523); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3526);
            outerJoinIdentPair180=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair180.getTree());
            // EsperEPL2Grammar.g:760:27: ( AND_EXPR outerJoinIdentPair )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==AND_EXPR) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // EsperEPL2Grammar.g:760:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR181=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent3529); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3532);
            	    outerJoinIdentPair182=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair182.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:763:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS184=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty183 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty185 = null;


        CommonTree EQUALS184_tree=null;

        try {
            // EsperEPL2Grammar.g:764:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:764:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3547);
            eventProperty183=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty183.getTree());
            EQUALS184=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair3549); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3552);
            eventProperty185=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty185.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:767:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression186 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:770:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:770:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause3574);
            evalOrExpression186=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression186.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 771:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:771:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:774:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList187 = null;


        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:777:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) )
            // EsperEPL2Grammar.g:777:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList
            {
            // EsperEPL2Grammar.g:777:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt70=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt70=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt70=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt70=3;
                    }
                    break;
            }

            switch (alt70) {
                case 1 :
                    // EsperEPL2Grammar.g:777:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause3610); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:777:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause3616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:777:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause3622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:777:43: (d= DISTINCT )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==DISTINCT) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // EsperEPL2Grammar.g:777:43: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause3628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause3631);
            selectionList187=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList187.getTree());


            // AST REWRITE
            // elements: s, d, selectionList
            // token labels: d, s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 778:3: -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
            {
                // EsperEPL2Grammar.g:778:6: ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:778:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:778:27: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:781:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA189=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement188 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement190 = null;


        CommonTree COMMA189_tree=null;

        try {
            // EsperEPL2Grammar.g:782:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:782:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList3662);
            selectionListElement188=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement188.getTree());
            // EsperEPL2Grammar.g:782:25: ( COMMA selectionListElement )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==COMMA) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // EsperEPL2Grammar.g:782:26: COMMA selectionListElement
            	    {
            	    COMMA189=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList3665); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList3668);
            	    selectionListElement190=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement190.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:785:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS193=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector191 = null;

        EsperEPL2GrammarParser.expression_return expression192 = null;


        CommonTree s_tree=null;
        CommonTree AS193_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:787:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt74=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt74=1;
                }
                break;
            case IDENT:
                {
                int LA74_2 = input.LA(2);

                if ( (LA74_2==DOT) ) {
                    int LA74_61 = input.LA(3);

                    if ( (LA74_61==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt74=2;
                    }
                    else if ( (LA74_61==WINDOW||LA74_61==ESCAPE||LA74_61==EVERY_EXPR||(LA74_61>=SUM && LA74_61<=COUNT)||LA74_61==OUTER||(LA74_61>=JOIN && LA74_61<=FULL)||(LA74_61>=EVENTS && LA74_61<=LAST)||(LA74_61>=UNIDIRECTIONAL && LA74_61<=PRIOR)||(LA74_61>=WEEKDAY && LA74_61<=CAST)||LA74_61==SNAPSHOT||(LA74_61>=VARIABLE && LA74_61<=AT)||(LA74_61>=DEFINE && LA74_61<=MATCHES)||LA74_61==IDENT||LA74_61==TICKED_STRING_LITERAL) ) {
                        alt74=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 74, 61, input);

                        throw nvae;
                    }
                }
                else if ( (LA74_2==EOF||(LA74_2>=IN_SET && LA74_2<=REGEXP)||(LA74_2>=OR_EXPR && LA74_2<=NOT_EXPR)||(LA74_2>=WHERE && LA74_2<=AS)||LA74_2==FROM||LA74_2==IS||(LA74_2>=GROUP && LA74_2<=HAVING)||LA74_2==OUTPUT||LA74_2==INSERT||LA74_2==ORDER||LA74_2==COMMA||LA74_2==EQUALS||LA74_2==LPAREN||(LA74_2>=STAR && LA74_2<=LBRACK)||(LA74_2>=BAND && LA74_2<=MOD)||LA74_2==ESCAPECHAR) ) {
                    alt74=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 74, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt74=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }

            switch (alt74) {
                case 1 :
                    // EsperEPL2Grammar.g:787:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement3694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 787:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:788:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement3710);
                    streamSelector191=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector191.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:789:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement3715);
                    expression192=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression192.getTree());
                    // EsperEPL2Grammar.g:789:15: ( AS i= keywordAllowedIdent )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==AS) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // EsperEPL2Grammar.g:789:16: AS i= keywordAllowedIdent
                            {
                            AS193=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement3718); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS193);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement3722);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 790:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:790:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 791:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:791:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 792:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:792:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:795:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT194=null;
        Token STAR195=null;
        Token AS196=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT194_tree=null;
        CommonTree STAR195_tree=null;
        CommonTree AS196_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:796:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:796:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT194=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector3780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT194);

            STAR195=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector3782); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR195);

            // EsperEPL2Grammar.g:796:21: ( AS i= IDENT )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==AS) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // EsperEPL2Grammar.g:796:22: AS i= IDENT
                    {
                    AS196=(Token)match(input,AS,FOLLOW_AS_in_streamSelector3785); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS196);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3789); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 797:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:797:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:797:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:801:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT201=null;
        Token DOT203=null;
        Token AS205=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression197 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression198 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression199 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression200 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression202 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression204 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT201_tree=null;
        CommonTree DOT203_tree=null;
        CommonTree AS205_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:802:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:802:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:802:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt76=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA76_1 = input.LA(2);

                if ( (LA76_1==EOF||(LA76_1>=WHERE && LA76_1<=AS)||(LA76_1>=INNER && LA76_1<=ON)||(LA76_1>=GROUP && LA76_1<=HAVING)||LA76_1==OUTPUT||LA76_1==ORDER||(LA76_1>=UNIDIRECTIONAL && LA76_1<=RETAININTERSECTION)||LA76_1==ROW_LIMIT_EXPR||LA76_1==MATCH_RECOGNIZE||(LA76_1>=COMMA && LA76_1<=LPAREN)||LA76_1==LBRACK) ) {
                    alt76=1;
                }
                else if ( (LA76_1==COLON) ) {
                    alt76=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt76=1;
                }
                break;
            case PATTERN:
                {
                alt76=2;
                }
                break;
            case SQL:
                {
                alt76=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }

            switch (alt76) {
                case 1 :
                    // EsperEPL2Grammar.g:802:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression3820);
                    eventFilterExpression197=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression197.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:802:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression3824);
                    patternInclusionExpression198=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression198.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:802:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression3828);
                    databaseJoinExpression199=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression199.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:802:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression3832);
                    methodJoinExpression200=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression200.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:803:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==DOT) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // EsperEPL2Grammar.g:803:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT201=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT201);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression3841);
                    viewExpression202=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression202.getTree());
                    // EsperEPL2Grammar.g:803:23: ( DOT viewExpression )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==DOT) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:803:24: DOT viewExpression
                    	    {
                    	    DOT203=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3844); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT203);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression3846);
                    	    viewExpression204=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression204.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:803:47: ( AS i= IDENT | i= IDENT )?
            int alt79=3;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==AS) ) {
                alt79=1;
            }
            else if ( (LA79_0==IDENT) ) {
                alt79=2;
            }
            switch (alt79) {
                case 1 :
                    // EsperEPL2Grammar.g:803:48: AS i= IDENT
                    {
                    AS205=(Token)match(input,AS,FOLLOW_AS_in_streamExpression3853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS205);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:803:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3863); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:803:71: (u= UNIDIRECTIONAL )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==UNIDIRECTIONAL) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // EsperEPL2Grammar.g:803:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression3870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:803:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt81=3;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==RETAINUNION) ) {
                alt81=1;
            }
            else if ( (LA81_0==RETAININTERSECTION) ) {
                alt81=2;
            }
            switch (alt81) {
                case 1 :
                    // EsperEPL2Grammar.g:803:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression3877); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:803:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression3881); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: viewExpression, databaseJoinExpression, methodJoinExpression, u, ri, ru, patternInclusionExpression, i, eventFilterExpression
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 804:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:804:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:804:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:804:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:804:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:804:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:805:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:805:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:805:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:805:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:805:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecog"
    // EsperEPL2Grammar.g:816:1: matchRecog : MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) ;
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MATCH_RECOGNIZE206=null;
        Token LPAREN207=null;
        Token RPAREN215=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy208 = null;

        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures209 = null;

        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection210 = null;

        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip211 = null;

        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern212 = null;

        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval213 = null;

        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine214 = null;


        CommonTree MATCH_RECOGNIZE206_tree=null;
        CommonTree LPAREN207_tree=null;
        CommonTree RPAREN215_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            // EsperEPL2Grammar.g:817:2: ( MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) )
            // EsperEPL2Grammar.g:817:4: MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN
            {
            MATCH_RECOGNIZE206=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog3944); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE206);

            LPAREN207=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog3958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN207);

            // EsperEPL2Grammar.g:819:4: ( matchRecogPartitionBy )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==PARTITION) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // EsperEPL2Grammar.g:819:4: matchRecogPartitionBy
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog3964);
                    matchRecogPartitionBy208=matchRecogPartitionBy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy208.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog3971);
            matchRecogMeasures209=matchRecogMeasures();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures209.getTree());
            // EsperEPL2Grammar.g:821:4: ( matchRecogMatchesSelection )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==ALL) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // EsperEPL2Grammar.g:821:4: matchRecogMatchesSelection
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog3976);
                    matchRecogMatchesSelection210=matchRecogMatchesSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection210.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:822:4: ( matchRecogMatchesAfterSkip )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==AFTER) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // EsperEPL2Grammar.g:822:4: matchRecogMatchesAfterSkip
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog3982);
                    matchRecogMatchesAfterSkip211=matchRecogMatchesAfterSkip();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip211.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog3988);
            matchRecogPattern212=matchRecogPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern212.getTree());
            // EsperEPL2Grammar.g:824:4: ( matchRecogMatchesInterval )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==IDENT) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // EsperEPL2Grammar.g:824:4: matchRecogMatchesInterval
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog3994);
                    matchRecogMatchesInterval213=matchRecogMatchesInterval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval213.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4000);
            matchRecogDefine214=matchRecogDefine();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine214.getTree());
            RPAREN215=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN215);



            // AST REWRITE
            // elements: MATCH_RECOGNIZE, matchRecogPattern, matchRecogDefine, matchRecogMatchesSelection, matchRecogMeasures, matchRecogMatchesInterval, matchRecogMatchesAfterSkip, matchRecogPartitionBy
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 827:3: -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
            {
                // EsperEPL2Grammar.g:827:6: ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);

                // EsperEPL2Grammar.g:827:24: ( matchRecogPartitionBy )?
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());

                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                // EsperEPL2Grammar.g:827:66: ( matchRecogMatchesSelection )?
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());

                }
                stream_matchRecogMatchesSelection.reset();
                // EsperEPL2Grammar.g:827:94: ( matchRecogMatchesAfterSkip )?
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());

                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                // EsperEPL2Grammar.g:827:140: ( matchRecogMatchesInterval )?
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());

                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecog"

    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPartitionBy"
    // EsperEPL2Grammar.g:830:1: matchRecogPartitionBy : PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PARTITION216=null;
        Token BY217=null;
        Token COMMA219=null;
        EsperEPL2GrammarParser.expression_return expression218 = null;

        EsperEPL2GrammarParser.expression_return expression220 = null;


        CommonTree PARTITION216_tree=null;
        CommonTree BY217_tree=null;
        CommonTree COMMA219_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:831:2: ( PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) )
            // EsperEPL2Grammar.g:831:4: PARTITION BY expression ( COMMA expression )*
            {
            PARTITION216=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION216);

            BY217=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY217);

            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4048);
            expression218=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression218.getTree());
            // EsperEPL2Grammar.g:831:28: ( COMMA expression )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==COMMA) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // EsperEPL2Grammar.g:831:29: COMMA expression
            	    {
            	    COMMA219=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4051); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA219);

            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4053);
            	    expression220=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression220.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 832:3: -> ^( MATCHREC_PARTITION ( expression )+ )
            {
                // EsperEPL2Grammar.g:832:6: ^( MATCHREC_PARTITION ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPartitionBy"

    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasures"
    // EsperEPL2Grammar.g:835:1: matchRecogMeasures : MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MEASURES221=null;
        Token COMMA223=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem222 = null;

        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem224 = null;


        CommonTree MEASURES221_tree=null;
        CommonTree COMMA223_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            // EsperEPL2Grammar.g:836:2: ( MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) )
            // EsperEPL2Grammar.g:836:4: MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )*
            {
            MEASURES221=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES221);

            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4084);
            matchRecogMeasureItem222=matchRecogMeasureItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem222.getTree());
            // EsperEPL2Grammar.g:836:35: ( COMMA matchRecogMeasureItem )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==COMMA) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // EsperEPL2Grammar.g:836:36: COMMA matchRecogMeasureItem
            	    {
            	    COMMA223=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4087); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA223);

            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4089);
            	    matchRecogMeasureItem224=matchRecogMeasureItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem224.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogMeasureItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 837:3: -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
            {
                // EsperEPL2Grammar.g:837:6: ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);

                // EsperEPL2Grammar.g:837:26: ( matchRecogMeasureItem )*
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());

                }
                stream_matchRecogMeasureItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasures"

    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasureItem"
    // EsperEPL2Grammar.g:840:1: matchRecogMeasureItem : expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS226=null;
        EsperEPL2GrammarParser.expression_return expression225 = null;


        CommonTree i_tree=null;
        CommonTree AS226_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:841:2: ( expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) )
            // EsperEPL2Grammar.g:841:4: expression ( AS (i= IDENT )? )?
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4114);
            expression225=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression225.getTree());
            // EsperEPL2Grammar.g:841:15: ( AS (i= IDENT )? )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==AS) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // EsperEPL2Grammar.g:841:16: AS (i= IDENT )?
                    {
                    AS226=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS226);

                    // EsperEPL2Grammar.g:841:19: (i= IDENT )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==IDENT) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // EsperEPL2Grammar.g:841:20: i= IDENT
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4122); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 842:3: -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
            {
                // EsperEPL2Grammar.g:842:6: ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:842:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasureItem"

    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesSelection"
    // EsperEPL2Grammar.g:845:1: matchRecogMatchesSelection : ALL MATCHES ;
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL227=null;
        Token MATCHES228=null;

        CommonTree ALL227_tree=null;
        CommonTree MATCHES228_tree=null;

        try {
            // EsperEPL2Grammar.g:846:2: ( ALL MATCHES )
            // EsperEPL2Grammar.g:846:4: ALL MATCHES
            {
            root_0 = (CommonTree)adaptor.nil();

            ALL227=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL227_tree = (CommonTree)adaptor.create(ALL227);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL227_tree, root_0);
            }
            MATCHES228=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4156); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesSelection"

    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPattern"
    // EsperEPL2Grammar.g:849:1: matchRecogPattern : PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) ;
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN229=null;
        Token LPAREN230=null;
        Token RPAREN232=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration231 = null;


        CommonTree PATTERN229_tree=null;
        CommonTree LPAREN230_tree=null;
        CommonTree RPAREN232_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:850:2: ( PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) )
            // EsperEPL2Grammar.g:850:4: PATTERN LPAREN matchRecogPatternAlteration RPAREN
            {
            PATTERN229=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN229);

            LPAREN230=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN230);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4175);
            matchRecogPatternAlteration231=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration231.getTree());
            RPAREN232=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN232);



            // AST REWRITE
            // elements: matchRecogPatternAlteration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 851:3: -> ^( MATCHREC_PATTERN matchRecogPatternAlteration )
            {
                // EsperEPL2Grammar.g:851:6: ^( MATCHREC_PATTERN matchRecogPatternAlteration )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPattern"

    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesAfterSkip"
    // EsperEPL2Grammar.g:854:1: matchRecogMatchesAfterSkip : AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AFTER233=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;


        CommonTree AFTER233_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            // EsperEPL2Grammar.g:855:2: ( AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) )
            // EsperEPL2Grammar.g:855:4: AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent
            {
            AFTER233=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER233);

            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4203);
            i1=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4207);
            i2=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4211);
            i3=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4215);
            i4=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4219);
            i5=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());


            // AST REWRITE
            // elements: i5, i3, i2, i4, i1
            // token labels: 
            // rule labels: retval, i5, i4, i3, i2, i1
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"token i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"token i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"token i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"token i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"token i1",i1!=null?i1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 856:3: -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
            {
                // EsperEPL2Grammar.g:856:6: ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);

                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesAfterSkip"

    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesInterval"
    // EsperEPL2Grammar.g:859:1: matchRecogMatchesInterval : i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod234 = null;


        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            // EsperEPL2Grammar.g:860:2: (i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) )
            // EsperEPL2Grammar.g:860:4: i= IDENT timePeriod
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval4255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval4257);
            timePeriod234=timePeriod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod234.getTree());


            // AST REWRITE
            // elements: i, timePeriod
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 861:3: -> ^( MATCHREC_INTERVAL $i timePeriod )
            {
                // EsperEPL2Grammar.g:861:6: ^( MATCHREC_INTERVAL $i timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesInterval"

    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAlteration"
    // EsperEPL2Grammar.g:864:1: matchRecogPatternAlteration : matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat ;
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat235 = null;

        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat236 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            // EsperEPL2Grammar.g:865:2: ( matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat )
            // EsperEPL2Grammar.g:865:4: matchRecogPatternConcat (o= BOR matchRecogPatternConcat )*
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4283);
            matchRecogPatternConcat235=matchRecogPatternConcat();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat235.getTree());
            // EsperEPL2Grammar.g:865:28: (o= BOR matchRecogPatternConcat )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==BOR) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // EsperEPL2Grammar.g:865:29: o= BOR matchRecogPatternConcat
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration4288); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);

            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4290);
            	    matchRecogPatternConcat236=matchRecogPatternConcat();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat236.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternConcat, matchRecogPatternConcat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 866:3: -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:866:20: ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);

                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());

                }
                stream_matchRecogPatternConcat.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 867:3: -> matchRecogPatternConcat
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAlteration"

    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternConcat"
    // EsperEPL2Grammar.g:870:1: matchRecogPatternConcat : ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary237 = null;


        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            // EsperEPL2Grammar.g:871:2: ( ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) )
            // EsperEPL2Grammar.g:871:4: ( matchRecogPatternUnary )+
            {
            // EsperEPL2Grammar.g:871:4: ( matchRecogPatternUnary )+
            int cnt91=0;
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==IDENT||LA91_0==LPAREN) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // EsperEPL2Grammar.g:871:4: matchRecogPatternUnary
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4323);
            	    matchRecogPatternUnary237=matchRecogPatternUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary237.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt91 >= 1 ) break loop91;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(91, input);
                        throw eee;
                }
                cnt91++;
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 872:3: -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
            {
                // EsperEPL2Grammar.g:872:6: ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);

                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());

                }
                stream_matchRecogPatternUnary.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternConcat"

    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternUnary"
    // EsperEPL2Grammar.g:875:1: matchRecogPatternUnary : ( matchRecogPatternNested | matchRecogPatternAtom );
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested238 = null;

        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom239 = null;



        try {
            // EsperEPL2Grammar.g:876:2: ( matchRecogPatternNested | matchRecogPatternAtom )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==LPAREN) ) {
                alt92=1;
            }
            else if ( (LA92_0==IDENT) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    // EsperEPL2Grammar.g:876:5: matchRecogPatternNested
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4348);
                    matchRecogPatternNested238=matchRecogPatternNested();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested238.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:877:5: matchRecogPatternAtom
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4354);
                    matchRecogPatternAtom239=matchRecogPatternAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom239.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternUnary"

    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternNested"
    // EsperEPL2Grammar.g:880:1: matchRecogPatternNested : LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN240=null;
        Token RPAREN242=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration241 = null;


        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN240_tree=null;
        CommonTree RPAREN242_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:881:2: ( LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) )
            // EsperEPL2Grammar.g:881:5: LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )?
            {
            LPAREN240=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested4366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN240);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4368);
            matchRecogPatternAlteration241=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration241.getTree());
            RPAREN242=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested4370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN242);

            // EsperEPL2Grammar.g:881:47: (s= STAR | p= PLUS | q= QUESTION )?
            int alt93=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt93=1;
                    }
                    break;
                case PLUS:
                    {
                    alt93=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt93=3;
                    }
                    break;
            }

            switch (alt93) {
                case 1 :
                    // EsperEPL2Grammar.g:881:48: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested4375); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:881:57: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested4381); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:881:66: q= QUESTION
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested4387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);


                    }
                    break;

            }



            // AST REWRITE
            // elements: q, s, matchRecogPatternAlteration, p
            // token labels: s, q, p
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 882:3: -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
            {
                // EsperEPL2Grammar.g:882:6: ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                // EsperEPL2Grammar.g:882:60: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:882:64: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:882:68: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternNested"

    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAtom"
    // EsperEPL2Grammar.g:885:1: matchRecogPatternAtom : i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:886:2: (i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) )
            // EsperEPL2Grammar.g:886:4: i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom4426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:886:12: ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==STAR||(LA96_0>=PLUS && LA96_0<=QUESTION)) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // EsperEPL2Grammar.g:886:13: (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )?
                    {
                    // EsperEPL2Grammar.g:886:13: (s= STAR | p= PLUS | q= QUESTION )
                    int alt94=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt94=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt94=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt94=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 94, 0, input);

                        throw nvae;
                    }

                    switch (alt94) {
                        case 1 :
                            // EsperEPL2Grammar.g:886:14: s= STAR
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom4432); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:886:23: p= PLUS
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom4438); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:886:32: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4444); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:886:44: (reluctant= QUESTION )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==QUESTION) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // EsperEPL2Grammar.g:886:45: reluctant= QUESTION
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4450); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: reluctant, q, i, p, s
            // token labels: s, reluctant, q, p, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 887:3: -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
            {
                // EsperEPL2Grammar.g:887:6: ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:887:33: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:887:37: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:887:41: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();
                // EsperEPL2Grammar.g:887:45: ( $reluctant)?
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());

                }
                stream_reluctant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAtom"

    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefine"
    // EsperEPL2Grammar.g:890:1: matchRecogDefine : DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DEFINE243=null;
        Token COMMA245=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem244 = null;

        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem246 = null;


        CommonTree DEFINE243_tree=null;
        CommonTree COMMA245_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            // EsperEPL2Grammar.g:891:2: ( DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) )
            // EsperEPL2Grammar.g:891:4: DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )*
            {
            DEFINE243=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine4494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE243);

            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4496);
            matchRecogDefineItem244=matchRecogDefineItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem244.getTree());
            // EsperEPL2Grammar.g:891:32: ( COMMA matchRecogDefineItem )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==COMMA) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // EsperEPL2Grammar.g:891:33: COMMA matchRecogDefineItem
            	    {
            	    COMMA245=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine4499); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA245);

            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4501);
            	    matchRecogDefineItem246=matchRecogDefineItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem246.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogDefineItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 892:3: -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
            {
                // EsperEPL2Grammar.g:892:6: ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);

                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());

                }
                stream_matchRecogDefineItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefine"

    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefineItem"
    // EsperEPL2Grammar.g:895:1: matchRecogDefineItem : i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS247=null;
        EsperEPL2GrammarParser.expression_return expression248 = null;


        CommonTree i_tree=null;
        CommonTree AS247_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:896:2: (i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) )
            // EsperEPL2Grammar.g:896:4: i= IDENT AS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem4528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            AS247=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem4530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS247);

            pushFollow(FOLLOW_expression_in_matchRecogDefineItem4532);
            expression248=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression248.getTree());


            // AST REWRITE
            // elements: expression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 897:3: -> ^( MATCHREC_DEFINE_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:897:6: ^( MATCHREC_DEFINE_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefineItem"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:900:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN249=null;
        Token LBRACK250=null;
        Token RBRACK252=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression251 = null;


        CommonTree PATTERN249_tree=null;
        CommonTree LBRACK250_tree=null;
        CommonTree RBRACK252_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:901:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:901:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN249=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression4557); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN249);

            LBRACK250=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression4559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK250);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression4561);
            patternExpression251=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression251.getTree());
            RBRACK252=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression4563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK252);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 902:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:902:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:905:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL253=null;
        Token COLON254=null;
        Token LBRACK255=null;
        Token METADATASQL256=null;
        Token RBRACK257=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL253_tree=null;
        CommonTree COLON254_tree=null;
        CommonTree LBRACK255_tree=null;
        CommonTree METADATASQL256_tree=null;
        CommonTree RBRACK257_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:908:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:908:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL253=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression4596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL253);

            COLON254=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression4598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON254);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression4602); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK255=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression4604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK255);

            // EsperEPL2Grammar.g:908:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==STRING_LITERAL) ) {
                alt98=1;
            }
            else if ( (LA98_0==QUOTED_STRING_LITERAL) ) {
                alt98=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // EsperEPL2Grammar.g:908:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression4609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:908:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:908:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==METADATASQL) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // EsperEPL2Grammar.g:908:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL256=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression4619); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL256);

                    // EsperEPL2Grammar.g:908:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==STRING_LITERAL) ) {
                        alt99=1;
                    }
                    else if ( (LA99_0==QUOTED_STRING_LITERAL) ) {
                        alt99=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 99, 0, input);

                        throw nvae;
                    }
                    switch (alt99) {
                        case 1 :
                            // EsperEPL2Grammar.g:908:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression4624); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:908:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4630); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK257=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression4635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK257);



            // AST REWRITE
            // elements: s, i, s2
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 909:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:909:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:909:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:912:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON258=null;
        Token LPAREN260=null;
        Token RPAREN262=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier259 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList261 = null;


        CommonTree i_tree=null;
        CommonTree COLON258_tree=null;
        CommonTree LPAREN260_tree=null;
        CommonTree RPAREN262_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:915:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:915:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression4686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON258=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression4688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON258);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression4690);
            classIdentifier259=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier259.getTree());
            // EsperEPL2Grammar.g:915:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==LPAREN) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // EsperEPL2Grammar.g:915:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN260=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression4693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN260);

                    // EsperEPL2Grammar.g:915:49: ( expressionList )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==WINDOW||LA101_0==ESCAPE||(LA101_0>=NOT_EXPR && LA101_0<=EVERY_EXPR)||(LA101_0>=SUM && LA101_0<=COUNT)||LA101_0==CASE||LA101_0==OUTER||(LA101_0>=JOIN && LA101_0<=FULL)||(LA101_0>=EVENTS && LA101_0<=LAST)||(LA101_0>=UNIDIRECTIONAL && LA101_0<=CURRENT_TIMESTAMP)||LA101_0==SNAPSHOT||(LA101_0>=VARIABLE && LA101_0<=AT)||(LA101_0>=BOOLEAN_TRUE && LA101_0<=VALUE_NULL)||(LA101_0>=DEFINE && LA101_0<=MATCHES)||LA101_0==NUM_DOUBLE||LA101_0==IDENT||LA101_0==LPAREN||(LA101_0>=PLUS && LA101_0<=QUESTION)||(LA101_0>=STRING_LITERAL && LA101_0<=QUOTED_STRING_LITERAL)||LA101_0==MINUS||LA101_0==LCURLY||LA101_0==NUM_INT||(LA101_0>=TICKED_STRING_LITERAL && LA101_0<=NUM_FLOAT)) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // EsperEPL2Grammar.g:915:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression4695);
                            expressionList261=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList261.getTree());

                            }
                            break;

                    }

                    RPAREN262=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression4698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN262);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, expressionList, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 916:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:916:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:916:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:919:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON263=null;
        Token LPAREN264=null;
        Token RPAREN266=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList265 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON263_tree=null;
        CommonTree LPAREN264_tree=null;
        CommonTree RPAREN266_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:922:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:922:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression4751); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON263=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression4753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON263);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression4757); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN264=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression4759); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN264);

            // EsperEPL2Grammar.g:922:35: ( expressionWithTimeList )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==WINDOW||LA103_0==ESCAPE||(LA103_0>=NOT_EXPR && LA103_0<=EVERY_EXPR)||(LA103_0>=SUM && LA103_0<=COUNT)||LA103_0==CASE||LA103_0==OUTER||(LA103_0>=JOIN && LA103_0<=FULL)||(LA103_0>=EVENTS && LA103_0<=LAST)||(LA103_0>=UNIDIRECTIONAL && LA103_0<=CURRENT_TIMESTAMP)||LA103_0==SNAPSHOT||(LA103_0>=VARIABLE && LA103_0<=AT)||(LA103_0>=BOOLEAN_TRUE && LA103_0<=VALUE_NULL)||(LA103_0>=DEFINE && LA103_0<=MATCHES)||LA103_0==NUM_DOUBLE||LA103_0==IDENT||LA103_0==LPAREN||LA103_0==STAR||(LA103_0>=PLUS && LA103_0<=LBRACK)||(LA103_0>=STRING_LITERAL && LA103_0<=QUOTED_STRING_LITERAL)||LA103_0==MINUS||LA103_0==LCURLY||LA103_0==NUM_INT||(LA103_0>=TICKED_STRING_LITERAL && LA103_0<=NUM_FLOAT)) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // EsperEPL2Grammar.g:922:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression4761);
                    expressionWithTimeList265=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList265.getTree());

                    }
                    break;

            }

            RPAREN266=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression4764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN266);



            // AST REWRITE
            // elements: expressionWithTimeList, ns, nm
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 923:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:923:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:923:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:926:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA268=null;
        EsperEPL2GrammarParser.expression_return expression267 = null;

        EsperEPL2GrammarParser.expression_return expression269 = null;


        CommonTree COMMA268_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:929:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:929:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr4803);
            expression267=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression267.getTree());
            // EsperEPL2Grammar.g:929:15: ( COMMA expression )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==COMMA) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // EsperEPL2Grammar.g:929:16: COMMA expression
            	    {
            	    COMMA268=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr4806); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA268);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr4808);
            	    expression269=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression269.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 930:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:930:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:933:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA271=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement270 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement272 = null;


        CommonTree COMMA271_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:936:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:936:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr4843);
            orderByListElement270=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement270.getTree());
            // EsperEPL2Grammar.g:936:23: ( COMMA orderByListElement )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // EsperEPL2Grammar.g:936:24: COMMA orderByListElement
            	    {
            	    COMMA271=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr4846); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA271);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr4848);
            	    orderByListElement272=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement272.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 937:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:937:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:940:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression273 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:941:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:941:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement4873);
            expression273=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression273.getTree());
            // EsperEPL2Grammar.g:941:15: (d= ASC | d= DESC )?
            int alt106=3;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==ASC) ) {
                alt106=1;
            }
            else if ( (LA106_0==DESC) ) {
                alt106=2;
            }
            switch (alt106) {
                case 1 :
                    // EsperEPL2Grammar.g:941:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement4878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:941:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement4882); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 942:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:942:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:942:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:945:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression274 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:948:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:948:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause4920);
            evalOrExpression274=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression274.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 949:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:949:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:952:1: outputLimit : ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN280=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter275 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod276 = null;

        EsperEPL2GrammarParser.number_return number277 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet278 = null;

        EsperEPL2GrammarParser.expression_return expression279 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr281 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN280_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:955:2: ( ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) )
            // EsperEPL2Grammar.g:955:9: ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            {
            // EsperEPL2Grammar.g:955:9: ( outputLimitAfter )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==AFTER) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // EsperEPL2Grammar.g:955:9: outputLimitAfter
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit4958);
                    outputLimitAfter275=outputLimitAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter275.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:956:10: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt108=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt108=1;
                    }
                    break;
                case FIRST:
                    {
                    alt108=2;
                    }
                    break;
                case LAST:
                    {
                    alt108=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt108=4;
                    }
                    break;
            }

            switch (alt108) {
                case 1 :
                    // EsperEPL2Grammar.g:956:11: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit4973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:956:17: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit4977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:956:25: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit4981); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:956:32: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit4985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:957:10: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            int alt112=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt112=1;
                }
                break;
            case AT:
                {
                alt112=2;
                }
                break;
            case WHEN:
                {
                alt112=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
                {
                alt112=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;
            }

            switch (alt112) {
                case 1 :
                    // EsperEPL2Grammar.g:958:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:958:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:958:14: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:959:7: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==NUM_INT) ) {
                        int LA110_1 = input.LA(2);

                        if ( (LA110_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_1==EVENTS) ) {
                            alt110=2;
                        }
                        else if ( (LA110_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 110, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA110_0==NUM_LONG) ) {
                        int LA110_2 = input.LA(2);

                        if ( (LA110_2==EVENTS) ) {
                            alt110=2;
                        }
                        else if ( (LA110_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 110, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA110_0==NUM_FLOAT) ) {
                        int LA110_3 = input.LA(2);

                        if ( (LA110_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_3==EVENTS) ) {
                            alt110=2;
                        }
                        else if ( (LA110_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 110, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA110_0==NUM_DOUBLE) ) {
                        int LA110_4 = input.LA(2);

                        if ( (LA110_4==EVENTS) ) {
                            alt110=2;
                        }
                        else if ( (LA110_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 110, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA110_0==IDENT) ) {
                        int LA110_5 = input.LA(2);

                        if ( (LA110_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_5==EVENTS) ) {
                            alt110=2;
                        }
                        else if ( (LA110_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else if ( (LA110_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt110=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 110, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA110_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt110=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 110, 0, input);

                        throw nvae;
                    }
                    switch (alt110) {
                        case 1 :
                            // EsperEPL2Grammar.g:960:9: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5042);
                            timePeriod276=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod276.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:961:9: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:961:9: ( number | i= IDENT )
                            int alt109=2;
                            int LA109_0 = input.LA(1);

                            if ( (LA109_0==NUM_DOUBLE||LA109_0==NUM_INT||(LA109_0>=NUM_LONG && LA109_0<=NUM_FLOAT)) ) {
                                alt109=1;
                            }
                            else if ( (LA109_0==IDENT) ) {
                                alt109=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 109, 0, input);

                                throw nvae;
                            }
                            switch (alt109) {
                                case 1 :
                                    // EsperEPL2Grammar.g:961:10: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5053);
                                    number277=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number277.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:961:19: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5059); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:961:28: (e= EVENTS )
                            // EsperEPL2Grammar.g:961:29: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5065); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:965:5: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:965:5: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:965:7: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5098);
                    crontabLimitParameterSet278=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet278.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:967:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:967:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:967:7: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit5117);
                    expression279=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression279.getTree());
                    // EsperEPL2Grammar.g:967:26: ( THEN onSetExpr )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==THEN) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // EsperEPL2Grammar.g:967:27: THEN onSetExpr
                            {
                            THEN280=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5120); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN280);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5122);
                            onSetExpr281=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr281.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:969:10: 
                    {
                    }
                    break;

            }



            // AST REWRITE
            // elements: outputLimitAfter, k, k, expression, number, timePeriod, outputLimitAfter, k, onSetExpr, outputLimitAfter, crontabLimitParameterSet, outputLimitAfter, i, k, outputLimitAfter
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 970:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:970:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:970:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:970:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:970:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:970:73: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 971:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
            if (ev != null) {
                // EsperEPL2Grammar.g:971:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:971:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                // EsperEPL2Grammar.g:971:63: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 972:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
            if (at != null) {
                // EsperEPL2Grammar.g:972:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:972:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                // EsperEPL2Grammar.g:972:74: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 973:6: -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
            if (wh != null) {
                // EsperEPL2Grammar.g:973:24: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:973:42: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:973:57: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();
                // EsperEPL2Grammar.g:973:68: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 974:6: -> ^( AFTER_LIMIT_EXPR outputLimitAfter )
            {
                // EsperEPL2Grammar.g:974:9: ^( AFTER_LIMIT_EXPR outputLimitAfter )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimitAfter"
    // EsperEPL2Grammar.g:977:1: outputLimitAfter : a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) ;
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token EVENTS284=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod282 = null;

        EsperEPL2GrammarParser.number_return number283 = null;


        CommonTree a_tree=null;
        CommonTree EVENTS284_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:978:2: (a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) )
            // EsperEPL2Grammar.g:978:6: a= AFTER ( timePeriod | number EVENTS )
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter5272); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);

            // EsperEPL2Grammar.g:978:14: ( timePeriod | number EVENTS )
            int alt113=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA113_1 = input.LA(2);

                if ( (LA113_1==MIN||(LA113_1>=TIMEPERIOD_DAY && LA113_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt113=1;
                }
                else if ( (LA113_1==EVENTS) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA113_2 = input.LA(2);

                if ( (LA113_2==MIN||(LA113_2>=TIMEPERIOD_DAY && LA113_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt113=1;
                }
                else if ( (LA113_2==EVENTS) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA113_3 = input.LA(2);

                if ( (LA113_3==MIN||(LA113_3>=TIMEPERIOD_DAY && LA113_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt113=1;
                }
                else if ( (LA113_3==EVENTS) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA113_4 = input.LA(2);

                if ( (LA113_4==MIN||(LA113_4>=TIMEPERIOD_DAY && LA113_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt113=1;
                }
                else if ( (LA113_4==EVENTS) ) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt113=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }

            switch (alt113) {
                case 1 :
                    // EsperEPL2Grammar.g:978:15: timePeriod
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter5275);
                    timePeriod282=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod282.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:978:28: number EVENTS
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter5279);
                    number283=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number283.getTree());
                    EVENTS284=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter5281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS284);


                    }
                    break;

            }



            // AST REWRITE
            // elements: timePeriod, number, AFTER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 979:6: -> ^( AFTER ( timePeriod )? ( number )? )
            {
                // EsperEPL2Grammar.g:979:9: ^( AFTER ( timePeriod )? ( number )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);

                // EsperEPL2Grammar.g:979:17: ( timePeriod )?
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());

                }
                stream_timePeriod.reset();
                // EsperEPL2Grammar.g:979:29: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimitAfter"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:982:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:985:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:985:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:985:6: (n1= numberconstant | i1= IDENT )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==NUM_DOUBLE||LA114_0==PLUS||LA114_0==MINUS||LA114_0==NUM_INT||(LA114_0>=NUM_LONG && LA114_0<=NUM_FLOAT)) ) {
                alt114=1;
            }
            else if ( (LA114_0==IDENT) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // EsperEPL2Grammar.g:985:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit5327);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:985:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5333); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:985:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==OFFSET||LA117_0==COMMA) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // EsperEPL2Grammar.g:985:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:985:38: (c= COMMA | o= OFFSET )
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==COMMA) ) {
                        alt115=1;
                    }
                    else if ( (LA115_0==OFFSET) ) {
                        alt115=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 115, 0, input);

                        throw nvae;
                    }
                    switch (alt115) {
                        case 1 :
                            // EsperEPL2Grammar.g:985:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit5340); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:985:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit5346); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:985:59: (n2= numberconstant | i2= IDENT )
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==NUM_DOUBLE||LA116_0==PLUS||LA116_0==MINUS||LA116_0==NUM_INT||(LA116_0>=NUM_LONG && LA116_0<=NUM_FLOAT)) ) {
                        alt116=1;
                    }
                    else if ( (LA116_0==IDENT) ) {
                        alt116=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 116, 0, input);

                        throw nvae;
                    }
                    switch (alt116) {
                        case 1 :
                            // EsperEPL2Grammar.g:985:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit5352);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:985:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5358); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: n2, o, c, i2, i1, n1
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 986:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:986:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:986:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:986:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:986:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:986:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:986:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:986:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:989:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN285=null;
        Token COMMA287=null;
        Token COMMA289=null;
        Token COMMA291=null;
        Token COMMA293=null;
        Token COMMA295=null;
        Token RPAREN297=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime286 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime288 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime290 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime292 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime294 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime296 = null;


        CommonTree LPAREN285_tree=null;
        CommonTree COMMA287_tree=null;
        CommonTree COMMA289_tree=null;
        CommonTree COMMA291_tree=null;
        CommonTree COMMA293_tree=null;
        CommonTree COMMA295_tree=null;
        CommonTree RPAREN297_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:990:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:990:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN285=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet5410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN285);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5412);
            expressionWithTime286=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime286.getTree());
            COMMA287=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA287);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5416);
            expressionWithTime288=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime288.getTree());
            COMMA289=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA289);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5420);
            expressionWithTime290=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime290.getTree());
            COMMA291=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5422); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA291);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5424);
            expressionWithTime292=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime292.getTree());
            COMMA293=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA293);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5428);
            expressionWithTime294=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime294.getTree());
            // EsperEPL2Grammar.g:990:130: ( COMMA expressionWithTime )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==COMMA) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // EsperEPL2Grammar.g:990:131: COMMA expressionWithTime
                    {
                    COMMA295=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5431); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA295);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5433);
                    expressionWithTime296=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime296.getTree());

                    }
                    break;

            }

            RPAREN297=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet5437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN297);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 991:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:991:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:991:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:994:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN298=null;
        Token THEN300=null;
        EsperEPL2GrammarParser.expression_return expression299 = null;

        EsperEPL2GrammarParser.expression_return expression301 = null;


        CommonTree WHEN298_tree=null;
        CommonTree THEN300_tree=null;

        try {
            // EsperEPL2Grammar.g:995:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:995:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:995:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:995:5: WHEN expression THEN expression
            {
            WHEN298=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause5467); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5470);
            expression299=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression299.getTree());
            THEN300=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause5472); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5475);
            expression301=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression301.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:998:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE302=null;
        EsperEPL2GrammarParser.expression_return expression303 = null;


        CommonTree ELSE302_tree=null;

        try {
            // EsperEPL2Grammar.g:999:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:999:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:999:4: ( ELSE expression )
            // EsperEPL2Grammar.g:999:5: ELSE expression
            {
            ELSE302=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause5488); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause5491);
            expression303=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression303.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:1003:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression304 = null;



        try {
            // EsperEPL2Grammar.g:1004:2: ( caseExpression )
            // EsperEPL2Grammar.g:1004:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression5504);
            caseExpression304=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression304.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:1007:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE305=null;
        Token END308=null;
        Token CASE309=null;
        Token END313=null;
        EsperEPL2GrammarParser.whenClause_return whenClause306 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause307 = null;

        EsperEPL2GrammarParser.expression_return expression310 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause311 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause312 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression314 = null;


        CommonTree CASE305_tree=null;
        CommonTree END308_tree=null;
        CommonTree CASE309_tree=null;
        CommonTree END313_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:1008:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt123=3;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==CASE) ) {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==WINDOW||LA123_1==ESCAPE||(LA123_1>=NOT_EXPR && LA123_1<=EVERY_EXPR)||(LA123_1>=SUM && LA123_1<=COUNT)||LA123_1==CASE||LA123_1==OUTER||(LA123_1>=JOIN && LA123_1<=FULL)||(LA123_1>=EVENTS && LA123_1<=LAST)||(LA123_1>=UNIDIRECTIONAL && LA123_1<=CURRENT_TIMESTAMP)||LA123_1==SNAPSHOT||(LA123_1>=VARIABLE && LA123_1<=AT)||(LA123_1>=BOOLEAN_TRUE && LA123_1<=VALUE_NULL)||(LA123_1>=DEFINE && LA123_1<=MATCHES)||LA123_1==NUM_DOUBLE||LA123_1==IDENT||LA123_1==LPAREN||(LA123_1>=PLUS && LA123_1<=QUESTION)||(LA123_1>=STRING_LITERAL && LA123_1<=QUOTED_STRING_LITERAL)||LA123_1==MINUS||LA123_1==LCURLY||LA123_1==NUM_INT||(LA123_1>=TICKED_STRING_LITERAL && LA123_1<=NUM_FLOAT)) ) {
                    alt123=2;
                }
                else if ( (LA123_1==WHEN) ) {
                    alt123=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==WINDOW||LA123_0==ESCAPE||(LA123_0>=NOT_EXPR && LA123_0<=EVERY_EXPR)||(LA123_0>=SUM && LA123_0<=COUNT)||LA123_0==OUTER||(LA123_0>=JOIN && LA123_0<=FULL)||(LA123_0>=EVENTS && LA123_0<=LAST)||(LA123_0>=UNIDIRECTIONAL && LA123_0<=CURRENT_TIMESTAMP)||LA123_0==SNAPSHOT||(LA123_0>=VARIABLE && LA123_0<=AT)||(LA123_0>=BOOLEAN_TRUE && LA123_0<=VALUE_NULL)||(LA123_0>=DEFINE && LA123_0<=MATCHES)||LA123_0==NUM_DOUBLE||LA123_0==IDENT||LA123_0==LPAREN||(LA123_0>=PLUS && LA123_0<=QUESTION)||(LA123_0>=STRING_LITERAL && LA123_0<=QUOTED_STRING_LITERAL)||LA123_0==MINUS||LA123_0==LCURLY||LA123_0==NUM_INT||(LA123_0>=TICKED_STRING_LITERAL && LA123_0<=NUM_FLOAT)) ) {
                alt123=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // EsperEPL2Grammar.g:1008:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE305=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5518); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE305_tree = (CommonTree)adaptor.create(CASE305);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE305_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1008:52: ( whenClause )+
                    int cnt119=0;
                    loop119:
                    do {
                        int alt119=2;
                        int LA119_0 = input.LA(1);

                        if ( (LA119_0==WHEN) ) {
                            alt119=1;
                        }


                        switch (alt119) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1008:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression5521);
                    	    whenClause306=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause306.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt119 >= 1 ) break loop119;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(119, input);
                                throw eee;
                        }
                        cnt119++;
                    } while (true);

                    // EsperEPL2Grammar.g:1008:64: ( elseClause )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==ELSE) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // EsperEPL2Grammar.g:1008:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression5524);
                            elseClause307=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause307.getTree());

                            }
                            break;

                    }

                    END308=(Token)match(input,END,FOLLOW_END_in_caseExpression5527); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1009:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE309=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE309);

                    pushFollow(FOLLOW_expression_in_caseExpression5540);
                    expression310=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression310.getTree());
                    // EsperEPL2Grammar.g:1009:62: ( whenClause )+
                    int cnt121=0;
                    loop121:
                    do {
                        int alt121=2;
                        int LA121_0 = input.LA(1);

                        if ( (LA121_0==WHEN) ) {
                            alt121=1;
                        }


                        switch (alt121) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1009:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression5542);
                    	    whenClause311=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause311.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt121 >= 1 ) break loop121;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(121, input);
                                throw eee;
                        }
                        cnt121++;
                    } while (true);

                    // EsperEPL2Grammar.g:1009:74: ( elseClause )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==ELSE) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // EsperEPL2Grammar.g:1009:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression5545);
                            elseClause312=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause312.getTree());

                            }
                            break;

                    }

                    END313=(Token)match(input,END,FOLLOW_END_in_caseExpression5548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END313);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: whenClause, expression, elseClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1010:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:1010:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:1010:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1011:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression5572);
                    evalOrExpression314=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression314.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:1014:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression315 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression316 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:1015:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:1015:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression5583);
            evalAndExpression315=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression315.getTree());
            // EsperEPL2Grammar.g:1015:22: (op= OR_EXPR evalAndExpression )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==OR_EXPR) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1015:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression5588); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression5590);
            	    evalAndExpression316=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression316.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1016:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:1016:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:1016:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1017:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:1020:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression317 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression318 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:1021:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:1021:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression5622);
            bitWiseExpression317=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression317.getTree());
            // EsperEPL2Grammar.g:1021:22: (op= AND_EXPR bitWiseExpression )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==AND_EXPR) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1021:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression5627); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression5629);
            	    bitWiseExpression318=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression318.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1022:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:1022:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1023:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:1026:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND320=null;
        Token BOR321=null;
        Token BXOR322=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression319 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression323 = null;


        CommonTree BAND320_tree=null;
        CommonTree BOR321_tree=null;
        CommonTree BXOR322_tree=null;

        try {
            // EsperEPL2Grammar.g:1027:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:1027:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression5661);
            negatedExpression319=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression319.getTree());
            // EsperEPL2Grammar.g:1027:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==BOR||(LA127_0>=BAND && LA127_0<=BXOR)) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1027:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:1027:24: ( BAND | BOR | BXOR )
            	    int alt126=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt126=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt126=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt126=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 126, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt126) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1027:25: BAND
            	            {
            	            BAND320=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression5666); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND320_tree = (CommonTree)adaptor.create(BAND320);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND320_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1027:31: BOR
            	            {
            	            BOR321=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression5669); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR321_tree = (CommonTree)adaptor.create(BOR321);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR321_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1027:36: BXOR
            	            {
            	            BXOR322=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression5672); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR322_tree = (CommonTree)adaptor.create(BXOR322);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR322_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression5676);
            	    negatedExpression323=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression323.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:1030:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR325=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression324 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression326 = null;


        CommonTree NOT_EXPR325_tree=null;

        try {
            // EsperEPL2Grammar.g:1031:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==WINDOW||LA128_0==ESCAPE||LA128_0==EVERY_EXPR||(LA128_0>=SUM && LA128_0<=COUNT)||LA128_0==OUTER||(LA128_0>=JOIN && LA128_0<=FULL)||(LA128_0>=EVENTS && LA128_0<=LAST)||(LA128_0>=UNIDIRECTIONAL && LA128_0<=CURRENT_TIMESTAMP)||LA128_0==SNAPSHOT||(LA128_0>=VARIABLE && LA128_0<=AT)||(LA128_0>=BOOLEAN_TRUE && LA128_0<=VALUE_NULL)||(LA128_0>=DEFINE && LA128_0<=MATCHES)||LA128_0==NUM_DOUBLE||LA128_0==IDENT||LA128_0==LPAREN||(LA128_0>=PLUS && LA128_0<=QUESTION)||(LA128_0>=STRING_LITERAL && LA128_0<=QUOTED_STRING_LITERAL)||LA128_0==MINUS||LA128_0==LCURLY||LA128_0==NUM_INT||(LA128_0>=TICKED_STRING_LITERAL && LA128_0<=NUM_FLOAT)) ) {
                alt128=1;
            }
            else if ( (LA128_0==NOT_EXPR) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    // EsperEPL2Grammar.g:1031:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression5691);
                    evalEqualsExpression324=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression324.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1032:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR325=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression5697); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR325_tree = (CommonTree)adaptor.create(NOT_EXPR325);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR325_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression5700);
                    evalEqualsExpression326=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression326.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:1035:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR328=null;
        Token LPAREN330=null;
        Token RPAREN332=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression327 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression329 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList331 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression333 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR328_tree=null;
        CommonTree LPAREN330_tree=null;
        CommonTree RPAREN332_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:1036:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:1036:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression5713);
            evalRelationalExpression327=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression327.getTree());
            // EsperEPL2Grammar.g:1036:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==IS||LA134_0==EQUALS||(LA134_0>=SQL_NE && LA134_0<=NOT_EQUAL)) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1037:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:1037:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt129=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt129=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA129_2 = input.LA(2);

            	        if ( (LA129_2==NOT_EXPR) ) {
            	            alt129=3;
            	        }
            	        else if ( (LA129_2==WINDOW||LA129_2==ESCAPE||LA129_2==EVERY_EXPR||(LA129_2>=SUM && LA129_2<=COUNT)||LA129_2==OUTER||(LA129_2>=JOIN && LA129_2<=FULL)||(LA129_2>=ALL && LA129_2<=SOME)||(LA129_2>=EVENTS && LA129_2<=LAST)||(LA129_2>=UNIDIRECTIONAL && LA129_2<=CURRENT_TIMESTAMP)||LA129_2==SNAPSHOT||(LA129_2>=VARIABLE && LA129_2<=AT)||(LA129_2>=BOOLEAN_TRUE && LA129_2<=VALUE_NULL)||(LA129_2>=DEFINE && LA129_2<=MATCHES)||LA129_2==NUM_DOUBLE||LA129_2==IDENT||LA129_2==LPAREN||(LA129_2>=PLUS && LA129_2<=QUESTION)||(LA129_2>=STRING_LITERAL && LA129_2<=QUOTED_STRING_LITERAL)||LA129_2==MINUS||LA129_2==LCURLY||LA129_2==NUM_INT||(LA129_2>=TICKED_STRING_LITERAL && LA129_2<=NUM_FLOAT)) ) {
            	            alt129=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 129, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt129=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt129=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 129, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt129) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1037:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression5726); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1038:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression5744); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1039:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression5758); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR328=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression5760); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR328);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:1040:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression5774); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:1041:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression5788); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:1043:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt133=2;
            	    int LA133_0 = input.LA(1);

            	    if ( (LA133_0==WINDOW||LA133_0==ESCAPE||LA133_0==EVERY_EXPR||(LA133_0>=SUM && LA133_0<=COUNT)||LA133_0==OUTER||(LA133_0>=JOIN && LA133_0<=FULL)||(LA133_0>=EVENTS && LA133_0<=LAST)||(LA133_0>=UNIDIRECTIONAL && LA133_0<=CURRENT_TIMESTAMP)||LA133_0==SNAPSHOT||(LA133_0>=VARIABLE && LA133_0<=AT)||(LA133_0>=BOOLEAN_TRUE && LA133_0<=VALUE_NULL)||(LA133_0>=DEFINE && LA133_0<=MATCHES)||LA133_0==NUM_DOUBLE||LA133_0==IDENT||LA133_0==LPAREN||(LA133_0>=PLUS && LA133_0<=QUESTION)||(LA133_0>=STRING_LITERAL && LA133_0<=QUOTED_STRING_LITERAL)||LA133_0==MINUS||LA133_0==LCURLY||LA133_0==NUM_INT||(LA133_0>=TICKED_STRING_LITERAL && LA133_0<=NUM_FLOAT)) ) {
            	        alt133=1;
            	    }
            	    else if ( ((LA133_0>=ALL && LA133_0<=SOME)) ) {
            	        alt133=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 133, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt133) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1044:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression5818);
            	            evalRelationalExpression329=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression329.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1045:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:1045:13: (a= ANY | a= SOME | a= ALL )
            	            int alt130=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt130=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt130=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt130=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 130, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt130) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1045:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression5835); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1045:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression5841); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:1045:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression5847); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:1045:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt132=2;
            	            int LA132_0 = input.LA(1);

            	            if ( (LA132_0==LPAREN) ) {
            	                int LA132_1 = input.LA(2);

            	                if ( (LA132_1==SELECT) ) {
            	                    alt132=2;
            	                }
            	                else if ( (LA132_1==WINDOW||LA132_1==ESCAPE||(LA132_1>=NOT_EXPR && LA132_1<=EVERY_EXPR)||(LA132_1>=SUM && LA132_1<=COUNT)||LA132_1==CASE||LA132_1==OUTER||(LA132_1>=JOIN && LA132_1<=FULL)||(LA132_1>=EVENTS && LA132_1<=LAST)||(LA132_1>=UNIDIRECTIONAL && LA132_1<=CURRENT_TIMESTAMP)||LA132_1==SNAPSHOT||(LA132_1>=VARIABLE && LA132_1<=AT)||(LA132_1>=BOOLEAN_TRUE && LA132_1<=VALUE_NULL)||(LA132_1>=DEFINE && LA132_1<=MATCHES)||LA132_1==NUM_DOUBLE||LA132_1==IDENT||(LA132_1>=LPAREN && LA132_1<=RPAREN)||(LA132_1>=PLUS && LA132_1<=QUESTION)||(LA132_1>=STRING_LITERAL && LA132_1<=QUOTED_STRING_LITERAL)||LA132_1==MINUS||LA132_1==LCURLY||LA132_1==NUM_INT||(LA132_1>=TICKED_STRING_LITERAL && LA132_1<=NUM_FLOAT)) ) {
            	                    alt132=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 132, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 132, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt132) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1045:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:1045:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:1045:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN330=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression5853); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN330);

            	                    // EsperEPL2Grammar.g:1045:48: ( expressionList )?
            	                    int alt131=2;
            	                    int LA131_0 = input.LA(1);

            	                    if ( (LA131_0==WINDOW||LA131_0==ESCAPE||(LA131_0>=NOT_EXPR && LA131_0<=EVERY_EXPR)||(LA131_0>=SUM && LA131_0<=COUNT)||LA131_0==CASE||LA131_0==OUTER||(LA131_0>=JOIN && LA131_0<=FULL)||(LA131_0>=EVENTS && LA131_0<=LAST)||(LA131_0>=UNIDIRECTIONAL && LA131_0<=CURRENT_TIMESTAMP)||LA131_0==SNAPSHOT||(LA131_0>=VARIABLE && LA131_0<=AT)||(LA131_0>=BOOLEAN_TRUE && LA131_0<=VALUE_NULL)||(LA131_0>=DEFINE && LA131_0<=MATCHES)||LA131_0==NUM_DOUBLE||LA131_0==IDENT||LA131_0==LPAREN||(LA131_0>=PLUS && LA131_0<=QUESTION)||(LA131_0>=STRING_LITERAL && LA131_0<=QUOTED_STRING_LITERAL)||LA131_0==MINUS||LA131_0==LCURLY||LA131_0==NUM_INT||(LA131_0>=TICKED_STRING_LITERAL && LA131_0<=NUM_FLOAT)) ) {
            	                        alt131=1;
            	                    }
            	                    switch (alt131) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:1045:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression5855);
            	                            expressionList331=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList331.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN332=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression5858); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN332);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1045:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression5863);
            	                    subSelectGroupExpression333=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression333.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);



            // AST REWRITE
            // elements: subSelectGroupExpression, subSelectGroupExpression, evalRelationalExpression, evalRelationalExpression, evalRelationalExpression, expressionList, evalRelationalExpression, expressionList, evalRelationalExpression, a, a
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1048:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1048:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1049:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1049:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1049:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1049:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1050:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1050:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1051:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1051:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1051:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1051:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1052:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:1055:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN336=null;
        Token RPAREN338=null;
        Token COMMA342=null;
        Token IN_SET344=null;
        Token BETWEEN346=null;
        Token LIKE348=null;
        Token ESCAPE350=null;
        Token REGEXP352=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr334 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr335 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList337 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression339 = null;

        EsperEPL2GrammarParser.expression_return expression340 = null;

        EsperEPL2GrammarParser.expression_return expression341 = null;

        EsperEPL2GrammarParser.expression_return expression343 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery345 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList347 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr349 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant351 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr353 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN336_tree=null;
        CommonTree RPAREN338_tree=null;
        CommonTree COMMA342_tree=null;
        CommonTree IN_SET344_tree=null;
        CommonTree BETWEEN346_tree=null;
        CommonTree LIKE348_tree=null;
        CommonTree ESCAPE350_tree=null;
        CommonTree REGEXP352_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:1056:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:1056:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5991);
            concatenationExpr334=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr334.getTree());
            // EsperEPL2Grammar.g:1057:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==EOF||(LA148_0>=OR_EXPR && LA148_0<=AND_EXPR)||(LA148_0>=WHERE && LA148_0<=AS)||(LA148_0>=ELSE && LA148_0<=FROM)||LA148_0==IS||(LA148_0>=GROUP && LA148_0<=HAVING)||LA148_0==ALL||LA148_0==OUTPUT||LA148_0==INSERT||(LA148_0>=ORDER && LA148_0<=DESC)||LA148_0==PATTERN||(LA148_0>=TIMEPERIOD_SEC && LA148_0<=TIMEPERIOD_SECONDS)||LA148_0==ROW_LIMIT_EXPR||LA148_0==MEASURES||LA148_0==AFTER||LA148_0==COMMA||LA148_0==EQUALS||LA148_0==RPAREN||LA148_0==BOR||(LA148_0>=RBRACK && LA148_0<=COLON)||(LA148_0>=BAND && LA148_0<=GE)||LA148_0==RCURLY) ) {
                alt148=1;
            }
            else if ( ((LA148_0>=IN_SET && LA148_0<=REGEXP)||LA148_0==NOT_EXPR) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    // EsperEPL2Grammar.g:1058:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:1058:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:1059:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:1059:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);

                        if ( ((LA140_0>=LT && LA140_0<=GE)) ) {
                            alt140=1;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1060:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:1060:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt135=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt135=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt135=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt135=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt135=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 135, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt135) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1060:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6023); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1060:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6027); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:1060:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6031); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:1060:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6035); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:1061:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt139=2;
                    	    int LA139_0 = input.LA(1);

                    	    if ( (LA139_0==WINDOW||LA139_0==ESCAPE||LA139_0==EVERY_EXPR||(LA139_0>=SUM && LA139_0<=COUNT)||LA139_0==OUTER||(LA139_0>=JOIN && LA139_0<=FULL)||(LA139_0>=EVENTS && LA139_0<=LAST)||(LA139_0>=UNIDIRECTIONAL && LA139_0<=CURRENT_TIMESTAMP)||LA139_0==SNAPSHOT||(LA139_0>=VARIABLE && LA139_0<=AT)||(LA139_0>=BOOLEAN_TRUE && LA139_0<=VALUE_NULL)||(LA139_0>=DEFINE && LA139_0<=MATCHES)||LA139_0==NUM_DOUBLE||LA139_0==IDENT||LA139_0==LPAREN||(LA139_0>=PLUS && LA139_0<=QUESTION)||(LA139_0>=STRING_LITERAL && LA139_0<=QUOTED_STRING_LITERAL)||LA139_0==MINUS||LA139_0==LCURLY||LA139_0==NUM_INT||(LA139_0>=TICKED_STRING_LITERAL && LA139_0<=NUM_FLOAT)) ) {
                    	        alt139=1;
                    	    }
                    	    else if ( ((LA139_0>=ALL && LA139_0<=SOME)) ) {
                    	        alt139=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 139, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt139) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1062:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6059);
                    	            concatenationExpr335=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr335.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1063:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:1063:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt136=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt136=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt136=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt136=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 136, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt136) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1063:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression6076); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1063:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression6082); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:1063:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression6088); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:1063:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt138=2;
                    	            int LA138_0 = input.LA(1);

                    	            if ( (LA138_0==LPAREN) ) {
                    	                int LA138_1 = input.LA(2);

                    	                if ( (LA138_1==SELECT) ) {
                    	                    alt138=2;
                    	                }
                    	                else if ( (LA138_1==WINDOW||LA138_1==ESCAPE||(LA138_1>=NOT_EXPR && LA138_1<=EVERY_EXPR)||(LA138_1>=SUM && LA138_1<=COUNT)||LA138_1==CASE||LA138_1==OUTER||(LA138_1>=JOIN && LA138_1<=FULL)||(LA138_1>=EVENTS && LA138_1<=LAST)||(LA138_1>=UNIDIRECTIONAL && LA138_1<=CURRENT_TIMESTAMP)||LA138_1==SNAPSHOT||(LA138_1>=VARIABLE && LA138_1<=AT)||(LA138_1>=BOOLEAN_TRUE && LA138_1<=VALUE_NULL)||(LA138_1>=DEFINE && LA138_1<=MATCHES)||LA138_1==NUM_DOUBLE||LA138_1==IDENT||(LA138_1>=LPAREN && LA138_1<=RPAREN)||(LA138_1>=PLUS && LA138_1<=QUESTION)||(LA138_1>=STRING_LITERAL && LA138_1<=QUOTED_STRING_LITERAL)||LA138_1==MINUS||LA138_1==LCURLY||LA138_1==NUM_INT||(LA138_1>=TICKED_STRING_LITERAL && LA138_1<=NUM_FLOAT)) ) {
                    	                    alt138=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 138, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 138, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt138) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1063:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:1063:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:1063:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN336=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6094); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN336);

                    	                    // EsperEPL2Grammar.g:1063:48: ( expressionList )?
                    	                    int alt137=2;
                    	                    int LA137_0 = input.LA(1);

                    	                    if ( (LA137_0==WINDOW||LA137_0==ESCAPE||(LA137_0>=NOT_EXPR && LA137_0<=EVERY_EXPR)||(LA137_0>=SUM && LA137_0<=COUNT)||LA137_0==CASE||LA137_0==OUTER||(LA137_0>=JOIN && LA137_0<=FULL)||(LA137_0>=EVENTS && LA137_0<=LAST)||(LA137_0>=UNIDIRECTIONAL && LA137_0<=CURRENT_TIMESTAMP)||LA137_0==SNAPSHOT||(LA137_0>=VARIABLE && LA137_0<=AT)||(LA137_0>=BOOLEAN_TRUE && LA137_0<=VALUE_NULL)||(LA137_0>=DEFINE && LA137_0<=MATCHES)||LA137_0==NUM_DOUBLE||LA137_0==IDENT||LA137_0==LPAREN||(LA137_0>=PLUS && LA137_0<=QUESTION)||(LA137_0>=STRING_LITERAL && LA137_0<=QUOTED_STRING_LITERAL)||LA137_0==MINUS||LA137_0==LCURLY||LA137_0==NUM_INT||(LA137_0>=TICKED_STRING_LITERAL && LA137_0<=NUM_FLOAT)) ) {
                    	                        alt137=1;
                    	                    }
                    	                    switch (alt137) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:1063:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression6096);
                    	                            expressionList337=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList337.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN338=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6099); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN338);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1063:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6104);
                    	                    subSelectGroupExpression339=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression339.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: g, expressionList, concatenationExpr, concatenationExpr, subSelectGroupExpression, concatenationExpr
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1067:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:1067:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1068:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:1068:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:1068:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:1068:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1069:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1071:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:1071:6: (n= NOT_EXPR )?
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==NOT_EXPR) ) {
                        alt141=1;
                    }
                    switch (alt141) {
                        case 1 :
                            // EsperEPL2Grammar.g:1071:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression6200); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1072:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt147=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA147_1 = input.LA(2);

                        if ( (LA147_1==LPAREN) ) {
                            int LA147_5 = input.LA(3);

                            if ( (LA147_5==SELECT) ) {
                                alt147=2;
                            }
                            else if ( (LA147_5==WINDOW||LA147_5==ESCAPE||(LA147_5>=NOT_EXPR && LA147_5<=EVERY_EXPR)||(LA147_5>=SUM && LA147_5<=COUNT)||LA147_5==CASE||LA147_5==OUTER||(LA147_5>=JOIN && LA147_5<=FULL)||(LA147_5>=EVENTS && LA147_5<=LAST)||(LA147_5>=UNIDIRECTIONAL && LA147_5<=CURRENT_TIMESTAMP)||LA147_5==SNAPSHOT||(LA147_5>=VARIABLE && LA147_5<=AT)||(LA147_5>=BOOLEAN_TRUE && LA147_5<=VALUE_NULL)||(LA147_5>=DEFINE && LA147_5<=MATCHES)||LA147_5==NUM_DOUBLE||LA147_5==IDENT||LA147_5==LPAREN||(LA147_5>=PLUS && LA147_5<=QUESTION)||(LA147_5>=STRING_LITERAL && LA147_5<=QUOTED_STRING_LITERAL)||LA147_5==MINUS||LA147_5==LCURLY||LA147_5==NUM_INT||(LA147_5>=TICKED_STRING_LITERAL && LA147_5<=NUM_FLOAT)) ) {
                                alt147=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 147, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA147_1==LBRACK) ) {
                            alt147=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 147, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt147=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt147=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt147=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 147, 0, input);

                        throw nvae;
                    }

                    switch (alt147) {
                        case 1 :
                            // EsperEPL2Grammar.g:1075:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:1075:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:1075:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6227); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:1076:8: (l= LPAREN | l= LBRACK )
                            int alt142=2;
                            int LA142_0 = input.LA(1);

                            if ( (LA142_0==LPAREN) ) {
                                alt142=1;
                            }
                            else if ( (LA142_0==LBRACK) ) {
                                alt142=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 142, 0, input);

                                throw nvae;
                            }
                            switch (alt142) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1076:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6239); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1076:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression6245); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression6248);
                            expression340=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression340.getTree());
                            // EsperEPL2Grammar.g:1077:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt144=2;
                            int LA144_0 = input.LA(1);

                            if ( (LA144_0==COLON) ) {
                                alt144=1;
                            }
                            else if ( (LA144_0==COMMA||LA144_0==RPAREN||LA144_0==RBRACK) ) {
                                alt144=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 144, 0, input);

                                throw nvae;
                            }
                            switch (alt144) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1078:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:1078:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:1078:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression6270); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:1078:20: ( expression )
                                    // EsperEPL2Grammar.g:1078:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression6273);
                                    expression341=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression341.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1080:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:1080:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:1080:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:1080:10: ( COMMA expression )*
                                    loop143:
                                    do {
                                        int alt143=2;
                                        int LA143_0 = input.LA(1);

                                        if ( (LA143_0==COMMA) ) {
                                            alt143=1;
                                        }


                                        switch (alt143) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:1080:11: COMMA expression
                                    	    {
                                    	    COMMA342=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression6299); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA342);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression6301);
                                    	    expression343=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression343.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop143;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1082:8: (r= RPAREN | r= RBRACK )
                            int alt145=2;
                            int LA145_0 = input.LA(1);

                            if ( (LA145_0==RPAREN) ) {
                                alt145=1;
                            }
                            else if ( (LA145_0==RBRACK) ) {
                                alt145=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 145, 0, input);

                                throw nvae;
                            }
                            switch (alt145) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1082:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6327); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1082:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression6333); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: r, IN_SET, concatenationExpr, l, expression, r, concatenationExpr, expression, l, concatenationExpr, expression, l, l, concatenationExpr, r, expression, r
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1084:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:1084:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1085:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:1085:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1086:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:1086:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1087:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:1087:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1088:7: IN_SET inSubSelectQuery
                            {
                            IN_SET344=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6456); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET344);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression6458);
                            inSubSelectQuery345=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery345.getTree());


                            // AST REWRITE
                            // elements: inSubSelectQuery, concatenationExpr, inSubSelectQuery, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1089:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1089:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1090:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:1090:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1091:7: BETWEEN betweenList
                            {
                            BETWEEN346=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression6504); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN346);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression6506);
                            betweenList347=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList347.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, BETWEEN, concatenationExpr, betweenList, betweenList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1092:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1092:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1093:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:1093:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:1094:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE348=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression6556); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE348);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6558);
                            concatenationExpr349=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr349.getTree());
                            // EsperEPL2Grammar.g:1094:30: ( ESCAPE stringconstant )?
                            int alt146=2;
                            int LA146_0 = input.LA(1);

                            if ( (LA146_0==ESCAPE) ) {
                                alt146=1;
                            }
                            switch (alt146) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1094:31: ESCAPE stringconstant
                                    {
                                    ESCAPE350=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression6561); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE350);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression6563);
                                    stringconstant351=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant351.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: stringconstant, concatenationExpr, LIKE, stringconstant, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1095:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1095:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:1095:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1095:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1096:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:1096:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:1096:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1096:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:1097:7: REGEXP concatenationExpr
                            {
                            REGEXP352=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression6615); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP352);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6617);
                            concatenationExpr353=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr353.getTree());


                            // AST REWRITE
                            // elements: REGEXP, concatenationExpr, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1098:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1098:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1099:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:1099:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:1104:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr354 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1105:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1105:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery6679);
            subQueryExpr354=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr354.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1106:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1106:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:1109:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR357=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression355 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression356 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression358 = null;


        CommonTree c_tree=null;
        CommonTree LOR357_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:1110:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:1110:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6704);
            additiveExpression355=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression355.getTree());
            // EsperEPL2Grammar.g:1110:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==LOR) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // EsperEPL2Grammar.g:1110:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr6710); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6712);
                    additiveExpression356=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression356.getTree());
                    // EsperEPL2Grammar.g:1110:50: ( LOR additiveExpression )*
                    loop149:
                    do {
                        int alt149=2;
                        int LA149_0 = input.LA(1);

                        if ( (LA149_0==LOR) ) {
                            alt149=1;
                        }


                        switch (alt149) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1110:52: LOR additiveExpression
                    	    {
                    	    LOR357=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr6716); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR357);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6718);
                    	    additiveExpression358=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression358.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop149;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1111:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:1111:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1112:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:1115:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS360=null;
        Token MINUS361=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression359 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression362 = null;


        CommonTree PLUS360_tree=null;
        CommonTree MINUS361_tree=null;

        try {
            // EsperEPL2Grammar.g:1116:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:1116:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression6759);
            multiplyExpression359=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression359.getTree());
            // EsperEPL2Grammar.g:1116:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==PLUS||LA152_0==MINUS) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1116:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:1116:25: ( PLUS | MINUS )
            	    int alt151=2;
            	    int LA151_0 = input.LA(1);

            	    if ( (LA151_0==PLUS) ) {
            	        alt151=1;
            	    }
            	    else if ( (LA151_0==MINUS) ) {
            	        alt151=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 151, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt151) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1116:26: PLUS
            	            {
            	            PLUS360=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression6764); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS360_tree = (CommonTree)adaptor.create(PLUS360);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS360_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1116:32: MINUS
            	            {
            	            MINUS361=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression6767); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS361_tree = (CommonTree)adaptor.create(MINUS361);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS361_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression6771);
            	    multiplyExpression362=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression362.getTree());

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:1119:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR364=null;
        Token DIV365=null;
        Token MOD366=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression363 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression367 = null;


        CommonTree STAR364_tree=null;
        CommonTree DIV365_tree=null;
        CommonTree MOD366_tree=null;

        try {
            // EsperEPL2Grammar.g:1120:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:1120:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression6785);
            unaryExpression363=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression363.getTree());
            // EsperEPL2Grammar.g:1120:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==STAR||(LA154_0>=DIV && LA154_0<=MOD)) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1120:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:1120:22: ( STAR | DIV | MOD )
            	    int alt153=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt153=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt153=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt153=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 153, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt153) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1120:23: STAR
            	            {
            	            STAR364=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression6790); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR364_tree = (CommonTree)adaptor.create(STAR364);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR364_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1120:29: DIV
            	            {
            	            DIV365=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression6793); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV365_tree = (CommonTree)adaptor.create(DIV365);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV365_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1120:34: MOD
            	            {
            	            MOD366=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression6796); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD366_tree = (CommonTree)adaptor.create(MOD366);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD366_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression6800);
            	    unaryExpression367=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression367.getTree());

            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:1123:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS368=null;
        Token LPAREN372=null;
        Token RPAREN374=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty369 = null;

        EsperEPL2GrammarParser.constant_return constant370 = null;

        EsperEPL2GrammarParser.substitution_return substitution371 = null;

        EsperEPL2GrammarParser.expression_return expression373 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction375 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc376 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression377 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression378 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression379 = null;


        CommonTree MINUS368_tree=null;
        CommonTree LPAREN372_tree=null;
        CommonTree RPAREN374_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1124:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt155=9;
            alt155 = dfa155.predict(input);
            switch (alt155) {
                case 1 :
                    // EsperEPL2Grammar.g:1124:4: MINUS eventProperty
                    {
                    MINUS368=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression6815); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS368);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression6817);
                    eventProperty369=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty369.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1124:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:1124:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1125:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression6830);
                    constant370=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant370.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1126:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression6835);
                    substitution371=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution371.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1127:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN372=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression6840); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression6843);
                    expression373=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression373.getTree());
                    RPAREN374=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression6845); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1128:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression6851);
                    eventPropertyOrLibFunction375=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction375.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1129:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:1129:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:1129:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression6863);
                    builtinFunc376=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc376.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1130:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression6869);
                    arrayExpression377=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression377.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1131:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression6874);
                    subSelectExpression378=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression378.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1132:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression6879);
                    existsSubSelectExpression379=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression379.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:1135:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr380 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1136:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1136:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression6896);
            subQueryExpr380=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr380.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1137:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1137:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:1140:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr381 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1141:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1141:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression6918);
            subQueryExpr381=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr381.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1142:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1142:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:1145:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS382=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr383 = null;


        CommonTree EXISTS382_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1146:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1146:4: EXISTS subQueryExpr
            {
            EXISTS382=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression6940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS382);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression6942);
            subQueryExpr383=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr383.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1147:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1147:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:1150:1: subQueryExpr : LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN384=null;
        Token SELECT385=null;
        Token DISTINCT386=null;
        Token FROM388=null;
        Token WHERE390=null;
        Token RPAREN392=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement387 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr389 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause391 = null;


        CommonTree LPAREN384_tree=null;
        CommonTree SELECT385_tree=null;
        CommonTree DISTINCT386_tree=null;
        CommonTree FROM388_tree=null;
        CommonTree WHERE390_tree=null;
        CommonTree RPAREN392_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:1153:2: ( LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:1153:4: LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN384=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr6975); if (state.failed) return retval;
            SELECT385=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr6981); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1154:11: ( DISTINCT )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==DISTINCT) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // EsperEPL2Grammar.g:1154:11: DISTINCT
                    {
                    DISTINCT386=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr6984); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT386_tree = (CommonTree)adaptor.create(DISTINCT386);
                    adaptor.addChild(root_0, DISTINCT386_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr6987);
            selectionListElement387=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement387.getTree());
            FROM388=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr6994); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr6997);
            subSelectFilterExpr389=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr389.getTree());
            // EsperEPL2Grammar.g:1156:6: ( WHERE whereClause )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==WHERE) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // EsperEPL2Grammar.g:1156:7: WHERE whereClause
                    {
                    WHERE390=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7005); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7008);
                    whereClause391=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause391.getTree());

                    }
                    break;

            }

            RPAREN392=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7017); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:1160:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT394=null;
        Token DOT396=null;
        Token AS398=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression393 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression395 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression397 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT394_tree=null;
        CommonTree DOT396_tree=null;
        CommonTree AS398_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:1163:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:1163:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr7041);
            eventFilterExpression393=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression393.getTree());
            // EsperEPL2Grammar.g:1164:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==DOT) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // EsperEPL2Grammar.g:1164:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT394=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7046); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT394);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7048);
                    viewExpression395=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression395.getTree());
                    // EsperEPL2Grammar.g:1164:23: ( DOT viewExpression )*
                    loop158:
                    do {
                        int alt158=2;
                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==DOT) ) {
                            alt158=1;
                        }


                        switch (alt158) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1164:24: DOT viewExpression
                    	    {
                    	    DOT396=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7051); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT396);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7053);
                    	    viewExpression397=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression397.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1164:47: ( AS i= IDENT | i= IDENT )?
            int alt160=3;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==AS) ) {
                alt160=1;
            }
            else if ( (LA160_0==IDENT) ) {
                alt160=2;
            }
            switch (alt160) {
                case 1 :
                    // EsperEPL2Grammar.g:1164:48: AS i= IDENT
                    {
                    AS398=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr7060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS398);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1164:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7070); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1164:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt161=3;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==RETAINUNION) ) {
                alt161=1;
            }
            else if ( (LA161_0==RETAININTERSECTION) ) {
                alt161=2;
            }
            switch (alt161) {
                case 1 :
                    // EsperEPL2Grammar.g:1164:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr7077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1164:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventFilterExpression, ri, viewExpression, ru, i
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1165:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:1165:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:1165:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:1165:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1165:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:1165:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:1168:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY399=null;
        Token COMMA401=null;
        Token RCURLY403=null;
        EsperEPL2GrammarParser.expression_return expression400 = null;

        EsperEPL2GrammarParser.expression_return expression402 = null;


        CommonTree LCURLY399_tree=null;
        CommonTree COMMA401_tree=null;
        CommonTree RCURLY403_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1169:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:1169:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY399=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression7121); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY399);

            // EsperEPL2Grammar.g:1169:11: ( expression ( COMMA expression )* )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==WINDOW||LA163_0==ESCAPE||(LA163_0>=NOT_EXPR && LA163_0<=EVERY_EXPR)||(LA163_0>=SUM && LA163_0<=COUNT)||LA163_0==CASE||LA163_0==OUTER||(LA163_0>=JOIN && LA163_0<=FULL)||(LA163_0>=EVENTS && LA163_0<=LAST)||(LA163_0>=UNIDIRECTIONAL && LA163_0<=CURRENT_TIMESTAMP)||LA163_0==SNAPSHOT||(LA163_0>=VARIABLE && LA163_0<=AT)||(LA163_0>=BOOLEAN_TRUE && LA163_0<=VALUE_NULL)||(LA163_0>=DEFINE && LA163_0<=MATCHES)||LA163_0==NUM_DOUBLE||LA163_0==IDENT||LA163_0==LPAREN||(LA163_0>=PLUS && LA163_0<=QUESTION)||(LA163_0>=STRING_LITERAL && LA163_0<=QUOTED_STRING_LITERAL)||LA163_0==MINUS||LA163_0==LCURLY||LA163_0==NUM_INT||(LA163_0>=TICKED_STRING_LITERAL && LA163_0<=NUM_FLOAT)) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // EsperEPL2Grammar.g:1169:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression7124);
                    expression400=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression400.getTree());
                    // EsperEPL2Grammar.g:1169:23: ( COMMA expression )*
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==COMMA) ) {
                            alt162=1;
                        }


                        switch (alt162) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1169:24: COMMA expression
                    	    {
                    	    COMMA401=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression7127); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA401);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression7129);
                    	    expression402=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression402.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop162;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY403=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression7136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY403);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1170:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:1170:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:1170:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:1173:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM404=null;
        Token LPAREN405=null;
        Token ALL406=null;
        Token DISTINCT407=null;
        Token RPAREN409=null;
        Token AVG410=null;
        Token LPAREN411=null;
        Token ALL412=null;
        Token DISTINCT413=null;
        Token RPAREN415=null;
        Token COUNT416=null;
        Token LPAREN417=null;
        Token ALL418=null;
        Token DISTINCT419=null;
        Token STAR421=null;
        Token RPAREN422=null;
        Token MEDIAN423=null;
        Token LPAREN424=null;
        Token ALL425=null;
        Token DISTINCT426=null;
        Token RPAREN428=null;
        Token STDDEV429=null;
        Token LPAREN430=null;
        Token ALL431=null;
        Token DISTINCT432=null;
        Token RPAREN434=null;
        Token AVEDEV435=null;
        Token LPAREN436=null;
        Token ALL437=null;
        Token DISTINCT438=null;
        Token RPAREN440=null;
        Token COALESCE443=null;
        Token LPAREN444=null;
        Token COMMA446=null;
        Token COMMA448=null;
        Token RPAREN450=null;
        Token PREVIOUS451=null;
        Token LPAREN452=null;
        Token COMMA454=null;
        Token RPAREN456=null;
        Token PRIOR457=null;
        Token LPAREN458=null;
        Token NUM_INT459=null;
        Token COMMA460=null;
        Token RPAREN462=null;
        Token INSTANCEOF463=null;
        Token LPAREN464=null;
        Token COMMA466=null;
        Token COMMA468=null;
        Token RPAREN470=null;
        Token CAST471=null;
        Token LPAREN472=null;
        Token COMMA474=null;
        Token AS475=null;
        Token RPAREN477=null;
        Token EXISTS478=null;
        Token LPAREN479=null;
        Token RPAREN481=null;
        Token CURRENT_TIMESTAMP482=null;
        Token LPAREN483=null;
        Token RPAREN484=null;
        EsperEPL2GrammarParser.expression_return expression408 = null;

        EsperEPL2GrammarParser.expression_return expression414 = null;

        EsperEPL2GrammarParser.expression_return expression420 = null;

        EsperEPL2GrammarParser.expression_return expression427 = null;

        EsperEPL2GrammarParser.expression_return expression433 = null;

        EsperEPL2GrammarParser.expression_return expression439 = null;

        EsperEPL2GrammarParser.firstAggregation_return firstAggregation441 = null;

        EsperEPL2GrammarParser.lastAggregation_return lastAggregation442 = null;

        EsperEPL2GrammarParser.expression_return expression445 = null;

        EsperEPL2GrammarParser.expression_return expression447 = null;

        EsperEPL2GrammarParser.expression_return expression449 = null;

        EsperEPL2GrammarParser.expression_return expression453 = null;

        EsperEPL2GrammarParser.expression_return expression455 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty461 = null;

        EsperEPL2GrammarParser.expression_return expression465 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier467 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier469 = null;

        EsperEPL2GrammarParser.expression_return expression473 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier476 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty480 = null;


        CommonTree SUM404_tree=null;
        CommonTree LPAREN405_tree=null;
        CommonTree ALL406_tree=null;
        CommonTree DISTINCT407_tree=null;
        CommonTree RPAREN409_tree=null;
        CommonTree AVG410_tree=null;
        CommonTree LPAREN411_tree=null;
        CommonTree ALL412_tree=null;
        CommonTree DISTINCT413_tree=null;
        CommonTree RPAREN415_tree=null;
        CommonTree COUNT416_tree=null;
        CommonTree LPAREN417_tree=null;
        CommonTree ALL418_tree=null;
        CommonTree DISTINCT419_tree=null;
        CommonTree STAR421_tree=null;
        CommonTree RPAREN422_tree=null;
        CommonTree MEDIAN423_tree=null;
        CommonTree LPAREN424_tree=null;
        CommonTree ALL425_tree=null;
        CommonTree DISTINCT426_tree=null;
        CommonTree RPAREN428_tree=null;
        CommonTree STDDEV429_tree=null;
        CommonTree LPAREN430_tree=null;
        CommonTree ALL431_tree=null;
        CommonTree DISTINCT432_tree=null;
        CommonTree RPAREN434_tree=null;
        CommonTree AVEDEV435_tree=null;
        CommonTree LPAREN436_tree=null;
        CommonTree ALL437_tree=null;
        CommonTree DISTINCT438_tree=null;
        CommonTree RPAREN440_tree=null;
        CommonTree COALESCE443_tree=null;
        CommonTree LPAREN444_tree=null;
        CommonTree COMMA446_tree=null;
        CommonTree COMMA448_tree=null;
        CommonTree RPAREN450_tree=null;
        CommonTree PREVIOUS451_tree=null;
        CommonTree LPAREN452_tree=null;
        CommonTree COMMA454_tree=null;
        CommonTree RPAREN456_tree=null;
        CommonTree PRIOR457_tree=null;
        CommonTree LPAREN458_tree=null;
        CommonTree NUM_INT459_tree=null;
        CommonTree COMMA460_tree=null;
        CommonTree RPAREN462_tree=null;
        CommonTree INSTANCEOF463_tree=null;
        CommonTree LPAREN464_tree=null;
        CommonTree COMMA466_tree=null;
        CommonTree COMMA468_tree=null;
        CommonTree RPAREN470_tree=null;
        CommonTree CAST471_tree=null;
        CommonTree LPAREN472_tree=null;
        CommonTree COMMA474_tree=null;
        CommonTree AS475_tree=null;
        CommonTree RPAREN477_tree=null;
        CommonTree EXISTS478_tree=null;
        CommonTree LPAREN479_tree=null;
        CommonTree RPAREN481_tree=null;
        CommonTree CURRENT_TIMESTAMP482_tree=null;
        CommonTree LPAREN483_tree=null;
        CommonTree RPAREN484_tree=null;

        try {
            // EsperEPL2Grammar.g:1174:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt176=15;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt176=1;
                }
                break;
            case AVG:
                {
                alt176=2;
                }
                break;
            case COUNT:
                {
                alt176=3;
                }
                break;
            case MEDIAN:
                {
                alt176=4;
                }
                break;
            case STDDEV:
                {
                alt176=5;
                }
                break;
            case AVEDEV:
                {
                alt176=6;
                }
                break;
            case FIRST:
                {
                alt176=7;
                }
                break;
            case LAST:
                {
                alt176=8;
                }
                break;
            case COALESCE:
                {
                alt176=9;
                }
                break;
            case PREVIOUS:
                {
                alt176=10;
                }
                break;
            case PRIOR:
                {
                alt176=11;
                }
                break;
            case INSTANCEOF:
                {
                alt176=12;
                }
                break;
            case CAST:
                {
                alt176=13;
                }
                break;
            case EXISTS:
                {
                alt176=14;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt176=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;
            }

            switch (alt176) {
                case 1 :
                    // EsperEPL2Grammar.g:1174:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM404=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc7159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM404_tree = (CommonTree)adaptor.create(SUM404);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM404_tree, root_0);
                    }
                    LPAREN405=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7162); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1174:17: ( ALL | DISTINCT )?
                    int alt164=3;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==ALL) ) {
                        alt164=1;
                    }
                    else if ( (LA164_0==DISTINCT) ) {
                        alt164=2;
                    }
                    switch (alt164) {
                        case 1 :
                            // EsperEPL2Grammar.g:1174:18: ALL
                            {
                            ALL406=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7166); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1174:25: DISTINCT
                            {
                            DISTINCT407=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7171); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT407_tree = (CommonTree)adaptor.create(DISTINCT407);
                            adaptor.addChild(root_0, DISTINCT407_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7175);
                    expression408=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression408.getTree());
                    RPAREN409=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7177); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1175:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG410=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc7183); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG410_tree = (CommonTree)adaptor.create(AVG410);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG410_tree, root_0);
                    }
                    LPAREN411=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7186); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1175:17: ( ALL | DISTINCT )?
                    int alt165=3;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==ALL) ) {
                        alt165=1;
                    }
                    else if ( (LA165_0==DISTINCT) ) {
                        alt165=2;
                    }
                    switch (alt165) {
                        case 1 :
                            // EsperEPL2Grammar.g:1175:18: ALL
                            {
                            ALL412=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7190); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1175:25: DISTINCT
                            {
                            DISTINCT413=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7195); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT413_tree = (CommonTree)adaptor.create(DISTINCT413);
                            adaptor.addChild(root_0, DISTINCT413_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7199);
                    expression414=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression414.getTree());
                    RPAREN415=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7201); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1176:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT416=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc7207); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT416_tree = (CommonTree)adaptor.create(COUNT416);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT416_tree, root_0);
                    }
                    LPAREN417=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7210); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1177:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==WINDOW||LA167_0==ESCAPE||(LA167_0>=NOT_EXPR && LA167_0<=EVERY_EXPR)||(LA167_0>=SUM && LA167_0<=COUNT)||LA167_0==CASE||LA167_0==OUTER||(LA167_0>=JOIN && LA167_0<=FULL)||(LA167_0>=DISTINCT && LA167_0<=ALL)||(LA167_0>=EVENTS && LA167_0<=LAST)||(LA167_0>=UNIDIRECTIONAL && LA167_0<=CURRENT_TIMESTAMP)||LA167_0==SNAPSHOT||(LA167_0>=VARIABLE && LA167_0<=AT)||(LA167_0>=BOOLEAN_TRUE && LA167_0<=VALUE_NULL)||(LA167_0>=DEFINE && LA167_0<=MATCHES)||LA167_0==NUM_DOUBLE||LA167_0==IDENT||LA167_0==LPAREN||(LA167_0>=PLUS && LA167_0<=QUESTION)||(LA167_0>=STRING_LITERAL && LA167_0<=QUOTED_STRING_LITERAL)||LA167_0==MINUS||LA167_0==LCURLY||LA167_0==NUM_INT||(LA167_0>=TICKED_STRING_LITERAL && LA167_0<=NUM_FLOAT)) ) {
                        alt167=1;
                    }
                    else if ( (LA167_0==STAR) ) {
                        alt167=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 167, 0, input);

                        throw nvae;
                    }
                    switch (alt167) {
                        case 1 :
                            // EsperEPL2Grammar.g:1178:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:1178:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:1178:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:1178:5: ( ALL | DISTINCT )?
                            int alt166=3;
                            int LA166_0 = input.LA(1);

                            if ( (LA166_0==ALL) ) {
                                alt166=1;
                            }
                            else if ( (LA166_0==DISTINCT) ) {
                                alt166=2;
                            }
                            switch (alt166) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1178:6: ALL
                                    {
                                    ALL418=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7222); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1178:13: DISTINCT
                                    {
                                    DISTINCT419=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7227); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT419_tree = (CommonTree)adaptor.create(DISTINCT419);
                                    adaptor.addChild(root_0, DISTINCT419_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc7231);
                            expression420=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression420.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1180:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:1180:4: ( STAR )
                            // EsperEPL2Grammar.g:1180:5: STAR
                            {
                            STAR421=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc7242); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN422=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7253); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1183:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN423=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc7259); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN423_tree = (CommonTree)adaptor.create(MEDIAN423);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN423_tree, root_0);
                    }
                    LPAREN424=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7262); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1183:20: ( ALL | DISTINCT )?
                    int alt168=3;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==ALL) ) {
                        alt168=1;
                    }
                    else if ( (LA168_0==DISTINCT) ) {
                        alt168=2;
                    }
                    switch (alt168) {
                        case 1 :
                            // EsperEPL2Grammar.g:1183:21: ALL
                            {
                            ALL425=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7266); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1183:28: DISTINCT
                            {
                            DISTINCT426=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7271); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT426_tree = (CommonTree)adaptor.create(DISTINCT426);
                            adaptor.addChild(root_0, DISTINCT426_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7275);
                    expression427=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression427.getTree());
                    RPAREN428=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7277); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1184:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV429=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc7283); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV429_tree = (CommonTree)adaptor.create(STDDEV429);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV429_tree, root_0);
                    }
                    LPAREN430=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7286); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1184:20: ( ALL | DISTINCT )?
                    int alt169=3;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==ALL) ) {
                        alt169=1;
                    }
                    else if ( (LA169_0==DISTINCT) ) {
                        alt169=2;
                    }
                    switch (alt169) {
                        case 1 :
                            // EsperEPL2Grammar.g:1184:21: ALL
                            {
                            ALL431=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7290); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1184:28: DISTINCT
                            {
                            DISTINCT432=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7295); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT432_tree = (CommonTree)adaptor.create(DISTINCT432);
                            adaptor.addChild(root_0, DISTINCT432_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7299);
                    expression433=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression433.getTree());
                    RPAREN434=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7301); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1185:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV435=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc7307); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV435_tree = (CommonTree)adaptor.create(AVEDEV435);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV435_tree, root_0);
                    }
                    LPAREN436=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7310); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1185:20: ( ALL | DISTINCT )?
                    int alt170=3;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==ALL) ) {
                        alt170=1;
                    }
                    else if ( (LA170_0==DISTINCT) ) {
                        alt170=2;
                    }
                    switch (alt170) {
                        case 1 :
                            // EsperEPL2Grammar.g:1185:21: ALL
                            {
                            ALL437=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7314); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1185:28: DISTINCT
                            {
                            DISTINCT438=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7319); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT438_tree = (CommonTree)adaptor.create(DISTINCT438);
                            adaptor.addChild(root_0, DISTINCT438_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7323);
                    expression439=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression439.getTree());
                    RPAREN440=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7325); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1186:4: firstAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc7331);
                    firstAggregation441=firstAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation441.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1187:4: lastAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc7336);
                    lastAggregation442=lastAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation442.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1188:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE443=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc7341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE443_tree = (CommonTree)adaptor.create(COALESCE443);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE443_tree, root_0);
                    }
                    LPAREN444=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7344); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7347);
                    expression445=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression445.getTree());
                    COMMA446=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7349); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7352);
                    expression447=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression447.getTree());
                    // EsperEPL2Grammar.g:1188:51: ( COMMA expression )*
                    loop171:
                    do {
                        int alt171=2;
                        int LA171_0 = input.LA(1);

                        if ( (LA171_0==COMMA) ) {
                            alt171=1;
                        }


                        switch (alt171) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1188:52: COMMA expression
                    	    {
                    	    COMMA448=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7355); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc7358);
                    	    expression449=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression449.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop171;
                        }
                    } while (true);

                    RPAREN450=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7362); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1189:4: PREVIOUS LPAREN expression ( COMMA expression )? RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS451=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc7368); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS451_tree = (CommonTree)adaptor.create(PREVIOUS451);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS451_tree, root_0);
                    }
                    LPAREN452=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7371); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7374);
                    expression453=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression453.getTree());
                    // EsperEPL2Grammar.g:1189:33: ( COMMA expression )?
                    int alt172=2;
                    int LA172_0 = input.LA(1);

                    if ( (LA172_0==COMMA) ) {
                        alt172=1;
                    }
                    switch (alt172) {
                        case 1 :
                            // EsperEPL2Grammar.g:1189:34: COMMA expression
                            {
                            COMMA454=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7377); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc7380);
                            expression455=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression455.getTree());

                            }
                            break;

                    }

                    RPAREN456=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7384); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1190:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR457=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc7390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR457_tree = (CommonTree)adaptor.create(PRIOR457);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR457_tree, root_0);
                    }
                    LPAREN458=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7393); if (state.failed) return retval;
                    NUM_INT459=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc7396); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT459_tree = (CommonTree)adaptor.create(NUM_INT459);
                    adaptor.addChild(root_0, NUM_INT459_tree);
                    }
                    COMMA460=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7398); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7401);
                    eventProperty461=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty461.getTree());
                    RPAREN462=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7403); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1193:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF463=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc7413); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF463_tree = (CommonTree)adaptor.create(INSTANCEOF463);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF463_tree, root_0);
                    }
                    LPAREN464=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7416); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7419);
                    expression465=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression465.getTree());
                    COMMA466=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7421); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7424);
                    classIdentifier467=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier467.getTree());
                    // EsperEPL2Grammar.g:1193:58: ( COMMA classIdentifier )*
                    loop173:
                    do {
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==COMMA) ) {
                            alt173=1;
                        }


                        switch (alt173) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1193:59: COMMA classIdentifier
                    	    {
                    	    COMMA468=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7427); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7430);
                    	    classIdentifier469=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier469.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop173;
                        }
                    } while (true);

                    RPAREN470=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7434); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1194:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST471=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc7440); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST471_tree = (CommonTree)adaptor.create(CAST471);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST471_tree, root_0);
                    }
                    LPAREN472=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7443); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7446);
                    expression473=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression473.getTree());
                    // EsperEPL2Grammar.g:1194:29: ( COMMA | AS )
                    int alt174=2;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==COMMA) ) {
                        alt174=1;
                    }
                    else if ( (LA174_0==AS) ) {
                        alt174=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 174, 0, input);

                        throw nvae;
                    }
                    switch (alt174) {
                        case 1 :
                            // EsperEPL2Grammar.g:1194:30: COMMA
                            {
                            COMMA474=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7449); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1194:39: AS
                            {
                            AS475=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc7454); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7458);
                    classIdentifier476=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier476.getTree());
                    RPAREN477=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7460); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1195:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS478=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc7466); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS478_tree = (CommonTree)adaptor.create(EXISTS478);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS478_tree, root_0);
                    }
                    LPAREN479=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7469); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7472);
                    eventProperty480=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty480.getTree());
                    RPAREN481=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7474); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1196:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP482=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP482_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP482);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP482_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1196:23: ( LPAREN RPAREN )?
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==LPAREN) ) {
                        alt175=1;
                    }
                    switch (alt175) {
                        case 1 :
                            // EsperEPL2Grammar.g:1196:24: LPAREN RPAREN
                            {
                            LPAREN483=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7484); if (state.failed) return retval;
                            RPAREN484=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7487); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "firstAggregation"
    // EsperEPL2Grammar.g:1199:1: firstAggregation : FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token FIRST485=null;
        Token LPAREN486=null;
        Token RPAREN488=null;
        EsperEPL2GrammarParser.expression_return expression487 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree FIRST485_tree=null;
        CommonTree LPAREN486_tree=null;
        CommonTree RPAREN488_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1200:2: ( FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1200:4: FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            FIRST485=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation7502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST485);

            LPAREN486=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation7504); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN486);

            // EsperEPL2Grammar.g:1200:17: (a= ALL | d= DISTINCT )?
            int alt177=3;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==ALL) ) {
                alt177=1;
            }
            else if ( (LA177_0==DISTINCT) ) {
                alt177=2;
            }
            switch (alt177) {
                case 1 :
                    // EsperEPL2Grammar.g:1200:18: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_firstAggregation7509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1200:26: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_firstAggregation7515); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_firstAggregation7519);
            expression487=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression487.getTree());
            RPAREN488=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation7521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN488);



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1201:4: -> ^( FIRST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1201:7: ^( FIRST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1201:22: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "firstAggregation"

    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastAggregation"
    // EsperEPL2Grammar.g:1204:1: lastAggregation : LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token LAST489=null;
        Token LPAREN490=null;
        Token RPAREN492=null;
        EsperEPL2GrammarParser.expression_return expression491 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree LAST489_tree=null;
        CommonTree LPAREN490_tree=null;
        CommonTree RPAREN492_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1205:2: ( LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1205:4: LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            LAST489=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation7547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST489);

            LPAREN490=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation7549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN490);

            // EsperEPL2Grammar.g:1205:16: (a= ALL | d= DISTINCT )?
            int alt178=3;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==ALL) ) {
                alt178=1;
            }
            else if ( (LA178_0==DISTINCT) ) {
                alt178=2;
            }
            switch (alt178) {
                case 1 :
                    // EsperEPL2Grammar.g:1205:17: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_lastAggregation7554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1205:25: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_lastAggregation7560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_lastAggregation7564);
            expression491=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression491.getTree());
            RPAREN492=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation7566); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN492);



            // AST REWRITE
            // elements: d, expression
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1206:4: -> ^( LAST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1206:7: ^( LAST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1206:21: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastAggregation"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1209:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX493=null;
        Token MIN494=null;
        Token LPAREN495=null;
        Token COMMA497=null;
        Token COMMA499=null;
        Token RPAREN501=null;
        EsperEPL2GrammarParser.expression_return expression496 = null;

        EsperEPL2GrammarParser.expression_return expression498 = null;

        EsperEPL2GrammarParser.expression_return expression500 = null;


        CommonTree MAX493_tree=null;
        CommonTree MIN494_tree=null;
        CommonTree LPAREN495_tree=null;
        CommonTree COMMA497_tree=null;
        CommonTree COMMA499_tree=null;
        CommonTree RPAREN501_tree=null;

        try {
            // EsperEPL2Grammar.g:1210:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1210:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1210:4: ( MAX | MIN )
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==MAX) ) {
                alt179=1;
            }
            else if ( (LA179_0==MIN) ) {
                alt179=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }
            switch (alt179) {
                case 1 :
                    // EsperEPL2Grammar.g:1210:5: MAX
                    {
                    MAX493=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc7593); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX493_tree = (CommonTree)adaptor.create(MAX493);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX493_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1210:12: MIN
                    {
                    MIN494=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc7598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN494_tree = (CommonTree)adaptor.create(MIN494);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN494_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN495=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc7602); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc7605);
            expression496=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression496.getTree());
            // EsperEPL2Grammar.g:1210:37: ( COMMA expression ( COMMA expression )* )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==COMMA) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // EsperEPL2Grammar.g:1210:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA497=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc7608); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc7611);
                    expression498=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression498.getTree());
                    // EsperEPL2Grammar.g:1210:56: ( COMMA expression )*
                    loop180:
                    do {
                        int alt180=2;
                        int LA180_0 = input.LA(1);

                        if ( (LA180_0==COMMA) ) {
                            alt180=1;
                        }


                        switch (alt180) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1210:57: COMMA expression
                    	    {
                    	    COMMA499=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc7614); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc7617);
                    	    expression500=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression500.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop180;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN501=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc7624); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1213:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty502 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction503 = null;



        try {
            // EsperEPL2Grammar.g:1214:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt182=2;
            alt182 = dfa182.predict(input);
            switch (alt182) {
                case 1 :
                    // EsperEPL2Grammar.g:1214:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction7643);
                    eventProperty502=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty502.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1215:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction7648);
                    libFunction503=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction503.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1218:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT505=null;
        Token LPAREN507=null;
        Token RPAREN509=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy504 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent506 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs508 = null;


        CommonTree DOT505_tree=null;
        CommonTree LPAREN507_tree=null;
        CommonTree RPAREN509_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1219:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1219:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1219:4: ( classIdentifierNonGreedy DOT )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==IDENT) ) {
                int LA183_1 = input.LA(2);

                if ( (LA183_1==DOT) ) {
                    alt183=1;
                }
            }
            else if ( (LA183_0==TICKED_STRING_LITERAL) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // EsperEPL2Grammar.g:1219:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction7661);
                    classIdentifierNonGreedy504=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy504.getTree());
                    DOT505=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction7663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT505);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction7667);
            funcIdent506=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent506.getTree());
            LPAREN507=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction7669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN507);

            // EsperEPL2Grammar.g:1219:53: ( libFunctionArgs )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==WINDOW||LA184_0==ESCAPE||(LA184_0>=NOT_EXPR && LA184_0<=EVERY_EXPR)||(LA184_0>=SUM && LA184_0<=COUNT)||LA184_0==CASE||LA184_0==OUTER||(LA184_0>=JOIN && LA184_0<=FULL)||(LA184_0>=DISTINCT && LA184_0<=ALL)||(LA184_0>=EVENTS && LA184_0<=LAST)||(LA184_0>=UNIDIRECTIONAL && LA184_0<=CURRENT_TIMESTAMP)||LA184_0==SNAPSHOT||(LA184_0>=VARIABLE && LA184_0<=AT)||(LA184_0>=BOOLEAN_TRUE && LA184_0<=VALUE_NULL)||(LA184_0>=DEFINE && LA184_0<=MATCHES)||LA184_0==NUM_DOUBLE||LA184_0==IDENT||LA184_0==LPAREN||(LA184_0>=PLUS && LA184_0<=QUESTION)||(LA184_0>=STRING_LITERAL && LA184_0<=QUOTED_STRING_LITERAL)||LA184_0==MINUS||LA184_0==LCURLY||LA184_0==NUM_INT||(LA184_0>=TICKED_STRING_LITERAL && LA184_0<=NUM_FLOAT)) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // EsperEPL2Grammar.g:1219:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction7672);
                    libFunctionArgs508=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs508.getTree());

                    }
                    break;

            }

            RPAREN509=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction7676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN509);



            // AST REWRITE
            // elements: classIdentifierNonGreedy, funcIdent, libFunctionArgs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1220:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1220:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1220:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1220:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1223:1: funcIdent : ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        Token IDENT510=null;

        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree IDENT510_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1224:2: ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt185=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt185=1;
                }
                break;
            case MAX:
                {
                alt185=2;
                }
                break;
            case MIN:
                {
                alt185=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }

            switch (alt185) {
                case 1 :
                    // EsperEPL2Grammar.g:1224:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT510=(Token)match(input,IDENT,FOLLOW_IDENT_in_funcIdent7706); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT510_tree = (CommonTree)adaptor.create(IDENT510);
                    adaptor.addChild(root_0, IDENT510_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1225:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent7713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1225:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1226:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent7725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1226:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1229:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL511=null;
        Token DISTINCT512=null;
        Token COMMA514=null;
        EsperEPL2GrammarParser.expression_return expression513 = null;

        EsperEPL2GrammarParser.expression_return expression515 = null;


        CommonTree ALL511_tree=null;
        CommonTree DISTINCT512_tree=null;
        CommonTree COMMA514_tree=null;

        try {
            // EsperEPL2Grammar.g:1230:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1230:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1230:4: ( ALL | DISTINCT )?
            int alt186=3;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==ALL) ) {
                alt186=1;
            }
            else if ( (LA186_0==DISTINCT) ) {
                alt186=2;
            }
            switch (alt186) {
                case 1 :
                    // EsperEPL2Grammar.g:1230:5: ALL
                    {
                    ALL511=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs7743); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1230:12: DISTINCT
                    {
                    DISTINCT512=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs7748); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT512_tree = (CommonTree)adaptor.create(DISTINCT512);
                    adaptor.addChild(root_0, DISTINCT512_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs7752);
            expression513=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression513.getTree());
            // EsperEPL2Grammar.g:1230:34: ( COMMA expression )*
            loop187:
            do {
                int alt187=2;
                int LA187_0 = input.LA(1);

                if ( (LA187_0==COMMA) ) {
                    alt187=1;
                }


                switch (alt187) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1230:35: COMMA expression
            	    {
            	    COMMA514=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs7755); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs7758);
            	    expression515=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression515.getTree());

            	    }
            	    break;

            	default :
            	    break loop187;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1233:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR517=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr516 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr518 = null;


        CommonTree AND_EXPR517_tree=null;

        try {
            // EsperEPL2Grammar.g:1234:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1234:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList7772);
            concatenationExpr516=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr516.getTree());
            AND_EXPR517=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList7774); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList7777);
            concatenationExpr518=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr518.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1243:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression519 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1246:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1246:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression7805);
            followedByExpression519=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression519.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1249:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression520 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression521 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1250:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1250:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression7817);
            orExpression520=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression520.getTree());
            // EsperEPL2Grammar.g:1250:17: (f= FOLLOWED_BY orExpression )*
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==FOLLOWED_BY) ) {
                    alt188=1;
                }


                switch (alt188) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1250:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression7822); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression7824);
            	    orExpression521=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression521.getTree());

            	    }
            	    break;

            	default :
            	    break loop188;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1251:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1251:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1252:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1255:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression522 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression523 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1256:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1256:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression7863);
            andExpression522=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression522.getTree());
            // EsperEPL2Grammar.g:1256:18: (o= OR_EXPR andExpression )*
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==OR_EXPR) ) {
                    alt189=1;
                }


                switch (alt189) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1256:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression7868); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression7870);
            	    andExpression523=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression523.getTree());

            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);



            // AST REWRITE
            // elements: andExpression, andExpression, OR_EXPR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1257:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1257:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1258:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1261:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression524 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression525 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1262:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1262:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression7902);
            matchUntilExpression524=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression524.getTree());
            // EsperEPL2Grammar.g:1262:25: (a= AND_EXPR matchUntilExpression )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==AND_EXPR) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1262:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression7907); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression7909);
            	    matchUntilExpression525=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression525.getTree());

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);



            // AST REWRITE
            // elements: matchUntilExpression, AND_EXPR, matchUntilExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1263:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1263:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1264:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1267:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression526 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression527 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1268:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1268:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1268:4: (r= matchUntilRange )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==LBRACK) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // EsperEPL2Grammar.g:1268:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression7944);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression7948);
            qualifyExpression526=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression526.getTree());
            // EsperEPL2Grammar.g:1268:43: (a= UNTIL qualifyExpression )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==UNTIL) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // EsperEPL2Grammar.g:1268:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression7953); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression7955);
                    qualifyExpression527=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression527.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: matchUntilRange, qualifyExpression, qualifyExpression, matchUntilRange, qualifyExpression, qualifyExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1269:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1269:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1270:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1270:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1271:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1271:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1272:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1275:1: qualifyExpression : ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList528 = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix529 = null;


        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1276:2: ( ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1276:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1276:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( ((LA195_0>=NOT_EXPR && LA195_0<=EVERY_DISTINCT_EXPR)) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // EsperEPL2Grammar.g:1276:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1276:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList )
                    int alt193=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt193=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt193=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt193=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 193, 0, input);

                        throw nvae;
                    }

                    switch (alt193) {
                        case 1 :
                            // EsperEPL2Grammar.g:1276:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression8020); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1276:21: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression8026); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1276:34: d= EVERY_DISTINCT_EXPR distinctExpressionList
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8032); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);

                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression8034);
                            distinctExpressionList528=distinctExpressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList528.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1276:80: (r= matchUntilRange )?
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==LBRACK) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            // EsperEPL2Grammar.g:1276:81: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression8040);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression8049);
            guardPostFix529=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix529.getTree());


            // AST REWRITE
            // elements: guardPostFix, EVERY_DISTINCT_EXPR, guardPostFix, guardPostFix, matchUntilRange, guardPostFix, guardPostFix, EVERY_DISTINCT_EXPR, distinctExpressionList, EVERY_EXPR, guardPostFix, guardPostFix, matchUntilRange, distinctExpressionList, matchUntilRange, EVERY_EXPR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1278:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1278:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1279:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1279:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1280:3: -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
            if (d != null && r == null) {
                // EsperEPL2Grammar.g:1280:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1281:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1281:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1281:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1282:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1282:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1282:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1283:3: -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (d != null && r != null) {
                // EsperEPL2Grammar.g:1283:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                // EsperEPL2Grammar.g:1283:77: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1284:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionList"
    // EsperEPL2Grammar.g:1287:1: distinctExpressionList : LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) ;
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN530=null;
        Token COMMA532=null;
        Token RPAREN534=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom531 = null;

        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom533 = null;


        CommonTree LPAREN530_tree=null;
        CommonTree COMMA532_tree=null;
        CommonTree RPAREN534_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            // EsperEPL2Grammar.g:1288:2: ( LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) )
            // EsperEPL2Grammar.g:1288:4: LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN
            {
            LPAREN530=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList8164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN530);

            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8166);
            distinctExpressionAtom531=distinctExpressionAtom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom531.getTree());
            // EsperEPL2Grammar.g:1288:34: ( COMMA distinctExpressionAtom )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==COMMA) ) {
                    alt196=1;
                }


                switch (alt196) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1288:35: COMMA distinctExpressionAtom
            	    {
            	    COMMA532=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList8169); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA532);

            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8171);
            	    distinctExpressionAtom533=distinctExpressionAtom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom533.getTree());

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);

            RPAREN534=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList8175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN534);



            // AST REWRITE
            // elements: distinctExpressionAtom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1289:3: -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
            {
                // EsperEPL2Grammar.g:1289:6: ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);

                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());

                }
                stream_distinctExpressionAtom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionList"

    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionAtom"
    // EsperEPL2Grammar.g:1292:1: distinctExpressionAtom : expression ;
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.expression_return expression535 = null;



        try {
            // EsperEPL2Grammar.g:1293:2: ( expression )
            // EsperEPL2Grammar.g:1293:4: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_distinctExpressionAtom8198);
            expression535=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression535.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionAtom"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1296:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token w=null;
        Token RPAREN538=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression536 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression537 = null;

        EsperEPL2GrammarParser.guardExpression_return guardExpression539 = null;


        CommonTree l_tree=null;
        CommonTree w_tree=null;
        CommonTree RPAREN538_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1297:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1297:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )?
            {
            // EsperEPL2Grammar.g:1297:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==IDENT||LA197_0==TICKED_STRING_LITERAL) ) {
                alt197=1;
            }
            else if ( (LA197_0==LPAREN) ) {
                alt197=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }
            switch (alt197) {
                case 1 :
                    // EsperEPL2Grammar.g:1297:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix8213);
                    atomicExpression536=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression536.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1297:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix8219); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix8221);
                    patternExpression537=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression537.getTree());
                    RPAREN538=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix8223); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN538);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1297:59: (w= WHERE guardExpression )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==WHERE) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // EsperEPL2Grammar.g:1297:60: w= WHERE guardExpression
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix8229); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);

                    pushFollow(FOLLOW_guardExpression_in_guardPostFix8231);
                    guardExpression539=guardExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardExpression.add(guardExpression539.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: patternExpression, atomicExpression, patternExpression, atomicExpression, guardExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1298:3: -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            if (w != null) {
                // EsperEPL2Grammar.g:1298:20: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1298:33: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1298:51: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1299:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1299:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1299:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1302:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression540 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression541 = null;



        try {
            // EsperEPL2Grammar.g:1303:2: ( observerExpression | patternFilterExpression )
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==IDENT) ) {
                int LA199_1 = input.LA(2);

                if ( (LA199_1==COLON) ) {
                    alt199=1;
                }
                else if ( (LA199_1==EOF||(LA199_1>=OR_EXPR && LA199_1<=AND_EXPR)||LA199_1==WHERE||LA199_1==UNTIL||(LA199_1>=EQUALS && LA199_1<=RPAREN)||(LA199_1>=LBRACK && LA199_1<=RBRACK)||LA199_1==FOLLOWED_BY) ) {
                    alt199=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 199, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA199_0==TICKED_STRING_LITERAL) ) {
                alt199=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;
            }
            switch (alt199) {
                case 1 :
                    // EsperEPL2Grammar.g:1303:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression8273);
                    observerExpression540=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression540.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1303:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression8277);
                    patternFilterExpression541=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression541.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1306:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON542=null;
        Token LPAREN543=null;
        Token RPAREN545=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList544 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON542_tree=null;
        CommonTree LPAREN543_tree=null;
        CommonTree RPAREN545_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1307:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1307:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON542=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression8294); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON542);

            // EsperEPL2Grammar.g:1307:19: (nm= IDENT | a= AT )
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==IDENT) ) {
                alt200=1;
            }
            else if ( (LA200_0==AT) ) {
                alt200=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }
            switch (alt200) {
                case 1 :
                    // EsperEPL2Grammar.g:1307:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1307:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression8305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN543=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression8308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN543);

            // EsperEPL2Grammar.g:1307:44: ( expressionWithTimeList )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==WINDOW||LA201_0==ESCAPE||(LA201_0>=NOT_EXPR && LA201_0<=EVERY_EXPR)||(LA201_0>=SUM && LA201_0<=COUNT)||LA201_0==CASE||LA201_0==OUTER||(LA201_0>=JOIN && LA201_0<=FULL)||(LA201_0>=EVENTS && LA201_0<=LAST)||(LA201_0>=UNIDIRECTIONAL && LA201_0<=CURRENT_TIMESTAMP)||LA201_0==SNAPSHOT||(LA201_0>=VARIABLE && LA201_0<=AT)||(LA201_0>=BOOLEAN_TRUE && LA201_0<=VALUE_NULL)||(LA201_0>=DEFINE && LA201_0<=MATCHES)||LA201_0==NUM_DOUBLE||LA201_0==IDENT||LA201_0==LPAREN||LA201_0==STAR||(LA201_0>=PLUS && LA201_0<=LBRACK)||(LA201_0>=STRING_LITERAL && LA201_0<=QUOTED_STRING_LITERAL)||LA201_0==MINUS||LA201_0==LCURLY||LA201_0==NUM_INT||(LA201_0>=TICKED_STRING_LITERAL && LA201_0<=NUM_FLOAT)) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // EsperEPL2Grammar.g:1307:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression8310);
                    expressionWithTimeList544=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList544.getTree());

                    }
                    break;

            }

            RPAREN545=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression8313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN545);



            // AST REWRITE
            // elements: expressionWithTimeList, ns, expressionWithTimeList, IDENT, nm, ns
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1308:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1308:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1308:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1308:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1309:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1309:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1309:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardExpression"
    // EsperEPL2Grammar.g:1312:1: guardExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardExpression_return guardExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardExpression_return retval = new EsperEPL2GrammarParser.guardExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT546=null;
        Token COLON547=null;
        Token IDENT548=null;
        Token LPAREN549=null;
        Token RPAREN551=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList550 = null;


        CommonTree IDENT546_tree=null;
        CommonTree COLON547_tree=null;
        CommonTree IDENT548_tree=null;
        CommonTree LPAREN549_tree=null;
        CommonTree RPAREN551_tree=null;

        try {
            // EsperEPL2Grammar.g:1313:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1313:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT546=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression8362); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT546_tree = (CommonTree)adaptor.create(IDENT546);
            adaptor.addChild(root_0, IDENT546_tree);
            }
            COLON547=(Token)match(input,COLON,FOLLOW_COLON_in_guardExpression8364); if (state.failed) return retval;
            IDENT548=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression8367); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT548_tree = (CommonTree)adaptor.create(IDENT548);
            adaptor.addChild(root_0, IDENT548_tree);
            }
            LPAREN549=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardExpression8369); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1313:31: ( expressionWithTimeList )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==WINDOW||LA202_0==ESCAPE||(LA202_0>=NOT_EXPR && LA202_0<=EVERY_EXPR)||(LA202_0>=SUM && LA202_0<=COUNT)||LA202_0==CASE||LA202_0==OUTER||(LA202_0>=JOIN && LA202_0<=FULL)||(LA202_0>=EVENTS && LA202_0<=LAST)||(LA202_0>=UNIDIRECTIONAL && LA202_0<=CURRENT_TIMESTAMP)||LA202_0==SNAPSHOT||(LA202_0>=VARIABLE && LA202_0<=AT)||(LA202_0>=BOOLEAN_TRUE && LA202_0<=VALUE_NULL)||(LA202_0>=DEFINE && LA202_0<=MATCHES)||LA202_0==NUM_DOUBLE||LA202_0==IDENT||LA202_0==LPAREN||LA202_0==STAR||(LA202_0>=PLUS && LA202_0<=LBRACK)||(LA202_0>=STRING_LITERAL && LA202_0<=QUOTED_STRING_LITERAL)||LA202_0==MINUS||LA202_0==LCURLY||LA202_0==NUM_INT||(LA202_0>=TICKED_STRING_LITERAL && LA202_0<=NUM_FLOAT)) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // EsperEPL2Grammar.g:1313:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardExpression8373);
                    expressionWithTimeList550=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList550.getTree());

                    }
                    break;

            }

            RPAREN551=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardExpression8377); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1317:1: matchUntilRange : LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token d1=null;
        Token r=null;
        Token c1=null;
        Token db=null;
        Token db2=null;
        Token db3=null;
        Token LBRACK552=null;
        Token DOT553=null;
        Token DOT554=null;
        Token DOT555=null;
        Token DOT556=null;
        Token RBRACK557=null;

        CommonTree l_tree=null;
        CommonTree d1_tree=null;
        CommonTree r_tree=null;
        CommonTree c1_tree=null;
        CommonTree db_tree=null;
        CommonTree db2_tree=null;
        CommonTree db3_tree=null;
        CommonTree LBRACK552_tree=null;
        CommonTree DOT553_tree=null;
        CommonTree DOT554_tree=null;
        CommonTree DOT555_tree=null;
        CommonTree DOT556_tree=null;
        CommonTree RBRACK557_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1318:2: ( LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) )
            // EsperEPL2Grammar.g:1318:4: LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK
            {
            LBRACK552=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange8391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK552);

            // EsperEPL2Grammar.g:1318:11: (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE )
            int alt207=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt207=1;
                }
                break;
            case NUM_DOUBLE:
                {
                alt207=2;
                }
                break;
            case DOT:
                {
                int LA207_3 = input.LA(2);

                if ( (LA207_3==DOT) ) {
                    alt207=3;
                }
                else if ( (LA207_3==NUM_DOUBLE) ) {
                    alt207=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;
            }

            switch (alt207) {
                case 1 :
                    // EsperEPL2Grammar.g:1319:4: l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    {
                    l=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8400); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(l);

                    // EsperEPL2Grammar.g:1319:14: ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    int alt204=3;
                    int LA204_0 = input.LA(1);

                    if ( (LA204_0==DOT) ) {
                        alt204=1;
                    }
                    else if ( (LA204_0==COLON) ) {
                        alt204=2;
                    }
                    switch (alt204) {
                        case 1 :
                            // EsperEPL2Grammar.g:1319:17: (d1= DOT DOT (r= NUM_INT )? )
                            {
                            // EsperEPL2Grammar.g:1319:17: (d1= DOT DOT (r= NUM_INT )? )
                            // EsperEPL2Grammar.g:1319:18: d1= DOT DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8408); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            DOT553=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8410); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT553);

                            // EsperEPL2Grammar.g:1319:30: (r= NUM_INT )?
                            int alt203=2;
                            int LA203_0 = input.LA(1);

                            if ( (LA203_0==NUM_INT) ) {
                                alt203=1;
                            }
                            switch (alt203) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1319:30: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8414); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1320:17: (c1= COLON r= NUM_INT )
                            {
                            // EsperEPL2Grammar.g:1320:17: (c1= COLON r= NUM_INT )
                            // EsperEPL2Grammar.g:1320:18: c1= COLON r= NUM_INT
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange8438); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8442); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1322:8: db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    {
                    db=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db);

                    // EsperEPL2Grammar.g:1322:22: (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    int alt206=3;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==DOT) ) {
                        alt206=1;
                    }
                    else if ( (LA206_0==NUM_DOUBLE) ) {
                        alt206=2;
                    }
                    switch (alt206) {
                        case 1 :
                            // EsperEPL2Grammar.g:1323:27: d1= DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8496); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            // EsperEPL2Grammar.g:1323:35: (r= NUM_INT )?
                            int alt205=2;
                            int LA205_0 = input.LA(1);

                            if ( (LA205_0==NUM_INT) ) {
                                alt205=1;
                            }
                            switch (alt205) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1323:35: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8500); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1325:27: db2= NUM_DOUBLE
                            {
                            db2=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8560); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db2);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1327:8: DOT DOT r= NUM_INT
                    {
                    DOT554=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT554);

                    DOT555=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT555);

                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1328:8: DOT db3= NUM_DOUBLE
                    {
                    DOT556=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8612); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT556);

                    db3=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db3);


                    }
                    break;

            }

            RBRACK557=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange8627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK557);



            // AST REWRITE
            // elements: db, l, l, db, db2, r, r, r, r, db, db3, db, l, l
            // token labels: db, r, l, db2, db3
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleTokenStream stream_db2=new RewriteRuleTokenStream(adaptor,"token db2",db2);
            RewriteRuleTokenStream stream_db3=new RewriteRuleTokenStream(adaptor,"token db3",db3);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1331:3: -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1331:47: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1332:3: -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
            if (l != null && d1 != null) {
                // EsperEPL2Grammar.g:1332:34: ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1333:3: -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && c1 != null) {
                // EsperEPL2Grammar.g:1333:34: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1334:3: -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l)
            if (l != null) {
                // EsperEPL2Grammar.g:1334:20: ^( MATCH_UNTIL_RANGE_BOUNDED $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1335:3: -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
            if (db != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1335:48: ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1336:3: -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
            if (db != null && d1 != null) {
                // EsperEPL2Grammar.g:1336:35: ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1337:3: -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
            if (db != null && db2 != null) {
                // EsperEPL2Grammar.g:1337:36: ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_db2.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1338:3: -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
            if (db3 != null) {
                // EsperEPL2Grammar.g:1338:22: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db3.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1339:3: -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
            if (r != null) {
                // EsperEPL2Grammar.g:1339:20: ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1340:3: -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
            {
                // EsperEPL2Grammar.g:1340:6: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1348:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS558=null;
        Token LPAREN560=null;
        Token RPAREN562=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier559 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList561 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression563 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS558_tree=null;
        CommonTree LPAREN560_tree=null;
        CommonTree RPAREN562_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1351:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1351:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1351:9: (i= IDENT EQUALS )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==IDENT) ) {
                int LA208_1 = input.LA(2);

                if ( (LA208_1==EQUALS) ) {
                    alt208=1;
                }
            }
            switch (alt208) {
                case 1 :
                    // EsperEPL2Grammar.g:1351:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression8812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS558=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression8814); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS558);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression8823);
            classIdentifier559=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier559.getTree());
            // EsperEPL2Grammar.g:1353:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==LPAREN) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // EsperEPL2Grammar.g:1353:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN560=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression8834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN560);

                    // EsperEPL2Grammar.g:1353:17: ( expressionList )?
                    int alt209=2;
                    int LA209_0 = input.LA(1);

                    if ( (LA209_0==WINDOW||LA209_0==ESCAPE||(LA209_0>=NOT_EXPR && LA209_0<=EVERY_EXPR)||(LA209_0>=SUM && LA209_0<=COUNT)||LA209_0==CASE||LA209_0==OUTER||(LA209_0>=JOIN && LA209_0<=FULL)||(LA209_0>=EVENTS && LA209_0<=LAST)||(LA209_0>=UNIDIRECTIONAL && LA209_0<=CURRENT_TIMESTAMP)||LA209_0==SNAPSHOT||(LA209_0>=VARIABLE && LA209_0<=AT)||(LA209_0>=BOOLEAN_TRUE && LA209_0<=VALUE_NULL)||(LA209_0>=DEFINE && LA209_0<=MATCHES)||LA209_0==NUM_DOUBLE||LA209_0==IDENT||LA209_0==LPAREN||(LA209_0>=PLUS && LA209_0<=QUESTION)||(LA209_0>=STRING_LITERAL && LA209_0<=QUOTED_STRING_LITERAL)||LA209_0==MINUS||LA209_0==LCURLY||LA209_0==NUM_INT||(LA209_0>=TICKED_STRING_LITERAL && LA209_0<=NUM_FLOAT)) ) {
                        alt209=1;
                    }
                    switch (alt209) {
                        case 1 :
                            // EsperEPL2Grammar.g:1353:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression8836);
                            expressionList561=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList561.getTree());

                            }
                            break;

                    }

                    RPAREN562=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression8839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN562);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1354:9: ( propertyExpression )?
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==LBRACK) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    // EsperEPL2Grammar.g:1354:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression8851);
                    propertyExpression563=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression563.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, propertyExpression, expressionList, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1355:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1355:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1355:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1355:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1355:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1358:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic564 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic565 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1359:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1359:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression8896);
            propertyExpressionAtomic564=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic564.getTree());
            // EsperEPL2Grammar.g:1359:29: ( propertyExpressionAtomic )*
            loop212:
            do {
                int alt212=2;
                int LA212_0 = input.LA(1);

                if ( (LA212_0==LBRACK) ) {
                    alt212=1;
                }


                switch (alt212) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1359:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression8899);
            	    propertyExpressionAtomic565=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic565.getTree());

            	    }
            	    break;

            	default :
            	    break loop212;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1360:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1360:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1363:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK566=null;
        Token SELECT567=null;
        Token FROM569=null;
        Token AS571=null;
        Token IDENT572=null;
        Token WHERE573=null;
        Token RBRACK575=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList568 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty570 = null;

        EsperEPL2GrammarParser.expression_return expression574 = null;


        CommonTree LBRACK566_tree=null;
        CommonTree SELECT567_tree=null;
        CommonTree FROM569_tree=null;
        CommonTree AS571_tree=null;
        CommonTree IDENT572_tree=null;
        CommonTree WHERE573_tree=null;
        CommonTree RBRACK575_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1364:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1364:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK566=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic8929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK566);

            // EsperEPL2Grammar.g:1364:11: ( SELECT propertySelectionList FROM )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==SELECT) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // EsperEPL2Grammar.g:1364:12: SELECT propertySelectionList FROM
                    {
                    SELECT567=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic8932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT567);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic8934);
                    propertySelectionList568=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList568.getTree());
                    FROM569=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic8936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM569);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic8940);
            eventProperty570=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty570.getTree());
            // EsperEPL2Grammar.g:1364:62: ( AS IDENT )?
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==AS) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    // EsperEPL2Grammar.g:1364:63: AS IDENT
                    {
                    AS571=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic8943); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS571);

                    IDENT572=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic8945); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT572);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1364:74: ( WHERE expression )?
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==WHERE) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    // EsperEPL2Grammar.g:1364:75: WHERE expression
                    {
                    WHERE573=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic8950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE573);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic8952);
                    expression574=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression574.getTree());

                    }
                    break;

            }

            RBRACK575=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic8956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK575);



            // AST REWRITE
            // elements: eventProperty, IDENT, propertySelectionList, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1365:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1365:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1365:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1365:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1365:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1365:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1368:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA577=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement576 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement578 = null;


        CommonTree COMMA577_tree=null;

        try {
            // EsperEPL2Grammar.g:1369:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1369:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9006);
            propertySelectionListElement576=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement576.getTree());
            // EsperEPL2Grammar.g:1369:33: ( COMMA propertySelectionListElement )*
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);

                if ( (LA216_0==COMMA) ) {
                    alt216=1;
                }


                switch (alt216) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1369:34: COMMA propertySelectionListElement
            	    {
            	    COMMA577=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList9009); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9012);
            	    propertySelectionListElement578=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement578.getTree());

            	    }
            	    break;

            	default :
            	    break loop216;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1372:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS581=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector579 = null;

        EsperEPL2GrammarParser.expression_return expression580 = null;


        CommonTree s_tree=null;
        CommonTree AS581_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1374:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt218=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt218=1;
                }
                break;
            case IDENT:
                {
                int LA218_2 = input.LA(2);

                if ( (LA218_2==DOT) ) {
                    int LA218_61 = input.LA(3);

                    if ( (LA218_61==STAR) && (synpred5_EsperEPL2Grammar())) {
                        alt218=2;
                    }
                    else if ( (LA218_61==WINDOW||LA218_61==ESCAPE||LA218_61==EVERY_EXPR||(LA218_61>=SUM && LA218_61<=COUNT)||LA218_61==OUTER||(LA218_61>=JOIN && LA218_61<=FULL)||(LA218_61>=EVENTS && LA218_61<=LAST)||(LA218_61>=UNIDIRECTIONAL && LA218_61<=PRIOR)||(LA218_61>=WEEKDAY && LA218_61<=CAST)||LA218_61==SNAPSHOT||(LA218_61>=VARIABLE && LA218_61<=AT)||(LA218_61>=DEFINE && LA218_61<=MATCHES)||LA218_61==IDENT||LA218_61==TICKED_STRING_LITERAL) ) {
                        alt218=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 218, 61, input);

                        throw nvae;
                    }
                }
                else if ( ((LA218_2>=IN_SET && LA218_2<=REGEXP)||(LA218_2>=OR_EXPR && LA218_2<=NOT_EXPR)||LA218_2==AS||LA218_2==FROM||LA218_2==IS||LA218_2==COMMA||LA218_2==EQUALS||LA218_2==LPAREN||(LA218_2>=STAR && LA218_2<=LBRACK)||(LA218_2>=BAND && LA218_2<=MOD)||LA218_2==ESCAPECHAR) ) {
                    alt218=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 218, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt218=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }

            switch (alt218) {
                case 1 :
                    // EsperEPL2Grammar.g:1374:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement9038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1374:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1375:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement9054);
                    propertyStreamSelector579=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector579.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1376:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement9059);
                    expression580=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression580.getTree());
                    // EsperEPL2Grammar.g:1376:15: ( AS i= keywordAllowedIdent )?
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==AS) ) {
                        alt217=1;
                    }
                    switch (alt217) {
                        case 1 :
                            // EsperEPL2Grammar.g:1376:16: AS i= keywordAllowedIdent
                            {
                            AS581=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement9062); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS581);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9066);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1377:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1377:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1378:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1378:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1381:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT582=null;
        Token STAR583=null;
        Token AS584=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT582_tree=null;
        CommonTree STAR583_tree=null;
        CommonTree AS584_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1382:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1382:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9110); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT582=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector9112); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT582);

            STAR583=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector9114); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR583);

            // EsperEPL2Grammar.g:1382:21: ( AS i= IDENT )?
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==AS) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    // EsperEPL2Grammar.g:1382:22: AS i= IDENT
                    {
                    AS584=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector9117); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS584);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9121); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1383:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1383:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1383:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1386:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS585=null;
        Token LPAREN587=null;
        Token RPAREN589=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier586 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList588 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression590 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS585_tree=null;
        CommonTree LPAREN587_tree=null;
        CommonTree RPAREN589_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1389:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1389:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1389:9: (i= IDENT EQUALS )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==IDENT) ) {
                int LA220_1 = input.LA(2);

                if ( (LA220_1==EQUALS) ) {
                    alt220=1;
                }
            }
            switch (alt220) {
                case 1 :
                    // EsperEPL2Grammar.g:1389:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression9168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS585=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression9170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS585);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression9179);
            classIdentifier586=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier586.getTree());
            // EsperEPL2Grammar.g:1391:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==LPAREN) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // EsperEPL2Grammar.g:1391:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN587=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression9190); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN587);

                    // EsperEPL2Grammar.g:1391:17: ( expressionList )?
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==WINDOW||LA221_0==ESCAPE||(LA221_0>=NOT_EXPR && LA221_0<=EVERY_EXPR)||(LA221_0>=SUM && LA221_0<=COUNT)||LA221_0==CASE||LA221_0==OUTER||(LA221_0>=JOIN && LA221_0<=FULL)||(LA221_0>=EVENTS && LA221_0<=LAST)||(LA221_0>=UNIDIRECTIONAL && LA221_0<=CURRENT_TIMESTAMP)||LA221_0==SNAPSHOT||(LA221_0>=VARIABLE && LA221_0<=AT)||(LA221_0>=BOOLEAN_TRUE && LA221_0<=VALUE_NULL)||(LA221_0>=DEFINE && LA221_0<=MATCHES)||LA221_0==NUM_DOUBLE||LA221_0==IDENT||LA221_0==LPAREN||(LA221_0>=PLUS && LA221_0<=QUESTION)||(LA221_0>=STRING_LITERAL && LA221_0<=QUOTED_STRING_LITERAL)||LA221_0==MINUS||LA221_0==LCURLY||LA221_0==NUM_INT||(LA221_0>=TICKED_STRING_LITERAL && LA221_0<=NUM_FLOAT)) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            // EsperEPL2Grammar.g:1391:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression9192);
                            expressionList588=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList588.getTree());

                            }
                            break;

                    }

                    RPAREN589=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression9195); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN589);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1392:9: ( propertyExpression )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==LBRACK) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // EsperEPL2Grammar.g:1392:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression9207);
                    propertyExpression590=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression590.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, propertyExpression, i, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1393:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1393:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1393:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1393:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1393:74: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1397:1: classIdentifier : i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT591=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT591_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1399:2: (i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1399:4: i1= escapableIdent ( DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifier9262);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1400:6: ( DOT i2= escapableIdent )*
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);

                if ( (LA224_0==DOT) ) {
                    int LA224_20 = input.LA(2);

                    if ( (LA224_20==IDENT) ) {
                        int LA224_42 = input.LA(3);

                        if ( (LA224_42==EOF||LA224_42==CREATE||(LA224_42>=OR_EXPR && LA224_42<=AS)||LA224_42==SELECT||(LA224_42>=INNER && LA224_42<=ON)||(LA224_42>=GROUP && LA224_42<=HAVING)||LA224_42==OUTPUT||LA224_42==INSERT||LA224_42==ORDER||(LA224_42>=UNIDIRECTIONAL && LA224_42<=RETAININTERSECTION)||LA224_42==DELETE||LA224_42==SET||LA224_42==UNTIL||LA224_42==ROW_LIMIT_EXPR||(LA224_42>=UPDATE && LA224_42<=MATCH_RECOGNIZE)||(LA224_42>=COMMA && LA224_42<=IDENT)||(LA224_42>=DOT && LA224_42<=RPAREN)||(LA224_42>=LBRACK && LA224_42<=RBRACK)||LA224_42==RCURLY||LA224_42==FOLLOWED_BY||LA224_42==TICKED_STRING_LITERAL||LA224_42==EMAILAT) ) {
                            alt224=1;
                        }


                    }
                    else if ( (LA224_20==TICKED_STRING_LITERAL) ) {
                        alt224=1;
                    }


                }


                switch (alt224) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1401:8: DOT i2= escapableIdent
            	    {
            	    DOT591=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier9281); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT591);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifier9285);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop224;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1403:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1403:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1406:1: classIdentifierNonGreedy : i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT592=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT592_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1408:2: (i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1408:4: i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy9330);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1409:6: ( options {greedy=false; } : DOT i2= escapableIdent )*
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);

                if ( (LA225_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA225_2 = input.LA(3);

                        if ( (LA225_2==LPAREN) ) {
                            alt225=2;
                        }
                        else if ( (LA225_2==DOT) ) {
                            alt225=1;
                        }


                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        alt225=1;
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt225=2;
                        }
                        break;

                    }

                }


                switch (alt225) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1411:8: DOT i2= escapableIdent
            	    {
            	    DOT592=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy9365); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT592);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy9369);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop225;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1413:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1413:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1416:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA594=null;
        EsperEPL2GrammarParser.expression_return expression593 = null;

        EsperEPL2GrammarParser.expression_return expression595 = null;


        CommonTree COMMA594_tree=null;

        try {
            // EsperEPL2Grammar.g:1417:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1417:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList9411);
            expression593=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression593.getTree());
            // EsperEPL2Grammar.g:1417:22: ( COMMA expression )*
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);

                if ( (LA226_0==COMMA) ) {
                    alt226=1;
                }


                switch (alt226) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1417:23: COMMA expression
            	    {
            	    COMMA594=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList9414); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList9417);
            	    expression595=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression595.getTree());

            	    }
            	    break;

            	default :
            	    break loop226;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1420:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA597=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime596 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime598 = null;


        CommonTree COMMA597_tree=null;

        try {
            // EsperEPL2Grammar.g:1421:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1421:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9445);
            expressionWithTime596=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime596.getTree());
            // EsperEPL2Grammar.g:1421:30: ( COMMA expressionWithTime )*
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==COMMA) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1421:31: COMMA expressionWithTime
            	    {
            	    COMMA597=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList9448); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9451);
            	    expressionWithTime598=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime598.getTree());

            	    }
            	    break;

            	default :
            	    break loop227;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1424:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand599 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand600 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod601 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable602 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand603 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand604 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator605 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator606 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList607 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar608 = null;



        try {
            // EsperEPL2Grammar.g:1425:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt228=10;
            alt228 = dfa228.predict(input);
            switch (alt228) {
                case 1 :
                    // EsperEPL2Grammar.g:1425:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime9477);
                    lastOperand599=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand599.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1426:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime9488);
                    lastWeekdayOperand600=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand600.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1427:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime9499);
                    timePeriod601=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod601.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1428:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime9510);
                    expressionQualifyable602=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable602.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1429:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime9521);
                    rangeOperand603=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand603.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1430:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime9533);
                    frequencyOperand604=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand604.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1431:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime9544);
                    lastOperator605=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator605.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1432:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime9556);
                    weekDayOperator606=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator606.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1433:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime9568);
                    numericParameterList607=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList607.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1434:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime9573);
                    numberSetStar608=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar608.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1437:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression609 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1438:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1438:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable9584);
            expression609=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression609.getTree());
            // EsperEPL2Grammar.g:1438:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt229=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt229=1;
                    }
                    break;
                case DESC:
                    {
                    alt229=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt229=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt229=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt229=5;
                    }
                    break;
            }

            switch (alt229) {
                case 1 :
                    // EsperEPL2Grammar.g:1438:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable9589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1438:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable9593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1438:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1438:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1438:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: a, expression, d, expression, expression
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1439:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1439:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1439:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1439:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1440:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1440:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1440:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1441:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1445:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR610=null;

        CommonTree STAR610_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1446:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1446:4: STAR
            {
            STAR610=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar9662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR610);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1447:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1447:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1450:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW611=null;

        CommonTree LW611_tree=null;

        try {
            // EsperEPL2Grammar.g:1451:2: ( LW )
            // EsperEPL2Grammar.g:1451:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW611=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand9682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW611_tree = (CommonTree)adaptor.create(LW611);
            root_0 = (CommonTree)adaptor.becomeRoot(LW611_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1454:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST612=null;

        CommonTree LAST612_tree=null;

        try {
            // EsperEPL2Grammar.g:1455:2: ( LAST )
            // EsperEPL2Grammar.g:1455:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST612=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand9695); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST612_tree = (CommonTree)adaptor.create(LAST612);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST612_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1458:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR613=null;
        Token DIV614=null;
        EsperEPL2GrammarParser.number_return number615 = null;

        EsperEPL2GrammarParser.substitution_return substitution616 = null;


        CommonTree i_tree=null;
        CommonTree STAR613_tree=null;
        CommonTree DIV614_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1459:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1459:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR613=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand9707); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR613);

            DIV614=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand9709); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV614);

            // EsperEPL2Grammar.g:1459:13: ( number | i= IDENT | substitution )
            int alt230=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt230=1;
                }
                break;
            case IDENT:
                {
                alt230=2;
                }
                break;
            case QUESTION:
                {
                alt230=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }

            switch (alt230) {
                case 1 :
                    // EsperEPL2Grammar.g:1459:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand9712);
                    number615=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number615.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1459:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand9716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1459:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand9718);
                    substitution616=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution616.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1460:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1460:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1460:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1460:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1461:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1461:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1461:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1461:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1464:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON619=null;
        EsperEPL2GrammarParser.number_return number617 = null;

        EsperEPL2GrammarParser.substitution_return substitution618 = null;

        EsperEPL2GrammarParser.number_return number620 = null;

        EsperEPL2GrammarParser.substitution_return substitution621 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON619_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1465:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1465:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1465:4: ( number | i1= IDENT | substitution )
            int alt231=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt231=1;
                }
                break;
            case IDENT:
                {
                alt231=2;
                }
                break;
            case QUESTION:
                {
                alt231=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;
            }

            switch (alt231) {
                case 1 :
                    // EsperEPL2Grammar.g:1465:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand9767);
                    number617=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number617.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1465:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand9771); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1465:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand9773);
                    substitution618=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution618.getTree());

                    }
                    break;

            }

            COLON619=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand9776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON619);

            // EsperEPL2Grammar.g:1465:41: ( number | i2= IDENT | substitution )
            int alt232=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt232=1;
                }
                break;
            case IDENT:
                {
                alt232=2;
                }
                break;
            case QUESTION:
                {
                alt232=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }

            switch (alt232) {
                case 1 :
                    // EsperEPL2Grammar.g:1465:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand9779);
                    number620=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number620.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1465:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand9783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1465:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand9785);
                    substitution621=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution621.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i2, number, i1, i2, i1, number, substitution, substitution, number, substitution
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1466:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1466:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1466:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1466:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1466:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1466:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1467:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1467:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1467:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1467:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1467:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1467:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1468:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1468:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1468:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1468:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1468:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1468:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1469:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1469:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1469:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1469:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1472:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST624=null;
        EsperEPL2GrammarParser.number_return number622 = null;

        EsperEPL2GrammarParser.substitution_return substitution623 = null;


        CommonTree i_tree=null;
        CommonTree LAST624_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1473:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1473:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1473:4: ( number | i= IDENT | substitution )
            int alt233=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt233=1;
                }
                break;
            case IDENT:
                {
                alt233=2;
                }
                break;
            case QUESTION:
                {
                alt233=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }

            switch (alt233) {
                case 1 :
                    // EsperEPL2Grammar.g:1473:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator9899);
                    number622=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number622.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1473:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator9903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1473:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator9905);
                    substitution623=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution623.getTree());

                    }
                    break;

            }

            LAST624=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator9908); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST624);



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1474:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1474:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1474:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1474:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1475:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1475:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1475:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1475:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1478:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY627=null;
        EsperEPL2GrammarParser.number_return number625 = null;

        EsperEPL2GrammarParser.substitution_return substitution626 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY627_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1479:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1479:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1479:4: ( number | i= IDENT | substitution )
            int alt234=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt234=1;
                }
                break;
            case IDENT:
                {
                alt234=2;
                }
                break;
            case QUESTION:
                {
                alt234=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;
            }

            switch (alt234) {
                case 1 :
                    // EsperEPL2Grammar.g:1479:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator9956);
                    number625=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number625.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1479:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator9960); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1479:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator9962);
                    substitution626=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution626.getTree());

                    }
                    break;

            }

            WEEKDAY627=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator9965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY627);



            // AST REWRITE
            // elements: number, i, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1480:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1480:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1480:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1480:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1481:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1481:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1481:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1481:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1484:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK628=null;
        Token COMMA630=null;
        Token RBRACK632=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter629 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter631 = null;


        CommonTree LBRACK628_tree=null;
        CommonTree COMMA630_tree=null;
        CommonTree RBRACK632_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1485:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1485:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK628=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList10012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK628);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList10014);
            numericListParameter629=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter629.getTree());
            // EsperEPL2Grammar.g:1485:32: ( COMMA numericListParameter )*
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);

                if ( (LA235_0==COMMA) ) {
                    alt235=1;
                }


                switch (alt235) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1485:33: COMMA numericListParameter
            	    {
            	    COMMA630=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList10017); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA630);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList10019);
            	    numericListParameter631=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter631.getTree());

            	    }
            	    break;

            	default :
            	    break loop235;
                }
            } while (true);

            RBRACK632=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList10023); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK632);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1486:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1486:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1489:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand633 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand634 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant635 = null;



        try {
            // EsperEPL2Grammar.g:1490:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt236=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA236_1 = input.LA(2);

                if ( (LA236_1==COLON) ) {
                    alt236=1;
                }
                else if ( (LA236_1==COMMA||LA236_1==RBRACK) ) {
                    alt236=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 236, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA236_2 = input.LA(2);

                if ( (LA236_2==COMMA||LA236_2==RBRACK) ) {
                    alt236=3;
                }
                else if ( (LA236_2==COLON) ) {
                    alt236=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 236, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA236_3 = input.LA(2);

                if ( (LA236_3==COLON) ) {
                    alt236=1;
                }
                else if ( (LA236_3==COMMA||LA236_3==RBRACK) ) {
                    alt236=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 236, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA236_4 = input.LA(2);

                if ( (LA236_4==COLON) ) {
                    alt236=1;
                }
                else if ( (LA236_4==COMMA||LA236_4==RBRACK) ) {
                    alt236=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 236, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt236=1;
                }
                break;
            case STAR:
                {
                alt236=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt236=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }

            switch (alt236) {
                case 1 :
                    // EsperEPL2Grammar.g:1490:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter10045);
                    rangeOperand633=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand633.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1491:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter10051);
                    frequencyOperand634=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand634.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1492:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter10056);
                    numberconstant635=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant635.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1495:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT637=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic636 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic638 = null;


        CommonTree DOT637_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1496:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1496:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10072);
            eventPropertyAtomic636=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic636.getTree());
            // EsperEPL2Grammar.g:1496:24: ( DOT eventPropertyAtomic )*
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( (LA237_0==DOT) ) {
                    alt237=1;
                }


                switch (alt237) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1496:25: DOT eventPropertyAtomic
            	    {
            	    DOT637=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty10075); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT637);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10077);
            	    eventPropertyAtomic638=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic638.getTree());

            	    }
            	    break;

            	default :
            	    break loop237;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1497:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1497:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1500:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK640=null;
        Token RPAREN641=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent639 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK640_tree=null;
        CommonTree RPAREN641_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1501:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1501:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10103);
            eventPropertyIdent639=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent639.getTree());
            // EsperEPL2Grammar.g:1501:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt241=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt241=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt241=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt241=3;
                    }
                    break;
            }

            switch (alt241) {
                case 1 :
                    // EsperEPL2Grammar.g:1502:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic10112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic10116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK640=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic10118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK640);

                    // EsperEPL2Grammar.g:1502:32: (q= QUESTION )?
                    int alt238=2;
                    int LA238_0 = input.LA(1);

                    if ( (LA238_0==QUESTION) ) {
                        alt238=1;
                    }
                    switch (alt238) {
                        case 1 :
                            // EsperEPL2Grammar.g:1502:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10123); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1504:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic10137); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1504:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt239=2;
                    int LA239_0 = input.LA(1);

                    if ( (LA239_0==STRING_LITERAL) ) {
                        alt239=1;
                    }
                    else if ( (LA239_0==QUOTED_STRING_LITERAL) ) {
                        alt239=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 239, 0, input);

                        throw nvae;
                    }
                    switch (alt239) {
                        case 1 :
                            // EsperEPL2Grammar.g:1504:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10142); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1504:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10148); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN641=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic10151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN641);

                    // EsperEPL2Grammar.g:1504:66: (q= QUESTION )?
                    int alt240=2;
                    int LA240_0 = input.LA(1);

                    if ( (LA240_0==QUESTION) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            // EsperEPL2Grammar.g:1504:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10156); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1506:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, ni, s, eventPropertyIdent, eventPropertyIdent, ni
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1509:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1509:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1510:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1510:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1511:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1511:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1512:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1512:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1513:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1513:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1514:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1514:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1517:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR642=null;
        Token DOT643=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR642_tree=null;
        CommonTree DOT643_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1519:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1519:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10293);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1520:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( (LA243_0==ESCAPECHAR) ) {
                    alt243=1;
                }


                switch (alt243) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1521:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR642=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent10305); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR642);

            	    DOT643=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent10307); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT643);

            	    // EsperEPL2Grammar.g:1521:24: (ipi2= keywordAllowedIdent )?
            	    int alt242=2;
            	    alt242 = dfa242.predict(input);
            	    switch (alt242) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1521:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10311);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop243;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1523:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1523:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1526:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT644=null;
        Token COUNT645=null;
        Token ESCAPE646=null;
        Token EVERY_EXPR647=null;
        Token SUM648=null;
        Token AVG649=null;
        Token MAX650=null;
        Token MIN651=null;
        Token COALESCE652=null;
        Token MEDIAN653=null;
        Token STDDEV654=null;
        Token AVEDEV655=null;
        Token EVENTS656=null;
        Token FIRST657=null;
        Token LAST658=null;
        Token UNIDIRECTIONAL659=null;
        Token RETAINUNION660=null;
        Token RETAININTERSECTION661=null;
        Token UNTIL662=null;
        Token PATTERN663=null;
        Token SQL664=null;
        Token METADATASQL665=null;
        Token PREVIOUS666=null;
        Token PRIOR667=null;
        Token WEEKDAY668=null;
        Token LW669=null;
        Token INSTANCEOF670=null;
        Token CAST671=null;
        Token SNAPSHOT672=null;
        Token VARIABLE673=null;
        Token WINDOW674=null;
        Token LEFT675=null;
        Token RIGHT676=null;
        Token OUTER677=null;
        Token FULL678=null;
        Token JOIN679=null;
        Token DEFINE680=null;
        Token PARTITION681=null;
        Token MATCHES682=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT644_tree=null;
        CommonTree COUNT645_tree=null;
        CommonTree ESCAPE646_tree=null;
        CommonTree EVERY_EXPR647_tree=null;
        CommonTree SUM648_tree=null;
        CommonTree AVG649_tree=null;
        CommonTree MAX650_tree=null;
        CommonTree MIN651_tree=null;
        CommonTree COALESCE652_tree=null;
        CommonTree MEDIAN653_tree=null;
        CommonTree STDDEV654_tree=null;
        CommonTree AVEDEV655_tree=null;
        CommonTree EVENTS656_tree=null;
        CommonTree FIRST657_tree=null;
        CommonTree LAST658_tree=null;
        CommonTree UNIDIRECTIONAL659_tree=null;
        CommonTree RETAINUNION660_tree=null;
        CommonTree RETAININTERSECTION661_tree=null;
        CommonTree UNTIL662_tree=null;
        CommonTree PATTERN663_tree=null;
        CommonTree SQL664_tree=null;
        CommonTree METADATASQL665_tree=null;
        CommonTree PREVIOUS666_tree=null;
        CommonTree PRIOR667_tree=null;
        CommonTree WEEKDAY668_tree=null;
        CommonTree LW669_tree=null;
        CommonTree INSTANCEOF670_tree=null;
        CommonTree CAST671_tree=null;
        CommonTree SNAPSHOT672_tree=null;
        CommonTree VARIABLE673_tree=null;
        CommonTree WINDOW674_tree=null;
        CommonTree LEFT675_tree=null;
        CommonTree RIGHT676_tree=null;
        CommonTree OUTER677_tree=null;
        CommonTree FULL678_tree=null;
        CommonTree JOIN679_tree=null;
        CommonTree DEFINE680_tree=null;
        CommonTree PARTITION681_tree=null;
        CommonTree MATCHES682_tree=null;

        try {
            // EsperEPL2Grammar.g:1527:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES )
            int alt244=41;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt244=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt244=2;
                }
                break;
            case AT:
                {
                alt244=3;
                }
                break;
            case COUNT:
                {
                alt244=4;
                }
                break;
            case ESCAPE:
                {
                alt244=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt244=6;
                }
                break;
            case SUM:
                {
                alt244=7;
                }
                break;
            case AVG:
                {
                alt244=8;
                }
                break;
            case MAX:
                {
                alt244=9;
                }
                break;
            case MIN:
                {
                alt244=10;
                }
                break;
            case COALESCE:
                {
                alt244=11;
                }
                break;
            case MEDIAN:
                {
                alt244=12;
                }
                break;
            case STDDEV:
                {
                alt244=13;
                }
                break;
            case AVEDEV:
                {
                alt244=14;
                }
                break;
            case EVENTS:
                {
                alt244=15;
                }
                break;
            case FIRST:
                {
                alt244=16;
                }
                break;
            case LAST:
                {
                alt244=17;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt244=18;
                }
                break;
            case RETAINUNION:
                {
                alt244=19;
                }
                break;
            case RETAININTERSECTION:
                {
                alt244=20;
                }
                break;
            case UNTIL:
                {
                alt244=21;
                }
                break;
            case PATTERN:
                {
                alt244=22;
                }
                break;
            case SQL:
                {
                alt244=23;
                }
                break;
            case METADATASQL:
                {
                alt244=24;
                }
                break;
            case PREVIOUS:
                {
                alt244=25;
                }
                break;
            case PRIOR:
                {
                alt244=26;
                }
                break;
            case WEEKDAY:
                {
                alt244=27;
                }
                break;
            case LW:
                {
                alt244=28;
                }
                break;
            case INSTANCEOF:
                {
                alt244=29;
                }
                break;
            case CAST:
                {
                alt244=30;
                }
                break;
            case SNAPSHOT:
                {
                alt244=31;
                }
                break;
            case VARIABLE:
                {
                alt244=32;
                }
                break;
            case WINDOW:
                {
                alt244=33;
                }
                break;
            case LEFT:
                {
                alt244=34;
                }
                break;
            case RIGHT:
                {
                alt244=35;
                }
                break;
            case OUTER:
                {
                alt244=36;
                }
                break;
            case FULL:
                {
                alt244=37;
                }
                break;
            case JOIN:
                {
                alt244=38;
                }
                break;
            case DEFINE:
                {
                alt244=39;
                }
                break;
            case PARTITION:
                {
                alt244=40;
                }
                break;
            case MATCHES:
                {
                alt244=41;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;
            }

            switch (alt244) {
                case 1 :
                    // EsperEPL2Grammar.g:1527:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent10350); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1528:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1529:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT644=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent10366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT644_tree = (CommonTree)adaptor.create(AT644);
                    adaptor.addChild(root_0, AT644_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1530:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT645=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent10373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT645_tree = (CommonTree)adaptor.create(COUNT645);
                    adaptor.addChild(root_0, COUNT645_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1531:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE646=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent10380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE646_tree = (CommonTree)adaptor.create(ESCAPE646);
                    adaptor.addChild(root_0, ESCAPE646_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1532:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR647=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10391); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR647_tree = (CommonTree)adaptor.create(EVERY_EXPR647);
                    adaptor.addChild(root_0, EVERY_EXPR647_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1533:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM648=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent10398); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM648_tree = (CommonTree)adaptor.create(SUM648);
                    adaptor.addChild(root_0, SUM648_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1534:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG649=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent10405); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG649_tree = (CommonTree)adaptor.create(AVG649);
                    adaptor.addChild(root_0, AVG649_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1535:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX650=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent10412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX650_tree = (CommonTree)adaptor.create(MAX650);
                    adaptor.addChild(root_0, MAX650_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1536:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN651=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent10419); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN651_tree = (CommonTree)adaptor.create(MIN651);
                    adaptor.addChild(root_0, MIN651_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1537:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE652=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent10426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE652_tree = (CommonTree)adaptor.create(COALESCE652);
                    adaptor.addChild(root_0, COALESCE652_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1538:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN653=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent10433); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN653_tree = (CommonTree)adaptor.create(MEDIAN653);
                    adaptor.addChild(root_0, MEDIAN653_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1539:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV654=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent10440); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV654_tree = (CommonTree)adaptor.create(STDDEV654);
                    adaptor.addChild(root_0, STDDEV654_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1540:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV655=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent10447); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV655_tree = (CommonTree)adaptor.create(AVEDEV655);
                    adaptor.addChild(root_0, AVEDEV655_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1541:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS656=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent10454); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS656_tree = (CommonTree)adaptor.create(EVENTS656);
                    adaptor.addChild(root_0, EVENTS656_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1542:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST657=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent10461); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST657_tree = (CommonTree)adaptor.create(FIRST657);
                    adaptor.addChild(root_0, FIRST657_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1543:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST658=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent10468); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST658_tree = (CommonTree)adaptor.create(LAST658);
                    adaptor.addChild(root_0, LAST658_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1544:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL659=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10475); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL659_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL659);
                    adaptor.addChild(root_0, UNIDIRECTIONAL659_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1545:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION660=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent10482); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION660_tree = (CommonTree)adaptor.create(RETAINUNION660);
                    adaptor.addChild(root_0, RETAINUNION660_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1546:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION661=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION661_tree = (CommonTree)adaptor.create(RETAININTERSECTION661);
                    adaptor.addChild(root_0, RETAININTERSECTION661_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1547:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL662=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent10496); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL662_tree = (CommonTree)adaptor.create(UNTIL662);
                    adaptor.addChild(root_0, UNTIL662_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1548:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN663=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent10503); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN663_tree = (CommonTree)adaptor.create(PATTERN663);
                    adaptor.addChild(root_0, PATTERN663_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1549:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL664=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent10510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL664_tree = (CommonTree)adaptor.create(SQL664);
                    adaptor.addChild(root_0, SQL664_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1550:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL665=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent10517); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL665_tree = (CommonTree)adaptor.create(METADATASQL665);
                    adaptor.addChild(root_0, METADATASQL665_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1551:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS666=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent10524); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS666_tree = (CommonTree)adaptor.create(PREVIOUS666);
                    adaptor.addChild(root_0, PREVIOUS666_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1552:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR667=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent10531); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR667_tree = (CommonTree)adaptor.create(PRIOR667);
                    adaptor.addChild(root_0, PRIOR667_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1553:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY668=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent10538); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY668_tree = (CommonTree)adaptor.create(WEEKDAY668);
                    adaptor.addChild(root_0, WEEKDAY668_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1554:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW669=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent10545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW669_tree = (CommonTree)adaptor.create(LW669);
                    adaptor.addChild(root_0, LW669_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1555:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF670=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent10552); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF670_tree = (CommonTree)adaptor.create(INSTANCEOF670);
                    adaptor.addChild(root_0, INSTANCEOF670_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1556:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST671=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent10559); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST671_tree = (CommonTree)adaptor.create(CAST671);
                    adaptor.addChild(root_0, CAST671_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1557:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT672=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent10566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT672_tree = (CommonTree)adaptor.create(SNAPSHOT672);
                    adaptor.addChild(root_0, SNAPSHOT672_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1558:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE673=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent10573); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE673_tree = (CommonTree)adaptor.create(VARIABLE673);
                    adaptor.addChild(root_0, VARIABLE673_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1559:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW674=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent10582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW674_tree = (CommonTree)adaptor.create(WINDOW674);
                    adaptor.addChild(root_0, WINDOW674_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1560:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT675=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent10589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT675_tree = (CommonTree)adaptor.create(LEFT675);
                    adaptor.addChild(root_0, LEFT675_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1561:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT676=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent10596); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT676_tree = (CommonTree)adaptor.create(RIGHT676);
                    adaptor.addChild(root_0, RIGHT676_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1562:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER677=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent10603); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER677_tree = (CommonTree)adaptor.create(OUTER677);
                    adaptor.addChild(root_0, OUTER677_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1563:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL678=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent10610); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL678_tree = (CommonTree)adaptor.create(FULL678);
                    adaptor.addChild(root_0, FULL678_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1564:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN679=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent10617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN679_tree = (CommonTree)adaptor.create(JOIN679);
                    adaptor.addChild(root_0, JOIN679_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;
                case 39 :
                    // EsperEPL2Grammar.g:1565:4: DEFINE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DEFINE680=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent10624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE680_tree = (CommonTree)adaptor.create(DEFINE680);
                    adaptor.addChild(root_0, DEFINE680_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }

                    }
                    break;
                case 40 :
                    // EsperEPL2Grammar.g:1566:4: PARTITION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PARTITION681=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent10631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION681_tree = (CommonTree)adaptor.create(PARTITION681);
                    adaptor.addChild(root_0, PARTITION681_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }

                    }
                    break;
                case 41 :
                    // EsperEPL2Grammar.g:1567:4: MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MATCHES682=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent10638); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES682_tree = (CommonTree)adaptor.create(MATCHES682);
                    adaptor.addChild(root_0, MATCHES682_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1570:1: escapableIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1571:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==IDENT) ) {
                alt245=1;
            }
            else if ( (LA245_0==TICKED_STRING_LITERAL) ) {
                alt245=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;
            }
            switch (alt245) {
                case 1 :
                    // EsperEPL2Grammar.g:1571:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent10659); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1572:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent10668); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1575:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart683 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart684 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart685 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart686 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart687 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart688 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart689 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart690 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart691 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart692 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart693 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart694 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart695 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart696 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart697 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1576:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1577:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1577:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt256=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt256=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt256=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt256=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt256=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt256=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 256, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt256=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt256=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt256=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt256=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt256=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 256, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt256=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt256=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt256=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt256=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt256=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 256, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt256=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt256=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt256=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt256=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt256=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 256, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt256=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt256=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt256=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt256=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt256=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 256, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt256=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt256=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt256=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt256=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt256=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 256, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);

                throw nvae;
            }

            switch (alt256) {
                case 1 :
                    // EsperEPL2Grammar.g:1578:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod10691);
                    dayPart683=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart683.getTree());
                    // EsperEPL2Grammar.g:1578:11: ( hourPart )?
                    int alt246=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA246_1 = input.LA(2);

                            if ( ((LA246_1>=TIMEPERIOD_HOUR && LA246_1<=TIMEPERIOD_HOURS)) ) {
                                alt246=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA246_2 = input.LA(2);

                            if ( ((LA246_2>=TIMEPERIOD_HOUR && LA246_2<=TIMEPERIOD_HOURS)) ) {
                                alt246=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA246_3 = input.LA(2);

                            if ( ((LA246_3>=TIMEPERIOD_HOUR && LA246_3<=TIMEPERIOD_HOURS)) ) {
                                alt246=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA246_4 = input.LA(2);

                            if ( ((LA246_4>=TIMEPERIOD_HOUR && LA246_4<=TIMEPERIOD_HOURS)) ) {
                                alt246=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA246_5 = input.LA(2);

                            if ( ((LA246_5>=TIMEPERIOD_HOUR && LA246_5<=TIMEPERIOD_HOURS)) ) {
                                alt246=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA246_6 = input.LA(2);

                            if ( ((LA246_6>=TIMEPERIOD_HOUR && LA246_6<=TIMEPERIOD_HOURS)) ) {
                                alt246=1;
                            }
                            }
                            break;
                    }

                    switch (alt246) {
                        case 1 :
                            // EsperEPL2Grammar.g:1578:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod10693);
                            hourPart684=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart684.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1578:21: ( minutePart )?
                    int alt247=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA247_1 = input.LA(2);

                            if ( (LA247_1==MIN||(LA247_1>=TIMEPERIOD_MINUTE && LA247_1<=TIMEPERIOD_MINUTES)) ) {
                                alt247=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA247_2 = input.LA(2);

                            if ( (LA247_2==MIN||(LA247_2>=TIMEPERIOD_MINUTE && LA247_2<=TIMEPERIOD_MINUTES)) ) {
                                alt247=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA247_3 = input.LA(2);

                            if ( (LA247_3==MIN||(LA247_3>=TIMEPERIOD_MINUTE && LA247_3<=TIMEPERIOD_MINUTES)) ) {
                                alt247=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA247_4 = input.LA(2);

                            if ( (LA247_4==MIN||(LA247_4>=TIMEPERIOD_MINUTE && LA247_4<=TIMEPERIOD_MINUTES)) ) {
                                alt247=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA247_5 = input.LA(2);

                            if ( (LA247_5==MIN||(LA247_5>=TIMEPERIOD_MINUTE && LA247_5<=TIMEPERIOD_MINUTES)) ) {
                                alt247=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA247_6 = input.LA(2);

                            if ( (LA247_6==MIN||(LA247_6>=TIMEPERIOD_MINUTE && LA247_6<=TIMEPERIOD_MINUTES)) ) {
                                alt247=1;
                            }
                            }
                            break;
                    }

                    switch (alt247) {
                        case 1 :
                            // EsperEPL2Grammar.g:1578:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod10696);
                            minutePart685=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart685.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1578:33: ( secondPart )?
                    int alt248=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA248_1 = input.LA(2);

                            if ( ((LA248_1>=TIMEPERIOD_SEC && LA248_1<=TIMEPERIOD_SECONDS)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA248_2 = input.LA(2);

                            if ( ((LA248_2>=TIMEPERIOD_SEC && LA248_2<=TIMEPERIOD_SECONDS)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA248_3 = input.LA(2);

                            if ( ((LA248_3>=TIMEPERIOD_SEC && LA248_3<=TIMEPERIOD_SECONDS)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA248_4 = input.LA(2);

                            if ( ((LA248_4>=TIMEPERIOD_SEC && LA248_4<=TIMEPERIOD_SECONDS)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA248_5 = input.LA(2);

                            if ( ((LA248_5>=TIMEPERIOD_SEC && LA248_5<=TIMEPERIOD_SECONDS)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA248_6 = input.LA(2);

                            if ( ((LA248_6>=TIMEPERIOD_SEC && LA248_6<=TIMEPERIOD_SECONDS)) ) {
                                alt248=1;
                            }
                            }
                            break;
                    }

                    switch (alt248) {
                        case 1 :
                            // EsperEPL2Grammar.g:1578:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10699);
                            secondPart686=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart686.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1578:45: ( millisecondPart )?
                    int alt249=2;
                    int LA249_0 = input.LA(1);

                    if ( (LA249_0==NUM_DOUBLE||LA249_0==IDENT||LA249_0==QUESTION||LA249_0==NUM_INT||(LA249_0>=NUM_LONG && LA249_0<=NUM_FLOAT)) ) {
                        alt249=1;
                    }
                    switch (alt249) {
                        case 1 :
                            // EsperEPL2Grammar.g:1578:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10702);
                            millisecondPart687=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart687.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1579:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod10708);
                    hourPart688=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart688.getTree());
                    // EsperEPL2Grammar.g:1579:13: ( minutePart )?
                    int alt250=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA250_1 = input.LA(2);

                            if ( (LA250_1==MIN||(LA250_1>=TIMEPERIOD_MINUTE && LA250_1<=TIMEPERIOD_MINUTES)) ) {
                                alt250=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA250_2 = input.LA(2);

                            if ( (LA250_2==MIN||(LA250_2>=TIMEPERIOD_MINUTE && LA250_2<=TIMEPERIOD_MINUTES)) ) {
                                alt250=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA250_3 = input.LA(2);

                            if ( (LA250_3==MIN||(LA250_3>=TIMEPERIOD_MINUTE && LA250_3<=TIMEPERIOD_MINUTES)) ) {
                                alt250=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA250_4 = input.LA(2);

                            if ( (LA250_4==MIN||(LA250_4>=TIMEPERIOD_MINUTE && LA250_4<=TIMEPERIOD_MINUTES)) ) {
                                alt250=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA250_5 = input.LA(2);

                            if ( (LA250_5==MIN||(LA250_5>=TIMEPERIOD_MINUTE && LA250_5<=TIMEPERIOD_MINUTES)) ) {
                                alt250=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA250_6 = input.LA(2);

                            if ( (LA250_6==MIN||(LA250_6>=TIMEPERIOD_MINUTE && LA250_6<=TIMEPERIOD_MINUTES)) ) {
                                alt250=1;
                            }
                            }
                            break;
                    }

                    switch (alt250) {
                        case 1 :
                            // EsperEPL2Grammar.g:1579:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod10710);
                            minutePart689=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart689.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1579:25: ( secondPart )?
                    int alt251=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA251_1 = input.LA(2);

                            if ( ((LA251_1>=TIMEPERIOD_SEC && LA251_1<=TIMEPERIOD_SECONDS)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA251_2 = input.LA(2);

                            if ( ((LA251_2>=TIMEPERIOD_SEC && LA251_2<=TIMEPERIOD_SECONDS)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA251_3 = input.LA(2);

                            if ( ((LA251_3>=TIMEPERIOD_SEC && LA251_3<=TIMEPERIOD_SECONDS)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA251_4 = input.LA(2);

                            if ( ((LA251_4>=TIMEPERIOD_SEC && LA251_4<=TIMEPERIOD_SECONDS)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA251_5 = input.LA(2);

                            if ( ((LA251_5>=TIMEPERIOD_SEC && LA251_5<=TIMEPERIOD_SECONDS)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA251_6 = input.LA(2);

                            if ( ((LA251_6>=TIMEPERIOD_SEC && LA251_6<=TIMEPERIOD_SECONDS)) ) {
                                alt251=1;
                            }
                            }
                            break;
                    }

                    switch (alt251) {
                        case 1 :
                            // EsperEPL2Grammar.g:1579:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10713);
                            secondPart690=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart690.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1579:37: ( millisecondPart )?
                    int alt252=2;
                    int LA252_0 = input.LA(1);

                    if ( (LA252_0==NUM_DOUBLE||LA252_0==IDENT||LA252_0==QUESTION||LA252_0==NUM_INT||(LA252_0>=NUM_LONG && LA252_0<=NUM_FLOAT)) ) {
                        alt252=1;
                    }
                    switch (alt252) {
                        case 1 :
                            // EsperEPL2Grammar.g:1579:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10716);
                            millisecondPart691=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart691.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1580:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod10722);
                    minutePart692=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart692.getTree());
                    // EsperEPL2Grammar.g:1580:15: ( secondPart )?
                    int alt253=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA253_1 = input.LA(2);

                            if ( ((LA253_1>=TIMEPERIOD_SEC && LA253_1<=TIMEPERIOD_SECONDS)) ) {
                                alt253=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA253_2 = input.LA(2);

                            if ( ((LA253_2>=TIMEPERIOD_SEC && LA253_2<=TIMEPERIOD_SECONDS)) ) {
                                alt253=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA253_3 = input.LA(2);

                            if ( ((LA253_3>=TIMEPERIOD_SEC && LA253_3<=TIMEPERIOD_SECONDS)) ) {
                                alt253=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA253_4 = input.LA(2);

                            if ( ((LA253_4>=TIMEPERIOD_SEC && LA253_4<=TIMEPERIOD_SECONDS)) ) {
                                alt253=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA253_5 = input.LA(2);

                            if ( ((LA253_5>=TIMEPERIOD_SEC && LA253_5<=TIMEPERIOD_SECONDS)) ) {
                                alt253=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA253_6 = input.LA(2);

                            if ( ((LA253_6>=TIMEPERIOD_SEC && LA253_6<=TIMEPERIOD_SECONDS)) ) {
                                alt253=1;
                            }
                            }
                            break;
                    }

                    switch (alt253) {
                        case 1 :
                            // EsperEPL2Grammar.g:1580:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10724);
                            secondPart693=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart693.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1580:27: ( millisecondPart )?
                    int alt254=2;
                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==NUM_DOUBLE||LA254_0==IDENT||LA254_0==QUESTION||LA254_0==NUM_INT||(LA254_0>=NUM_LONG && LA254_0<=NUM_FLOAT)) ) {
                        alt254=1;
                    }
                    switch (alt254) {
                        case 1 :
                            // EsperEPL2Grammar.g:1580:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10727);
                            millisecondPart694=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart694.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1581:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod10733);
                    secondPart695=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart695.getTree());
                    // EsperEPL2Grammar.g:1581:15: ( millisecondPart )?
                    int alt255=2;
                    int LA255_0 = input.LA(1);

                    if ( (LA255_0==NUM_DOUBLE||LA255_0==IDENT||LA255_0==QUESTION||LA255_0==NUM_INT||(LA255_0>=NUM_LONG && LA255_0<=NUM_FLOAT)) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            // EsperEPL2Grammar.g:1581:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10735);
                            millisecondPart696=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart696.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1582:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod10741);
                    millisecondPart697=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart697.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: millisecondPart, hourPart, dayPart, minutePart, secondPart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1584:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1584:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1584:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1584:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1584:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1584:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1584:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1587:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS700=null;
        Token TIMEPERIOD_DAY701=null;
        EsperEPL2GrammarParser.number_return number698 = null;

        EsperEPL2GrammarParser.substitution_return substitution699 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS700_tree=null;
        CommonTree TIMEPERIOD_DAY701_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1588:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1588:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1588:4: ( number | i= IDENT | substitution )
            int alt257=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt257=1;
                }
                break;
            case IDENT:
                {
                alt257=2;
                }
                break;
            case QUESTION:
                {
                alt257=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;
            }

            switch (alt257) {
                case 1 :
                    // EsperEPL2Grammar.g:1588:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart10779);
                    number698=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number698.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1588:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart10783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1588:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart10785);
                    substitution699=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution699.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1588:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==TIMEPERIOD_DAYS) ) {
                alt258=1;
            }
            else if ( (LA258_0==TIMEPERIOD_DAY) ) {
                alt258=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 258, 0, input);

                throw nvae;
            }
            switch (alt258) {
                case 1 :
                    // EsperEPL2Grammar.g:1588:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS700=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart10789); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS700);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1588:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY701=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart10793); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY701);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1589:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1589:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1589:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1589:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1590:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1590:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1590:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1590:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1593:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS704=null;
        Token TIMEPERIOD_HOUR705=null;
        EsperEPL2GrammarParser.number_return number702 = null;

        EsperEPL2GrammarParser.substitution_return substitution703 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS704_tree=null;
        CommonTree TIMEPERIOD_HOUR705_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1594:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1594:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1594:4: ( number | i= IDENT | substitution )
            int alt259=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt259=1;
                }
                break;
            case IDENT:
                {
                alt259=2;
                }
                break;
            case QUESTION:
                {
                alt259=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;
            }

            switch (alt259) {
                case 1 :
                    // EsperEPL2Grammar.g:1594:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart10842);
                    number702=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number702.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1594:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart10846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1594:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart10848);
                    substitution703=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution703.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1594:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==TIMEPERIOD_HOURS) ) {
                alt260=1;
            }
            else if ( (LA260_0==TIMEPERIOD_HOUR) ) {
                alt260=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);

                throw nvae;
            }
            switch (alt260) {
                case 1 :
                    // EsperEPL2Grammar.g:1594:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS704=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart10852); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS704);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1594:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR705=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart10856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR705);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1595:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1595:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1595:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1595:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1596:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1596:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1596:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1596:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1599:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES708=null;
        Token TIMEPERIOD_MINUTE709=null;
        Token MIN710=null;
        EsperEPL2GrammarParser.number_return number706 = null;

        EsperEPL2GrammarParser.substitution_return substitution707 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES708_tree=null;
        CommonTree TIMEPERIOD_MINUTE709_tree=null;
        CommonTree MIN710_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1600:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1600:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1600:4: ( number | i= IDENT | substitution )
            int alt261=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt261=1;
                }
                break;
            case IDENT:
                {
                alt261=2;
                }
                break;
            case QUESTION:
                {
                alt261=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;
            }

            switch (alt261) {
                case 1 :
                    // EsperEPL2Grammar.g:1600:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart10905);
                    number706=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number706.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1600:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart10909); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1600:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart10911);
                    substitution707=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution707.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1600:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt262=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt262=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt262=2;
                }
                break;
            case MIN:
                {
                alt262=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                throw nvae;
            }

            switch (alt262) {
                case 1 :
                    // EsperEPL2Grammar.g:1600:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES708=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart10915); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES708);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1600:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE709=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart10919); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE709);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1600:76: MIN
                    {
                    MIN710=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart10923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN710);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1601:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1601:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1601:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1601:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1602:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1602:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1602:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1602:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1605:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS713=null;
        Token TIMEPERIOD_SECOND714=null;
        Token TIMEPERIOD_SEC715=null;
        EsperEPL2GrammarParser.number_return number711 = null;

        EsperEPL2GrammarParser.substitution_return substitution712 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS713_tree=null;
        CommonTree TIMEPERIOD_SECOND714_tree=null;
        CommonTree TIMEPERIOD_SEC715_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1606:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1606:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1606:4: ( number | i= IDENT | substitution )
            int alt263=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt263=1;
                }
                break;
            case IDENT:
                {
                alt263=2;
                }
                break;
            case QUESTION:
                {
                alt263=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);

                throw nvae;
            }

            switch (alt263) {
                case 1 :
                    // EsperEPL2Grammar.g:1606:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart10973);
                    number711=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number711.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1606:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart10977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1606:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart10979);
                    substitution712=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution712.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1606:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt264=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt264=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt264=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt264=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 264, 0, input);

                throw nvae;
            }

            switch (alt264) {
                case 1 :
                    // EsperEPL2Grammar.g:1606:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS713=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart10983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS713);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1606:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND714=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart10987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND714);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1606:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC715=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart10991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC715);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1607:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1607:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1607:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1607:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1608:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1608:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1608:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1608:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1611:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS718=null;
        Token TIMEPERIOD_MILLISECOND719=null;
        Token TIMEPERIOD_MILLISEC720=null;
        EsperEPL2GrammarParser.number_return number716 = null;

        EsperEPL2GrammarParser.substitution_return substitution717 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS718_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND719_tree=null;
        CommonTree TIMEPERIOD_MILLISEC720_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1612:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1612:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1612:4: ( number | i= IDENT | substitution )
            int alt265=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt265=1;
                }
                break;
            case IDENT:
                {
                alt265=2;
                }
                break;
            case QUESTION:
                {
                alt265=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);

                throw nvae;
            }

            switch (alt265) {
                case 1 :
                    // EsperEPL2Grammar.g:1612:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart11041);
                    number716=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number716.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1612:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart11045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1612:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart11047);
                    substitution717=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution717.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1612:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt266=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt266=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt266=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt266=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;
            }

            switch (alt266) {
                case 1 :
                    // EsperEPL2Grammar.g:1612:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS718=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS718);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1612:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND719=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND719);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1612:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC720=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC720);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1613:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1613:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1613:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1613:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1614:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1614:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1614:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1614:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1617:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1618:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt267=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt267=1;
                }
                break;
            case NUM_LONG:
                {
                alt267=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt267=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt267=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;
            }

            switch (alt267) {
                case 1 :
                    // EsperEPL2Grammar.g:1618:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number11114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1618:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1619:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number11131); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1619:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1620:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number11148); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1620:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1621:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number11165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1621:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1624:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1625:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1625:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution11186); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1625:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1628:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant721 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant722 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1629:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt268=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt268=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt268=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt268=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt268=4;
                }
                break;
            case VALUE_NULL:
                {
                alt268=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 268, 0, input);

                throw nvae;
            }

            switch (alt268) {
                case 1 :
                    // EsperEPL2Grammar.g:1629:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant11205);
                    numberconstant721=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant721.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1630:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant11212);
                    stringconstant722=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant722.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1631:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant11225); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1631:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1631:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1632:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant11245); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1632:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1632:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1633:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant11265); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1633:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1633:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1636:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number723 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1637:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1637:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1637:5: (m= MINUS | p= PLUS )?
            int alt269=3;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==MINUS) ) {
                alt269=1;
            }
            else if ( (LA269_0==PLUS) ) {
                alt269=2;
            }
            switch (alt269) {
                case 1 :
                    // EsperEPL2Grammar.g:1637:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant11287); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1637:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant11293); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant11297);
            number723=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number723.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1638:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number723!=null?((CommonTree)number723.tree):null).getType(), "-" + (number723!=null?input.toString(number723.start,number723.stop):null)));

            }
            else // 1639:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1642:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1643:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==STRING_LITERAL) ) {
                alt270=1;
            }
            else if ( (LA270_0==QUOTED_STRING_LITERAL) ) {
                alt270=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);

                throw nvae;
            }
            switch (alt270) {
                case 1 :
                    // EsperEPL2Grammar.g:1643:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant11326); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1643:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1643:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1644:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1644:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1644:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:788:4: ( streamSelector )
        // EsperEPL2Grammar.g:788:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3705);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:960:9: ( timePeriod )
        // EsperEPL2Grammar.g:960:10: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5037);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1129:4: ( builtinFunc )
        // EsperEPL2Grammar.g:1129:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar6857);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1214:4: ( eventProperty )
        // EsperEPL2Grammar.g:1214:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar7638);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1375:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1375:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar9049);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1425:7: ( lastOperand )
        // EsperEPL2Grammar.g:1425:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar9472);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1426:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1426:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar9483);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1427:4: ( timePeriod )
        // EsperEPL2Grammar.g:1427:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar9494);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1428:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1428:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar9505);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1429:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1429:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar9516);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1430:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1430:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar9528);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1431:4: ( lastOperator )
        // EsperEPL2Grammar.g:1431:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar9539);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1432:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1432:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar9550);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1433:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1433:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar9563);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA155 dfa155 = new DFA155(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA228 dfa228 = new DFA228(this);
    protected DFA242 dfa242 = new DFA242(this);
    static final String DFA155_eotS =
        "\u08fa\uffff";
    static final String DFA155_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\7\uffff\2"+
        "\16\2\uffff\2\16\u08ce\uffff";
    static final String DFA155_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\7\uffff\2\6\2\uffff\2\6\13\uffff\1\u00fe\153\uffff\1\5\71\uffff"+
        "\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff"+
        "\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\u0107\71"+
        "\uffff\1\5\71\uffff\1\5\71\uffff\1\5\2\6\74\uffff\2\6\73\uffff\2"+
        "\6\102\uffff\2\6\73\uffff\2\6\73\uffff\2\6\73\uffff\2\6\73\uffff"+
        "\2\6\73\uffff\2\6\62\uffff\2\6\74\uffff\2\6\71\uffff\2\6\143\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\114\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\31\uffff\1\0\u0083\uffff";
    static final String DFA155_maxS =
        "\2\u011c\13\uffff\1\u011c\3\uffff\1\u0119\2\uffff\2\u0119\2\uffff"+
        "\4\u0119\1\uffff\2\u0119\7\uffff\2\u0119\2\uffff\2\u0119\13\uffff"+
        "\1\u00fe\153\uffff\1\u011c\71\uffff\1\u011c\71\uffff\1\u011c\71"+
        "\uffff\1\u011c\71\uffff\1\u011c\71\uffff\1\u011c\71\uffff\1\u011c"+
        "\71\uffff\1\u011c\71\uffff\1\u011c\71\uffff\1\u011c\71\uffff\1\u0117"+
        "\71\uffff\1\u011c\71\uffff\1\u011c\71\uffff\1\u011a\2\u0114\74\uffff"+
        "\2\u0114\73\uffff\2\u0114\102\uffff\2\u0114\73\uffff\2\u0114\73"+
        "\uffff\2\u0114\73\uffff\2\u0114\73\uffff\2\u0114\73\uffff\2\u0114"+
        "\62\uffff\2\u0114\74\uffff\2\u0114\71\uffff\2\u0114\143\uffff\1"+
        "\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\114\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\31\uffff\1\0\u0083\uffff";
    static final String DFA155_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\51\uffff\1\6\1\7\4\uffff"+
        "\1\1\50\uffff\1\10\1\4\u032f\uffff\74\6\2\uffff\73\6\2\uffff\102"+
        "\6\2\uffff\73\6\2\uffff\73\6\2\uffff\73\6\2\uffff\73\6\2\uffff\73"+
        "\6\2\uffff\62\6\2\uffff\72\6\4\uffff\71\6\2\uffff\71\6\1\11\51\6"+
        "\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\61\6\2\uffff\31\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31"+
        "\6\1\uffff\31\6\1\uffff\32\6\1\uffff\32\6";
    static final String DFA155_specialS =
        "\1\0\u00a2\uffff\1\1\71\uffff\1\2\71\uffff\1\3\71\uffff\1\4\71"+
        "\uffff\1\5\71\uffff\1\6\71\uffff\1\7\71\uffff\1\10\71\uffff\1\11"+
        "\71\uffff\1\12\71\uffff\1\13\71\uffff\1\14\71\uffff\1\15\71\uffff"+
        "\1\16\1\17\1\20\74\uffff\1\21\1\22\73\uffff\1\23\1\24\102\uffff"+
        "\1\25\1\26\73\uffff\1\27\1\30\73\uffff\1\31\1\32\73\uffff\1\33\1"+
        "\34\73\uffff\1\35\1\36\73\uffff\1\37\1\40\62\uffff\1\41\1\42\74"+
        "\uffff\1\43\1\44\71\uffff\1\45\1\46\143\uffff\1\47\30\uffff\1\50"+
        "\30\uffff\1\51\30\uffff\1\52\30\uffff\1\53\30\uffff\1\54\114\uffff"+
        "\1\55\30\uffff\1\56\30\uffff\1\57\30\uffff\1\60\30\uffff\1\61\30"+
        "\uffff\1\62\30\uffff\1\63\30\uffff\1\64\30\uffff\1\65\30\uffff\1"+
        "\66\30\uffff\1\67\31\uffff\1\70\u0083\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\16\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\10\uffff\6\16\1\46\1\47\1\67\2\16\1\52\1\53\1\70"+
            "\1\uffff\1\16\1\uffff\3\16\14\uffff\3\2\5\uffff\3\16\u0083\uffff"+
            "\1\2\16\uffff\1\16\2\uffff\1\15\3\uffff\1\2\1\14\3\uffff\2\2"+
            "\11\uffff\1\1\2\uffff\1\71\1\uffff\1\2\2\uffff\1\16\2\2",
            "\1\76\4\uffff\1\76\3\uffff\1\76\3\uffff\11\76\10\uffff\1\76"+
            "\1\uffff\4\76\12\uffff\3\76\10\uffff\10\76\1\uffff\4\76\2\uffff"+
            "\1\76\1\uffff\3\76\24\uffff\3\76\u0083\uffff\1\2\16\uffff\1"+
            "\76\33\uffff\1\2\2\uffff\1\76\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\150\4\uffff\1\150\2\uffff\2\150\3\uffff\11\150\1\147\1"+
            "\150\6\uffff\1\150\1\uffff\4\150\12\uffff\3\150\10\uffff\16"+
            "\150\1\uffff\1\150\1\uffff\3\150\14\uffff\3\150\5\uffff\3\150"+
            "\u0083\uffff\1\150\16\uffff\1\150\2\uffff\1\150\3\uffff\2\150"+
            "\3\uffff\2\150\11\uffff\1\150\2\uffff\1\150\1\uffff\1\150\2"+
            "\uffff\3\150",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u00a3\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u00dd\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u0117\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u0151\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u018b\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u01c5\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u01ff\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u0239\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u0273\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u02ad\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u02e7\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u0321\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u035b\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0395",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03c6\4\uffff\1\u03aa\2\uffff\1\u03d2\1\u03ab\3\uffff\1"+
            "\u03ac\1\u03ad\1\u03ae\1\u03af\1\u03b0\1\u03b1\1\u03b2\1\u03b3"+
            "\1\u03a9\1\uffff\1\u039a\6\uffff\1\u03c9\1\uffff\1\u03cb\1\u03c7"+
            "\1\u03c8\1\u03ca\5\uffff\1\u0399\1\u0398\3\uffff\1\u03b4\1\u03b5"+
            "\1\u03b6\10\uffff\1\u03b7\1\u03b8\1\u03b9\1\u03bb\1\u03bc\1"+
            "\u03bd\1\u03be\1\u03bf\1\u03cf\1\u03c0\1\u03c1\1\u03c2\1\u03c3"+
            "\1\u03d0\1\uffff\1\u03c4\1\uffff\1\u03c5\1\u03ba\1\u03a8\14"+
            "\uffff\1\u03a1\1\u03a2\1\u03a3\5\uffff\1\u03cc\1\u03cd\1\u03ce"+
            "\u0083\uffff\1\u03a0\16\uffff\1\u03a6\2\uffff\1\u03a5\1\uffff"+
            "\1\u03d3\1\uffff\1\u039c\1\u03a4\3\uffff\1\u0396\1\u0397\11"+
            "\uffff\1\u039b\2\uffff\1\u03d1\1\uffff\1\u039d\2\uffff\1\u03a7"+
            "\1\u039e\1\u039f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0404\4\uffff\1\u03e8\2\uffff\1\u0410\1\u03e9\3\uffff\1"+
            "\u03ea\1\u03eb\1\u03ec\1\u03ed\1\u03ee\1\u03ef\1\u03f0\1\u03f1"+
            "\1\u03e7\1\uffff\1\u03d8\6\uffff\1\u0407\1\uffff\1\u0409\1\u0405"+
            "\1\u0406\1\u0408\5\uffff\1\u03d7\1\u03d6\3\uffff\1\u03f2\1\u03f3"+
            "\1\u03f4\10\uffff\1\u03f5\1\u03f6\1\u03f7\1\u03f9\1\u03fa\1"+
            "\u03fb\1\u03fc\1\u03fd\1\u040d\1\u03fe\1\u03ff\1\u0400\1\u0401"+
            "\1\u040e\1\uffff\1\u0402\1\uffff\1\u0403\1\u03f8\1\u03e6\14"+
            "\uffff\1\u03df\1\u03e0\1\u03e1\5\uffff\1\u040a\1\u040b\1\u040c"+
            "\u0083\uffff\1\u03de\16\uffff\1\u03e4\2\uffff\1\u03e3\3\uffff"+
            "\1\u03da\1\u03e2\3\uffff\1\u03d4\1\u03d5\11\uffff\1\u03d9\2"+
            "\uffff\1\u040f\1\uffff\1\u03db\2\uffff\1\u03e5\1\u03dc\1\u03dd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0441\4\uffff\1\u0425\2\uffff\1\u044d\1\u0426\3\uffff\1"+
            "\u0427\1\u0428\1\u0429\1\u042a\1\u042b\1\u042c\1\u042d\1\u042e"+
            "\1\u0424\1\uffff\1\u0415\6\uffff\1\u0444\1\uffff\1\u0446\1\u0442"+
            "\1\u0443\1\u0445\5\uffff\1\u0414\1\u0413\3\uffff\1\u042f\1\u0430"+
            "\1\u0431\10\uffff\1\u0432\1\u0433\1\u0434\1\u0436\1\u0437\1"+
            "\u0438\1\u0439\1\u043a\1\u044a\1\u043b\1\u043c\1\u043d\1\u043e"+
            "\1\u044b\1\uffff\1\u043f\1\uffff\1\u0440\1\u0435\1\u0423\14"+
            "\uffff\1\u041c\1\u041d\1\u041e\5\uffff\1\u0447\1\u0448\1\u0449"+
            "\u0083\uffff\1\u041b\16\uffff\1\u0421\2\uffff\1\u0420\3\uffff"+
            "\1\u0417\1\u041f\3\uffff\1\u0411\1\u0412\11\uffff\1\u0416\2"+
            "\uffff\1\u044c\1\uffff\1\u0418\2\uffff\1\u0422\1\u0419\1\u041a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u047c\4\uffff\1\u0460\2\uffff\1\u0488\1\u0461\3\uffff\1"+
            "\u0462\1\u0463\1\u0464\1\u0465\1\u0466\1\u0467\1\u0468\1\u0469"+
            "\1\u045f\1\uffff\1\u044e\6\uffff\1\u047f\1\uffff\1\u0481\1\u047d"+
            "\1\u047e\1\u0480\12\uffff\1\u046a\1\u046b\1\u046c\10\uffff\1"+
            "\u046d\1\u046e\1\u046f\1\u0471\1\u0472\1\u0473\1\u0474\1\u0475"+
            "\1\u0485\1\u0476\1\u0477\1\u0478\1\u0479\1\u0486\1\uffff\1\u047a"+
            "\1\uffff\1\u047b\1\u0470\1\u045e\14\uffff\1\u0457\1\u0458\1"+
            "\u0459\5\uffff\1\u0482\1\u0483\1\u0484\u0083\uffff\1\u0454\16"+
            "\uffff\1\u045c\2\uffff\1\u045b\3\uffff\1\u0450\1\u045a\3\uffff"+
            "\1\u0455\1\u0456\11\uffff\1\u044f\2\uffff\1\u0487\1\uffff\1"+
            "\u0451\2\uffff\1\u045d\1\u0452\1\u0453",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04b9\4\uffff\1\u049d\2\uffff\1\u04c5\1\u049e\3\uffff\1"+
            "\u049f\1\u04a0\1\u04a1\1\u04a2\1\u04a3\1\u04a4\1\u04a5\1\u04a6"+
            "\1\u049c\1\uffff\1\u048b\6\uffff\1\u04bc\1\uffff\1\u04be\1\u04ba"+
            "\1\u04bb\1\u04bd\5\uffff\1\u048a\1\u0489\3\uffff\1\u04a7\1\u04a8"+
            "\1\u04a9\10\uffff\1\u04aa\1\u04ab\1\u04ac\1\u04ae\1\u04af\1"+
            "\u04b0\1\u04b1\1\u04b2\1\u04c2\1\u04b3\1\u04b4\1\u04b5\1\u04b6"+
            "\1\u04c3\1\uffff\1\u04b7\1\uffff\1\u04b8\1\u04ad\1\u049b\14"+
            "\uffff\1\u0494\1\u0495\1\u0496\5\uffff\1\u04bf\1\u04c0\1\u04c1"+
            "\u0083\uffff\1\u0491\16\uffff\1\u0499\2\uffff\1\u0498\3\uffff"+
            "\1\u048d\1\u0497\3\uffff\1\u0492\1\u0493\11\uffff\1\u048c\2"+
            "\uffff\1\u04c4\1\uffff\1\u048e\2\uffff\1\u049a\1\u048f\1\u0490",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04f6\4\uffff\1\u04da\2\uffff\1\u0502\1\u04db\3\uffff\1"+
            "\u04dc\1\u04dd\1\u04de\1\u04df\1\u04e0\1\u04e1\1\u04e2\1\u04e3"+
            "\1\u04d9\1\uffff\1\u04c8\6\uffff\1\u04f9\1\uffff\1\u04fb\1\u04f7"+
            "\1\u04f8\1\u04fa\5\uffff\1\u04c7\1\u04c6\3\uffff\1\u04e4\1\u04e5"+
            "\1\u04e6\10\uffff\1\u04e7\1\u04e8\1\u04e9\1\u04eb\1\u04ec\1"+
            "\u04ed\1\u04ee\1\u04ef\1\u04ff\1\u04f0\1\u04f1\1\u04f2\1\u04f3"+
            "\1\u0500\1\uffff\1\u04f4\1\uffff\1\u04f5\1\u04ea\1\u04d8\14"+
            "\uffff\1\u04d1\1\u04d2\1\u04d3\5\uffff\1\u04fc\1\u04fd\1\u04fe"+
            "\u0083\uffff\1\u04ce\16\uffff\1\u04d6\2\uffff\1\u04d5\3\uffff"+
            "\1\u04ca\1\u04d4\3\uffff\1\u04cf\1\u04d0\11\uffff\1\u04c9\2"+
            "\uffff\1\u0501\1\uffff\1\u04cb\2\uffff\1\u04d7\1\u04cc\1\u04cd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0533\4\uffff\1\u0517\2\uffff\1\u053f\1\u0518\3\uffff\1"+
            "\u0519\1\u051a\1\u051b\1\u051c\1\u051d\1\u051e\1\u051f\1\u0520"+
            "\1\u0516\1\uffff\1\u0505\6\uffff\1\u0536\1\uffff\1\u0538\1\u0534"+
            "\1\u0535\1\u0537\5\uffff\1\u0504\1\u0503\3\uffff\1\u0521\1\u0522"+
            "\1\u0523\10\uffff\1\u0524\1\u0525\1\u0526\1\u0528\1\u0529\1"+
            "\u052a\1\u052b\1\u052c\1\u053c\1\u052d\1\u052e\1\u052f\1\u0530"+
            "\1\u053d\1\uffff\1\u0531\1\uffff\1\u0532\1\u0527\1\u0515\14"+
            "\uffff\1\u050e\1\u050f\1\u0510\5\uffff\1\u0539\1\u053a\1\u053b"+
            "\u0083\uffff\1\u050b\16\uffff\1\u0513\2\uffff\1\u0512\3\uffff"+
            "\1\u0507\1\u0511\3\uffff\1\u050c\1\u050d\11\uffff\1\u0506\2"+
            "\uffff\1\u053e\1\uffff\1\u0508\2\uffff\1\u0514\1\u0509\1\u050a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0570\4\uffff\1\u0554\2\uffff\1\u057c\1\u0555\3\uffff\1"+
            "\u0556\1\u0557\1\u0558\1\u0559\1\u055a\1\u055b\1\u055c\1\u055d"+
            "\1\u0553\1\uffff\1\u0542\6\uffff\1\u0573\1\uffff\1\u0575\1\u0571"+
            "\1\u0572\1\u0574\5\uffff\1\u0541\1\u0540\3\uffff\1\u055e\1\u055f"+
            "\1\u0560\10\uffff\1\u0561\1\u0562\1\u0563\1\u0565\1\u0566\1"+
            "\u0567\1\u0568\1\u0569\1\u0579\1\u056a\1\u056b\1\u056c\1\u056d"+
            "\1\u057a\1\uffff\1\u056e\1\uffff\1\u056f\1\u0564\1\u0552\14"+
            "\uffff\1\u054b\1\u054c\1\u054d\5\uffff\1\u0576\1\u0577\1\u0578"+
            "\u0083\uffff\1\u0548\16\uffff\1\u0550\2\uffff\1\u054f\3\uffff"+
            "\1\u0544\1\u054e\3\uffff\1\u0549\1\u054a\11\uffff\1\u0543\2"+
            "\uffff\1\u057b\1\uffff\1\u0545\2\uffff\1\u0551\1\u0546\1\u0547",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05ad\4\uffff\1\u0591\2\uffff\1\u05b9\1\u0592\3\uffff\1"+
            "\u0593\1\u0594\1\u0595\1\u0596\1\u0597\1\u0598\1\u0599\1\u059a"+
            "\1\u0590\1\uffff\1\u057f\6\uffff\1\u05b0\1\uffff\1\u05b2\1\u05ae"+
            "\1\u05af\1\u05b1\5\uffff\1\u057e\1\u057d\3\uffff\1\u059b\1\u059c"+
            "\1\u059d\10\uffff\1\u059e\1\u059f\1\u05a0\1\u05a2\1\u05a3\1"+
            "\u05a4\1\u05a5\1\u05a6\1\u05b6\1\u05a7\1\u05a8\1\u05a9\1\u05aa"+
            "\1\u05b7\1\uffff\1\u05ab\1\uffff\1\u05ac\1\u05a1\1\u058f\14"+
            "\uffff\1\u0588\1\u0589\1\u058a\5\uffff\1\u05b3\1\u05b4\1\u05b5"+
            "\u0083\uffff\1\u0585\16\uffff\1\u058d\2\uffff\1\u058c\3\uffff"+
            "\1\u0581\1\u058b\3\uffff\1\u0586\1\u0587\11\uffff\1\u0580\2"+
            "\uffff\1\u05b8\1\uffff\1\u0582\2\uffff\1\u058e\1\u0583\1\u0584",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05e8\4\uffff\1\u05cc\2\uffff\1\u05f4\1\u05cd\3\uffff\1"+
            "\u05ce\1\u05cf\1\u05d0\1\u05d1\1\u05d2\1\u05d3\1\u05d4\1\u05d5"+
            "\1\u05cb\1\uffff\1\u05bc\6\uffff\1\u05eb\1\uffff\1\u05ed\1\u05e9"+
            "\1\u05ea\1\u05ec\12\uffff\1\u05d6\1\u05d7\1\u05d8\10\uffff\1"+
            "\u05d9\1\u05da\1\u05db\1\u05dd\1\u05de\1\u05df\1\u05e0\1\u05e1"+
            "\1\u05f1\1\u05e2\1\u05e3\1\u05e4\1\u05e5\1\u05f2\1\uffff\1\u05e6"+
            "\1\uffff\1\u05e7\1\u05dc\1\u05ca\14\uffff\1\u05c3\1\u05c4\1"+
            "\u05c5\5\uffff\1\u05ee\1\u05ef\1\u05f0\u0083\uffff\1\u05c2\16"+
            "\uffff\1\u05c8\2\uffff\1\u05c7\3\uffff\1\u05be\1\u05c6\3\uffff"+
            "\1\u05ba\1\u05bb\11\uffff\1\u05bd\2\uffff\1\u05f3\1\uffff\1"+
            "\u05bf\2\uffff\1\u05c9\1\u05c0\1\u05c1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u05f5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0626\4\uffff\1\u060a\2\uffff\1\u0632\1\u060b\3\uffff\1"+
            "\u060c\1\u060d\1\u060e\1\u060f\1\u0610\1\u0611\1\u0612\1\u0613"+
            "\1\u0609\1\uffff\1\u05fa\6\uffff\1\u0629\1\uffff\1\u062b\1\u0627"+
            "\1\u0628\1\u062a\12\uffff\1\u0614\1\u0615\1\u0616\10\uffff\1"+
            "\u0617\1\u0618\1\u0619\1\u061b\1\u061c\1\u061d\1\u061e\1\u061f"+
            "\1\u062f\1\u0620\1\u0621\1\u0622\1\u0623\1\u0630\1\uffff\1\u0624"+
            "\1\uffff\1\u0625\1\u061a\1\u0608\14\uffff\1\u0601\1\u0602\1"+
            "\u0603\5\uffff\1\u062c\1\u062d\1\u062e\u0083\uffff\1\u0600\16"+
            "\uffff\1\u0606\2\uffff\1\u0605\3\uffff\1\u05fc\1\u0604\3\uffff"+
            "\1\u05f8\1\u05f9\11\uffff\1\u05fb\2\uffff\1\u0631\1\uffff\1"+
            "\u05fd\2\uffff\1\u0607\1\u05fe\1\u05ff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0661\4\uffff\1\u0645\2\uffff\1\u066d\1\u0646\3\uffff\1"+
            "\u0647\1\u0648\1\u0649\1\u064a\1\u064b\1\u064c\1\u064d\1\u064e"+
            "\1\u0644\1\uffff\1\u0635\6\uffff\1\u0664\1\uffff\1\u0666\1\u0662"+
            "\1\u0663\1\u0665\12\uffff\1\u064f\1\u0650\1\u0651\10\uffff\1"+
            "\u0652\1\u0653\1\u0654\1\u0656\1\u0657\1\u0658\1\u0659\1\u065a"+
            "\1\u066a\1\u065b\1\u065c\1\u065d\1\u065e\1\u066b\1\uffff\1\u065f"+
            "\1\uffff\1\u0660\1\u0655\1\u0643\14\uffff\1\u063c\1\u063d\1"+
            "\u063e\5\uffff\1\u0667\1\u0668\1\u0669\u0083\uffff\1\u063b\16"+
            "\uffff\1\u0641\2\uffff\1\u0640\3\uffff\1\u0637\1\u063f\3\uffff"+
            "\1\u0633\1\u0634\11\uffff\1\u0636\2\uffff\1\u066c\1\uffff\1"+
            "\u0638\2\uffff\1\u0642\1\u0639\1\u063a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u068f\4\uffff\1\u0673\3\uffff\1\u0674\3\uffff\1\u0675\1"+
            "\u0676\1\u0677\1\u0678\1\u0679\1\u067a\1\u067b\1\u067c\1\u0672"+
            "\1\u066e\7\uffff\1\u0692\1\uffff\1\u0694\1\u0690\1\u0691\1\u0693"+
            "\12\uffff\1\u067d\1\u067e\1\u067f\10\uffff\1\u0680\1\u0681\1"+
            "\u0682\1\u0684\1\u0685\1\u0686\1\u0687\1\u0688\1\uffff\1\u0689"+
            "\1\u068a\1\u068b\1\u068c\2\uffff\1\u068d\1\uffff\1\u068e\1\u0683"+
            "\1\u0671\24\uffff\1\u0695\1\u0696\1\u0697\u0092\uffff\1\u066f"+
            "\36\uffff\1\u0670",
            "\1\u06ad\1\u06ae\1\u06af\1\u06b0\1\uffff\1\u06ab\1\u06aa\1"+
            "\u06ac\34\uffff\1\u06a4\u00d1\uffff\1\u06a3\2\uffff\1\u0698"+
            "\1\u0699\1\u06a8\1\u069c\6\uffff\1\u06a7\1\u06a9\1\u06a5\1\u06a6"+
            "\1\u069f\1\u06a0\1\u06a1\1\u06a2\1\u069e\1\u069d\1\u069a\1\u069b",
            "\1\u06c6\1\u06c7\1\u06c8\1\u06c9\1\uffff\1\u06c4\1\u06c3\1"+
            "\u06c5\34\uffff\1\u06bd\u00d1\uffff\1\u06bc\2\uffff\1\u06b1"+
            "\1\u06b2\1\u06c1\1\u06b5\6\uffff\1\u06c0\1\u06c2\1\u06be\1\u06bf"+
            "\1\u06b8\1\u06b9\1\u06ba\1\u06bb\1\u06b7\1\u06b6\1\u06b3\1\u06b4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06df\1\u06e0\1\u06e1\1\u06e2\1\uffff\1\u06dd\1\u06dc\1"+
            "\u06de\34\uffff\1\u06d6\u00d1\uffff\1\u06d5\2\uffff\1\u06ca"+
            "\1\u06cb\1\u06da\1\u06ce\6\uffff\1\u06d9\1\u06db\1\u06d7\1\u06d8"+
            "\1\u06d1\1\u06d2\1\u06d3\1\u06d4\1\u06d0\1\u06cf\1\u06cc\1\u06cd",
            "\1\u06f8\1\u06f9\1\u06fa\1\u06fb\1\uffff\1\u06f6\1\u06f5\1"+
            "\u06f7\34\uffff\1\u06ef\u00d1\uffff\1\u06ee\2\uffff\1\u06e3"+
            "\1\u06e4\1\u06f3\1\u06e7\6\uffff\1\u06f2\1\u06f4\1\u06f0\1\u06f1"+
            "\1\u06ea\1\u06eb\1\u06ec\1\u06ed\1\u06e9\1\u06e8\1\u06e5\1\u06e6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0711\1\u0712\1\u0713\1\u0714\1\uffff\1\u070f\1\u070e\1"+
            "\u0710\34\uffff\1\u0708\u00d1\uffff\1\u0707\2\uffff\1\u06fc"+
            "\1\u06fd\1\u070c\1\u0700\6\uffff\1\u070b\1\u070d\1\u0709\1\u070a"+
            "\1\u0703\1\u0704\1\u0705\1\u0706\1\u0702\1\u0701\1\u06fe\1\u06ff",
            "\1\u072a\1\u072b\1\u072c\1\u072d\1\uffff\1\u0728\1\u0727\1"+
            "\u0729\34\uffff\1\u0721\u00d1\uffff\1\u0720\2\uffff\1\u0715"+
            "\1\u0716\1\u0725\1\u0719\6\uffff\1\u0724\1\u0726\1\u0722\1\u0723"+
            "\1\u071c\1\u071d\1\u071e\1\u071f\1\u071b\1\u071a\1\u0717\1\u0718",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0743\1\u0744\1\u0745\1\u0746\1\uffff\1\u0740\1\u073f\1"+
            "\u0742\34\uffff\1\u0739\u00cf\uffff\1\u0741\1\uffff\1\u0738"+
            "\2\uffff\1\16\1\u072e\1\u073d\1\u0731\6\uffff\1\u073c\1\u073e"+
            "\1\u073a\1\u073b\1\u0734\1\u0735\1\u0736\1\u0737\1\u0733\1\u0732"+
            "\1\u072f\1\u0730",
            "\1\u075e\1\u075f\1\u0760\1\u0761\1\uffff\1\u075b\1\u075a\1"+
            "\u075d\34\uffff\1\u0754\u00cf\uffff\1\u075c\1\uffff\1\u0753"+
            "\2\uffff\1\16\1\u0749\1\u0758\1\u074c\6\uffff\1\u0757\1\u0759"+
            "\1\u0755\1\u0756\1\u074f\1\u0750\1\u0751\1\u0752\1\u074e\1\u074d"+
            "\1\u074a\1\u074b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0777\1\u0778\1\u0779\1\u077a\1\uffff\1\u0775\1\u0774\1"+
            "\u0776\34\uffff\1\u076e\u00d1\uffff\1\u076d\2\uffff\1\u0762"+
            "\1\u0763\1\u0772\1\u0766\6\uffff\1\u0771\1\u0773\1\u076f\1\u0770"+
            "\1\u0769\1\u076a\1\u076b\1\u076c\1\u0768\1\u0767\1\u0764\1\u0765",
            "\1\u0790\1\u0791\1\u0792\1\u0793\1\uffff\1\u078e\1\u078d\1"+
            "\u078f\34\uffff\1\u0787\u00d1\uffff\1\u0786\2\uffff\1\u077b"+
            "\1\u077c\1\u078b\1\u077f\6\uffff\1\u078a\1\u078c\1\u0788\1\u0789"+
            "\1\u0782\1\u0783\1\u0784\1\u0785\1\u0781\1\u0780\1\u077d\1\u077e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07a9\1\u07aa\1\u07ab\1\u07ac\1\uffff\1\u07a7\1\u07a6\1"+
            "\u07a8\34\uffff\1\u07a0\u00d1\uffff\1\u079f\2\uffff\1\u0794"+
            "\1\u0795\1\u07a4\1\u0798\6\uffff\1\u07a3\1\u07a5\1\u07a1\1\u07a2"+
            "\1\u079b\1\u079c\1\u079d\1\u079e\1\u079a\1\u0799\1\u0796\1\u0797",
            "\1\u07c2\1\u07c3\1\u07c4\1\u07c5\1\uffff\1\u07c0\1\u07bf\1"+
            "\u07c1\34\uffff\1\u07b9\u00d1\uffff\1\u07b8\2\uffff\1\u07ad"+
            "\1\u07ae\1\u07bd\1\u07b1\6\uffff\1\u07bc\1\u07be\1\u07ba\1\u07bb"+
            "\1\u07b4\1\u07b5\1\u07b6\1\u07b7\1\u07b3\1\u07b2\1\u07af\1\u07b0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07db\1\u07dc\1\u07dd\1\u07de\1\uffff\1\u07d9\1\u07d8\1"+
            "\u07da\34\uffff\1\u07d2\u00d1\uffff\1\u07d1\2\uffff\1\u07c6"+
            "\1\u07c7\1\u07d6\1\u07ca\6\uffff\1\u07d5\1\u07d7\1\u07d3\1\u07d4"+
            "\1\u07cd\1\u07ce\1\u07cf\1\u07d0\1\u07cc\1\u07cb\1\u07c8\1\u07c9",
            "\1\u07f4\1\u07f5\1\u07f6\1\u07f7\1\uffff\1\u07f2\1\u07f1\1"+
            "\u07f3\34\uffff\1\u07eb\u00d1\uffff\1\u07ea\2\uffff\1\u07df"+
            "\1\u07e0\1\u07ef\1\u07e3\6\uffff\1\u07ee\1\u07f0\1\u07ec\1\u07ed"+
            "\1\u07e6\1\u07e7\1\u07e8\1\u07e9\1\u07e5\1\u07e4\1\u07e1\1\u07e2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u080d\1\u080e\1\u080f\1\u0810\1\uffff\1\u080b\1\u080a\1"+
            "\u080c\34\uffff\1\u0804\u00d1\uffff\1\u0803\2\uffff\1\u07f8"+
            "\1\u07f9\1\u0808\1\u07fc\6\uffff\1\u0807\1\u0809\1\u0805\1\u0806"+
            "\1\u07ff\1\u0800\1\u0801\1\u0802\1\u07fe\1\u07fd\1\u07fa\1\u07fb",
            "\1\u0826\1\u0827\1\u0828\1\u0829\1\uffff\1\u0824\1\u0823\1"+
            "\u0825\34\uffff\1\u081d\u00d1\uffff\1\u081c\2\uffff\1\u0811"+
            "\1\u0812\1\u0821\1\u0815\6\uffff\1\u0820\1\u0822\1\u081e\1\u081f"+
            "\1\u0818\1\u0819\1\u081a\1\u081b\1\u0817\1\u0816\1\u0813\1\u0814",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u083f\1\u0840\1\u0841\1\u0842\1\uffff\1\u083d\1\u083c\1"+
            "\u083e\34\uffff\1\u0836\u00d1\uffff\1\u0835\2\uffff\1\u082a"+
            "\1\u082b\1\u083a\1\u082e\6\uffff\1\u0839\1\u083b\1\u0837\1\u0838"+
            "\1\u0831\1\u0832\1\u0833\1\u0834\1\u0830\1\u082f\1\u082c\1\u082d",
            "\1\u0858\1\u0859\1\u085a\1\u085b\1\uffff\1\u0856\1\u0855\1"+
            "\u0857\34\uffff\1\u084f\u00d1\uffff\1\u084e\2\uffff\1\u0843"+
            "\1\u0844\1\u0853\1\u0847\6\uffff\1\u0852\1\u0854\1\u0850\1\u0851"+
            "\1\u084a\1\u084b\1\u084c\1\u084d\1\u0849\1\u0848\1\u0845\1\u0846",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0872\1\u0873\1\u0874\1\u0875\1\uffff\1\u086f\1\u086e\1"+
            "\u0871\34\uffff\1\u0868\u00cf\uffff\1\u0870\1\uffff\1\u0867"+
            "\2\uffff\1\u085c\1\u085d\1\u086c\1\u0860\6\uffff\1\u086b\1\u086d"+
            "\1\u0869\1\u086a\1\u0863\1\u0864\1\u0865\1\u0866\1\u0862\1\u0861"+
            "\1\u085e\1\u085f",
            "\1\u088c\1\u088d\1\u088e\1\u088f\1\uffff\1\u0889\1\u0888\1"+
            "\u088b\34\uffff\1\u0882\u00cf\uffff\1\u088a\1\uffff\1\u0881"+
            "\2\uffff\1\u0876\1\u0877\1\u0886\1\u087a\6\uffff\1\u0885\1\u0887"+
            "\1\u0883\1\u0884\1\u087d\1\u087e\1\u087f\1\u0880\1\u087c\1\u087b"+
            "\1\u0878\1\u0879",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08a6\1\u08a7\1\u08a8\1\u08a9\1\uffff\1\u08a3\1\u08a2\1"+
            "\u08a5\34\uffff\1\u089c\u00cf\uffff\1\u08a4\1\uffff\1\u089b"+
            "\2\uffff\1\16\1\u0891\1\u08a0\1\u0894\6\uffff\1\u089f\1\u08a1"+
            "\1\u089d\1\u089e\1\u0897\1\u0898\1\u0899\1\u089a\1\u0896\1\u0895"+
            "\1\u0892\1\u0893",
            "\1\u08c0\1\u08c1\1\u08c2\1\u08c3\1\uffff\1\u08bd\1\u08bc\1"+
            "\u08bf\34\uffff\1\u08b6\u00cf\uffff\1\u08be\1\uffff\1\u08b5"+
            "\2\uffff\1\16\1\u08ab\1\u08ba\1\u08ae\6\uffff\1\u08b9\1\u08bb"+
            "\1\u08b7\1\u08b8\1\u08b1\1\u08b2\1\u08b3\1\u08b4\1\u08b0\1\u08af"+
            "\1\u08ac\1\u08ad",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08db\1\u08dc\1\u08dd\1\u08de\1\uffff\1\u08d7\1\u08d6\1"+
            "\u08da\3\uffff\1\u08d9\30\uffff\1\u08d0\u00cf\uffff\1\u08d8"+
            "\1\uffff\1\u08cf\2\uffff\1\16\1\u08c5\1\u08d4\1\u08c8\6\uffff"+
            "\1\u08d3\1\u08d5\1\u08d1\1\u08d2\1\u08cb\1\u08cc\1\u08cd\1\u08ce"+
            "\1\u08ca\1\u08c9\1\u08c6\1\u08c7",
            "\1\u08f6\1\u08f7\1\u08f8\1\u08f9\1\uffff\1\u08f2\1\u08f1\1"+
            "\u08f5\3\uffff\1\u08f4\30\uffff\1\u08eb\u00cf\uffff\1\u08f3"+
            "\1\uffff\1\u08ea\2\uffff\1\16\1\u08e0\1\u08ef\1\u08e3\6\uffff"+
            "\1\u08ee\1\u08f0\1\u08ec\1\u08ed\1\u08e6\1\u08e7\1\u08e8\1\u08e9"+
            "\1\u08e5\1\u08e4\1\u08e1\1\u08e2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "1123:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_0 = input.LA(1);

                         
                        int index155_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_0==MINUS) ) {s = 1;}

                        else if ( ((LA155_0>=BOOLEAN_TRUE && LA155_0<=VALUE_NULL)||LA155_0==NUM_DOUBLE||LA155_0==PLUS||(LA155_0>=STRING_LITERAL && LA155_0<=QUOTED_STRING_LITERAL)||LA155_0==NUM_INT||(LA155_0>=NUM_LONG && LA155_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA155_0==QUESTION) ) {s = 12;}

                        else if ( (LA155_0==LPAREN) ) {s = 13;}

                        else if ( (LA155_0==WINDOW||LA155_0==ESCAPE||LA155_0==EVERY_EXPR||(LA155_0>=MAX && LA155_0<=MIN)||LA155_0==OUTER||(LA155_0>=JOIN && LA155_0<=FULL)||LA155_0==EVENTS||(LA155_0>=UNIDIRECTIONAL && LA155_0<=METADATASQL)||(LA155_0>=WEEKDAY && LA155_0<=LW)||LA155_0==SNAPSHOT||(LA155_0>=VARIABLE && LA155_0<=AT)||(LA155_0>=DEFINE && LA155_0<=MATCHES)||LA155_0==IDENT||LA155_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA155_0==COUNT) ) {s = 17;}

                        else if ( (LA155_0==SUM) ) {s = 20;}

                        else if ( (LA155_0==AVG) ) {s = 21;}

                        else if ( (LA155_0==COALESCE) ) {s = 24;}

                        else if ( (LA155_0==MEDIAN) ) {s = 25;}

                        else if ( (LA155_0==STDDEV) ) {s = 26;}

                        else if ( (LA155_0==AVEDEV) ) {s = 27;}

                        else if ( (LA155_0==FIRST) ) {s = 29;}

                        else if ( (LA155_0==LAST) ) {s = 30;}

                        else if ( (LA155_0==PREVIOUS) ) {s = 38;}

                        else if ( (LA155_0==PRIOR) ) {s = 39;}

                        else if ( (LA155_0==INSTANCEOF) ) {s = 42;}

                        else if ( (LA155_0==CAST) ) {s = 43;}

                        else if ( (LA155_0==EXISTS) ) {s = 55;}

                        else if ( (LA155_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA155_0==LCURLY) ) {s = 57;}

                         
                        input.seek(index155_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA155_163 = input.LA(1);

                         
                        int index155_163 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_163==STRING_LITERAL) ) {s = 918;}

                        else if ( (LA155_163==QUOTED_STRING_LITERAL) ) {s = 919;}

                        else if ( (LA155_163==ALL) && (synpred3_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA155_163==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA155_163==CASE) && (synpred3_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA155_163==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA155_163==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA155_163==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA155_163==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA155_163==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA155_163==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA155_163==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA155_163==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA155_163==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA155_163==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA155_163==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA155_163==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA155_163==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA155_163==AT) && (synpred3_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA155_163==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA155_163==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA155_163==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA155_163==SUM) && (synpred3_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA155_163==AVG) && (synpred3_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA155_163==MAX) && (synpred3_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA155_163==MIN) && (synpred3_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA155_163==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA155_163==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA155_163==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA155_163==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA155_163==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA155_163==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA155_163==LAST) && (synpred3_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA155_163==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA155_163==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA155_163==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA155_163==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA155_163==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA155_163==SQL) && (synpred3_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA155_163==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA155_163==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA155_163==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA155_163==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA155_163==LW) && (synpred3_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA155_163==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA155_163==CAST) && (synpred3_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA155_163==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA155_163==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA155_163==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA155_163==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA155_163==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA155_163==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA155_163==FULL) && (synpred3_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA155_163==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA155_163==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA155_163==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA155_163==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA155_163==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA155_163==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA155_163==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA155_163==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA155_163==STAR) && (synpred3_EsperEPL2Grammar())) {s = 979;}

                         
                        input.seek(index155_163);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA155_221 = input.LA(1);

                         
                        int index155_221 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_221==STRING_LITERAL) ) {s = 980;}

                        else if ( (LA155_221==QUOTED_STRING_LITERAL) ) {s = 981;}

                        else if ( (LA155_221==ALL) && (synpred3_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA155_221==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA155_221==CASE) && (synpred3_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA155_221==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA155_221==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA155_221==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA155_221==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA155_221==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA155_221==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA155_221==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA155_221==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA155_221==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA155_221==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA155_221==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA155_221==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA155_221==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA155_221==AT) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA155_221==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA155_221==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA155_221==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA155_221==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA155_221==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA155_221==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA155_221==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA155_221==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA155_221==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA155_221==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA155_221==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA155_221==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA155_221==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA155_221==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA155_221==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA155_221==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA155_221==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA155_221==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA155_221==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA155_221==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA155_221==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA155_221==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA155_221==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA155_221==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA155_221==LW) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA155_221==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA155_221==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA155_221==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA155_221==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA155_221==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA155_221==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA155_221==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA155_221==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA155_221==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA155_221==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA155_221==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA155_221==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA155_221==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA155_221==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA155_221==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA155_221==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA155_221==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                         
                        input.seek(index155_221);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA155_279 = input.LA(1);

                         
                        int index155_279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_279==STRING_LITERAL) ) {s = 1041;}

                        else if ( (LA155_279==QUOTED_STRING_LITERAL) ) {s = 1042;}

                        else if ( (LA155_279==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA155_279==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA155_279==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA155_279==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA155_279==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA155_279==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA155_279==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA155_279==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA155_279==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA155_279==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA155_279==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA155_279==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA155_279==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA155_279==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA155_279==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA155_279==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA155_279==AT) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA155_279==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA155_279==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA155_279==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA155_279==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA155_279==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA155_279==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA155_279==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA155_279==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA155_279==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA155_279==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA155_279==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA155_279==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA155_279==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA155_279==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA155_279==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA155_279==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA155_279==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA155_279==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA155_279==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA155_279==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA155_279==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA155_279==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA155_279==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA155_279==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA155_279==LW) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA155_279==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA155_279==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA155_279==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA155_279==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA155_279==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA155_279==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA155_279==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA155_279==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA155_279==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA155_279==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA155_279==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA155_279==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA155_279==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA155_279==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA155_279==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA155_279==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA155_279==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                         
                        input.seek(index155_279);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA155_337 = input.LA(1);

                         
                        int index155_337 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_337==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA155_337==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA155_337==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA155_337==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA155_337==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA155_337==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA155_337==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA155_337==STRING_LITERAL) ) {s = 1109;}

                        else if ( (LA155_337==QUOTED_STRING_LITERAL) ) {s = 1110;}

                        else if ( (LA155_337==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA155_337==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA155_337==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA155_337==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA155_337==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA155_337==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA155_337==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA155_337==AT) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA155_337==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA155_337==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA155_337==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA155_337==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA155_337==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA155_337==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA155_337==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA155_337==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA155_337==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA155_337==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA155_337==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA155_337==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA155_337==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA155_337==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA155_337==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA155_337==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA155_337==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA155_337==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA155_337==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA155_337==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA155_337==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA155_337==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA155_337==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA155_337==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA155_337==LW) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA155_337==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA155_337==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA155_337==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA155_337==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA155_337==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA155_337==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA155_337==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA155_337==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA155_337==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA155_337==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA155_337==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA155_337==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA155_337==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA155_337==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA155_337==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA155_337==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA155_337==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                         
                        input.seek(index155_337);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA155_395 = input.LA(1);

                         
                        int index155_395 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_395==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA155_395==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA155_395==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA155_395==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA155_395==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA155_395==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA155_395==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA155_395==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA155_395==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA155_395==STRING_LITERAL) ) {s = 1170;}

                        else if ( (LA155_395==QUOTED_STRING_LITERAL) ) {s = 1171;}

                        else if ( (LA155_395==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA155_395==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA155_395==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA155_395==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA155_395==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA155_395==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA155_395==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA155_395==AT) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA155_395==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA155_395==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA155_395==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA155_395==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA155_395==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA155_395==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA155_395==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA155_395==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA155_395==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA155_395==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA155_395==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA155_395==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA155_395==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA155_395==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA155_395==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA155_395==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA155_395==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA155_395==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA155_395==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1198;}

                        else if ( (LA155_395==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA155_395==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA155_395==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA155_395==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA155_395==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA155_395==LW) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA155_395==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA155_395==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA155_395==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA155_395==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA155_395==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                        else if ( (LA155_395==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( (LA155_395==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1211;}

                        else if ( (LA155_395==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1212;}

                        else if ( (LA155_395==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA155_395==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA155_395==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA155_395==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA155_395==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA155_395==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA155_395==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA155_395==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA155_395==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                         
                        input.seek(index155_395);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA155_453 = input.LA(1);

                         
                        int index155_453 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_453==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA155_453==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA155_453==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA155_453==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA155_453==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA155_453==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA155_453==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA155_453==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                        else if ( (LA155_453==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1230;}

                        else if ( (LA155_453==STRING_LITERAL) ) {s = 1231;}

                        else if ( (LA155_453==QUOTED_STRING_LITERAL) ) {s = 1232;}

                        else if ( (LA155_453==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA155_453==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA155_453==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA155_453==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA155_453==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA155_453==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA155_453==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA155_453==AT) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA155_453==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA155_453==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA155_453==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA155_453==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA155_453==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA155_453==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                        else if ( (LA155_453==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA155_453==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA155_453==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA155_453==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA155_453==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA155_453==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA155_453==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA155_453==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA155_453==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA155_453==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA155_453==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA155_453==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA155_453==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA155_453==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                        else if ( (LA155_453==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1261;}

                        else if ( (LA155_453==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA155_453==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA155_453==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA155_453==LW) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA155_453==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA155_453==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA155_453==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                        else if ( (LA155_453==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA155_453==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA155_453==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA155_453==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA155_453==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA155_453==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA155_453==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA155_453==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA155_453==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA155_453==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA155_453==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA155_453==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA155_453==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA155_453==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                         
                        input.seek(index155_453);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA155_511 = input.LA(1);

                         
                        int index155_511 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_511==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA155_511==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1284;}

                        else if ( (LA155_511==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA155_511==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA155_511==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA155_511==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA155_511==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA155_511==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA155_511==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                        else if ( (LA155_511==STRING_LITERAL) ) {s = 1292;}

                        else if ( (LA155_511==QUOTED_STRING_LITERAL) ) {s = 1293;}

                        else if ( (LA155_511==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA155_511==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA155_511==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA155_511==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA155_511==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA155_511==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA155_511==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA155_511==AT) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA155_511==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                        else if ( (LA155_511==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1303;}

                        else if ( (LA155_511==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA155_511==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA155_511==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA155_511==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA155_511==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA155_511==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA155_511==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA155_511==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA155_511==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA155_511==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA155_511==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA155_511==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA155_511==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA155_511==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA155_511==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA155_511==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA155_511==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA155_511==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA155_511==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA155_511==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA155_511==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                        else if ( (LA155_511==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1325;}

                        else if ( (LA155_511==LW) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA155_511==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA155_511==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA155_511==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA155_511==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA155_511==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA155_511==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA155_511==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA155_511==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA155_511==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA155_511==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA155_511==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA155_511==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA155_511==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA155_511==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA155_511==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                        else if ( (LA155_511==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA155_511==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                         
                        input.seek(index155_511);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA155_569 = input.LA(1);

                         
                        int index155_569 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_569==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA155_569==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA155_569==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA155_569==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA155_569==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA155_569==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA155_569==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA155_569==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA155_569==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA155_569==STRING_LITERAL) ) {s = 1353;}

                        else if ( (LA155_569==QUOTED_STRING_LITERAL) ) {s = 1354;}

                        else if ( (LA155_569==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1355;}

                        else if ( (LA155_569==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA155_569==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA155_569==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA155_569==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA155_569==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA155_569==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1361;}

                        else if ( (LA155_569==AT) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA155_569==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                        else if ( (LA155_569==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1364;}

                        else if ( (LA155_569==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA155_569==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                        else if ( (LA155_569==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA155_569==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA155_569==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA155_569==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA155_569==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA155_569==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA155_569==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA155_569==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA155_569==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA155_569==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA155_569==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                        else if ( (LA155_569==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1378;}

                        else if ( (LA155_569==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA155_569==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA155_569==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA155_569==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA155_569==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA155_569==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA155_569==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA155_569==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1386;}

                        else if ( (LA155_569==LW) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA155_569==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                        else if ( (LA155_569==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA155_569==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                        else if ( (LA155_569==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1391;}

                        else if ( (LA155_569==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1392;}

                        else if ( (LA155_569==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA155_569==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA155_569==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA155_569==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA155_569==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA155_569==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA155_569==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA155_569==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA155_569==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA155_569==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA155_569==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA155_569==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                         
                        input.seek(index155_569);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA155_627 = input.LA(1);

                         
                        int index155_627 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_627==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA155_627==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA155_627==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA155_627==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1408;}

                        else if ( (LA155_627==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA155_627==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA155_627==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1411;}

                        else if ( (LA155_627==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA155_627==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                        else if ( (LA155_627==STRING_LITERAL) ) {s = 1414;}

                        else if ( (LA155_627==QUOTED_STRING_LITERAL) ) {s = 1415;}

                        else if ( (LA155_627==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1416;}

                        else if ( (LA155_627==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1417;}

                        else if ( (LA155_627==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA155_627==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA155_627==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA155_627==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA155_627==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA155_627==AT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA155_627==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA155_627==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA155_627==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA155_627==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA155_627==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA155_627==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA155_627==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA155_627==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA155_627==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA155_627==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA155_627==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA155_627==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA155_627==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1436;}

                        else if ( (LA155_627==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA155_627==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                        else if ( (LA155_627==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1439;}

                        else if ( (LA155_627==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA155_627==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                        else if ( (LA155_627==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA155_627==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA155_627==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA155_627==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA155_627==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                        else if ( (LA155_627==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA155_627==LW) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA155_627==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1449;}

                        else if ( (LA155_627==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA155_627==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA155_627==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA155_627==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA155_627==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA155_627==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA155_627==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA155_627==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1457;}

                        else if ( (LA155_627==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1458;}

                        else if ( (LA155_627==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA155_627==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA155_627==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1461;}

                        else if ( (LA155_627==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA155_627==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                        else if ( (LA155_627==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1464;}

                        else if ( (LA155_627==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                         
                        input.seek(index155_627);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA155_685 = input.LA(1);

                         
                        int index155_685 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_685==STRING_LITERAL) ) {s = 1466;}

                        else if ( (LA155_685==QUOTED_STRING_LITERAL) ) {s = 1467;}

                        else if ( (LA155_685==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA155_685==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA155_685==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA155_685==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA155_685==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA155_685==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA155_685==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA155_685==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA155_685==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA155_685==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                        else if ( (LA155_685==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1478;}

                        else if ( (LA155_685==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1479;}

                        else if ( (LA155_685==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA155_685==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA155_685==AT) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA155_685==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA155_685==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA155_685==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA155_685==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1486;}

                        else if ( (LA155_685==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA155_685==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                        else if ( (LA155_685==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA155_685==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA155_685==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                        else if ( (LA155_685==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA155_685==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA155_685==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA155_685==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA155_685==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA155_685==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA155_685==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA155_685==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA155_685==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA155_685==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA155_685==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA155_685==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1503;}

                        else if ( (LA155_685==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA155_685==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA155_685==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA155_685==LW) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA155_685==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1508;}

                        else if ( (LA155_685==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA155_685==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA155_685==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA155_685==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA155_685==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                        else if ( (LA155_685==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1514;}

                        else if ( (LA155_685==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA155_685==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA155_685==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1517;}

                        else if ( (LA155_685==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA155_685==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA155_685==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA155_685==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA155_685==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA155_685==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA155_685==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                         
                        input.seek(index155_685);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA155_743 = input.LA(1);

                         
                        int index155_743 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_743==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( ((LA155_743>=STRING_LITERAL && LA155_743<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index155_743);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA155_801 = input.LA(1);

                         
                        int index155_801 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_801==STRING_LITERAL) ) {s = 1528;}

                        else if ( (LA155_801==QUOTED_STRING_LITERAL) ) {s = 1529;}

                        else if ( (LA155_801==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA155_801==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA155_801==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA155_801==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA155_801==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA155_801==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA155_801==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA155_801==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                        else if ( (LA155_801==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( (LA155_801==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1539;}

                        else if ( (LA155_801==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1540;}

                        else if ( (LA155_801==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1541;}

                        else if ( (LA155_801==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1542;}

                        else if ( (LA155_801==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1543;}

                        else if ( (LA155_801==AT) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA155_801==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA155_801==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA155_801==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA155_801==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA155_801==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA155_801==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA155_801==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA155_801==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA155_801==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA155_801==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA155_801==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA155_801==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA155_801==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA155_801==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA155_801==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA155_801==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA155_801==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                        else if ( (LA155_801==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA155_801==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1563;}

                        else if ( (LA155_801==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA155_801==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1565;}

                        else if ( (LA155_801==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1566;}

                        else if ( (LA155_801==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA155_801==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                        else if ( (LA155_801==LW) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA155_801==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA155_801==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA155_801==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA155_801==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA155_801==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1574;}

                        else if ( (LA155_801==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA155_801==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA155_801==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA155_801==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA155_801==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA155_801==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA155_801==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA155_801==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA155_801==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA155_801==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA155_801==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA155_801==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                         
                        input.seek(index155_801);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA155_859 = input.LA(1);

                         
                        int index155_859 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_859==STRING_LITERAL) ) {s = 1587;}

                        else if ( (LA155_859==QUOTED_STRING_LITERAL) ) {s = 1588;}

                        else if ( (LA155_859==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA155_859==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                        else if ( (LA155_859==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA155_859==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA155_859==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                        else if ( (LA155_859==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA155_859==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA155_859==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA155_859==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA155_859==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA155_859==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA155_859==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                        else if ( (LA155_859==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1601;}

                        else if ( (LA155_859==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1602;}

                        else if ( (LA155_859==AT) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA155_859==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA155_859==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA155_859==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA155_859==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA155_859==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA155_859==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA155_859==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA155_859==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA155_859==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA155_859==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1613;}

                        else if ( (LA155_859==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA155_859==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                        else if ( (LA155_859==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1616;}

                        else if ( (LA155_859==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA155_859==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                        else if ( (LA155_859==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA155_859==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                        else if ( (LA155_859==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA155_859==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA155_859==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA155_859==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA155_859==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA155_859==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA155_859==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA155_859==LW) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA155_859==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                        else if ( (LA155_859==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA155_859==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA155_859==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA155_859==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA155_859==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA155_859==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA155_859==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA155_859==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA155_859==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1638;}

                        else if ( (LA155_859==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA155_859==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                        else if ( (LA155_859==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA155_859==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA155_859==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                        else if ( (LA155_859==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA155_859==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                         
                        input.seek(index155_859);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA155_917 = input.LA(1);

                         
                        int index155_917 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_917==SELECT) ) {s = 1646;}

                        else if ( (LA155_917==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA155_917==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA155_917==AT) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA155_917==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA155_917==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA155_917==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA155_917==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA155_917==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                        else if ( (LA155_917==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA155_917==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA155_917==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA155_917==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA155_917==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA155_917==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                        else if ( (LA155_917==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1661;}

                        else if ( (LA155_917==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA155_917==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1663;}

                        else if ( (LA155_917==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA155_917==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                        else if ( (LA155_917==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1666;}

                        else if ( (LA155_917==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA155_917==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                        else if ( (LA155_917==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA155_917==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA155_917==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA155_917==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA155_917==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA155_917==LW) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA155_917==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA155_917==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA155_917==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA155_917==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA155_917==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA155_917==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA155_917==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA155_917==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA155_917==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA155_917==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA155_917==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA155_917==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA155_917==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                         
                        input.seek(index155_917);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA155_918 = input.LA(1);

                         
                        int index155_918 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_918==RPAREN) ) {s = 1688;}

                        else if ( (LA155_918==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA155_918==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                        else if ( (LA155_918==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA155_918==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA155_918==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                        else if ( (LA155_918==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA155_918==LT) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA155_918==GT) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA155_918==LE) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA155_918==GE) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA155_918==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA155_918==IS) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA155_918==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA155_918==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA155_918==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                        else if ( (LA155_918==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1704;}

                        else if ( (LA155_918==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA155_918==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA155_918==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA155_918==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA155_918==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA155_918==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA155_918==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA155_918==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                         
                        input.seek(index155_918);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA155_919 = input.LA(1);

                         
                        int index155_919 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_919==RPAREN) ) {s = 1713;}

                        else if ( (LA155_919==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA155_919==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                        else if ( (LA155_919==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                        else if ( (LA155_919==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA155_919==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA155_919==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1719;}

                        else if ( (LA155_919==LT) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA155_919==GT) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA155_919==LE) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA155_919==GE) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA155_919==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA155_919==IS) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA155_919==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA155_919==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA155_919==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                        else if ( (LA155_919==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA155_919==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA155_919==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA155_919==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1732;}

                        else if ( (LA155_919==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA155_919==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA155_919==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA155_919==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA155_919==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                         
                        input.seek(index155_919);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA155_980 = input.LA(1);

                         
                        int index155_980 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_980==RPAREN) ) {s = 1738;}

                        else if ( (LA155_980==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA155_980==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA155_980==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                        else if ( (LA155_980==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA155_980==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA155_980==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA155_980==LT) && (synpred3_EsperEPL2Grammar())) {s = 1745;}

                        else if ( (LA155_980==GT) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA155_980==LE) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA155_980==GE) && (synpred3_EsperEPL2Grammar())) {s = 1748;}

                        else if ( (LA155_980==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA155_980==IS) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA155_980==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA155_980==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA155_980==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                        else if ( (LA155_980==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA155_980==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA155_980==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA155_980==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                        else if ( (LA155_980==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA155_980==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA155_980==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA155_980==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA155_980==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                         
                        input.seek(index155_980);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA155_981 = input.LA(1);

                         
                        int index155_981 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_981==RPAREN) ) {s = 1763;}

                        else if ( (LA155_981==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA155_981==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA155_981==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA155_981==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                        else if ( (LA155_981==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA155_981==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA155_981==LT) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA155_981==GT) && (synpred3_EsperEPL2Grammar())) {s = 1771;}

                        else if ( (LA155_981==LE) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA155_981==GE) && (synpred3_EsperEPL2Grammar())) {s = 1773;}

                        else if ( (LA155_981==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA155_981==IS) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA155_981==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA155_981==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1777;}

                        else if ( (LA155_981==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                        else if ( (LA155_981==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA155_981==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA155_981==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA155_981==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1782;}

                        else if ( (LA155_981==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1783;}

                        else if ( (LA155_981==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1784;}

                        else if ( (LA155_981==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA155_981==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA155_981==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                         
                        input.seek(index155_981);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA155_1041 = input.LA(1);

                         
                        int index155_1041 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1041==RPAREN) ) {s = 1788;}

                        else if ( (LA155_1041==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA155_1041==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA155_1041==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA155_1041==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA155_1041==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                        else if ( (LA155_1041==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA155_1041==LT) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA155_1041==GT) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA155_1041==LE) && (synpred3_EsperEPL2Grammar())) {s = 1797;}

                        else if ( (LA155_1041==GE) && (synpred3_EsperEPL2Grammar())) {s = 1798;}

                        else if ( (LA155_1041==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA155_1041==IS) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA155_1041==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA155_1041==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                        else if ( (LA155_1041==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                        else if ( (LA155_1041==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA155_1041==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA155_1041==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA155_1041==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                        else if ( (LA155_1041==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA155_1041==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA155_1041==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA155_1041==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA155_1041==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                         
                        input.seek(index155_1041);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA155_1042 = input.LA(1);

                         
                        int index155_1042 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1042==RPAREN) ) {s = 1813;}

                        else if ( (LA155_1042==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA155_1042==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA155_1042==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA155_1042==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA155_1042==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA155_1042==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1819;}

                        else if ( (LA155_1042==LT) && (synpred3_EsperEPL2Grammar())) {s = 1820;}

                        else if ( (LA155_1042==GT) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA155_1042==LE) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA155_1042==GE) && (synpred3_EsperEPL2Grammar())) {s = 1823;}

                        else if ( (LA155_1042==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                        else if ( (LA155_1042==IS) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA155_1042==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA155_1042==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                        else if ( (LA155_1042==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                        else if ( (LA155_1042==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1829;}

                        else if ( (LA155_1042==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA155_1042==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA155_1042==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA155_1042==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA155_1042==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA155_1042==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA155_1042==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA155_1042==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                         
                        input.seek(index155_1042);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA155_1109 = input.LA(1);

                         
                        int index155_1109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1109==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1838;}

                        else if ( (LA155_1109==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA155_1109==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA155_1109==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA155_1109==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA155_1109==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA155_1109==LT) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA155_1109==GT) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA155_1109==LE) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                        else if ( (LA155_1109==GE) && (synpred3_EsperEPL2Grammar())) {s = 1847;}

                        else if ( (LA155_1109==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1848;}

                        else if ( (LA155_1109==IS) && (synpred3_EsperEPL2Grammar())) {s = 1849;}

                        else if ( (LA155_1109==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA155_1109==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1851;}

                        else if ( (LA155_1109==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1852;}

                        else if ( (LA155_1109==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1853;}

                        else if ( (LA155_1109==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1854;}

                        else if ( (LA155_1109==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1855;}

                        else if ( (LA155_1109==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1856;}

                        else if ( (LA155_1109==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1857;}

                        else if ( (LA155_1109==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1858;}

                        else if ( (LA155_1109==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1859;}

                        else if ( (LA155_1109==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1860;}

                        else if ( (LA155_1109==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1861;}

                        else if ( (LA155_1109==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1862;}

                        else if ( (LA155_1109==RPAREN) ) {s = 14;}

                         
                        input.seek(index155_1109);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA155_1110 = input.LA(1);

                         
                        int index155_1110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1110==RPAREN) ) {s = 14;}

                        else if ( (LA155_1110==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1865;}

                        else if ( (LA155_1110==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1866;}

                        else if ( (LA155_1110==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1867;}

                        else if ( (LA155_1110==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1868;}

                        else if ( (LA155_1110==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1869;}

                        else if ( (LA155_1110==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1870;}

                        else if ( (LA155_1110==LT) && (synpred3_EsperEPL2Grammar())) {s = 1871;}

                        else if ( (LA155_1110==GT) && (synpred3_EsperEPL2Grammar())) {s = 1872;}

                        else if ( (LA155_1110==LE) && (synpred3_EsperEPL2Grammar())) {s = 1873;}

                        else if ( (LA155_1110==GE) && (synpred3_EsperEPL2Grammar())) {s = 1874;}

                        else if ( (LA155_1110==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1875;}

                        else if ( (LA155_1110==IS) && (synpred3_EsperEPL2Grammar())) {s = 1876;}

                        else if ( (LA155_1110==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1877;}

                        else if ( (LA155_1110==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1878;}

                        else if ( (LA155_1110==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1879;}

                        else if ( (LA155_1110==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1880;}

                        else if ( (LA155_1110==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1881;}

                        else if ( (LA155_1110==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1882;}

                        else if ( (LA155_1110==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1883;}

                        else if ( (LA155_1110==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1884;}

                        else if ( (LA155_1110==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1885;}

                        else if ( (LA155_1110==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1886;}

                        else if ( (LA155_1110==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1887;}

                        else if ( (LA155_1110==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1888;}

                        else if ( (LA155_1110==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1889;}

                         
                        input.seek(index155_1110);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA155_1170 = input.LA(1);

                         
                        int index155_1170 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1170==RPAREN) ) {s = 1890;}

                        else if ( (LA155_1170==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1891;}

                        else if ( (LA155_1170==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1892;}

                        else if ( (LA155_1170==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1893;}

                        else if ( (LA155_1170==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1894;}

                        else if ( (LA155_1170==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1895;}

                        else if ( (LA155_1170==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1896;}

                        else if ( (LA155_1170==LT) && (synpred3_EsperEPL2Grammar())) {s = 1897;}

                        else if ( (LA155_1170==GT) && (synpred3_EsperEPL2Grammar())) {s = 1898;}

                        else if ( (LA155_1170==LE) && (synpred3_EsperEPL2Grammar())) {s = 1899;}

                        else if ( (LA155_1170==GE) && (synpred3_EsperEPL2Grammar())) {s = 1900;}

                        else if ( (LA155_1170==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1901;}

                        else if ( (LA155_1170==IS) && (synpred3_EsperEPL2Grammar())) {s = 1902;}

                        else if ( (LA155_1170==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1903;}

                        else if ( (LA155_1170==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1904;}

                        else if ( (LA155_1170==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1905;}

                        else if ( (LA155_1170==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1906;}

                        else if ( (LA155_1170==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1907;}

                        else if ( (LA155_1170==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1908;}

                        else if ( (LA155_1170==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1909;}

                        else if ( (LA155_1170==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1910;}

                        else if ( (LA155_1170==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1911;}

                        else if ( (LA155_1170==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1912;}

                        else if ( (LA155_1170==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1913;}

                        else if ( (LA155_1170==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1914;}

                         
                        input.seek(index155_1170);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA155_1171 = input.LA(1);

                         
                        int index155_1171 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1171==RPAREN) ) {s = 1915;}

                        else if ( (LA155_1171==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1916;}

                        else if ( (LA155_1171==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1917;}

                        else if ( (LA155_1171==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1918;}

                        else if ( (LA155_1171==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1919;}

                        else if ( (LA155_1171==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1920;}

                        else if ( (LA155_1171==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1921;}

                        else if ( (LA155_1171==LT) && (synpred3_EsperEPL2Grammar())) {s = 1922;}

                        else if ( (LA155_1171==GT) && (synpred3_EsperEPL2Grammar())) {s = 1923;}

                        else if ( (LA155_1171==LE) && (synpred3_EsperEPL2Grammar())) {s = 1924;}

                        else if ( (LA155_1171==GE) && (synpred3_EsperEPL2Grammar())) {s = 1925;}

                        else if ( (LA155_1171==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1926;}

                        else if ( (LA155_1171==IS) && (synpred3_EsperEPL2Grammar())) {s = 1927;}

                        else if ( (LA155_1171==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1928;}

                        else if ( (LA155_1171==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1929;}

                        else if ( (LA155_1171==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1930;}

                        else if ( (LA155_1171==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1931;}

                        else if ( (LA155_1171==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1932;}

                        else if ( (LA155_1171==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1933;}

                        else if ( (LA155_1171==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1934;}

                        else if ( (LA155_1171==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1935;}

                        else if ( (LA155_1171==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1936;}

                        else if ( (LA155_1171==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1937;}

                        else if ( (LA155_1171==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1938;}

                        else if ( (LA155_1171==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1939;}

                         
                        input.seek(index155_1171);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA155_1231 = input.LA(1);

                         
                        int index155_1231 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1231==RPAREN) ) {s = 1940;}

                        else if ( (LA155_1231==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1941;}

                        else if ( (LA155_1231==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1942;}

                        else if ( (LA155_1231==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1943;}

                        else if ( (LA155_1231==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1944;}

                        else if ( (LA155_1231==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1945;}

                        else if ( (LA155_1231==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1946;}

                        else if ( (LA155_1231==LT) && (synpred3_EsperEPL2Grammar())) {s = 1947;}

                        else if ( (LA155_1231==GT) && (synpred3_EsperEPL2Grammar())) {s = 1948;}

                        else if ( (LA155_1231==LE) && (synpred3_EsperEPL2Grammar())) {s = 1949;}

                        else if ( (LA155_1231==GE) && (synpred3_EsperEPL2Grammar())) {s = 1950;}

                        else if ( (LA155_1231==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1951;}

                        else if ( (LA155_1231==IS) && (synpred3_EsperEPL2Grammar())) {s = 1952;}

                        else if ( (LA155_1231==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1953;}

                        else if ( (LA155_1231==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1954;}

                        else if ( (LA155_1231==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1955;}

                        else if ( (LA155_1231==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1956;}

                        else if ( (LA155_1231==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1957;}

                        else if ( (LA155_1231==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1958;}

                        else if ( (LA155_1231==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1959;}

                        else if ( (LA155_1231==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1960;}

                        else if ( (LA155_1231==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1961;}

                        else if ( (LA155_1231==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1962;}

                        else if ( (LA155_1231==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1963;}

                        else if ( (LA155_1231==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1964;}

                         
                        input.seek(index155_1231);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA155_1232 = input.LA(1);

                         
                        int index155_1232 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1232==RPAREN) ) {s = 1965;}

                        else if ( (LA155_1232==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1966;}

                        else if ( (LA155_1232==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1967;}

                        else if ( (LA155_1232==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1968;}

                        else if ( (LA155_1232==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1969;}

                        else if ( (LA155_1232==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1970;}

                        else if ( (LA155_1232==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1971;}

                        else if ( (LA155_1232==LT) && (synpred3_EsperEPL2Grammar())) {s = 1972;}

                        else if ( (LA155_1232==GT) && (synpred3_EsperEPL2Grammar())) {s = 1973;}

                        else if ( (LA155_1232==LE) && (synpred3_EsperEPL2Grammar())) {s = 1974;}

                        else if ( (LA155_1232==GE) && (synpred3_EsperEPL2Grammar())) {s = 1975;}

                        else if ( (LA155_1232==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1976;}

                        else if ( (LA155_1232==IS) && (synpred3_EsperEPL2Grammar())) {s = 1977;}

                        else if ( (LA155_1232==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1978;}

                        else if ( (LA155_1232==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1979;}

                        else if ( (LA155_1232==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1980;}

                        else if ( (LA155_1232==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1981;}

                        else if ( (LA155_1232==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1982;}

                        else if ( (LA155_1232==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1983;}

                        else if ( (LA155_1232==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1984;}

                        else if ( (LA155_1232==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1985;}

                        else if ( (LA155_1232==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1986;}

                        else if ( (LA155_1232==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1987;}

                        else if ( (LA155_1232==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1988;}

                        else if ( (LA155_1232==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1989;}

                         
                        input.seek(index155_1232);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA155_1292 = input.LA(1);

                         
                        int index155_1292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1292==RPAREN) ) {s = 1990;}

                        else if ( (LA155_1292==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1991;}

                        else if ( (LA155_1292==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1992;}

                        else if ( (LA155_1292==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1993;}

                        else if ( (LA155_1292==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1994;}

                        else if ( (LA155_1292==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1995;}

                        else if ( (LA155_1292==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1996;}

                        else if ( (LA155_1292==LT) && (synpred3_EsperEPL2Grammar())) {s = 1997;}

                        else if ( (LA155_1292==GT) && (synpred3_EsperEPL2Grammar())) {s = 1998;}

                        else if ( (LA155_1292==LE) && (synpred3_EsperEPL2Grammar())) {s = 1999;}

                        else if ( (LA155_1292==GE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}

                        else if ( (LA155_1292==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2001;}

                        else if ( (LA155_1292==IS) && (synpred3_EsperEPL2Grammar())) {s = 2002;}

                        else if ( (LA155_1292==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2003;}

                        else if ( (LA155_1292==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2004;}

                        else if ( (LA155_1292==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2005;}

                        else if ( (LA155_1292==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2006;}

                        else if ( (LA155_1292==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2007;}

                        else if ( (LA155_1292==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2008;}

                        else if ( (LA155_1292==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2009;}

                        else if ( (LA155_1292==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2010;}

                        else if ( (LA155_1292==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2011;}

                        else if ( (LA155_1292==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2012;}

                        else if ( (LA155_1292==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2013;}

                        else if ( (LA155_1292==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2014;}

                         
                        input.seek(index155_1292);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA155_1293 = input.LA(1);

                         
                        int index155_1293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1293==RPAREN) ) {s = 2015;}

                        else if ( (LA155_1293==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2016;}

                        else if ( (LA155_1293==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2017;}

                        else if ( (LA155_1293==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2018;}

                        else if ( (LA155_1293==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2019;}

                        else if ( (LA155_1293==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2020;}

                        else if ( (LA155_1293==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2021;}

                        else if ( (LA155_1293==LT) && (synpred3_EsperEPL2Grammar())) {s = 2022;}

                        else if ( (LA155_1293==GT) && (synpred3_EsperEPL2Grammar())) {s = 2023;}

                        else if ( (LA155_1293==LE) && (synpred3_EsperEPL2Grammar())) {s = 2024;}

                        else if ( (LA155_1293==GE) && (synpred3_EsperEPL2Grammar())) {s = 2025;}

                        else if ( (LA155_1293==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2026;}

                        else if ( (LA155_1293==IS) && (synpred3_EsperEPL2Grammar())) {s = 2027;}

                        else if ( (LA155_1293==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2028;}

                        else if ( (LA155_1293==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2029;}

                        else if ( (LA155_1293==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2030;}

                        else if ( (LA155_1293==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2031;}

                        else if ( (LA155_1293==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2032;}

                        else if ( (LA155_1293==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2033;}

                        else if ( (LA155_1293==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2034;}

                        else if ( (LA155_1293==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2035;}

                        else if ( (LA155_1293==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2036;}

                        else if ( (LA155_1293==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2037;}

                        else if ( (LA155_1293==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2038;}

                        else if ( (LA155_1293==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2039;}

                         
                        input.seek(index155_1293);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA155_1353 = input.LA(1);

                         
                        int index155_1353 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1353==RPAREN) ) {s = 2040;}

                        else if ( (LA155_1353==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2041;}

                        else if ( (LA155_1353==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2042;}

                        else if ( (LA155_1353==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2043;}

                        else if ( (LA155_1353==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2044;}

                        else if ( (LA155_1353==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2045;}

                        else if ( (LA155_1353==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2046;}

                        else if ( (LA155_1353==LT) && (synpred3_EsperEPL2Grammar())) {s = 2047;}

                        else if ( (LA155_1353==GT) && (synpred3_EsperEPL2Grammar())) {s = 2048;}

                        else if ( (LA155_1353==LE) && (synpred3_EsperEPL2Grammar())) {s = 2049;}

                        else if ( (LA155_1353==GE) && (synpred3_EsperEPL2Grammar())) {s = 2050;}

                        else if ( (LA155_1353==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2051;}

                        else if ( (LA155_1353==IS) && (synpred3_EsperEPL2Grammar())) {s = 2052;}

                        else if ( (LA155_1353==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2053;}

                        else if ( (LA155_1353==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2054;}

                        else if ( (LA155_1353==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2055;}

                        else if ( (LA155_1353==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2056;}

                        else if ( (LA155_1353==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2057;}

                        else if ( (LA155_1353==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2058;}

                        else if ( (LA155_1353==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2059;}

                        else if ( (LA155_1353==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2060;}

                        else if ( (LA155_1353==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2061;}

                        else if ( (LA155_1353==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2062;}

                        else if ( (LA155_1353==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2063;}

                        else if ( (LA155_1353==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2064;}

                         
                        input.seek(index155_1353);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA155_1354 = input.LA(1);

                         
                        int index155_1354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1354==RPAREN) ) {s = 2065;}

                        else if ( (LA155_1354==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2066;}

                        else if ( (LA155_1354==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2067;}

                        else if ( (LA155_1354==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2068;}

                        else if ( (LA155_1354==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2069;}

                        else if ( (LA155_1354==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2070;}

                        else if ( (LA155_1354==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2071;}

                        else if ( (LA155_1354==LT) && (synpred3_EsperEPL2Grammar())) {s = 2072;}

                        else if ( (LA155_1354==GT) && (synpred3_EsperEPL2Grammar())) {s = 2073;}

                        else if ( (LA155_1354==LE) && (synpred3_EsperEPL2Grammar())) {s = 2074;}

                        else if ( (LA155_1354==GE) && (synpred3_EsperEPL2Grammar())) {s = 2075;}

                        else if ( (LA155_1354==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2076;}

                        else if ( (LA155_1354==IS) && (synpred3_EsperEPL2Grammar())) {s = 2077;}

                        else if ( (LA155_1354==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2078;}

                        else if ( (LA155_1354==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2079;}

                        else if ( (LA155_1354==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2080;}

                        else if ( (LA155_1354==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2081;}

                        else if ( (LA155_1354==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2082;}

                        else if ( (LA155_1354==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2083;}

                        else if ( (LA155_1354==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2084;}

                        else if ( (LA155_1354==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2085;}

                        else if ( (LA155_1354==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2086;}

                        else if ( (LA155_1354==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2087;}

                        else if ( (LA155_1354==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2088;}

                        else if ( (LA155_1354==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2089;}

                         
                        input.seek(index155_1354);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA155_1414 = input.LA(1);

                         
                        int index155_1414 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1414==RPAREN) ) {s = 2090;}

                        else if ( (LA155_1414==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2091;}

                        else if ( (LA155_1414==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2092;}

                        else if ( (LA155_1414==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2093;}

                        else if ( (LA155_1414==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2094;}

                        else if ( (LA155_1414==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2095;}

                        else if ( (LA155_1414==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2096;}

                        else if ( (LA155_1414==LT) && (synpred3_EsperEPL2Grammar())) {s = 2097;}

                        else if ( (LA155_1414==GT) && (synpred3_EsperEPL2Grammar())) {s = 2098;}

                        else if ( (LA155_1414==LE) && (synpred3_EsperEPL2Grammar())) {s = 2099;}

                        else if ( (LA155_1414==GE) && (synpred3_EsperEPL2Grammar())) {s = 2100;}

                        else if ( (LA155_1414==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2101;}

                        else if ( (LA155_1414==IS) && (synpred3_EsperEPL2Grammar())) {s = 2102;}

                        else if ( (LA155_1414==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2103;}

                        else if ( (LA155_1414==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2104;}

                        else if ( (LA155_1414==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2105;}

                        else if ( (LA155_1414==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2106;}

                        else if ( (LA155_1414==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2107;}

                        else if ( (LA155_1414==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2108;}

                        else if ( (LA155_1414==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2109;}

                        else if ( (LA155_1414==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2110;}

                        else if ( (LA155_1414==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2111;}

                        else if ( (LA155_1414==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2112;}

                        else if ( (LA155_1414==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2113;}

                        else if ( (LA155_1414==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2114;}

                         
                        input.seek(index155_1414);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA155_1415 = input.LA(1);

                         
                        int index155_1415 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1415==RPAREN) ) {s = 2115;}

                        else if ( (LA155_1415==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2116;}

                        else if ( (LA155_1415==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2117;}

                        else if ( (LA155_1415==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2118;}

                        else if ( (LA155_1415==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2119;}

                        else if ( (LA155_1415==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2120;}

                        else if ( (LA155_1415==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2121;}

                        else if ( (LA155_1415==LT) && (synpred3_EsperEPL2Grammar())) {s = 2122;}

                        else if ( (LA155_1415==GT) && (synpred3_EsperEPL2Grammar())) {s = 2123;}

                        else if ( (LA155_1415==LE) && (synpred3_EsperEPL2Grammar())) {s = 2124;}

                        else if ( (LA155_1415==GE) && (synpred3_EsperEPL2Grammar())) {s = 2125;}

                        else if ( (LA155_1415==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2126;}

                        else if ( (LA155_1415==IS) && (synpred3_EsperEPL2Grammar())) {s = 2127;}

                        else if ( (LA155_1415==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2128;}

                        else if ( (LA155_1415==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2129;}

                        else if ( (LA155_1415==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2130;}

                        else if ( (LA155_1415==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2131;}

                        else if ( (LA155_1415==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2132;}

                        else if ( (LA155_1415==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2133;}

                        else if ( (LA155_1415==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2134;}

                        else if ( (LA155_1415==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2135;}

                        else if ( (LA155_1415==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2136;}

                        else if ( (LA155_1415==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2137;}

                        else if ( (LA155_1415==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2138;}

                        else if ( (LA155_1415==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2139;}

                         
                        input.seek(index155_1415);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA155_1466 = input.LA(1);

                         
                        int index155_1466 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1466==RPAREN) ) {s = 2140;}

                        else if ( (LA155_1466==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2141;}

                        else if ( (LA155_1466==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2142;}

                        else if ( (LA155_1466==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2143;}

                        else if ( (LA155_1466==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2144;}

                        else if ( (LA155_1466==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2145;}

                        else if ( (LA155_1466==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2146;}

                        else if ( (LA155_1466==LT) && (synpred3_EsperEPL2Grammar())) {s = 2147;}

                        else if ( (LA155_1466==GT) && (synpred3_EsperEPL2Grammar())) {s = 2148;}

                        else if ( (LA155_1466==LE) && (synpred3_EsperEPL2Grammar())) {s = 2149;}

                        else if ( (LA155_1466==GE) && (synpred3_EsperEPL2Grammar())) {s = 2150;}

                        else if ( (LA155_1466==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2151;}

                        else if ( (LA155_1466==IS) && (synpred3_EsperEPL2Grammar())) {s = 2152;}

                        else if ( (LA155_1466==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2153;}

                        else if ( (LA155_1466==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2154;}

                        else if ( (LA155_1466==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2155;}

                        else if ( (LA155_1466==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2156;}

                        else if ( (LA155_1466==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2157;}

                        else if ( (LA155_1466==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2158;}

                        else if ( (LA155_1466==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2159;}

                        else if ( (LA155_1466==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2160;}

                        else if ( (LA155_1466==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2161;}

                        else if ( (LA155_1466==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2162;}

                        else if ( (LA155_1466==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2163;}

                        else if ( (LA155_1466==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2164;}

                        else if ( (LA155_1466==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2165;}

                         
                        input.seek(index155_1466);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA155_1467 = input.LA(1);

                         
                        int index155_1467 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1467==RPAREN) ) {s = 2166;}

                        else if ( (LA155_1467==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2167;}

                        else if ( (LA155_1467==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2168;}

                        else if ( (LA155_1467==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2169;}

                        else if ( (LA155_1467==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2170;}

                        else if ( (LA155_1467==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2171;}

                        else if ( (LA155_1467==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2172;}

                        else if ( (LA155_1467==LT) && (synpred3_EsperEPL2Grammar())) {s = 2173;}

                        else if ( (LA155_1467==GT) && (synpred3_EsperEPL2Grammar())) {s = 2174;}

                        else if ( (LA155_1467==LE) && (synpred3_EsperEPL2Grammar())) {s = 2175;}

                        else if ( (LA155_1467==GE) && (synpred3_EsperEPL2Grammar())) {s = 2176;}

                        else if ( (LA155_1467==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2177;}

                        else if ( (LA155_1467==IS) && (synpred3_EsperEPL2Grammar())) {s = 2178;}

                        else if ( (LA155_1467==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2179;}

                        else if ( (LA155_1467==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2180;}

                        else if ( (LA155_1467==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2181;}

                        else if ( (LA155_1467==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2182;}

                        else if ( (LA155_1467==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2183;}

                        else if ( (LA155_1467==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2184;}

                        else if ( (LA155_1467==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2185;}

                        else if ( (LA155_1467==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2186;}

                        else if ( (LA155_1467==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2187;}

                        else if ( (LA155_1467==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2188;}

                        else if ( (LA155_1467==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2189;}

                        else if ( (LA155_1467==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2190;}

                        else if ( (LA155_1467==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2191;}

                         
                        input.seek(index155_1467);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA155_1528 = input.LA(1);

                         
                        int index155_1528 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1528==RPAREN) ) {s = 14;}

                        else if ( (LA155_1528==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2193;}

                        else if ( (LA155_1528==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2194;}

                        else if ( (LA155_1528==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2195;}

                        else if ( (LA155_1528==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2196;}

                        else if ( (LA155_1528==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2197;}

                        else if ( (LA155_1528==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2198;}

                        else if ( (LA155_1528==LT) && (synpred3_EsperEPL2Grammar())) {s = 2199;}

                        else if ( (LA155_1528==GT) && (synpred3_EsperEPL2Grammar())) {s = 2200;}

                        else if ( (LA155_1528==LE) && (synpred3_EsperEPL2Grammar())) {s = 2201;}

                        else if ( (LA155_1528==GE) && (synpred3_EsperEPL2Grammar())) {s = 2202;}

                        else if ( (LA155_1528==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2203;}

                        else if ( (LA155_1528==IS) && (synpred3_EsperEPL2Grammar())) {s = 2204;}

                        else if ( (LA155_1528==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2205;}

                        else if ( (LA155_1528==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2206;}

                        else if ( (LA155_1528==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2207;}

                        else if ( (LA155_1528==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2208;}

                        else if ( (LA155_1528==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2209;}

                        else if ( (LA155_1528==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2210;}

                        else if ( (LA155_1528==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2211;}

                        else if ( (LA155_1528==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2212;}

                        else if ( (LA155_1528==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2213;}

                        else if ( (LA155_1528==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2214;}

                        else if ( (LA155_1528==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2215;}

                        else if ( (LA155_1528==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2216;}

                        else if ( (LA155_1528==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2217;}

                         
                        input.seek(index155_1528);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA155_1529 = input.LA(1);

                         
                        int index155_1529 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1529==RPAREN) ) {s = 14;}

                        else if ( (LA155_1529==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2219;}

                        else if ( (LA155_1529==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2220;}

                        else if ( (LA155_1529==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2221;}

                        else if ( (LA155_1529==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2222;}

                        else if ( (LA155_1529==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2223;}

                        else if ( (LA155_1529==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2224;}

                        else if ( (LA155_1529==LT) && (synpred3_EsperEPL2Grammar())) {s = 2225;}

                        else if ( (LA155_1529==GT) && (synpred3_EsperEPL2Grammar())) {s = 2226;}

                        else if ( (LA155_1529==LE) && (synpred3_EsperEPL2Grammar())) {s = 2227;}

                        else if ( (LA155_1529==GE) && (synpred3_EsperEPL2Grammar())) {s = 2228;}

                        else if ( (LA155_1529==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2229;}

                        else if ( (LA155_1529==IS) && (synpred3_EsperEPL2Grammar())) {s = 2230;}

                        else if ( (LA155_1529==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2231;}

                        else if ( (LA155_1529==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2232;}

                        else if ( (LA155_1529==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2233;}

                        else if ( (LA155_1529==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2234;}

                        else if ( (LA155_1529==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2235;}

                        else if ( (LA155_1529==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2236;}

                        else if ( (LA155_1529==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2237;}

                        else if ( (LA155_1529==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2238;}

                        else if ( (LA155_1529==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2239;}

                        else if ( (LA155_1529==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2240;}

                        else if ( (LA155_1529==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2241;}

                        else if ( (LA155_1529==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2242;}

                        else if ( (LA155_1529==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2243;}

                         
                        input.seek(index155_1529);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA155_1587 = input.LA(1);

                         
                        int index155_1587 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1587==RPAREN) ) {s = 14;}

                        else if ( (LA155_1587==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2245;}

                        else if ( (LA155_1587==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2246;}

                        else if ( (LA155_1587==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2247;}

                        else if ( (LA155_1587==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2248;}

                        else if ( (LA155_1587==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2249;}

                        else if ( (LA155_1587==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2250;}

                        else if ( (LA155_1587==LT) && (synpred3_EsperEPL2Grammar())) {s = 2251;}

                        else if ( (LA155_1587==GT) && (synpred3_EsperEPL2Grammar())) {s = 2252;}

                        else if ( (LA155_1587==LE) && (synpred3_EsperEPL2Grammar())) {s = 2253;}

                        else if ( (LA155_1587==GE) && (synpred3_EsperEPL2Grammar())) {s = 2254;}

                        else if ( (LA155_1587==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2255;}

                        else if ( (LA155_1587==IS) && (synpred3_EsperEPL2Grammar())) {s = 2256;}

                        else if ( (LA155_1587==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2257;}

                        else if ( (LA155_1587==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2258;}

                        else if ( (LA155_1587==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2259;}

                        else if ( (LA155_1587==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2260;}

                        else if ( (LA155_1587==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2261;}

                        else if ( (LA155_1587==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2262;}

                        else if ( (LA155_1587==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2263;}

                        else if ( (LA155_1587==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2264;}

                        else if ( (LA155_1587==AS) && (synpred3_EsperEPL2Grammar())) {s = 2265;}

                        else if ( (LA155_1587==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2266;}

                        else if ( (LA155_1587==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2267;}

                        else if ( (LA155_1587==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2268;}

                        else if ( (LA155_1587==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2269;}

                        else if ( (LA155_1587==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2270;}

                         
                        input.seek(index155_1587);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA155_1588 = input.LA(1);

                         
                        int index155_1588 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA155_1588==RPAREN) ) {s = 14;}

                        else if ( (LA155_1588==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2272;}

                        else if ( (LA155_1588==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2273;}

                        else if ( (LA155_1588==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2274;}

                        else if ( (LA155_1588==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2275;}

                        else if ( (LA155_1588==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2276;}

                        else if ( (LA155_1588==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2277;}

                        else if ( (LA155_1588==LT) && (synpred3_EsperEPL2Grammar())) {s = 2278;}

                        else if ( (LA155_1588==GT) && (synpred3_EsperEPL2Grammar())) {s = 2279;}

                        else if ( (LA155_1588==LE) && (synpred3_EsperEPL2Grammar())) {s = 2280;}

                        else if ( (LA155_1588==GE) && (synpred3_EsperEPL2Grammar())) {s = 2281;}

                        else if ( (LA155_1588==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2282;}

                        else if ( (LA155_1588==IS) && (synpred3_EsperEPL2Grammar())) {s = 2283;}

                        else if ( (LA155_1588==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2284;}

                        else if ( (LA155_1588==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2285;}

                        else if ( (LA155_1588==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2286;}

                        else if ( (LA155_1588==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2287;}

                        else if ( (LA155_1588==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2288;}

                        else if ( (LA155_1588==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2289;}

                        else if ( (LA155_1588==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2290;}

                        else if ( (LA155_1588==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2291;}

                        else if ( (LA155_1588==AS) && (synpred3_EsperEPL2Grammar())) {s = 2292;}

                        else if ( (LA155_1588==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2293;}

                        else if ( (LA155_1588==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2294;}

                        else if ( (LA155_1588==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2295;}

                        else if ( (LA155_1588==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2296;}

                        else if ( (LA155_1588==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2297;}

                         
                        input.seek(index155_1588);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA155_1688 = input.LA(1);

                         
                        int index155_1688 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_1688);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA155_1713 = input.LA(1);

                         
                        int index155_1713 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_1713);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA155_1738 = input.LA(1);

                         
                        int index155_1738 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_1738);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA155_1763 = input.LA(1);

                         
                        int index155_1763 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_1763);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA155_1788 = input.LA(1);

                         
                        int index155_1788 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_1788);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA155_1813 = input.LA(1);

                         
                        int index155_1813 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_1813);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA155_1890 = input.LA(1);

                         
                        int index155_1890 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_1890);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA155_1915 = input.LA(1);

                         
                        int index155_1915 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_1915);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA155_1940 = input.LA(1);

                         
                        int index155_1940 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_1940);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA155_1965 = input.LA(1);

                         
                        int index155_1965 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_1965);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA155_1990 = input.LA(1);

                         
                        int index155_1990 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_1990);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA155_2015 = input.LA(1);

                         
                        int index155_2015 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_2015);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA155_2040 = input.LA(1);

                         
                        int index155_2040 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_2040);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA155_2065 = input.LA(1);

                         
                        int index155_2065 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_2065);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA155_2090 = input.LA(1);

                         
                        int index155_2090 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_2090);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA155_2115 = input.LA(1);

                         
                        int index155_2115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_2115);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA155_2140 = input.LA(1);

                         
                        int index155_2140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_2140);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA155_2166 = input.LA(1);

                         
                        int index155_2166 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2297;}

                         
                        input.seek(index155_2166);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA182_eotS =
        "\u048a\uffff";
    static final String DFA182_eofS =
        "\1\uffff\1\107\1\u0081\6\uffff\1\u00bb\1\u00f5\u0145\uffff\1\u026e"+
        "\1\u02a8\6\uffff\1\u02e2\1\u031c\37\uffff\1\u0356\1\u0390\6\uffff"+
        "\1\u03ca\1\u0404\u0307\uffff";
    static final String DFA182_minS =
        "\1\5\2\6\6\uffff\2\6\37\uffff\2\5\74\uffff\1\5\65\uffff\1\5\73"+
        "\uffff\1\5\67\uffff\2\6\74\uffff\2\6\6\uffff\2\6\37\uffff\2\6\6"+
        "\uffff\2\6\37\uffff\2\6\74\uffff\2\6\74\uffff\1\0\55\uffff\1\0\5"+
        "\uffff\1\0\70\uffff\1\0\71\uffff\1\0\2\uffff\1\0\71\uffff\1\0\67"+
        "\uffff\1\0\70\uffff\1\0\71\uffff\1\0\2\uffff\1\0\71\uffff\1\0\67"+
        "\uffff\1\0\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff";
    static final String DFA182_maxS =
        "\1\u011a\2\u0119\6\uffff\2\u0119\37\uffff\1\u011c\1\u011a\74\uffff"+
        "\1\u011a\65\uffff\1\u011c\73\uffff\1\u011c\67\uffff\2\u0114\74\uffff"+
        "\2\u0119\6\uffff\2\u0119\37\uffff\2\u0119\6\uffff\2\u0119\37\uffff"+
        "\2\u0114\74\uffff\2\u0114\74\uffff\1\0\55\uffff\1\0\5\uffff\1\0"+
        "\70\uffff\1\0\71\uffff\1\0\2\uffff\1\0\71\uffff\1\0\67\uffff\1\0"+
        "\70\uffff\1\0\71\uffff\1\0\2\uffff\1\0\71\uffff\1\0\67\uffff\1\0"+
        "\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff";
    static final String DFA182_acceptS =
        "\3\uffff\6\1\2\uffff\37\1\2\uffff\74\1\1\uffff\65\1\1\uffff\73"+
        "\1\1\uffff\67\1\2\uffff\1\2\75\uffff\6\1\2\uffff\37\1\2\uffff\6"+
        "\1\2\uffff\37\1\u00b1\uffff\70\1\1\uffff\71\1\1\uffff\2\1\1\uffff"+
        "\71\1\1\uffff\67\1\1\uffff\70\1\1\uffff\71\1\1\uffff\2\1\1\uffff"+
        "\71\1\1\uffff\67\1\150\uffff";
    static final String DFA182_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\40\uffff\1\5\74\uffff\1\6\u00e7\uffff"+
        "\1\7\1\10\6\uffff\1\11\1\12\37\uffff\1\13\1\14\6\uffff\1\15\1\16"+
        "\u009b\uffff\1\17\55\uffff\1\20\5\uffff\1\21\70\uffff\1\22\71\uffff"+
        "\1\23\2\uffff\1\24\71\uffff\1\25\67\uffff\1\26\70\uffff\1\27\71"+
        "\uffff\1\30\2\uffff\1\31\71\uffff\1\32\67\uffff\1\33\55\uffff\1"+
        "\34\5\uffff\1\35\55\uffff\1\36\5\uffff}>";
    static final String[] DFA182_transitionS = {
            "\1\41\4\uffff\1\5\3\uffff\1\6\3\uffff\1\7\1\10\1\11\1\12\1"+
            "\13\1\14\1\15\1\16\1\4\10\uffff\1\44\1\uffff\1\46\1\42\1\43"+
            "\1\45\12\uffff\1\17\1\20\1\21\10\uffff\1\22\1\23\1\24\1\26\1"+
            "\27\1\30\1\31\1\32\1\uffff\1\33\1\34\1\35\1\36\2\uffff\1\37"+
            "\1\uffff\1\40\1\25\1\3\24\uffff\1\47\1\50\1\51\u0092\uffff\1"+
            "\1\36\uffff\1\2",
            "\1\137\1\140\1\141\1\142\1\143\1\101\1\100\1\136\2\uffff\1"+
            "\113\1\114\14\uffff\1\125\1\127\1\124\1\126\1\115\7\uffff\1"+
            "\72\1\uffff\1\102\1\103\1\uffff\1\117\2\uffff\1\104\3\uffff"+
            "\1\110\1\uffff\1\105\1\122\1\123\6\uffff\1\121\26\uffff\1\135"+
            "\1\134\1\133\6\uffff\1\106\3\uffff\1\116\3\uffff\1\120\u0090"+
            "\uffff\1\112\1\uffff\1\71\1\53\1\52\1\111\1\57\1\76\1\62\1\56"+
            "\1\55\1\131\1\130\2\uffff\1\75\1\77\1\73\1\74\1\65\1\66\1\67"+
            "\1\70\1\64\1\63\1\60\1\61\1\uffff\1\132\2\uffff\1\54",
            "\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\173\1\172\1\u0098"+
            "\2\uffff\1\u0085\1\u0086\14\uffff\1\u008f\1\u0091\1\u008e\1"+
            "\u0090\1\u0087\7\uffff\1\164\1\uffff\1\174\1\175\1\uffff\1\u0089"+
            "\2\uffff\1\176\3\uffff\1\u0082\1\uffff\1\177\1\u008c\1\u008d"+
            "\6\uffff\1\u008b\26\uffff\1\u0097\1\u0096\1\u0095\6\uffff\1"+
            "\u0080\3\uffff\1\u0088\3\uffff\1\u008a\u0090\uffff\1\u0084\1"+
            "\uffff\1\163\1\150\1\146\1\u0083\1\151\1\170\1\154\1\147\1\145"+
            "\1\u0093\1\u0092\2\uffff\1\167\1\171\1\165\1\166\1\157\1\160"+
            "\1\161\1\162\1\156\1\155\1\152\1\153\1\uffff\1\u0094\2\uffff"+
            "\1\144",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00d3\1\u00d4\1\u00d5\1\u00d6\1\u00d7\1\u00b5\1\u00b4\1"+
            "\u00d2\2\uffff\1\u00bf\1\u00c0\14\uffff\1\u00c9\1\u00cb\1\u00c8"+
            "\1\u00ca\1\u00c1\7\uffff\1\u00ae\1\uffff\1\u00b6\1\u00b7\1\uffff"+
            "\1\u00c3\2\uffff\1\u00b8\3\uffff\1\u00bc\1\uffff\1\u00b9\1\u00c6"+
            "\1\u00c7\6\uffff\1\u00c5\26\uffff\1\u00d1\1\u00d0\1\u00cf\6"+
            "\uffff\1\u00ba\3\uffff\1\u00c2\3\uffff\1\u00c4\u0090\uffff\1"+
            "\u00be\1\uffff\1\u00ad\1\u00a2\1\u009e\1\u00bd\1\u00a3\1\u00b2"+
            "\1\u00a6\1\u00a1\1\u00a0\1\u00cd\1\u00cc\2\uffff\1\u00b1\1\u00b3"+
            "\1\u00af\1\u00b0\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00a8\1\u00a7"+
            "\1\u00a4\1\u00a5\1\uffff\1\u00ce\2\uffff\1\u009f",
            "\1\u010d\1\u010e\1\u010f\1\u0110\1\u0111\1\u00ef\1\u00ee\1"+
            "\u010c\2\uffff\1\u00f9\1\u00fa\14\uffff\1\u0103\1\u0105\1\u0102"+
            "\1\u0104\1\u00fb\7\uffff\1\u00e8\1\uffff\1\u00f0\1\u00f1\1\uffff"+
            "\1\u00fd\2\uffff\1\u00f2\3\uffff\1\u00f6\1\uffff\1\u00f3\1\u0100"+
            "\1\u0101\6\uffff\1\u00ff\26\uffff\1\u010b\1\u010a\1\u0109\6"+
            "\uffff\1\u00f4\3\uffff\1\u00fc\3\uffff\1\u00fe\u0090\uffff\1"+
            "\u00f8\1\uffff\1\u00e7\1\u00dc\1\u00da\1\u00f7\1\u00dd\1\u00ec"+
            "\1\u00e0\1\u00db\1\u00d9\1\u0107\1\u0106\2\uffff\1\u00eb\1\u00ed"+
            "\1\u00e9\1\u00ea\1\u00e3\1\u00e4\1\u00e5\1\u00e6\1\u00e2\1\u00e1"+
            "\1\u00de\1\u00df\1\uffff\1\u0108\2\uffff\1\u00d8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0114\4\uffff\1\u0114\2\uffff\2\u0114\3\uffff\11\u0114"+
            "\1\uffff\1\u0114\6\uffff\1\u0114\1\uffff\4\u0114\5\uffff\2\u0114"+
            "\3\uffff\3\u0114\10\uffff\16\u0114\1\uffff\1\u0114\1\uffff\3"+
            "\u0114\14\uffff\3\u0114\5\uffff\3\u0114\u0083\uffff\1\u0114"+
            "\16\uffff\1\u0114\2\uffff\2\u0114\2\uffff\2\u0114\3\uffff\1"+
            "\u0112\1\u0113\11\uffff\1\u0114\2\uffff\1\u0114\1\uffff\1\u0114"+
            "\2\uffff\3\u0114",
            "\1\u0170\4\uffff\1\u0154\3\uffff\1\u0155\3\uffff\1\u0156\1"+
            "\u0157\1\u0158\1\u0159\1\u015a\1\u015b\1\u015c\1\u015d\1\u0153"+
            "\10\uffff\1\u0173\1\uffff\1\u0175\1\u0171\1\u0172\1\u0174\12"+
            "\uffff\1\u015e\1\u015f\1\u0160\10\uffff\1\u0161\1\u0162\1\u0163"+
            "\1\u0165\1\u0166\1\u0167\1\u0168\1\u0169\1\uffff\1\u016a\1\u016b"+
            "\1\u016c\1\u016d\2\uffff\1\u016e\1\uffff\1\u016f\1\u0164\1\u0152"+
            "\24\uffff\1\u0176\1\u0177\1\u0178\u0092\uffff\1\u0150\36\uffff"+
            "\1\u0151",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0199\4\uffff\1\u017d\3\uffff\1\u017e\3\uffff\1\u017f\1"+
            "\u0180\1\u0181\1\u0182\1\u0183\1\u0184\1\u0185\1\u0186\1\u017c"+
            "\10\uffff\1\u019c\1\uffff\1\u019e\1\u019a\1\u019b\1\u019d\12"+
            "\uffff\1\u0187\1\u0188\1\u0189\10\uffff\1\u018a\1\u018b\1\u018c"+
            "\1\u018e\1\u018f\1\u0190\1\u0191\1\u0192\1\uffff\1\u0193\1\u0194"+
            "\1\u0195\1\u0196\2\uffff\1\u0197\1\uffff\1\u0198\1\u018d\1\u017b"+
            "\24\uffff\1\u019f\1\u01a0\1\u01a1\u0092\uffff\1\u0179\36\uffff"+
            "\1\u017a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0114\4\uffff\1\u0114\2\uffff\2\u0114\3\uffff\11\u0114"+
            "\1\uffff\1\u0114\6\uffff\1\u0114\1\uffff\4\u0114\5\uffff\2\u0114"+
            "\3\uffff\3\u0114\10\uffff\16\u0114\1\uffff\1\u0114\1\uffff\3"+
            "\u0114\14\uffff\3\u0114\5\uffff\3\u0114\u0083\uffff\1\u0114"+
            "\16\uffff\1\u0114\2\uffff\2\u0114\2\uffff\2\u0114\3\uffff\1"+
            "\u01a2\1\u01a3\11\uffff\1\u0114\2\uffff\1\u0114\1\uffff\1\u0114"+
            "\2\uffff\3\u0114",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0114\4\uffff\1\u0114\2\uffff\2\u0114\3\uffff\11\u0114"+
            "\1\uffff\1\u0114\6\uffff\1\u0114\1\uffff\4\u0114\5\uffff\2\u0114"+
            "\3\uffff\3\u0114\10\uffff\16\u0114\1\uffff\1\u0114\1\uffff\3"+
            "\u0114\14\uffff\3\u0114\5\uffff\3\u0114\u0083\uffff\1\u0114"+
            "\16\uffff\1\u0114\2\uffff\2\u0114\2\uffff\2\u0114\3\uffff\1"+
            "\u01e0\1\u01e1\11\uffff\1\u0114\2\uffff\1\u0114\1\uffff\1\u0114"+
            "\2\uffff\3\u0114",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0114\1\uffff\3\u0114\34\uffff\1\u0114\u00cf\uffff\1\u0114"+
            "\1\uffff\1\u0114\2\uffff\1\u021e\3\u0114\6\uffff\14\u0114",
            "\4\u0114\1\uffff\3\u0114\34\uffff\1\u0114\u00cf\uffff\1\u0114"+
            "\1\uffff\1\u0114\2\uffff\1\u024c\3\u0114\6\uffff\14\u0114",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0286\1\u0287\1\u0288\1\u0289\1\u028a\1\u0268\1\u0267\1"+
            "\u0285\2\uffff\1\u0272\1\u0273\14\uffff\1\u027c\1\u027e\1\u027b"+
            "\1\u027d\1\u0274\7\uffff\1\u0261\1\uffff\1\u0269\1\u026a\1\uffff"+
            "\1\u0276\2\uffff\1\u026b\3\uffff\1\u026f\1\uffff\1\u026c\1\u0279"+
            "\1\u027a\6\uffff\1\u0278\26\uffff\1\u0284\1\u0283\1\u0282\6"+
            "\uffff\1\u026d\3\uffff\1\u0275\3\uffff\1\u0277\u0090\uffff\1"+
            "\u0271\1\uffff\1\u0260\1\u028b\1\u0252\1\u0270\1\u0256\1\u0265"+
            "\1\u0259\1\u0255\1\u0254\1\u0280\1\u027f\2\uffff\1\u0264\1\u0266"+
            "\1\u0262\1\u0263\1\u025c\1\u025d\1\u025e\1\u025f\1\u025b\1\u025a"+
            "\1\u0257\1\u0258\1\uffff\1\u0281\2\uffff\1\u0253",
            "\1\u02c0\1\u02c1\1\u02c2\1\u02c3\1\u02c4\1\u02a2\1\u02a1\1"+
            "\u02bf\2\uffff\1\u02ac\1\u02ad\14\uffff\1\u02b6\1\u02b8\1\u02b5"+
            "\1\u02b7\1\u02ae\7\uffff\1\u029b\1\uffff\1\u02a3\1\u02a4\1\uffff"+
            "\1\u02b0\2\uffff\1\u02a5\3\uffff\1\u02a9\1\uffff\1\u02a6\1\u02b3"+
            "\1\u02b4\6\uffff\1\u02b2\26\uffff\1\u02be\1\u02bd\1\u02bc\6"+
            "\uffff\1\u02a7\3\uffff\1\u02af\3\uffff\1\u02b1\u0090\uffff\1"+
            "\u02ab\1\uffff\1\u029a\1\u02c5\1\u028e\1\u02aa\1\u0290\1\u029f"+
            "\1\u0293\1\u028f\1\u028d\1\u02ba\1\u02b9\2\uffff\1\u029e\1\u02a0"+
            "\1\u029c\1\u029d\1\u0296\1\u0297\1\u0298\1\u0299\1\u0295\1\u0294"+
            "\1\u0291\1\u0292\1\uffff\1\u02bb\2\uffff\1\u028c",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02fa\1\u02fb\1\u02fc\1\u02fd\1\u02fe\1\u02dc\1\u02db\1"+
            "\u02f9\2\uffff\1\u02e6\1\u02e7\14\uffff\1\u02f0\1\u02f2\1\u02ef"+
            "\1\u02f1\1\u02e8\7\uffff\1\u02d5\1\uffff\1\u02dd\1\u02de\1\uffff"+
            "\1\u02ea\2\uffff\1\u02df\3\uffff\1\u02e3\1\uffff\1\u02e0\1\u02ed"+
            "\1\u02ee\6\uffff\1\u02ec\26\uffff\1\u02f8\1\u02f7\1\u02f6\6"+
            "\uffff\1\u02e1\3\uffff\1\u02e9\3\uffff\1\u02eb\u0090\uffff\1"+
            "\u02e5\1\uffff\1\u02d4\1\u02ff\1\u02c8\1\u02e4\1\u02ca\1\u02d9"+
            "\1\u02cd\1\u02c9\1\u02c7\1\u02f4\1\u02f3\2\uffff\1\u02d8\1\u02da"+
            "\1\u02d6\1\u02d7\1\u02d0\1\u02d1\1\u02d2\1\u02d3\1\u02cf\1\u02ce"+
            "\1\u02cb\1\u02cc\1\uffff\1\u02f5\2\uffff\1\u02c6",
            "\1\u0334\1\u0335\1\u0336\1\u0337\1\u0338\1\u0316\1\u0315\1"+
            "\u0333\2\uffff\1\u0320\1\u0321\14\uffff\1\u032a\1\u032c\1\u0329"+
            "\1\u032b\1\u0322\7\uffff\1\u030f\1\uffff\1\u0317\1\u0318\1\uffff"+
            "\1\u0324\2\uffff\1\u0319\3\uffff\1\u031d\1\uffff\1\u031a\1\u0327"+
            "\1\u0328\6\uffff\1\u0326\26\uffff\1\u0332\1\u0331\1\u0330\6"+
            "\uffff\1\u031b\3\uffff\1\u0323\3\uffff\1\u0325\u0090\uffff\1"+
            "\u031f\1\uffff\1\u030e\1\u0339\1\u0302\1\u031e\1\u0304\1\u0313"+
            "\1\u0307\1\u0303\1\u0301\1\u032e\1\u032d\2\uffff\1\u0312\1\u0314"+
            "\1\u0310\1\u0311\1\u030a\1\u030b\1\u030c\1\u030d\1\u0309\1\u0308"+
            "\1\u0305\1\u0306\1\uffff\1\u032f\2\uffff\1\u0300",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u036e\1\u036f\1\u0370\1\u0371\1\u0372\1\u0350\1\u034f\1"+
            "\u036d\2\uffff\1\u035a\1\u035b\14\uffff\1\u0364\1\u0366\1\u0363"+
            "\1\u0365\1\u035c\7\uffff\1\u0349\1\uffff\1\u0351\1\u0352\1\uffff"+
            "\1\u035e\2\uffff\1\u0353\3\uffff\1\u0357\1\uffff\1\u0354\1\u0361"+
            "\1\u0362\6\uffff\1\u0360\26\uffff\1\u036c\1\u036b\1\u036a\6"+
            "\uffff\1\u0355\3\uffff\1\u035d\3\uffff\1\u035f\u0090\uffff\1"+
            "\u0359\1\uffff\1\u0348\1\u0373\1\u033a\1\u0358\1\u033e\1\u034d"+
            "\1\u0341\1\u033d\1\u033c\1\u0368\1\u0367\2\uffff\1\u034c\1\u034e"+
            "\1\u034a\1\u034b\1\u0344\1\u0345\1\u0346\1\u0347\1\u0343\1\u0342"+
            "\1\u033f\1\u0340\1\uffff\1\u0369\2\uffff\1\u033b",
            "\1\u03a8\1\u03a9\1\u03aa\1\u03ab\1\u03ac\1\u038a\1\u0389\1"+
            "\u03a7\2\uffff\1\u0394\1\u0395\14\uffff\1\u039e\1\u03a0\1\u039d"+
            "\1\u039f\1\u0396\7\uffff\1\u0383\1\uffff\1\u038b\1\u038c\1\uffff"+
            "\1\u0398\2\uffff\1\u038d\3\uffff\1\u0391\1\uffff\1\u038e\1\u039b"+
            "\1\u039c\6\uffff\1\u039a\26\uffff\1\u03a6\1\u03a5\1\u03a4\6"+
            "\uffff\1\u038f\3\uffff\1\u0397\3\uffff\1\u0399\u0090\uffff\1"+
            "\u0393\1\uffff\1\u0382\1\u03ad\1\u0376\1\u0392\1\u0378\1\u0387"+
            "\1\u037b\1\u0377\1\u0375\1\u03a2\1\u03a1\2\uffff\1\u0386\1\u0388"+
            "\1\u0384\1\u0385\1\u037e\1\u037f\1\u0380\1\u0381\1\u037d\1\u037c"+
            "\1\u0379\1\u037a\1\uffff\1\u03a3\2\uffff\1\u0374",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03e2\1\u03e3\1\u03e4\1\u03e5\1\u03e6\1\u03c4\1\u03c3\1"+
            "\u03e1\2\uffff\1\u03ce\1\u03cf\14\uffff\1\u03d8\1\u03da\1\u03d7"+
            "\1\u03d9\1\u03d0\7\uffff\1\u03bd\1\uffff\1\u03c5\1\u03c6\1\uffff"+
            "\1\u03d2\2\uffff\1\u03c7\3\uffff\1\u03cb\1\uffff\1\u03c8\1\u03d5"+
            "\1\u03d6\6\uffff\1\u03d4\26\uffff\1\u03e0\1\u03df\1\u03de\6"+
            "\uffff\1\u03c9\3\uffff\1\u03d1\3\uffff\1\u03d3\u0090\uffff\1"+
            "\u03cd\1\uffff\1\u03bc\1\u03e7\1\u03b0\1\u03cc\1\u03b2\1\u03c1"+
            "\1\u03b5\1\u03b1\1\u03af\1\u03dc\1\u03db\2\uffff\1\u03c0\1\u03c2"+
            "\1\u03be\1\u03bf\1\u03b8\1\u03b9\1\u03ba\1\u03bb\1\u03b7\1\u03b6"+
            "\1\u03b3\1\u03b4\1\uffff\1\u03dd\2\uffff\1\u03ae",
            "\1\u041c\1\u041d\1\u041e\1\u041f\1\u0420\1\u03fe\1\u03fd\1"+
            "\u041b\2\uffff\1\u0408\1\u0409\14\uffff\1\u0412\1\u0414\1\u0411"+
            "\1\u0413\1\u040a\7\uffff\1\u03f7\1\uffff\1\u03ff\1\u0400\1\uffff"+
            "\1\u040c\2\uffff\1\u0401\3\uffff\1\u0405\1\uffff\1\u0402\1\u040f"+
            "\1\u0410\6\uffff\1\u040e\26\uffff\1\u041a\1\u0419\1\u0418\6"+
            "\uffff\1\u0403\3\uffff\1\u040b\3\uffff\1\u040d\u0090\uffff\1"+
            "\u0407\1\uffff\1\u03f6\1\u0421\1\u03ea\1\u0406\1\u03ec\1\u03fb"+
            "\1\u03ef\1\u03eb\1\u03e9\1\u0416\1\u0415\2\uffff\1\u03fa\1\u03fc"+
            "\1\u03f8\1\u03f9\1\u03f2\1\u03f3\1\u03f4\1\u03f5\1\u03f1\1\u03f0"+
            "\1\u03ed\1\u03ee\1\uffff\1\u0417\2\uffff\1\u03e8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0114\1\uffff\3\u0114\34\uffff\1\u0114\u00cf\uffff\1\u0114"+
            "\1\uffff\1\u0114\2\uffff\1\u0422\3\u0114\6\uffff\14\u0114",
            "\4\u0114\1\uffff\3\u0114\34\uffff\1\u0114\u00cf\uffff\1\u0114"+
            "\1\uffff\1\u0114\2\uffff\1\u0450\3\u0114\6\uffff\14\u0114",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0114\1\uffff\3\u0114\34\uffff\1\u0114\u00cf\uffff\1\u0114"+
            "\1\uffff\1\u0114\2\uffff\1\u0456\3\u0114\6\uffff\14\u0114",
            "\4\u0114\1\uffff\3\u0114\34\uffff\1\u0114\u00cf\uffff\1\u0114"+
            "\1\uffff\1\u0114\2\uffff\1\u0484\3\u0114\6\uffff\14\u0114",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
    static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
    static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
    static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
    static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
    static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
    static final short[][] DFA182_transition;

    static {
        int numStates = DFA182_transitionS.length;
        DFA182_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
        }
    }

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;
        }
        public String getDescription() {
            return "1213:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA182_0 = input.LA(1);

                         
                        int index182_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_0==IDENT) ) {s = 1;}

                        else if ( (LA182_0==TICKED_STRING_LITERAL) ) {s = 2;}

                        else if ( (LA182_0==AT) && (synpred4_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA182_0==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA182_0==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA182_0==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA182_0==SUM) && (synpred4_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA182_0==AVG) && (synpred4_EsperEPL2Grammar())) {s = 8;}

                        else if ( (LA182_0==MAX) ) {s = 9;}

                        else if ( (LA182_0==MIN) ) {s = 10;}

                        else if ( (LA182_0==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA182_0==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA182_0==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA182_0==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA182_0==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA182_0==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA182_0==LAST) && (synpred4_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA182_0==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA182_0==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA182_0==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA182_0==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA182_0==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA182_0==SQL) && (synpred4_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA182_0==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA182_0==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA182_0==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA182_0==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA182_0==LW) && (synpred4_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA182_0==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA182_0==CAST) && (synpred4_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA182_0==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA182_0==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA182_0==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA182_0==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA182_0==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA182_0==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA182_0==FULL) && (synpred4_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA182_0==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA182_0==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA182_0==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA182_0==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 41;}

                         
                        input.seek(index182_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA182_1 = input.LA(1);

                         
                        int index182_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_1==LPAREN) ) {s = 42;}

                        else if ( (LA182_1==DOT) ) {s = 43;}

                        else if ( (LA182_1==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA182_1==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA182_1==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA182_1==STAR) && (synpred4_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA182_1==DIV) && (synpred4_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA182_1==MOD) && (synpred4_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA182_1==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA182_1==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA182_1==LOR) && (synpred4_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA182_1==LT) && (synpred4_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA182_1==GT) && (synpred4_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA182_1==LE) && (synpred4_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA182_1==GE) && (synpred4_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA182_1==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA182_1==IS) && (synpred4_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA182_1==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA182_1==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA182_1==BAND) && (synpred4_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA182_1==BOR) && (synpred4_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA182_1==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA182_1==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA182_1==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA182_1==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA182_1==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA182_1==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA182_1==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA182_1==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA182_1==EOF) && (synpred4_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA182_1==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA182_1==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA182_1==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA182_1==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA182_1==AS) && (synpred4_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA182_1==FROM) && (synpred4_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA182_1==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA182_1==ALL) && (synpred4_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA182_1==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA182_1==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA182_1==ASC) && (synpred4_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA182_1==DESC) && (synpred4_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA182_1==THEN) && (synpred4_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA182_1==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA182_1==END) && (synpred4_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA182_1==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA182_1==COLON) && (synpred4_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA182_1==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA182_1==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA182_1==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 91;}

                        else if ( (LA182_1==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 92;}

                        else if ( (LA182_1==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 93;}

                        else if ( (LA182_1==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA182_1==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA182_1==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA182_1==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA182_1==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 98;}

                        else if ( (LA182_1==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 99;}

                         
                        input.seek(index182_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA182_2 = input.LA(1);

                         
                        int index182_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_2==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 100;}

                        else if ( (LA182_2==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA182_2==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 102;}

                        else if ( (LA182_2==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA182_2==DOT) ) {s = 104;}

                        else if ( (LA182_2==STAR) && (synpred4_EsperEPL2Grammar())) {s = 105;}

                        else if ( (LA182_2==DIV) && (synpred4_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA182_2==MOD) && (synpred4_EsperEPL2Grammar())) {s = 107;}

                        else if ( (LA182_2==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA182_2==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA182_2==LOR) && (synpred4_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA182_2==LT) && (synpred4_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA182_2==GT) && (synpred4_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA182_2==LE) && (synpred4_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA182_2==GE) && (synpred4_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA182_2==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA182_2==IS) && (synpred4_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA182_2==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA182_2==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA182_2==BAND) && (synpred4_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA182_2==BOR) && (synpred4_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA182_2==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA182_2==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA182_2==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA182_2==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA182_2==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA182_2==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA182_2==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA182_2==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA182_2==EOF) && (synpred4_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA182_2==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA182_2==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA182_2==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA182_2==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA182_2==AS) && (synpred4_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA182_2==FROM) && (synpred4_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA182_2==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA182_2==ALL) && (synpred4_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA182_2==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA182_2==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA182_2==ASC) && (synpred4_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA182_2==DESC) && (synpred4_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA182_2==THEN) && (synpred4_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA182_2==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA182_2==END) && (synpred4_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA182_2==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA182_2==COLON) && (synpred4_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA182_2==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA182_2==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA182_2==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA182_2==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA182_2==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA182_2==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA182_2==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA182_2==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA182_2==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA182_2==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA182_2==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 157;}

                         
                        input.seek(index182_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA182_9 = input.LA(1);

                         
                        int index182_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_9==LPAREN) ) {s = 158;}

                        else if ( (LA182_9==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA182_9==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA182_9==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA182_9==DOT) && (synpred4_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA182_9==STAR) && (synpred4_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA182_9==DIV) && (synpred4_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA182_9==MOD) && (synpred4_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA182_9==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA182_9==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA182_9==LOR) && (synpred4_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA182_9==LT) && (synpred4_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA182_9==GT) && (synpred4_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA182_9==LE) && (synpred4_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA182_9==GE) && (synpred4_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA182_9==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA182_9==IS) && (synpred4_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA182_9==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA182_9==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA182_9==BAND) && (synpred4_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA182_9==BOR) && (synpred4_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA182_9==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA182_9==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA182_9==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA182_9==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA182_9==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA182_9==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA182_9==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA182_9==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA182_9==EOF) && (synpred4_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA182_9==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA182_9==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA182_9==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA182_9==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA182_9==AS) && (synpred4_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA182_9==FROM) && (synpred4_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA182_9==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA182_9==ALL) && (synpred4_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA182_9==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA182_9==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA182_9==ASC) && (synpred4_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA182_9==DESC) && (synpred4_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA182_9==THEN) && (synpred4_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA182_9==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA182_9==END) && (synpred4_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA182_9==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA182_9==COLON) && (synpred4_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA182_9==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA182_9==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA182_9==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA182_9==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA182_9==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA182_9==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA182_9==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA182_9==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA182_9==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA182_9==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA182_9==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 215;}

                         
                        input.seek(index182_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA182_10 = input.LA(1);

                         
                        int index182_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_10==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA182_10==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA182_10==LPAREN) ) {s = 218;}

                        else if ( (LA182_10==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA182_10==DOT) && (synpred4_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA182_10==STAR) && (synpred4_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA182_10==DIV) && (synpred4_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA182_10==MOD) && (synpred4_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA182_10==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA182_10==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA182_10==LOR) && (synpred4_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA182_10==LT) && (synpred4_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA182_10==GT) && (synpred4_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA182_10==LE) && (synpred4_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA182_10==GE) && (synpred4_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA182_10==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA182_10==IS) && (synpred4_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA182_10==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA182_10==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA182_10==BAND) && (synpred4_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA182_10==BOR) && (synpred4_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA182_10==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA182_10==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA182_10==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA182_10==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA182_10==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA182_10==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA182_10==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA182_10==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA182_10==EOF) && (synpred4_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA182_10==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA182_10==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA182_10==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA182_10==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA182_10==AS) && (synpred4_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA182_10==FROM) && (synpred4_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA182_10==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA182_10==ALL) && (synpred4_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA182_10==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA182_10==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA182_10==ASC) && (synpred4_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA182_10==DESC) && (synpred4_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA182_10==THEN) && (synpred4_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA182_10==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA182_10==END) && (synpred4_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA182_10==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA182_10==COLON) && (synpred4_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA182_10==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA182_10==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA182_10==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA182_10==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA182_10==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA182_10==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA182_10==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA182_10==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA182_10==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA182_10==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA182_10==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 273;}

                         
                        input.seek(index182_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA182_43 = input.LA(1);

                         
                        int index182_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_43==IDENT) ) {s = 336;}

                        else if ( (LA182_43==TICKED_STRING_LITERAL) ) {s = 337;}

                        else if ( (LA182_43==AT) && (synpred4_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA182_43==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA182_43==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 340;}

                        else if ( (LA182_43==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 341;}

                        else if ( (LA182_43==SUM) && (synpred4_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA182_43==AVG) && (synpred4_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA182_43==MAX) ) {s = 344;}

                        else if ( (LA182_43==MIN) ) {s = 345;}

                        else if ( (LA182_43==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA182_43==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA182_43==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA182_43==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA182_43==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA182_43==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA182_43==LAST) && (synpred4_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA182_43==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA182_43==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA182_43==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA182_43==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA182_43==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA182_43==SQL) && (synpred4_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA182_43==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA182_43==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA182_43==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA182_43==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA182_43==LW) && (synpred4_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA182_43==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA182_43==CAST) && (synpred4_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA182_43==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA182_43==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA182_43==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA182_43==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA182_43==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA182_43==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA182_43==FULL) && (synpred4_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA182_43==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA182_43==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA182_43==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA182_43==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 376;}

                         
                        input.seek(index182_43);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA182_104 = input.LA(1);

                         
                        int index182_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_104==IDENT) ) {s = 377;}

                        else if ( (LA182_104==TICKED_STRING_LITERAL) ) {s = 378;}

                        else if ( (LA182_104==AT) && (synpred4_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA182_104==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA182_104==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA182_104==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA182_104==SUM) && (synpred4_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA182_104==AVG) && (synpred4_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA182_104==MAX) ) {s = 385;}

                        else if ( (LA182_104==MIN) ) {s = 386;}

                        else if ( (LA182_104==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA182_104==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA182_104==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA182_104==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA182_104==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA182_104==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA182_104==LAST) && (synpred4_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA182_104==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA182_104==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA182_104==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA182_104==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA182_104==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA182_104==SQL) && (synpred4_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA182_104==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA182_104==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 401;}

                        else if ( (LA182_104==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA182_104==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 403;}

                        else if ( (LA182_104==LW) && (synpred4_EsperEPL2Grammar())) {s = 404;}

                        else if ( (LA182_104==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 405;}

                        else if ( (LA182_104==CAST) && (synpred4_EsperEPL2Grammar())) {s = 406;}

                        else if ( (LA182_104==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 407;}

                        else if ( (LA182_104==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 408;}

                        else if ( (LA182_104==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 409;}

                        else if ( (LA182_104==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 410;}

                        else if ( (LA182_104==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 411;}

                        else if ( (LA182_104==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 412;}

                        else if ( (LA182_104==FULL) && (synpred4_EsperEPL2Grammar())) {s = 413;}

                        else if ( (LA182_104==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 414;}

                        else if ( (LA182_104==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 415;}

                        else if ( (LA182_104==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 416;}

                        else if ( (LA182_104==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 417;}

                         
                        input.seek(index182_104);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA182_336 = input.LA(1);

                         
                        int index182_336 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_336==LPAREN) ) {s = 594;}

                        else if ( (LA182_336==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 595;}

                        else if ( (LA182_336==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 596;}

                        else if ( (LA182_336==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 597;}

                        else if ( (LA182_336==STAR) && (synpred4_EsperEPL2Grammar())) {s = 598;}

                        else if ( (LA182_336==DIV) && (synpred4_EsperEPL2Grammar())) {s = 599;}

                        else if ( (LA182_336==MOD) && (synpred4_EsperEPL2Grammar())) {s = 600;}

                        else if ( (LA182_336==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 601;}

                        else if ( (LA182_336==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 602;}

                        else if ( (LA182_336==LOR) && (synpred4_EsperEPL2Grammar())) {s = 603;}

                        else if ( (LA182_336==LT) && (synpred4_EsperEPL2Grammar())) {s = 604;}

                        else if ( (LA182_336==GT) && (synpred4_EsperEPL2Grammar())) {s = 605;}

                        else if ( (LA182_336==LE) && (synpred4_EsperEPL2Grammar())) {s = 606;}

                        else if ( (LA182_336==GE) && (synpred4_EsperEPL2Grammar())) {s = 607;}

                        else if ( (LA182_336==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 608;}

                        else if ( (LA182_336==IS) && (synpred4_EsperEPL2Grammar())) {s = 609;}

                        else if ( (LA182_336==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 610;}

                        else if ( (LA182_336==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 611;}

                        else if ( (LA182_336==BAND) && (synpred4_EsperEPL2Grammar())) {s = 612;}

                        else if ( (LA182_336==BOR) && (synpred4_EsperEPL2Grammar())) {s = 613;}

                        else if ( (LA182_336==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 614;}

                        else if ( (LA182_336==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 615;}

                        else if ( (LA182_336==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 616;}

                        else if ( (LA182_336==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 617;}

                        else if ( (LA182_336==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 618;}

                        else if ( (LA182_336==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 619;}

                        else if ( (LA182_336==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 620;}

                        else if ( (LA182_336==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 621;}

                        else if ( (LA182_336==EOF) && (synpred4_EsperEPL2Grammar())) {s = 622;}

                        else if ( (LA182_336==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 623;}

                        else if ( (LA182_336==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 624;}

                        else if ( (LA182_336==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 625;}

                        else if ( (LA182_336==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 626;}

                        else if ( (LA182_336==AS) && (synpred4_EsperEPL2Grammar())) {s = 627;}

                        else if ( (LA182_336==FROM) && (synpred4_EsperEPL2Grammar())) {s = 628;}

                        else if ( (LA182_336==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 629;}

                        else if ( (LA182_336==ALL) && (synpred4_EsperEPL2Grammar())) {s = 630;}

                        else if ( (LA182_336==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 631;}

                        else if ( (LA182_336==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 632;}

                        else if ( (LA182_336==ASC) && (synpred4_EsperEPL2Grammar())) {s = 633;}

                        else if ( (LA182_336==DESC) && (synpred4_EsperEPL2Grammar())) {s = 634;}

                        else if ( (LA182_336==THEN) && (synpred4_EsperEPL2Grammar())) {s = 635;}

                        else if ( (LA182_336==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 636;}

                        else if ( (LA182_336==END) && (synpred4_EsperEPL2Grammar())) {s = 637;}

                        else if ( (LA182_336==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 638;}

                        else if ( (LA182_336==COLON) && (synpred4_EsperEPL2Grammar())) {s = 639;}

                        else if ( (LA182_336==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 640;}

                        else if ( (LA182_336==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 641;}

                        else if ( (LA182_336==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 642;}

                        else if ( (LA182_336==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 643;}

                        else if ( (LA182_336==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 644;}

                        else if ( (LA182_336==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 645;}

                        else if ( (LA182_336==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 646;}

                        else if ( (LA182_336==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 647;}

                        else if ( (LA182_336==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 648;}

                        else if ( (LA182_336==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 649;}

                        else if ( (LA182_336==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 650;}

                        else if ( (LA182_336==DOT) ) {s = 651;}

                         
                        input.seek(index182_336);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA182_337 = input.LA(1);

                         
                        int index182_337 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_337==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 652;}

                        else if ( (LA182_337==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 653;}

                        else if ( (LA182_337==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 654;}

                        else if ( (LA182_337==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 655;}

                        else if ( (LA182_337==STAR) && (synpred4_EsperEPL2Grammar())) {s = 656;}

                        else if ( (LA182_337==DIV) && (synpred4_EsperEPL2Grammar())) {s = 657;}

                        else if ( (LA182_337==MOD) && (synpred4_EsperEPL2Grammar())) {s = 658;}

                        else if ( (LA182_337==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 659;}

                        else if ( (LA182_337==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 660;}

                        else if ( (LA182_337==LOR) && (synpred4_EsperEPL2Grammar())) {s = 661;}

                        else if ( (LA182_337==LT) && (synpred4_EsperEPL2Grammar())) {s = 662;}

                        else if ( (LA182_337==GT) && (synpred4_EsperEPL2Grammar())) {s = 663;}

                        else if ( (LA182_337==LE) && (synpred4_EsperEPL2Grammar())) {s = 664;}

                        else if ( (LA182_337==GE) && (synpred4_EsperEPL2Grammar())) {s = 665;}

                        else if ( (LA182_337==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 666;}

                        else if ( (LA182_337==IS) && (synpred4_EsperEPL2Grammar())) {s = 667;}

                        else if ( (LA182_337==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 668;}

                        else if ( (LA182_337==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 669;}

                        else if ( (LA182_337==BAND) && (synpred4_EsperEPL2Grammar())) {s = 670;}

                        else if ( (LA182_337==BOR) && (synpred4_EsperEPL2Grammar())) {s = 671;}

                        else if ( (LA182_337==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 672;}

                        else if ( (LA182_337==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 673;}

                        else if ( (LA182_337==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 674;}

                        else if ( (LA182_337==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 675;}

                        else if ( (LA182_337==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 676;}

                        else if ( (LA182_337==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 677;}

                        else if ( (LA182_337==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 678;}

                        else if ( (LA182_337==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 679;}

                        else if ( (LA182_337==EOF) && (synpred4_EsperEPL2Grammar())) {s = 680;}

                        else if ( (LA182_337==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 681;}

                        else if ( (LA182_337==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 682;}

                        else if ( (LA182_337==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 683;}

                        else if ( (LA182_337==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 684;}

                        else if ( (LA182_337==AS) && (synpred4_EsperEPL2Grammar())) {s = 685;}

                        else if ( (LA182_337==FROM) && (synpred4_EsperEPL2Grammar())) {s = 686;}

                        else if ( (LA182_337==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 687;}

                        else if ( (LA182_337==ALL) && (synpred4_EsperEPL2Grammar())) {s = 688;}

                        else if ( (LA182_337==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 689;}

                        else if ( (LA182_337==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 690;}

                        else if ( (LA182_337==ASC) && (synpred4_EsperEPL2Grammar())) {s = 691;}

                        else if ( (LA182_337==DESC) && (synpred4_EsperEPL2Grammar())) {s = 692;}

                        else if ( (LA182_337==THEN) && (synpred4_EsperEPL2Grammar())) {s = 693;}

                        else if ( (LA182_337==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 694;}

                        else if ( (LA182_337==END) && (synpred4_EsperEPL2Grammar())) {s = 695;}

                        else if ( (LA182_337==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 696;}

                        else if ( (LA182_337==COLON) && (synpred4_EsperEPL2Grammar())) {s = 697;}

                        else if ( (LA182_337==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 698;}

                        else if ( (LA182_337==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 699;}

                        else if ( (LA182_337==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 700;}

                        else if ( (LA182_337==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 701;}

                        else if ( (LA182_337==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 702;}

                        else if ( (LA182_337==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 703;}

                        else if ( (LA182_337==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 704;}

                        else if ( (LA182_337==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 705;}

                        else if ( (LA182_337==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 706;}

                        else if ( (LA182_337==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 707;}

                        else if ( (LA182_337==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 708;}

                        else if ( (LA182_337==DOT) ) {s = 709;}

                         
                        input.seek(index182_337);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA182_344 = input.LA(1);

                         
                        int index182_344 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_344==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 710;}

                        else if ( (LA182_344==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 711;}

                        else if ( (LA182_344==LPAREN) ) {s = 712;}

                        else if ( (LA182_344==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 713;}

                        else if ( (LA182_344==STAR) && (synpred4_EsperEPL2Grammar())) {s = 714;}

                        else if ( (LA182_344==DIV) && (synpred4_EsperEPL2Grammar())) {s = 715;}

                        else if ( (LA182_344==MOD) && (synpred4_EsperEPL2Grammar())) {s = 716;}

                        else if ( (LA182_344==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 717;}

                        else if ( (LA182_344==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 718;}

                        else if ( (LA182_344==LOR) && (synpred4_EsperEPL2Grammar())) {s = 719;}

                        else if ( (LA182_344==LT) && (synpred4_EsperEPL2Grammar())) {s = 720;}

                        else if ( (LA182_344==GT) && (synpred4_EsperEPL2Grammar())) {s = 721;}

                        else if ( (LA182_344==LE) && (synpred4_EsperEPL2Grammar())) {s = 722;}

                        else if ( (LA182_344==GE) && (synpred4_EsperEPL2Grammar())) {s = 723;}

                        else if ( (LA182_344==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 724;}

                        else if ( (LA182_344==IS) && (synpred4_EsperEPL2Grammar())) {s = 725;}

                        else if ( (LA182_344==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 726;}

                        else if ( (LA182_344==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 727;}

                        else if ( (LA182_344==BAND) && (synpred4_EsperEPL2Grammar())) {s = 728;}

                        else if ( (LA182_344==BOR) && (synpred4_EsperEPL2Grammar())) {s = 729;}

                        else if ( (LA182_344==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA182_344==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA182_344==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 732;}

                        else if ( (LA182_344==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 733;}

                        else if ( (LA182_344==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA182_344==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA182_344==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 736;}

                        else if ( (LA182_344==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 737;}

                        else if ( (LA182_344==EOF) && (synpred4_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA182_344==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 739;}

                        else if ( (LA182_344==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 740;}

                        else if ( (LA182_344==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA182_344==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA182_344==AS) && (synpred4_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA182_344==FROM) && (synpred4_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA182_344==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA182_344==ALL) && (synpred4_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA182_344==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA182_344==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA182_344==ASC) && (synpred4_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA182_344==DESC) && (synpred4_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA182_344==THEN) && (synpred4_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA182_344==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA182_344==END) && (synpred4_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA182_344==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA182_344==COLON) && (synpred4_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA182_344==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA182_344==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA182_344==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA182_344==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA182_344==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA182_344==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA182_344==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA182_344==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA182_344==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA182_344==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA182_344==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA182_344==DOT) && (synpred4_EsperEPL2Grammar())) {s = 767;}

                         
                        input.seek(index182_344);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA182_345 = input.LA(1);

                         
                        int index182_345 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_345==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA182_345==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA182_345==LPAREN) ) {s = 770;}

                        else if ( (LA182_345==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA182_345==STAR) && (synpred4_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA182_345==DIV) && (synpred4_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA182_345==MOD) && (synpred4_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA182_345==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA182_345==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA182_345==LOR) && (synpred4_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA182_345==LT) && (synpred4_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA182_345==GT) && (synpred4_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA182_345==LE) && (synpred4_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA182_345==GE) && (synpred4_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA182_345==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA182_345==IS) && (synpred4_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA182_345==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA182_345==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA182_345==BAND) && (synpred4_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA182_345==BOR) && (synpred4_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA182_345==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA182_345==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA182_345==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA182_345==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA182_345==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA182_345==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA182_345==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA182_345==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA182_345==EOF) && (synpred4_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA182_345==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA182_345==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA182_345==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA182_345==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA182_345==AS) && (synpred4_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA182_345==FROM) && (synpred4_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA182_345==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA182_345==ALL) && (synpred4_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA182_345==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA182_345==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA182_345==ASC) && (synpred4_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA182_345==DESC) && (synpred4_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA182_345==THEN) && (synpred4_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA182_345==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA182_345==END) && (synpred4_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA182_345==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA182_345==COLON) && (synpred4_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA182_345==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA182_345==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA182_345==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA182_345==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA182_345==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA182_345==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA182_345==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA182_345==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA182_345==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA182_345==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA182_345==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA182_345==DOT) && (synpred4_EsperEPL2Grammar())) {s = 825;}

                         
                        input.seek(index182_345);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA182_377 = input.LA(1);

                         
                        int index182_377 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_377==LPAREN) ) {s = 826;}

                        else if ( (LA182_377==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA182_377==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA182_377==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA182_377==STAR) && (synpred4_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA182_377==DIV) && (synpred4_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA182_377==MOD) && (synpred4_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA182_377==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA182_377==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA182_377==LOR) && (synpred4_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA182_377==LT) && (synpred4_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA182_377==GT) && (synpred4_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA182_377==LE) && (synpred4_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA182_377==GE) && (synpred4_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA182_377==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA182_377==IS) && (synpred4_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA182_377==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA182_377==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA182_377==BAND) && (synpred4_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA182_377==BOR) && (synpred4_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA182_377==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA182_377==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA182_377==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA182_377==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA182_377==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA182_377==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA182_377==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA182_377==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA182_377==EOF) && (synpred4_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA182_377==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA182_377==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA182_377==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA182_377==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA182_377==AS) && (synpred4_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA182_377==FROM) && (synpred4_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA182_377==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA182_377==ALL) && (synpred4_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA182_377==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA182_377==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA182_377==ASC) && (synpred4_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA182_377==DESC) && (synpred4_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA182_377==THEN) && (synpred4_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA182_377==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA182_377==END) && (synpred4_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA182_377==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA182_377==COLON) && (synpred4_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA182_377==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA182_377==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA182_377==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA182_377==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA182_377==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA182_377==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA182_377==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA182_377==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA182_377==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA182_377==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA182_377==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA182_377==DOT) ) {s = 883;}

                         
                        input.seek(index182_377);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA182_378 = input.LA(1);

                         
                        int index182_378 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_378==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA182_378==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA182_378==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA182_378==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA182_378==STAR) && (synpred4_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA182_378==DIV) && (synpred4_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA182_378==MOD) && (synpred4_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA182_378==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA182_378==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA182_378==LOR) && (synpred4_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA182_378==LT) && (synpred4_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA182_378==GT) && (synpred4_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA182_378==LE) && (synpred4_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA182_378==GE) && (synpred4_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA182_378==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA182_378==IS) && (synpred4_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA182_378==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA182_378==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA182_378==BAND) && (synpred4_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA182_378==BOR) && (synpred4_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA182_378==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA182_378==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA182_378==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA182_378==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA182_378==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA182_378==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA182_378==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA182_378==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA182_378==EOF) && (synpred4_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA182_378==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA182_378==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA182_378==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA182_378==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA182_378==AS) && (synpred4_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA182_378==FROM) && (synpred4_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA182_378==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA182_378==ALL) && (synpred4_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA182_378==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA182_378==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA182_378==ASC) && (synpred4_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA182_378==DESC) && (synpred4_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA182_378==THEN) && (synpred4_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA182_378==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA182_378==END) && (synpred4_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA182_378==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA182_378==COLON) && (synpred4_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA182_378==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA182_378==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA182_378==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA182_378==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA182_378==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA182_378==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA182_378==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA182_378==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA182_378==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA182_378==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA182_378==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA182_378==DOT) ) {s = 941;}

                         
                        input.seek(index182_378);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA182_385 = input.LA(1);

                         
                        int index182_385 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_385==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA182_385==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA182_385==LPAREN) ) {s = 944;}

                        else if ( (LA182_385==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA182_385==STAR) && (synpred4_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA182_385==DIV) && (synpred4_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA182_385==MOD) && (synpred4_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA182_385==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA182_385==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA182_385==LOR) && (synpred4_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA182_385==LT) && (synpred4_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA182_385==GT) && (synpred4_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA182_385==LE) && (synpred4_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA182_385==GE) && (synpred4_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA182_385==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA182_385==IS) && (synpred4_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA182_385==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA182_385==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA182_385==BAND) && (synpred4_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA182_385==BOR) && (synpred4_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA182_385==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA182_385==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA182_385==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA182_385==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA182_385==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA182_385==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA182_385==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA182_385==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA182_385==EOF) && (synpred4_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA182_385==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA182_385==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA182_385==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA182_385==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA182_385==AS) && (synpred4_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA182_385==FROM) && (synpred4_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA182_385==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA182_385==ALL) && (synpred4_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA182_385==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA182_385==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA182_385==ASC) && (synpred4_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA182_385==DESC) && (synpred4_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA182_385==THEN) && (synpred4_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA182_385==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA182_385==END) && (synpred4_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA182_385==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA182_385==COLON) && (synpred4_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA182_385==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA182_385==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA182_385==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA182_385==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA182_385==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA182_385==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA182_385==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA182_385==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA182_385==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA182_385==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA182_385==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA182_385==DOT) && (synpred4_EsperEPL2Grammar())) {s = 999;}

                         
                        input.seek(index182_385);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA182_386 = input.LA(1);

                         
                        int index182_386 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_386==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA182_386==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA182_386==LPAREN) ) {s = 1002;}

                        else if ( (LA182_386==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA182_386==STAR) && (synpred4_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA182_386==DIV) && (synpred4_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA182_386==MOD) && (synpred4_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA182_386==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA182_386==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA182_386==LOR) && (synpred4_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA182_386==LT) && (synpred4_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA182_386==GT) && (synpred4_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA182_386==LE) && (synpred4_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA182_386==GE) && (synpred4_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA182_386==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA182_386==IS) && (synpred4_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA182_386==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA182_386==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA182_386==BAND) && (synpred4_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA182_386==BOR) && (synpred4_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA182_386==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA182_386==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA182_386==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA182_386==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA182_386==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA182_386==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA182_386==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA182_386==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA182_386==EOF) && (synpred4_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA182_386==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA182_386==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA182_386==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA182_386==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA182_386==AS) && (synpred4_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA182_386==FROM) && (synpred4_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA182_386==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA182_386==ALL) && (synpred4_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA182_386==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA182_386==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA182_386==ASC) && (synpred4_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA182_386==DESC) && (synpred4_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA182_386==THEN) && (synpred4_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA182_386==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA182_386==END) && (synpred4_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA182_386==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA182_386==COLON) && (synpred4_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA182_386==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA182_386==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA182_386==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA182_386==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA182_386==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA182_386==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA182_386==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA182_386==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA182_386==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA182_386==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA182_386==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA182_386==DOT) && (synpred4_EsperEPL2Grammar())) {s = 1057;}

                         
                        input.seek(index182_386);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA182_542 = input.LA(1);

                         
                        int index182_542 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_542);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA182_588 = input.LA(1);

                         
                        int index182_588 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_588);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA182_594 = input.LA(1);

                         
                        int index182_594 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_594);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA182_651 = input.LA(1);

                         
                        int index182_651 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_651);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA182_709 = input.LA(1);

                         
                        int index182_709 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_709);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA182_712 = input.LA(1);

                         
                        int index182_712 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_712);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA182_770 = input.LA(1);

                         
                        int index182_770 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_770);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA182_826 = input.LA(1);

                         
                        int index182_826 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_826);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA182_883 = input.LA(1);

                         
                        int index182_883 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_883);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA182_941 = input.LA(1);

                         
                        int index182_941 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_941);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA182_944 = input.LA(1);

                         
                        int index182_944 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_944);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA182_1002 = input.LA(1);

                         
                        int index182_1002 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_1002);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA182_1058 = input.LA(1);

                         
                        int index182_1058 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_1058);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA182_1104 = input.LA(1);

                         
                        int index182_1104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_1104);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA182_1110 = input.LA(1);

                         
                        int index182_1110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_1110);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA182_1156 = input.LA(1);

                         
                        int index182_1156 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 276;}

                         
                        input.seek(index182_1156);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 182, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA228_eotS =
        "\u0228\uffff";
    static final String DFA228_eofS =
        "\u0228\uffff";
    static final String DFA228_minS =
        "\1\5\2\0\6\6\63\uffff\1\u00fa\121\uffff\3\0\101\uffff\3\0\44\uffff"+
        "\3\0\52\uffff\3\0\25\uffff\3\0\76\uffff\3\0\u00a6\uffff";
    static final String DFA228_maxS =
        "\1\u011c\2\0\4\u0114\1\u0119\1\u0114\63\uffff\1\u0113\121\uffff"+
        "\3\0\101\uffff\3\0\44\uffff\3\0\52\uffff\3\0\25\uffff\3\0\76\uffff"+
        "\3\0\u00a6\uffff";
    static final String DFA228_acceptS =
        "\11\uffff\63\4\1\uffff\1\11\44\uffff\1\1\44\uffff\1\2\5\3\1\5\3"+
        "\uffff\5\3\1\7\1\10\34\4\1\5\3\3\1\10\4\3\25\4\3\uffff\7\4\1\7\3"+
        "\3\1\10\3\3\25\4\3\uffff\7\4\2\3\1\7\1\5\5\3\1\7\3\3\1\10\25\4\3"+
        "\uffff\7\4\7\3\1\5\5\3\1\7\3\uffff\2\3\1\10\41\4\3\3\1\5\1\10\25"+
        "\4\3\uffff\7\4\2\3\1\5\10\3\1\7\1\6\1\12\u0091\uffff";
    static final String DFA228_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\63\uffff\1\11\121\uffff\1"+
        "\12\1\13\1\14\101\uffff\1\15\1\16\1\17\44\uffff\1\20\1\21\1\22\52"+
        "\uffff\1\23\1\24\1\25\25\uffff\1\26\1\27\1\30\76\uffff\1\31\1\32"+
        "\1\33\u00a6\uffff}>";
    static final String[] DFA228_transitionS = {
            "\1\57\4\uffff\1\25\2\uffff\1\73\1\26\3\uffff\1\27\1\30\1\31"+
            "\1\32\1\33\1\34\1\35\1\36\1\24\1\uffff\1\11\6\uffff\1\62\1\uffff"+
            "\1\64\1\60\1\61\1\63\12\uffff\1\37\1\40\1\1\10\uffff\1\41\1"+
            "\42\1\43\1\45\1\46\1\47\1\50\1\51\1\70\1\52\1\2\1\53\1\54\1"+
            "\71\1\uffff\1\55\1\uffff\1\56\1\44\1\23\14\uffff\1\16\1\17\1"+
            "\20\5\uffff\1\65\1\66\1\67\u0083\uffff\1\6\16\uffff\1\7\2\uffff"+
            "\1\21\1\uffff\1\74\1\uffff\1\13\1\10\1\75\2\uffff\1\14\1\15"+
            "\11\uffff\1\12\2\uffff\1\72\1\uffff\1\3\2\uffff\1\22\1\4\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\uffff\1\u00aa\1\u00a9\1"+
            "\u00af\7\uffff\1\u0093\24\uffff\1\u00a3\12\uffff\1\u0096\3\uffff"+
            "\1\u00ab\1\u00ac\14\uffff\1\u0097\12\uffff\1\u008c\1\u008b\1"+
            "\u0095\1\u0094\1\u0092\1\u0091\1\u0090\1\u008f\1\u008e\1\u008a"+
            "\1\u0089\1\u0088\u009c\uffff\1\u00ad\1\uffff\1\u00a2\2\uffff"+
            "\1\u00ae\1\u0098\1\u00a7\1\u009b\3\uffff\1\u008d\2\uffff\1\u00a6"+
            "\1\u00a8\1\u00a4\1\u00a5\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u009d"+
            "\1\u009c\1\u0099\1\u009a",
            "\1\u00d8\1\u00d9\1\u00da\1\u00db\1\uffff\1\u00cf\1\u00ce\1"+
            "\u00d7\7\uffff\1\u00b7\24\uffff\1\u00c8\12\uffff\1\u00dc\3\uffff"+
            "\1\u00d0\1\u00d1\14\uffff\1\u00b8\12\uffff\1\u00ba\1\u00b9\1"+
            "\u00bc\1\u00bb\1\u00b6\1\u00b5\1\u00d4\1\u00d3\1\u00d2\1\u00df"+
            "\1\u00de\1\u00dd\u009c\uffff\1\u00d5\1\uffff\1\u00c7\2\uffff"+
            "\1\u00d6\1\u00bd\1\u00cc\1\u00c0\3\uffff\1\u00b4\2\uffff\1\u00cb"+
            "\1\u00cd\1\u00c9\1\u00ca\1\u00c3\1\u00c4\1\u00c5\1\u00c6\1\u00c2"+
            "\1\u00c1\1\u00be\1\u00bf",
            "\1\u00ff\1\u0100\1\u0101\1\u0102\1\uffff\1\u00f6\1\u00f5\1"+
            "\u00fe\7\uffff\1\u00e3\24\uffff\1\u00ef\12\uffff\1\u0105\3\uffff"+
            "\1\u00f7\1\u00f8\14\uffff\1\u00e0\12\uffff\1\u010b\1\u010a\1"+
            "\u0104\1\u0103\1\u00e2\1\u00e1\1\u00fb\1\u00fa\1\u00f9\1\u0109"+
            "\1\u0108\1\u0107\u009c\uffff\1\u00fc\1\uffff\1\u00ee\2\uffff"+
            "\1\u00fd\1\u00e4\1\u00f3\1\u00e7\3\uffff\1\u0106\2\uffff\1\u00f2"+
            "\1\u00f4\1\u00f0\1\u00f1\1\u00ea\1\u00eb\1\u00ec\1\u00ed\1\u00e9"+
            "\1\u00e8\1\u00e5\1\u00e6",
            "\1\u012c\1\u012d\1\u012e\1\u012f\1\uffff\1\u0123\1\u0122\1"+
            "\u012b\7\uffff\1\u010f\24\uffff\1\u011c\12\uffff\1\u010c\3\uffff"+
            "\1\u0124\1\u0125\14\uffff\1\u0110\12\uffff\1\u0134\1\u0133\1"+
            "\u0136\1\u0135\1\u010e\1\u010d\1\u0128\1\u0127\1\u0126\1\u0132"+
            "\1\u0131\1\u0130\u009c\uffff\1\u0129\1\uffff\1\u011b\2\uffff"+
            "\1\u012a\1\u0111\1\u0120\1\u0114\3\uffff\1\u0137\2\uffff\1\u011f"+
            "\1\u0121\1\u011d\1\u011e\1\u0117\1\u0118\1\u0119\1\u011a\1\u0116"+
            "\1\u0115\1\u0112\1\u0113",
            "\1\u0161\1\u0162\1\u0163\1\u0164\1\uffff\1\u015b\1\u015a\1"+
            "\u0160\7\uffff\1\u0167\24\uffff\1\u0154\12\uffff\1\u013d\3\uffff"+
            "\1\u015c\1\u015d\14\uffff\1\u0143\12\uffff\1\u0142\1\u0141\1"+
            "\u0139\1\u0138\1\u0166\1\u0165\1\u0140\1\u013f\1\u013e\1\u013c"+
            "\1\u013b\1\u013a\u009c\uffff\1\u015e\1\uffff\1\u0153\1\u0148"+
            "\1\u0144\1\u015f\1\u0149\1\u0158\1\u014c\1\u0147\1\u0146\1\uffff"+
            "\1\u0168\2\uffff\1\u0157\1\u0159\1\u0155\1\u0156\1\u014f\1\u0150"+
            "\1\u0151\1\u0152\1\u014e\1\u014d\1\u014a\1\u014b\4\uffff\1\u0145",
            "\1\u0185\1\u0186\1\u0187\1\u0188\1\uffff\1\u017c\1\u017b\1"+
            "\u0184\7\uffff\1\u018e\24\uffff\1\u0175\12\uffff\1\u0194\3\uffff"+
            "\1\u017d\1\u017e\14\uffff\1\u0169\12\uffff\1\u018a\1\u0189\1"+
            "\u0193\1\u0192\1\u018d\1\u018c\1\u0181\1\u0180\1\u017f\1\u0191"+
            "\1\u0190\1\u018f\u009c\uffff\1\u0182\1\uffff\1\u0174\2\uffff"+
            "\1\u0183\1\u016a\1\u0179\1\u016d\3\uffff\1\u018b\2\uffff\1\u0178"+
            "\1\u017a\1\u0176\1\u0177\1\u0170\1\u0171\1\u0172\1\u0173\1\u016f"+
            "\1\u016e\1\u016b\1\u016c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0196\4\uffff\1\u0196\23\uffff\1\u0195",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA228_eot = DFA.unpackEncodedString(DFA228_eotS);
    static final short[] DFA228_eof = DFA.unpackEncodedString(DFA228_eofS);
    static final char[] DFA228_min = DFA.unpackEncodedStringToUnsignedChars(DFA228_minS);
    static final char[] DFA228_max = DFA.unpackEncodedStringToUnsignedChars(DFA228_maxS);
    static final short[] DFA228_accept = DFA.unpackEncodedString(DFA228_acceptS);
    static final short[] DFA228_special = DFA.unpackEncodedString(DFA228_specialS);
    static final short[][] DFA228_transition;

    static {
        int numStates = DFA228_transitionS.length;
        DFA228_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA228_transition[i] = DFA.unpackEncodedString(DFA228_transitionS[i]);
        }
    }

    class DFA228 extends DFA {

        public DFA228(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 228;
            this.eot = DFA228_eot;
            this.eof = DFA228_eof;
            this.min = DFA228_min;
            this.max = DFA228_max;
            this.accept = DFA228_accept;
            this.special = DFA228_special;
            this.transition = DFA228_transition;
        }
        public String getDescription() {
            return "1424:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA228_0 = input.LA(1);

                         
                        int index228_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA228_0==LAST) ) {s = 1;}

                        else if ( (LA228_0==LW) ) {s = 2;}

                        else if ( (LA228_0==NUM_INT) ) {s = 3;}

                        else if ( (LA228_0==NUM_LONG) ) {s = 4;}

                        else if ( (LA228_0==NUM_FLOAT) ) {s = 5;}

                        else if ( (LA228_0==NUM_DOUBLE) ) {s = 6;}

                        else if ( (LA228_0==IDENT) ) {s = 7;}

                        else if ( (LA228_0==QUESTION) ) {s = 8;}

                        else if ( (LA228_0==CASE) && (synpred9_EsperEPL2Grammar())) {s = 9;}

                        else if ( (LA228_0==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 10;}

                        else if ( (LA228_0==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA228_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA228_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA228_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA228_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA228_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA228_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA228_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA228_0==AT) && (synpred9_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA228_0==COUNT) && (synpred9_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA228_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA228_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA228_0==SUM) && (synpred9_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA228_0==AVG) && (synpred9_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA228_0==MAX) && (synpred9_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA228_0==MIN) && (synpred9_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA228_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA228_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA228_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA228_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA228_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA228_0==FIRST) && (synpred9_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA228_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA228_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA228_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA228_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA228_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA228_0==SQL) && (synpred9_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA228_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA228_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA228_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA228_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA228_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA228_0==CAST) && (synpred9_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA228_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA228_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA228_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA228_0==LEFT) && (synpred9_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA228_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA228_0==OUTER) && (synpred9_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA228_0==FULL) && (synpred9_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA228_0==JOIN) && (synpred9_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA228_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA228_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA228_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA228_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA228_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA228_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA228_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA228_0==STAR) ) {s = 60;}

                        else if ( (LA228_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {s = 61;}

                         
                        input.seek(index228_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA228_1 = input.LA(1);

                         
                        int index228_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_EsperEPL2Grammar()) ) {s = 98;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 59;}

                         
                        input.seek(index228_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA228_2 = input.LA(1);

                         
                        int index228_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 135;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 59;}

                         
                        input.seek(index228_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA228_3 = input.LA(1);

                         
                        int index228_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA228_3==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA228_3==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA228_3==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA228_3==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA228_3==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA228_3==COLON) && (synpred10_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA228_3==TIMEPERIOD_SECONDS) ) {s = 142;}

                        else if ( (LA228_3==TIMEPERIOD_SECOND) ) {s = 143;}

                        else if ( (LA228_3==TIMEPERIOD_SEC) ) {s = 144;}

                        else if ( (LA228_3==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA228_3==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA228_3==MIN) && (synpred8_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA228_3==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA228_3==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA228_3==LAST) && (synpred12_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA228_3==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA228_3==STAR) && (synpred9_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA228_3==DIV) && (synpred9_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA228_3==MOD) && (synpred9_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA228_3==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA228_3==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA228_3==LOR) && (synpred9_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA228_3==LT) && (synpred9_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA228_3==GT) && (synpred9_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA228_3==LE) && (synpred9_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA228_3==GE) && (synpred9_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA228_3==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA228_3==IS) && (synpred9_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA228_3==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA228_3==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA228_3==BAND) && (synpred9_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA228_3==BOR) && (synpred9_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA228_3==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA228_3==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA228_3==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA228_3==ASC) && (synpred9_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA228_3==DESC) && (synpred9_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA228_3==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA228_3==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA228_3==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA228_3==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA228_3==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA228_3==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA228_3==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 179;}

                         
                        input.seek(index228_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA228_4 = input.LA(1);

                         
                        int index228_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA228_4==COLON) && (synpred10_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA228_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA228_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA228_4==MIN) && (synpred8_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA228_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA228_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA228_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA228_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA228_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA228_4==STAR) && (synpred9_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA228_4==DIV) && (synpred9_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA228_4==MOD) && (synpred9_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA228_4==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA228_4==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA228_4==LOR) && (synpred9_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA228_4==LT) && (synpred9_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA228_4==GT) && (synpred9_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA228_4==LE) && (synpred9_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA228_4==GE) && (synpred9_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA228_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA228_4==IS) && (synpred9_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA228_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA228_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA228_4==BAND) && (synpred9_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA228_4==BOR) && (synpred9_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA228_4==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA228_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA228_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA228_4==ASC) && (synpred9_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA228_4==DESC) && (synpred9_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA228_4==TIMEPERIOD_SECONDS) ) {s = 210;}

                        else if ( (LA228_4==TIMEPERIOD_SECOND) ) {s = 211;}

                        else if ( (LA228_4==TIMEPERIOD_SEC) ) {s = 212;}

                        else if ( (LA228_4==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA228_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA228_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA228_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA228_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA228_4==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA228_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA228_4==LAST) && (synpred12_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA228_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA228_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA228_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 223;}

                         
                        input.seek(index228_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA228_5 = input.LA(1);

                         
                        int index228_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA228_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA228_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA228_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA228_5==MIN) && (synpred8_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA228_5==STAR) && (synpred9_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA228_5==DIV) && (synpred9_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA228_5==MOD) && (synpred9_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA228_5==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA228_5==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA228_5==LOR) && (synpred9_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA228_5==LT) && (synpred9_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA228_5==GT) && (synpred9_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA228_5==LE) && (synpred9_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA228_5==GE) && (synpred9_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA228_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA228_5==IS) && (synpred9_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA228_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA228_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA228_5==BAND) && (synpred9_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA228_5==BOR) && (synpred9_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA228_5==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA228_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA228_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA228_5==ASC) && (synpred9_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA228_5==DESC) && (synpred9_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA228_5==TIMEPERIOD_SECONDS) ) {s = 249;}

                        else if ( (LA228_5==TIMEPERIOD_SECOND) ) {s = 250;}

                        else if ( (LA228_5==TIMEPERIOD_SEC) ) {s = 251;}

                        else if ( (LA228_5==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA228_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA228_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA228_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA228_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA228_5==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA228_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA228_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA228_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA228_5==LAST) && (synpred12_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA228_5==COLON) && (synpred10_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA228_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA228_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA228_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA228_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA228_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 267;}

                         
                        input.seek(index228_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA228_6 = input.LA(1);

                         
                        int index228_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA228_6==LAST) && (synpred12_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA228_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA228_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA228_6==MIN) && (synpred8_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA228_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA228_6==STAR) && (synpred9_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA228_6==DIV) && (synpred9_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA228_6==MOD) && (synpred9_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA228_6==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA228_6==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA228_6==LOR) && (synpred9_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA228_6==LT) && (synpred9_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA228_6==GT) && (synpred9_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA228_6==LE) && (synpred9_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA228_6==GE) && (synpred9_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA228_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA228_6==IS) && (synpred9_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA228_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA228_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA228_6==BAND) && (synpred9_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA228_6==BOR) && (synpred9_EsperEPL2Grammar())) {s = 288;}

                        else if ( (LA228_6==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 289;}

                        else if ( (LA228_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 290;}

                        else if ( (LA228_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 291;}

                        else if ( (LA228_6==ASC) && (synpred9_EsperEPL2Grammar())) {s = 292;}

                        else if ( (LA228_6==DESC) && (synpred9_EsperEPL2Grammar())) {s = 293;}

                        else if ( (LA228_6==TIMEPERIOD_SECONDS) ) {s = 294;}

                        else if ( (LA228_6==TIMEPERIOD_SECOND) ) {s = 295;}

                        else if ( (LA228_6==TIMEPERIOD_SEC) ) {s = 296;}

                        else if ( (LA228_6==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA228_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA228_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA228_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA228_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA228_6==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA228_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA228_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA228_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA228_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA228_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA228_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 308;}

                        else if ( (LA228_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA228_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA228_6==COLON) && (synpred10_EsperEPL2Grammar())) {s = 311;}

                         
                        input.seek(index228_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA228_7 = input.LA(1);

                         
                        int index228_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA228_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 312;}

                        else if ( (LA228_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA228_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 314;}

                        else if ( (LA228_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 315;}

                        else if ( (LA228_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 316;}

                        else if ( (LA228_7==LAST) && (synpred12_EsperEPL2Grammar())) {s = 317;}

                        else if ( (LA228_7==TIMEPERIOD_SECONDS) ) {s = 318;}

                        else if ( (LA228_7==TIMEPERIOD_SECOND) ) {s = 319;}

                        else if ( (LA228_7==TIMEPERIOD_SEC) ) {s = 320;}

                        else if ( (LA228_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA228_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA228_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA228_7==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA228_7==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA228_7==LBRACK) && (synpred9_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA228_7==QUESTION) && (synpred9_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA228_7==DOT) && (synpred9_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA228_7==STAR) && (synpred9_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA228_7==DIV) && (synpred9_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA228_7==MOD) && (synpred9_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA228_7==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA228_7==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA228_7==LOR) && (synpred9_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA228_7==LT) && (synpred9_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA228_7==GT) && (synpred9_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA228_7==LE) && (synpred9_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA228_7==GE) && (synpred9_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA228_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA228_7==IS) && (synpred9_EsperEPL2Grammar())) {s = 340;}

                        else if ( (LA228_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 341;}

                        else if ( (LA228_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA228_7==BAND) && (synpred9_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA228_7==BOR) && (synpred9_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA228_7==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA228_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA228_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA228_7==ASC) && (synpred9_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA228_7==DESC) && (synpred9_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA228_7==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA228_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA228_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA228_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA228_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA228_7==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA228_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA228_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA228_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA228_7==MIN) && (synpred8_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA228_7==COLON) && (synpred10_EsperEPL2Grammar())) {s = 360;}

                         
                        input.seek(index228_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA228_8 = input.LA(1);

                         
                        int index228_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA228_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA228_8==STAR) && (synpred9_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA228_8==DIV) && (synpred9_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA228_8==MOD) && (synpred9_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA228_8==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA228_8==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA228_8==LOR) && (synpred9_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA228_8==LT) && (synpred9_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA228_8==GT) && (synpred9_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA228_8==LE) && (synpred9_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA228_8==GE) && (synpred9_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA228_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA228_8==IS) && (synpred9_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA228_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA228_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA228_8==BAND) && (synpred9_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA228_8==BOR) && (synpred9_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA228_8==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA228_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA228_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA228_8==ASC) && (synpred9_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA228_8==DESC) && (synpred9_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA228_8==TIMEPERIOD_SECONDS) ) {s = 383;}

                        else if ( (LA228_8==TIMEPERIOD_SECOND) ) {s = 384;}

                        else if ( (LA228_8==TIMEPERIOD_SEC) ) {s = 385;}

                        else if ( (LA228_8==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA228_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA228_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA228_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA228_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA228_8==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA228_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA228_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA228_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA228_8==COLON) && (synpred10_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA228_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA228_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA228_8==MIN) && (synpred8_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA228_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA228_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA228_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 401;}

                        else if ( (LA228_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA228_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 403;}

                        else if ( (LA228_8==LAST) && (synpred12_EsperEPL2Grammar())) {s = 404;}

                         
                        input.seek(index228_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA228_60 = input.LA(1);

                         
                        int index228_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA228_60==DIV) && (synpred11_EsperEPL2Grammar())) {s = 405;}

                        else if ( (LA228_60==COMMA||LA228_60==RPAREN) ) {s = 406;}

                         
                        input.seek(index228_60);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA228_142 = input.LA(1);

                         
                        int index228_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_142);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA228_143 = input.LA(1);

                         
                        int index228_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_143);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA228_144 = input.LA(1);

                         
                        int index228_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_144);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA228_210 = input.LA(1);

                         
                        int index228_210 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_210);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA228_211 = input.LA(1);

                         
                        int index228_211 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_211);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA228_212 = input.LA(1);

                         
                        int index228_212 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_212);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA228_249 = input.LA(1);

                         
                        int index228_249 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_249);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA228_250 = input.LA(1);

                         
                        int index228_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_250);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA228_251 = input.LA(1);

                         
                        int index228_251 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_251);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA228_294 = input.LA(1);

                         
                        int index228_294 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_294);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA228_295 = input.LA(1);

                         
                        int index228_295 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_295);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA228_296 = input.LA(1);

                         
                        int index228_296 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_296);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA228_318 = input.LA(1);

                         
                        int index228_318 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_318);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA228_319 = input.LA(1);

                         
                        int index228_319 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_319);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA228_320 = input.LA(1);

                         
                        int index228_320 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_320);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA228_383 = input.LA(1);

                         
                        int index228_383 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_383);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA228_384 = input.LA(1);

                         
                        int index228_384 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_384);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA228_385 = input.LA(1);

                         
                        int index228_385 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 403;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 392;}

                         
                        input.seek(index228_385);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 228, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA242_eotS =
        "\u01f2\uffff";
    static final String DFA242_eofS =
        "\1\52\4\uffff\1\1\20\uffff\1\1\13\uffff\2\1\1\uffff\2\1\u01cb\uffff";
    static final String DFA242_minS =
        "\1\5\4\uffff\1\6\20\uffff\1\6\13\uffff\2\6\1\uffff\2\6\177\uffff"+
        "\1\u00fb\u012e\uffff\1\u00fe\34\uffff";
    static final String DFA242_maxS =
        "\1\u011a\4\uffff\1\u0119\20\uffff\1\u0119\13\uffff\2\u0119\1\uffff"+
        "\1\u0119\1\u011a\177\uffff\1\u0108\u012e\uffff\1\u0104\34\uffff";
    static final String DFA242_acceptS =
        "\1\uffff\1\1\50\uffff\1\2\u01c7\uffff";
    static final String DFA242_specialS =
        "\u01f2\uffff}>";
    static final String[] DFA242_transitionS = {
            "\1\1\4\52\1\5\3\52\1\1\1\uffff\2\52\11\1\3\uffff\5\52\1\1\1"+
            "\52\1\46\1\42\1\43\1\45\1\uffff\1\52\1\uffff\2\52\1\uffff\1"+
            "\52\2\uffff\1\52\3\1\1\52\1\uffff\3\52\3\uffff\3\1\1\26\4\1"+
            "\1\uffff\4\1\2\uffff\1\1\1\uffff\3\1\6\uffff\3\52\6\uffff\1"+
            "\52\2\uffff\2\52\3\1\1\52\u0090\uffff\1\52\1\1\13\52\2\uffff"+
            "\14\52\1\uffff\1\52\2\uffff\1\52\1\1",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u0090"+
            "\uffff\1\1\1\uffff\13\1\2\52\14\1\1\uffff\1\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u0090"+
            "\uffff\1\1\1\uffff\2\1\1\u00a6\10\1\2\uffff\14\1\1\uffff\1\1"+
            "\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\52\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u0090"+
            "\uffff\1\1\1\uffff\13\1\2\uffff\14\1\1\uffff\1\1\2\uffff\1\1",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\52\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u0090"+
            "\uffff\1\1\1\uffff\13\1\2\uffff\14\1\1\uffff\1\1\2\uffff\1\1",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\52\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u0090"+
            "\uffff\1\1\1\uffff\13\1\2\uffff\14\1\1\uffff\1\1\2\uffff\1\1",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\u01d5\1\52\25\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1"+
            "\1\u0090\uffff\1\1\1\52\13\1\2\uffff\14\1\1\uffff\1\1\2\uffff"+
            "\1\1\1\52",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\52\2\uffff\1\52\10\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\5\uffff\1\52",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA242_eot = DFA.unpackEncodedString(DFA242_eotS);
    static final short[] DFA242_eof = DFA.unpackEncodedString(DFA242_eofS);
    static final char[] DFA242_min = DFA.unpackEncodedStringToUnsignedChars(DFA242_minS);
    static final char[] DFA242_max = DFA.unpackEncodedStringToUnsignedChars(DFA242_maxS);
    static final short[] DFA242_accept = DFA.unpackEncodedString(DFA242_acceptS);
    static final short[] DFA242_special = DFA.unpackEncodedString(DFA242_specialS);
    static final short[][] DFA242_transition;

    static {
        int numStates = DFA242_transitionS.length;
        DFA242_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA242_transition[i] = DFA.unpackEncodedString(DFA242_transitionS[i]);
        }
    }

    class DFA242 extends DFA {

        public DFA242(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 242;
            this.eot = DFA242_eot;
            this.eof = DFA242_eof;
            this.min = DFA242_min;
            this.max = DFA242_max;
            this.accept = DFA242_accept;
            this.special = DFA242_special;
            this.transition = DFA242_transition;
        }
        public String getDescription() {
            return "1521:24: (ipi2= keywordAllowedIdent )?";
        }
    }
 

    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1552 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0004000004000010L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1557 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1575 = new BitSet(new long[]{0x0040020008000010L,0x0000000800000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1581 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1611 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1637 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1641 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x8800100000000000L,0x0004000018A40184L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1701 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x8800100000000000L,0x000400001CA40184L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1761 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1782 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1813 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0000100000000000L,0x0004000018A40184L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1854 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0800100000000000L,0x000400001CA40184L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum1911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum1934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum1945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum1958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum1966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum1986 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0400100000000000L,0x0004000018E40184L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum1992 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0000100000000000L,0x0004000018A40184L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2034 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0C00100000000000L,0x000400001CE40184L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2040 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0800100000000000L,0x000400001CA40184L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2118 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2121 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2127 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2130 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2137 = new BitSet(new long[]{0x0104300000010002L,0x0000001200000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2141 = new BitSet(new long[]{0x0104300000010002L,0x0000000200000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2147 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2150 = new BitSet(new long[]{0x0104300000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2157 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2160 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2163 = new BitSet(new long[]{0x0104200000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2170 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2173 = new BitSet(new long[]{0x0104000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2180 = new BitSet(new long[]{0x0130800080004000L,0x0000020200022000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2183 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2190 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2193 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2196 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x0000000018840004L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onExpr2224 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onExpr2228 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_AS_in_onExpr2232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2236 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2242 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2254 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2257 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2313 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2317 = new BitSet(new long[]{0x0000000000020000L,0x0000000000004000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2338 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2343 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2351 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2401 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2403 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2409 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2411 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2414 = new BitSet(new long[]{0x0100300400010002L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2418 = new BitSet(new long[]{0x0100300000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2424 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2426 = new BitSet(new long[]{0x0100300000000002L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2435 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2437 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2439 = new BitSet(new long[]{0x0100200000000002L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2446 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2448 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2455 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2457 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2515 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2517 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr2521 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr2523 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr2528 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr2530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert2561 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert2566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert2572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2614 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2618 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2623 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2667 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2672 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onSetAssignment2699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2701 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2733 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2774 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr2780 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x6800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2785 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x6800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2790 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x6800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr2799 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr2803 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr2807 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr2822 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr2837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_createWindowColumnList_in_createWindowExpr2839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr2841 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr2858 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr2861 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_createWindowExpr2863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter2950 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003A7BFL,0x0000000000000000L,0x0800100000000000L,0x000400001CA40185L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter2953 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter2955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter2960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr2973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr2975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2983 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr2986 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_createVariableExpr2988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList3031 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createWindowColumnList3034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList3036 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement3066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement3070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3108 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3111 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003A7BFL,0x0000000000000000L,0x0800100000000000L,0x000400001CA40185L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3154 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3182 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3227 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3233 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3241 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_insertIntoColumnList_in_insertIntoExpr3244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoColumnList3278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList3280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_insertIntoColumnList3283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList3285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoColumnList3289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause3324 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause3327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause3331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin3345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin3348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3362 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3365 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin3408 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin3412 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin3416 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin3419 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin3440 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin3454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin3456 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin3458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent3523 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3526 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent3529 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3532 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair3549 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause3574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause3610 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause3616 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause3622 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause3628 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_selectionList_in_selectClause3631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3662 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList3665 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3668 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement3694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement3710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement3715 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement3718 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement3722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector3780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STAR_in_streamSelector3782 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector3785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression3820 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression3824 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression3828 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression3832 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3841 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3846 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression3853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3857 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3863 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression3870 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression3877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression3881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog3944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog3958 = new BitSet(new long[]{0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog3964 = new BitSet(new long[]{0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog3971 = new BitSet(new long[]{0x0000800000000000L,0x0000020000000002L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog3976 = new BitSet(new long[]{0x0000800000000000L,0x0000020000000002L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog3982 = new BitSet(new long[]{0x0000800000000000L,0x0000020000000002L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog3988 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog3994 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4044 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4046 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4051 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4053 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4082 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4084 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4087 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4089 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4114 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4153 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4199 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4203 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4207 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4211 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4215 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval4255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval4257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4283 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration4288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4290 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4323 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested4366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested4370 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000DL});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested4375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested4381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested4387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom4426 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000DL});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom4432 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom4438 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4444 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine4494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4496 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine4499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4501 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem4528 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem4530 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem4532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression4557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression4559 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression4561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression4563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression4596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression4598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression4602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression4604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression4609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression4619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression4624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression4635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression4686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression4688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression4690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression4693 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression4695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression4698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression4751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_in_viewExpression4753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression4757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression4759 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression4761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression4764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr4803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr4806 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_groupByListExpr4808 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr4843 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr4846 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr4848 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement4873 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement4878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement4882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause4920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit4958 = new BitSet(new long[]{0x0030800080004002L,0x0000000000022000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit4973 = new BitSet(new long[]{0x0000000080004002L,0x0000000000020000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit4977 = new BitSet(new long[]{0x0000000080004002L,0x0000000000020000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit4981 = new BitSet(new long[]{0x0000000080004002L,0x0000000000020000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit4985 = new BitSet(new long[]{0x0000000080004002L,0x0000000000020000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5053 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5059 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5115 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_outputLimit5117 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5120 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter5272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter5275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter5279 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter5281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5327 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5333 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit5340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x0000000018840004L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit5346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x0000000018840004L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet5410 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5414 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5418 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5422 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5426 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5431 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet5437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause5467 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_whenClause5470 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause5472 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_whenClause5475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause5488 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_elseClause5491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression5504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression5518 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression5521 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression5524 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression5527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression5538 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_caseExpression5540 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression5542 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression5545 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression5548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression5572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression5583 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression5588 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression5590 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression5622 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression5627 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression5629 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression5661 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000602L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression5666 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression5669 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression5672 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression5676 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000602L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression5691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression5697 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression5700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression5713 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression5726 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression5744 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression5758 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression5760 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression5774 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression5788 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression5818 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression5835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression5841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression5847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression5853 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression5855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression5858 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression5863 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5991 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000001E000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6023 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6027 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6031 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6035 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6059 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000001E000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression6076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression6082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression6088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6094 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression6096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6099 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000001E000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6104 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000001E000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression6200 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6239 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression6245 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression6270 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression6299 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression6333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression6458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression6504 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression6506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression6556 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6558 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression6561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression6563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression6615 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery6679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6704 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr6710 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6712 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr6716 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6718 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression6759 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040004L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression6764 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression6767 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression6771 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040004L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression6785 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180001L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression6790 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression6793 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression6796 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression6800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180001L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression6815 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression6817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression6830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression6835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression6840 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_unaryExpression6843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression6845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression6851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression6863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression6869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression6874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression6879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression6896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression6918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression6940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression6942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr6975 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr6981 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr6984 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr6987 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr6994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr6997 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7005 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr7041 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7048 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7053 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr7060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7064 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7070 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr7077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression7121 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CE4018DL});
    public static final BitSet FOLLOW_expression_in_arrayExpression7124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression7127 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_arrayExpression7129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression7136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc7159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7162 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7166 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7171 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc7183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7186 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7190 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7195 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc7207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7210 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7222 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7227 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc7242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc7259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7262 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7266 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7271 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc7283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7286 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7290 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7295 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc7307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7310 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7314 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7319 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc7331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc7336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc7341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7344 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7349 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7355 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc7368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7371 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7377 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc7390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc7396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7398 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc7413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7416 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc7440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7443 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7446 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc7454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc7466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7469 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7480 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation7502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation7504 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_firstAggregation7509 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_firstAggregation7515 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_firstAggregation7519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation7521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation7547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation7549 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_lastAggregation7554 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_lastAggregation7560 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_lastAggregation7564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation7566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc7593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc7598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc7602 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_maxFunc7605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc7608 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_maxFunc7611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc7614 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_maxFunc7617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc7624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction7643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction7648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction7661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction7663 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction7667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction7669 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction7672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction7676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_funcIdent7706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent7713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent7725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs7743 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs7748 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs7752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs7755 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs7758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList7772 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList7774 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList7777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression7805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression7817 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression7822 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression7824 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression7863 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression7868 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_andExpression_in_orExpression7870 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression7902 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression7907 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression7909 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression7944 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression7948 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression7953 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression7955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression8020 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression8026 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression8034 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression8040 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression8049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList8164 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList8169 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList8175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom8198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix8213 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix8219 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix8221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix8223 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix8229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_guardExpression_in_guardPostFix8231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression8273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression8277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_in_observerExpression8294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression8305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression8308 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression8310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression8313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression8362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_in_guardExpression8364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression8367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardExpression8369 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardExpression8373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardExpression8377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange8391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000100000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange8438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000100000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange8627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression8812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression8814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression8823 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression8834 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression8836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression8839 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression8851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression8896 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression8899 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic8929 = new BitSet(new long[]{0xC03801E80FFC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic8932 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic8934 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic8936 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic8940 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic8943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic8945 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic8950 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic8952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic8956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList9009 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement9038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement9054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement9059 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement9062 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector9112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector9114 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector9117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression9168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression9170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression9179 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression9190 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression9192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression9195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression9207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier9262 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier9281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier9285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy9330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy9365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy9369 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList9411 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList9414 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_expressionList9417 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList9448 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime9477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime9488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime9499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime9510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime9521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime9533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime9544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime9556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime9568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime9573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable9584 = new BitSet(new long[]{0x0600000000000002L,0x0000000007000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable9589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable9593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar9662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand9682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand9695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand9707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand9709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_number_in_frequencyOperand9712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand9716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand9718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand9767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand9771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand9773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand9776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_number_in_rangeOperand9779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand9783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand9785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator9899 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator9903 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator9905 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator9908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator9956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator9960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator9962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator9965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList10012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000DL});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList10017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000DL});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList10023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter10045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter10051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter10056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10072 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty10075 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10103 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic10112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic10116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic10118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic10137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic10151 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10293 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent10305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent10307 = new BitSet(new long[]{0xC03801E807FC4422L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10311 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent10350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent10366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent10373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent10380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent10398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent10405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent10412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent10419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent10426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent10433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent10440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent10447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent10454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent10461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent10468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent10482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent10496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent10503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent10510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent10517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent10524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent10531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent10538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent10545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent10552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent10559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent10566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent10573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent10582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent10589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent10596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent10603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent10610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent10617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent10624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent10631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent10638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent10659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent10668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod10691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_hourPart_in_timePeriod10693 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10696 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10699 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod10708 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10710 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10733 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart10779 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart10783 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_substitution_in_dayPart10785 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart10789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart10793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart10842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart10846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_substitution_in_hourPart10848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart10852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart10856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart10905 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart10909 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_substitution_in_minutePart10911 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart10915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart10919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart10923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart10973 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart10977 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart10979 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart10983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart10987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart10991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart11041 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart11045 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart11047 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number11114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number11131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number11148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number11165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution11186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant11205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant11212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant11225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant11245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant11265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant11287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000018840004L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant11293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000018840004L});
    public static final BitSet FOLLOW_number_in_numberconstant11297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant11326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar6857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar7638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar9049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar9472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar9483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar9494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar9505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar9516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar9528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar9539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar9550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar9563 = new BitSet(new long[]{0x0000000000000002L});

}