  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "EXPRESSIONDECL", "NEWKW", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "ACCESS_AGG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "MERGE_UNM", "MERGE_MAT", "MERGE_UPD", "MERGE_INS", "MERGE_DEL", "NEW_ITEM", "AGG_FILTER_EXPR", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "IDENT", "LCURLY", "RCURLY", "LPAREN", "RPAREN", "GOES", "COMMA", "EQUALS", "DOT", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "NUM_INT", "FOLLOWED_BY", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ATCHAR", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=186;
    public static final int FLOAT_SUFFIX=360;
    public static final int STAR=303;
    public static final int DOT_EXPR=195;
    public static final int NUMERIC_PARAM_LIST=126;
    public static final int MOD=321;
    public static final int ISTREAM=60;
    public static final int LIB_FUNC_CHAIN=194;
    public static final int OUTERJOIN_EXPR=168;
    public static final int CREATE_COL_TYPE_LIST=248;
    public static final int BSR=343;
    public static final int MERGE_INS=267;
    public static final int MONTH_PART=200;
    public static final int LIB_FUNCTION=193;
    public static final int EOF=-1;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int FULL_OUTERJOIN_EXPR=172;
    public static final int MATCHREC_PATTERN_CONCAT=282;
    public static final int INC=336;
    public static final int LNOT=332;
    public static final int RPAREN=296;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=308;
    public static final int BSR_ASSIGN=344;
    public static final int CAST_EXPR=227;
    public static final int MATCHES=116;
    public static final int USING=120;
    public static final int STREAM_EXPR=167;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=313;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=135;
    public static final int LAST_AGGREG=255;
    public static final int GOES=297;
    public static final int REGEXP=9;
    public static final int MATCHED=122;
    public static final int FOLLOWED_BY_EXPR=129;
    public static final int NEWKW=124;
    public static final int FOLLOWED_BY=323;
    public static final int HOUR_PART=203;
    public static final int RBRACK=302;
    public static final int MATCHREC_PATTERN_NESTED=284;
    public static final int MATCH_UNTIL_RANGE_CLOSED=246;
    public static final int GE=317;
    public static final int METHOD_JOIN_EXPR=242;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=134;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=133;
    public static final int MINUS_ASSIGN=337;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=145;
    public static final int NUM_DOUBLE=278;
    public static final int INSERTINTO_STREAM_NAME=215;
    public static final int LCURLY=293;
    public static final int UNARY_MINUS=196;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=213;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=143;
    public static final int WS=352;
    public static final int SUBSELECT_GROUP_EXPR=219;
    public static final int ON_SELECT_INSERT_EXPR=237;
    public static final int YEAR_PART=199;
    public static final int FOLLOWED_BY_ITEM=130;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=327;
    public static final int EXPRCOL=190;
    public static final int SL_COMMENT=353;
    public static final int NULL_TYPE=277;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=244;
    public static final int GT=315;
    public static final int BNOT=333;
    public static final int WHERE_EXPR=154;
    public static final int END=33;
    public static final int LAND=350;
    public static final int INNERJOIN_EXPR=169;
    public static final int NOT_REGEXP=210;
    public static final int MATCH_UNTIL_EXPR=243;
    public static final int EVENT_PROP_EXPR=176;
    public static final int LBRACK=301;
    public static final int MERGE_UPD=266;
    public static final int VIEW_EXPR=151;
    public static final int ANNOTATION=251;
    public static final int LONG_TYPE=272;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=136;
    public static final int MATCHREC_PATTERN=280;
    public static final int ON_MERGE_EXPR=236;
    public static final int ATCHAR=326;
    public static final int TIMEPERIOD_SEC=100;
    public static final int TICKED_STRING_LITERAL=328;
    public static final int ON_SELECT_EXPR=234;
    public static final int MINUTE_PART=204;
    public static final int PATTERN_NOT_EXPR=132;
    public static final int SQL_NE=312;
    public static final int SUM=18;
    public static final int HexDigit=358;
    public static final int UPDATE_EXPR=258;
    public static final int LPAREN=295;
    public static final int IN_SUBSELECT_EXPR=221;
    public static final int AT=86;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=106;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=286;
    public static final int NOT_IN_RANGE=217;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int OFFSET=110;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=205;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=112;
    public static final int IDENT=292;
    public static final int DATABASE_JOIN_EXPR=153;
    public static final int BXOR=311;
    public static final int PLUS=305;
    public static final int CASE2=29;
    public static final int MERGE_MAT=265;
    public static final int TIMEPERIOD_DAY=94;
    public static final int CREATE_SCHEMA_EXPR=260;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=179;
    public static final int CREATE_INDEX_EXPR=228;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int ACCESS_AGG=257;
    public static final int EVAL_NOTEQUALS_EXPR=160;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=245;
    public static final int CREATE_VARIABLE_EXPR=241;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=287;
    public static final int BY=43;
    public static final int RIGHT_OUTERJOIN_EXPR=171;
    public static final int NUMBERSETSTAR=250;
    public static final int LAST_OPERATOR=224;
    public static final int PATTERN_FILTER_EXPR=131;
    public static final int MERGE=121;
    public static final int FOLLOWMAX_END=325;
    public static final int MERGE_UNM=264;
    public static final int EVAL_AND_EXPR=157;
    public static final int LEFT_OUTERJOIN_EXPR=170;
    public static final int EPL_EXPR=279;
    public static final int GROUP_BY_EXPR=173;
    public static final int SET=83;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=177;
    public static final int MINUS=319;
    public static final int SEMI=351;
    public static final int INDEXCOL=191;
    public static final int STAR_ASSIGN=339;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=263;
    public static final int FIRST_AGGREG=254;
    public static final int COLON=307;
    public static final int EVAL_EQUALS_GROUP_EXPR=161;
    public static final int BAND_ASSIGN=349;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=187;
    public static final int NOT_IN_SET=207;
    public static final int VALUE_NULL=108;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=180;
    public static final int SL=345;
    public static final int NOT_IN_SUBSELECT_EXPR=222;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=149;
    public static final int SR=341;
    public static final int RCURLY=294;
    public static final int PLUS_ASSIGN=335;
    public static final int EXISTS_SUBSELECT_EXPR=220;
    public static final int DAY_PART=202;
    public static final int EVENT_FILTER_IN=144;
    public static final int DIV=320;
    public static final int WEEK_PART=201;
    public static final int EXPRESSIONDECL=123;
    public static final int OBJECT_PARAM_ORDERED_EXPR=128;
    public static final int OctalEscape=357;
    public static final int MILLISECOND_PART=206;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=164;
    public static final int LOR=318;
    public static final int CAST=79;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=214;
    public static final int EXPONENT=359;
    public static final int LT=314;
    public static final int PATTERN_INCL_EXPR=152;
    public static final int WHILE=119;
    public static final int ORDER_BY_EXPR=174;
    public static final int BOOL_TYPE=276;
    public static final int NEW_ITEM=269;
    public static final int MOD_ASSIGN=340;
    public static final int ANNOTATION_ARRAY=252;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=223;
    public static final int EQUALS=299;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=334;
    public static final int WINDOW_AGGREG=256;
    public static final int SL_ASSIGN=346;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=285;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=235;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=198;
    public static final int CREATE_COL_TYPE=249;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=162;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=273;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int EVENT_FILTER_BETWEEN=146;
    public static final int ANNOTATION_VALUE=253;
    public static final int SUBSELECT_EXPR=218;
    public static final int CONCAT=192;
    public static final int NUMERIC_PARAM_RANGE=125;
    public static final int CLASS_IDENT=148;
    public static final int MATCHREC_PATTERN_ALTER=283;
    public static final int ON_EXPR=231;
    public static final int CREATE_WINDOW_EXPR=229;
    public static final int PROPERTY_SELECTION_STREAM=138;
    public static final int ON_DELETE_EXPR=233;
    public static final int NUM_LONG=329;
    public static final int ON=41;
    public static final int TIME_PERIOD=197;
    public static final int DOUBLE_TYPE=274;
    public static final int DELETE=81;
    public static final int INT_TYPE=271;
    public static final int MATCHREC_PARTITION=291;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=156;
    public static final int ORDER_ELEMENT_EXPR=175;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=226;
    public static final int UNTIL=85;
    public static final int STRING_TYPE=275;
    public static final int NUM_INT=322;
    public static final int MATCHREC_DEFINE_ITEM=288;
    public static final int ON_SET_EXPR=240;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=262;
    public static final int NUM_FLOAT=330;
    public static final int ON_EXPR_FROM=239;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=355;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=137;
    public static final int WEEKDAY_OPERATOR=225;
    public static final int DEC=338;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=347;
    public static final int NUMERIC_PARAM_FREQUENCY=127;
    public static final int SNAPSHOT=82;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=185;
    public static final int EVENT_FILTER_PARAM=141;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=182;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=232;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int EVENT_FILTER_RANGE=142;
    public static final int ML_COMMENT=354;
    public static final int INDEX=87;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=181;
    public static final int BOR_ASSIGN=348;
    public static final int COMMA=298;
    public static final int WHEN_LIMIT_EXPR=188;
    public static final int IS=42;
    public static final int PARTITION=115;
    public static final int TIMEPERIOD_LIMIT_EXPR=184;
    public static final int SOME=49;
    public static final int EQUAL=331;
    public static final int BOR=304;
    public static final int MATCHREC_MEASURE_ITEM=290;
    public static final int ALL=47;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int EVENT_FILTER_NOT_BETWEEN=147;
    public static final int IN_RANGE=216;
    public static final int DOT=300;
    public static final int MATCHREC_MEASURES=289;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=139;
    public static final int INSERTINTO_EXPR=189;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=155;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=247;
    public static final int MERGE_DEL=268;
    public static final int EVAL_EQUALS_EXPR=159;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=209;
    public static final int EVENT_LIMIT_EXPR=183;
    public static final int NOT_BETWEEN=208;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int EVAL_OR_EXPR=158;
    public static final int ON_SELECT_INSERT_OUTPUT=238;
    public static final int AGG_FILTER_EXPR=270;
    public static final int MEASURES=113;
    public static final int AFTER=117;
    public static final int BAND=310;
    public static final int MATCHREC_PATTERN_ATOM=281;
    public static final int QUOTED_STRING_LITERAL=309;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=306;
    public static final int OBSERVER_EXPR=150;
    public static final int CREATE_SCHEMA_EXPR_QUAL=261;
    public static final int EVENT_FILTER_IDENT=140;
    public static final int EVENT_PROP_MAPPED=178;
    public static final int UnicodeEscape=356;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=211;
    public static final int FOLLOWMAX_BEGIN=324;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int SELECTION_ELEMENT_EXPR=165;
    public static final int CREATE_WINDOW_SELECT_EXPR=230;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=259;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=166;
    public static final int SR_ASSIGN=342;
    public static final int LE=316;
    public static final int DBFROM_CLAUSE=212;
    public static final int EVAL_IDENT=163;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF4=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl2 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression3 = null;
        CommonTree EOF4_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=3;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==ATCHAR) ) {
                    alt1=1;
                }
                else if ( (LA1_0==EXPRESSIONDECL) ) {
                    alt1=2;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1764);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startPatternExpressionRule1768);
            	    expressionDecl2=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionDecl2.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1774);
            patternExpression3=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression3.getTree());
            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1778); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum5 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl6 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression7 = null;
        CommonTree EOF8_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==ATCHAR) ) {
                    alt2=1;
                }
                else if ( (LA2_0==EXPRESSIONDECL) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1793);
            	    annotationEnum5=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum5.getTree());
            	    }
            	    break;
            	case 2 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startEPLExpressionRule1797);
            	    expressionDecl6=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl6.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1803);
            eplExpression7=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF8);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                while ( stream_expressionDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                }
                stream_expressionDecl.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF10=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty9 = null;
        CommonTree EOF10_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1836);
            eventProperty9=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty9.getTree());
            EOF10=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1840); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDecl_return expressionDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDecl_return retval = new EsperEPL2GrammarParser.expressionDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EXPRESSIONDECL11=null;
        Token LCURLY12=null;
        Token RCURLY15=null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl13 = null;
        EsperEPL2GrammarParser.expression_return expression14 = null;
        CommonTree i_tree=null;
        CommonTree EXPRESSIONDECL11_tree=null;
        CommonTree LCURLY12_tree=null;
        CommonTree RCURLY15_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_EXPRESSIONDECL=new RewriteRuleTokenStream(adaptor,"token EXPRESSIONDECL");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionLambdaDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionLambdaDecl");
        try {
            {
            EXPRESSIONDECL11=(Token)match(input,EXPRESSIONDECL,FOLLOW_EXPRESSIONDECL_in_expressionDecl1859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXPRESSIONDECL.add(EXPRESSIONDECL11);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDecl1863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LCURLY12=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_expressionDecl1865); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY12);
            int alt3=2;
            int LA3_0 = input.LA(1);
            if ( (LA3_0==IDENT) ) {
                int LA3_1 = input.LA(2);
                if ( (LA3_1==GOES) ) {
                    alt3=1;
                }
            }
            else if ( (LA3_0==LPAREN) ) {
                int LA3_2 = input.LA(2);
                if ( (LA3_2==IDENT) ) {
                    int LA3_117 = input.LA(3);
                    if ( (LA3_117==RPAREN) ) {
                        int LA3_197 = input.LA(4);
                        if ( (LA3_197==GOES) ) {
                            alt3=1;
                        }
                    }
                    else if ( (LA3_117==COMMA) ) {
                        alt3=1;
                    }
                }
            }
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_expressionDecl1867);
                    expressionLambdaDecl13=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionLambdaDecl.add(expressionLambdaDecl13.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_expressionDecl1870);
            expression14=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression14.getTree());
            RCURLY15=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_expressionDecl1872); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY15);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EXPRESSIONDECL.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_expressionLambdaDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionLambdaDecl.nextTree());
                }
                stream_expressionLambdaDecl.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionLambdaDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionLambdaDecl_return retval = new EsperEPL2GrammarParser.expressionLambdaDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LPAREN16=null;
        Token RPAREN18=null;
        Token GOES19=null;
        EsperEPL2GrammarParser.columnList_return columnList17 = null;
        CommonTree i_tree=null;
        CommonTree LPAREN16_tree=null;
        CommonTree RPAREN18_tree=null;
        CommonTree GOES19_tree=null;
        RewriteRuleTokenStream stream_GOES=new RewriteRuleTokenStream(adaptor,"token GOES");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==IDENT) ) {
                alt4=1;
            }
            else if ( (LA4_0==LPAREN) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);
                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionLambdaDecl1906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    {
                    LPAREN16=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionLambdaDecl1911); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN16);
                    pushFollow(FOLLOW_columnList_in_expressionLambdaDecl1913);
                    columnList17=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList17.getTree());
                    RPAREN18=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionLambdaDecl1915); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN18);
                    }
                    }
                    break;
            }
            GOES19=(Token)match(input,GOES,FOLLOW_GOES_in_expressionLambdaDecl1919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GOES.add(GOES19);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GOES.nextNode(), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal20=null;
        Token char_literal22=null;
        Token char_literal25=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier21 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum23 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum24 = null;
        CommonTree char_literal20_tree=null;
        CommonTree char_literal22_tree=null;
        CommonTree char_literal25_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal20=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationNoEnum1954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(char_literal20);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1956);
            classIdentifier21=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier21.getTree());
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( (LA6_0==LPAREN) ) {
                int LA6_1 = input.LA(2);
                if ( (LA6_1==IDENT) ) {
                    int LA6_14 = input.LA(3);
                    if ( (LA6_14==EQUALS) ) {
                        int LA6_32 = input.LA(4);
                        if ( ((LA6_32>=BOOLEAN_TRUE && LA6_32<=VALUE_NULL)||LA6_32==NUM_DOUBLE||LA6_32==LCURLY||LA6_32==PLUS||(LA6_32>=STRING_LITERAL && LA6_32<=QUOTED_STRING_LITERAL)||LA6_32==MINUS||LA6_32==NUM_INT||LA6_32==ATCHAR||(LA6_32>=NUM_LONG && LA6_32<=NUM_FLOAT)) ) {
                            alt6=1;
                        }
                    }
                }
                else if ( ((LA6_1>=BOOLEAN_TRUE && LA6_1<=VALUE_NULL)||LA6_1==NUM_DOUBLE||LA6_1==LCURLY||LA6_1==RPAREN||LA6_1==PLUS||(LA6_1>=STRING_LITERAL && LA6_1<=QUOTED_STRING_LITERAL)||LA6_1==MINUS||LA6_1==NUM_INT||LA6_1==ATCHAR||(LA6_1>=NUM_LONG && LA6_1<=NUM_FLOAT)) ) {
                    alt6=1;
                }
            }
            switch (alt6) {
                case 1 :
                    {
                    char_literal22=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1960); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal22);
                    int alt5=3;
                    int LA5_0 = input.LA(1);
                    if ( (LA5_0==IDENT) ) {
                        alt5=1;
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==LCURLY||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==NUM_INT||LA5_0==ATCHAR||(LA5_0>=NUM_LONG && LA5_0<=NUM_FLOAT)) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1964);
                            elementValuePairsNoEnum23=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum23.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1968);
                            elementValueNoEnum24=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum24.getTree());
                            }
                            break;
                    }
                    char_literal25=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal25);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal26=null;
        Token char_literal28=null;
        Token char_literal31=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier27 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum29 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;
        CommonTree char_literal26_tree=null;
        CommonTree char_literal28_tree=null;
        CommonTree char_literal31_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal26=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_annotationEnum2014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(char_literal26);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum2016);
            classIdentifier27=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier27.getTree());
            int alt8=2;
            int LA8_0 = input.LA(1);
            if ( (LA8_0==LPAREN) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    {
                    char_literal28=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum2020); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal28);
                    int alt7=3;
                    int LA7_0 = input.LA(1);
                    if ( (LA7_0==IDENT) ) {
                        int LA7_1 = input.LA(2);
                        if ( (LA7_1==EQUALS) ) {
                            alt7=1;
                        }
                        else if ( (LA7_1==RPAREN||LA7_1==DOT) ) {
                            alt7=2;
                        }
                    }
                    else if ( ((LA7_0>=BOOLEAN_TRUE && LA7_0<=VALUE_NULL)||LA7_0==NUM_DOUBLE||LA7_0==LCURLY||LA7_0==PLUS||(LA7_0>=STRING_LITERAL && LA7_0<=QUOTED_STRING_LITERAL)||LA7_0==MINUS||LA7_0==NUM_INT||LA7_0==ATCHAR||(LA7_0>=TICKED_STRING_LITERAL && LA7_0<=NUM_FLOAT)) ) {
                        alt7=2;
                    }
                    switch (alt7) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum2024);
                            elementValuePairsEnum29=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum29.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum2028);
                            elementValueEnum30=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());
                            }
                            break;
                    }
                    char_literal31=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum2033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal31);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA33=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum32 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum34 = null;
        CommonTree COMMA33_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2074);
            elementValuePairNoEnum32=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum32.getTree());
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);
                if ( (LA9_0==COMMA) ) {
                    alt9=1;
                }
                switch (alt9) {
            	case 1 :
            	    {
            	    COMMA33=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum2077); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2080);
            	    elementValuePairNoEnum34=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum34.getTree());
            	    }
            	    break;
            	default :
            	    break loop9;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA36=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum35 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum37 = null;
        CommonTree COMMA36_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2101);
            elementValuePairEnum35=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum35.getTree());
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);
                if ( (LA10_0==COMMA) ) {
                    alt10=1;
                }
                switch (alt10) {
            	case 1 :
            	    {
            	    COMMA36=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum2104); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2107);
            	    elementValuePairEnum37=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum37.getTree());
            	    }
            	    break;
            	default :
            	    break loop10;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal38=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;
        CommonTree i_tree=null;
        CommonTree char_literal38_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum2130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal38=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum2132); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal38);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2134);
            elementValueNoEnum39=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal40=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum41 = null;
        CommonTree i_tree=null;
        CommonTree char_literal40_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal40=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal40);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2175);
            elementValueEnum41=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum41.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum42 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum43 = null;
        EsperEPL2GrammarParser.constant_return constant44 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt11=3;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt11=1;
                }
                break;
            case LCURLY:
                {
                alt11=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt11=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);
                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2206);
                    annotationEnum42=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum42.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2217);
                    elementValueArrayNoEnum43=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum43.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2230);
                    constant44=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant44.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum45 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum46 = null;
        EsperEPL2GrammarParser.constant_return constant47 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier48 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt12=4;
            switch ( input.LA(1) ) {
            case ATCHAR:
                {
                alt12=1;
                }
                break;
            case LCURLY:
                {
                alt12=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt12=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt12=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);
                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2253);
                    annotationEnum45=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum45.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2264);
                    elementValueArrayEnum46=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum46.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2277);
                    constant47=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant47.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2285);
                    classIdentifier48=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier48.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal49=null;
        Token char_literal51=null;
        Token char_literal53=null;
        Token char_literal54=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum50 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum52 = null;
        CommonTree char_literal49_tree=null;
        CommonTree char_literal51_tree=null;
        CommonTree char_literal53_tree=null;
        CommonTree char_literal54_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal49=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal49);
            int alt14=2;
            int LA14_0 = input.LA(1);
            if ( ((LA14_0>=BOOLEAN_TRUE && LA14_0<=VALUE_NULL)||LA14_0==NUM_DOUBLE||LA14_0==LCURLY||LA14_0==PLUS||(LA14_0>=STRING_LITERAL && LA14_0<=QUOTED_STRING_LITERAL)||LA14_0==MINUS||LA14_0==NUM_INT||LA14_0==ATCHAR||(LA14_0>=NUM_LONG && LA14_0<=NUM_FLOAT)) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2308);
                    elementValueNoEnum50=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum50.getTree());
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);
                        if ( (LA13_0==COMMA) ) {
                            int LA13_1 = input.LA(2);
                            if ( ((LA13_1>=BOOLEAN_TRUE && LA13_1<=VALUE_NULL)||LA13_1==NUM_DOUBLE||LA13_1==LCURLY||LA13_1==PLUS||(LA13_1>=STRING_LITERAL && LA13_1<=QUOTED_STRING_LITERAL)||LA13_1==MINUS||LA13_1==NUM_INT||LA13_1==ATCHAR||(LA13_1>=NUM_LONG && LA13_1<=NUM_FLOAT)) ) {
                                alt13=1;
                            }
                        }
                        switch (alt13) {
                    	case 1 :
                    	    {
                    	    char_literal51=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2311); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal51);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2313);
                    	    elementValueNoEnum52=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum52.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop13;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt15=2;
            int LA15_0 = input.LA(1);
            if ( (LA15_0==COMMA) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    {
                    char_literal53=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal53);
                    }
                    break;
            }
            char_literal54=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal54);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal55=null;
        Token char_literal57=null;
        Token char_literal59=null;
        Token char_literal60=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum56 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum58 = null;
        CommonTree char_literal55_tree=null;
        CommonTree char_literal57_tree=null;
        CommonTree char_literal59_tree=null;
        CommonTree char_literal60_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal55=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal55);
            int alt17=2;
            int LA17_0 = input.LA(1);
            if ( ((LA17_0>=BOOLEAN_TRUE && LA17_0<=VALUE_NULL)||LA17_0==NUM_DOUBLE||(LA17_0>=IDENT && LA17_0<=LCURLY)||LA17_0==PLUS||(LA17_0>=STRING_LITERAL && LA17_0<=QUOTED_STRING_LITERAL)||LA17_0==MINUS||LA17_0==NUM_INT||LA17_0==ATCHAR||(LA17_0>=TICKED_STRING_LITERAL && LA17_0<=NUM_FLOAT)) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2356);
                    elementValueEnum56=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum56.getTree());
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);
                        if ( (LA16_0==COMMA) ) {
                            int LA16_1 = input.LA(2);
                            if ( ((LA16_1>=BOOLEAN_TRUE && LA16_1<=VALUE_NULL)||LA16_1==NUM_DOUBLE||(LA16_1>=IDENT && LA16_1<=LCURLY)||LA16_1==PLUS||(LA16_1>=STRING_LITERAL && LA16_1<=QUOTED_STRING_LITERAL)||LA16_1==MINUS||LA16_1==NUM_INT||LA16_1==ATCHAR||(LA16_1>=TICKED_STRING_LITERAL && LA16_1<=NUM_FLOAT)) ) {
                                alt16=1;
                            }
                        }
                        switch (alt16) {
                    	case 1 :
                    	    {
                    	    char_literal57=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2359); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal57);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2361);
                    	    elementValueEnum58=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum58.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop16;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt18=2;
            int LA18_0 = input.LA(1);
            if ( (LA18_0==COMMA) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    {
                    char_literal59=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2368); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal59);
                    }
                    break;
            }
            char_literal60=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal60);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr61 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr62 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr63 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr64 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr65 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr66 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr67 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr68 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt19=7;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt19=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt19=2;
                    }
                    break;
                case INDEX:
                    {
                    alt19=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt19=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt19=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt19=6;
                }
                break;
            case UPDATE:
                {
                alt19=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);
                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2405);
                    selectExpr61=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr61.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2410);
                    createWindowExpr62=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr62.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2415);
                    createIndexExpr63=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr63.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2420);
                    createVariableExpr64=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr64.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2425);
                    createSchemaExpr65=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr65.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2430);
                    onExpr66=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr66.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2435);
                    updateExpr67=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr67.getTree());
                    }
                    break;
            }
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( (LA20_0==FOR) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2438);
                    forExpr68=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr68.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT69=null;
        Token SELECT71=null;
        Token FROM73=null;
        Token WHERE76=null;
        Token GROUP78=null;
        Token BY79=null;
        Token HAVING81=null;
        Token OUTPUT83=null;
        Token ORDER85=null;
        Token BY86=null;
        Token ROW_LIMIT_EXPR88=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr70 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause72 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause74 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog75 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause77 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr80 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause82 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit84 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr87 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit89 = null;
        CommonTree INSERT69_tree=null;
        CommonTree SELECT71_tree=null;
        CommonTree FROM73_tree=null;
        CommonTree WHERE76_tree=null;
        CommonTree GROUP78_tree=null;
        CommonTree BY79_tree=null;
        CommonTree HAVING81_tree=null;
        CommonTree OUTPUT83_tree=null;
        CommonTree ORDER85_tree=null;
        CommonTree BY86_tree=null;
        CommonTree ROW_LIMIT_EXPR88_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==INSERT) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    INSERT69=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2452); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2455);
                    insertIntoExpr70=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr70.getTree());
                    }
                    break;
            }
            SELECT71=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2461); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2464);
            selectClause72=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause72.getTree());
            FROM73=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2468); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2471);
            fromClause74=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause74.getTree());
            int alt22=2;
            int LA22_0 = input.LA(1);
            if ( (LA22_0==MATCH_RECOGNIZE) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2475);
                    matchRecog75=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog75.getTree());
                    }
                    break;
            }
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==WHERE) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    WHERE76=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2481); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2484);
                    whereClause77=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause77.getTree());
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==GROUP) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    GROUP78=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2491); if (state.failed) return retval;
                    BY79=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2494); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2497);
                    groupByListExpr80=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr80.getTree());
                    }
                    break;
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==HAVING) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    HAVING81=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2504); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2507);
                    havingClause82=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause82.getTree());
                    }
                    break;
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==OUTPUT) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    OUTPUT83=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2514); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2517);
                    outputLimit84=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit84.getTree());
                    }
                    break;
            }
            int alt27=2;
            int LA27_0 = input.LA(1);
            if ( (LA27_0==ORDER) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    {
                    ORDER85=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2524); if (state.failed) return retval;
                    BY86=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2527); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2530);
                    orderByListExpr87=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr87.getTree());
                    }
                    break;
            }
            int alt28=2;
            int LA28_0 = input.LA(1);
            if ( (LA28_0==ROW_LIMIT_EXPR) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR88=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2537); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2540);
                    rowLimit89=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit89.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON90=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr91 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr92 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr93 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr94 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert95 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr96 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr97 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr98 = null;
        CommonTree ON90_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON90=(Token)match(input,ON,FOLLOW_ON_in_onExpr2555); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON90);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2557);
            onStreamExpr91=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr91.getTree());
            int alt32=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt32=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt32=2;
                }
                break;
            case SET:
                {
                alt32=3;
                }
                break;
            case UPDATE:
                {
                alt32=4;
                }
                break;
            case MERGE:
                {
                alt32=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);
                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2562);
                    onDeleteExpr92=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr92.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2566);
                    onSelectExpr93=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr93.getTree());
                    int alt31=2;
                    int LA31_0 = input.LA(1);
                    if ( (LA31_0==INSERT) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            {
                            int cnt29=0;
                            loop29:
                            do {
                                int alt29=2;
                                int LA29_0 = input.LA(1);
                                if ( (LA29_0==INSERT) ) {
                                    alt29=1;
                                }
                                switch (alt29) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2569);
                            	    onSelectInsertExpr94=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr94.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt29 >= 1 ) break loop29;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(29, input);
                                        throw eee;
                                }
                                cnt29++;
                            } while (true);
                            int alt30=2;
                            int LA30_0 = input.LA(1);
                            if ( (LA30_0==OUTPUT) ) {
                                alt30=1;
                            }
                            switch (alt30) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2572);
                                    outputClauseInsert95=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert95.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2579);
                    onSetExpr96=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr96.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2583);
                    onUpdateExpr97=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr97.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2587);
                    onMergeExpr98=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr98.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS101=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression99 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression100 = null;
        CommonTree i_tree=null;
        CommonTree AS101_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt33=2;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==IDENT||LA33_0==TICKED_STRING_LITERAL) ) {
                alt33=1;
            }
            else if ( (LA33_0==PATTERN) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);
                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2632);
                    eventFilterExpression99=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression99.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2636);
                    patternInclusionExpression100=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression100.getTree());
                    }
                    break;
            }
            int alt34=3;
            int LA34_0 = input.LA(1);
            if ( (LA34_0==AS) ) {
                alt34=1;
            }
            else if ( (LA34_0==IDENT) ) {
                alt34=2;
            }
            switch (alt34) {
                case 1 :
                    {
                    AS101=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2640); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS101);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2644); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE102=null;
        Token ISTREAM103=null;
        Token AS105=null;
        Token SET106=null;
        Token COMMA108=null;
        Token WHERE110=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier104 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment107 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment109 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause111 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE102_tree=null;
        CommonTree ISTREAM103_tree=null;
        CommonTree AS105_tree=null;
        CommonTree SET106_tree=null;
        CommonTree COMMA108_tree=null;
        CommonTree WHERE110_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE102=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2681); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE102);
            ISTREAM103=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2683); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM103);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2685);
            classIdentifier104=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier104.getTree());
            int alt35=3;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==AS) ) {
                alt35=1;
            }
            else if ( (LA35_0==IDENT) ) {
                alt35=2;
            }
            switch (alt35) {
                case 1 :
                    {
                    AS105=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2688); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS105);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2692); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET106=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET106);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2706);
            onSetAssignment107=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment107.getTree());
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);
                if ( (LA36_0==COMMA) ) {
                    alt36=1;
                }
                switch (alt36) {
            	case 1 :
            	    {
            	    COMMA108=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2709); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA108);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2711);
            	    onSetAssignment109=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment109.getTree());
            	    }
            	    break;
            	default :
            	    break loop36;
                }
            } while (true);
            int alt37=2;
            int LA37_0 = input.LA(1);
            if ( (LA37_0==WHERE) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    {
                    WHERE110=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE110);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2721);
                    whereClause111=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause111.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE112=null;
        Token INTO113=null;
        Token AS114=null;
        Token WHERE115=null;
        EsperEPL2GrammarParser.whereClause_return whereClause116 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem117 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE112_tree=null;
        CommonTree INTO113_tree=null;
        CommonTree AS114_tree=null;
        CommonTree WHERE115_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE112=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr2756); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE112);
            int alt38=2;
            int LA38_0 = input.LA(1);
            if ( (LA38_0==INTO) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    {
                    INTO113=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr2758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO113);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt39=3;
            int LA39_0 = input.LA(1);
            if ( (LA39_0==AS) ) {
                alt39=1;
            }
            else if ( (LA39_0==IDENT) ) {
                alt39=2;
            }
            switch (alt39) {
                case 1 :
                    {
                    AS114=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr2766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS114);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2770); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2776); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==WHERE) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    {
                    WHERE115=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr2783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE115);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr2785);
                    whereClause116=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause116.getTree());
                    }
                    break;
            }
            int cnt41=0;
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);
                if ( (LA41_0==WHEN) ) {
                    alt41=1;
                }
                switch (alt41) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr2793);
            	    mergeItem117=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem117.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        throw eee;
                }
                cnt41++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched118 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched119 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt42=2;
            int LA42_0 = input.LA(1);
            if ( (LA42_0==WHEN) ) {
                int LA42_1 = input.LA(2);
                if ( (LA42_1==MATCHED) ) {
                    alt42=1;
                }
                else if ( (LA42_1==NOT_EXPR) ) {
                    alt42=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);
                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem2827);
                    mergeMatched118=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched118.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem2831);
                    mergeUnmatched119=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched119.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN120=null;
        Token MATCHED121=null;
        Token AND_EXPR122=null;
        EsperEPL2GrammarParser.expression_return expression123 = null;
        EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem124 = null;
        CommonTree WHEN120_tree=null;
        CommonTree MATCHED121_tree=null;
        CommonTree AND_EXPR122_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeMatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatchedItem");
        try {
            {
            WHEN120=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched2844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN120);
            MATCHED121=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched2846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED121);
            int alt43=2;
            int LA43_0 = input.LA(1);
            if ( (LA43_0==AND_EXPR) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    {
                    AND_EXPR122=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched2849); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR122);
                    pushFollow(FOLLOW_expression_in_mergeMatched2851);
                    expression123=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression123.getTree());
                    }
                    break;
            }
            int cnt44=0;
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);
                if ( (LA44_0==THEN) ) {
                    alt44=1;
                }
                switch (alt44) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatchedItem_in_mergeMatched2855);
            	    mergeMatchedItem124=mergeMatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatchedItem.add(mergeMatchedItem124.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt44 >= 1 ) break loop44;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(44, input);
                        throw eee;
                }
                cnt44++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_MAT, "MERGE_MAT"), root_1);
                if ( !(stream_mergeMatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeMatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatchedItem.nextTree());
                }
                stream_mergeMatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatchedItem_return retval = new EsperEPL2GrammarParser.mergeMatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token d=null;
        Token THEN125=null;
        Token SET126=null;
        Token COMMA128=null;
        Token WHERE130=null;
        Token WHERE132=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment127 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment129 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause131 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause133 = null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert134 = null;
        CommonTree u_tree=null;
        CommonTree d_tree=null;
        CommonTree THEN125_tree=null;
        CommonTree SET126_tree=null;
        CommonTree COMMA128_tree=null;
        CommonTree WHERE130_tree=null;
        CommonTree WHERE132_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeInsert=new RewriteRuleSubtreeStream(adaptor,"rule mergeInsert");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            THEN125=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatchedItem2881); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN125);
            int alt48=3;
            switch ( input.LA(1) ) {
            case UPDATE:
                {
                alt48=1;
                }
                break;
            case DELETE:
                {
                alt48=2;
                }
                break;
            case INSERT:
                {
                alt48=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);
                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    {
                    {
                    u=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatchedItem2896); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(u);
                    SET126=(Token)match(input,SET,FOLLOW_SET_in_mergeMatchedItem2898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET126);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem2900);
                    onSetAssignment127=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment127.getTree());
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);
                        if ( (LA45_0==COMMA) ) {
                            alt45=1;
                        }
                        switch (alt45) {
                    	case 1 :
                    	    {
                    	    COMMA128=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatchedItem2903); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA128);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem2905);
                    	    onSetAssignment129=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment129.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop45;
                        }
                    } while (true);
                    }
                    int alt46=2;
                    int LA46_0 = input.LA(1);
                    if ( (LA46_0==WHERE) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            {
                            WHERE130=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem2911); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE130);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem2913);
                            whereClause131=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause131.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatchedItem2925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    int alt47=2;
                    int LA47_0 = input.LA(1);
                    if ( (LA47_0==WHERE) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            {
                            WHERE132=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem2928); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE132);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem2930);
                            whereClause133=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause133.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_mergeInsert_in_mergeMatchedItem2941);
                    mergeInsert134=mergeInsert();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mergeInsert.add(mergeInsert134.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_DEL, "MERGE_DEL"), root_1);
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_1, (CommonTree)adaptor.create(INT_TYPE, "dummy"));
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (u != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_mergeInsert.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN135=null;
        Token NOT_EXPR136=null;
        Token MATCHED137=null;
        Token AND_EXPR138=null;
        EsperEPL2GrammarParser.expression_return expression139 = null;
        EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem140 = null;
        CommonTree WHEN135_tree=null;
        CommonTree NOT_EXPR136_tree=null;
        CommonTree MATCHED137_tree=null;
        CommonTree AND_EXPR138_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeUnmatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatchedItem");
        try {
            {
            WHEN135=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched2998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN135);
            NOT_EXPR136=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched3000); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR136);
            MATCHED137=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched3002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED137);
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==AND_EXPR) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    {
                    AND_EXPR138=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched3005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR138);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched3007);
                    expression139=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression139.getTree());
                    }
                    break;
            }
            int cnt50=0;
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);
                if ( (LA50_0==THEN) ) {
                    alt50=1;
                }
                switch (alt50) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3011);
            	    mergeUnmatchedItem140=mergeUnmatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatchedItem.add(mergeUnmatchedItem140.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt50 >= 1 ) break loop50;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(50, input);
                        throw eee;
                }
                cnt50++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UNM, "MERGE_UNM"), root_1);
                if ( !(stream_mergeUnmatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeUnmatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatchedItem.nextTree());
                }
                stream_mergeUnmatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatchedItem_return retval = new EsperEPL2GrammarParser.mergeUnmatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token THEN141=null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert142 = null;
        CommonTree THEN141_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            THEN141=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatchedItem3038); if (state.failed) return retval;
            pushFollow(FOLLOW_mergeInsert_in_mergeUnmatchedItem3041);
            mergeInsert142=mergeInsert();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeInsert142.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeInsert_return mergeInsert() throws RecognitionException {
        EsperEPL2GrammarParser.mergeInsert_return retval = new EsperEPL2GrammarParser.mergeInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT143=null;
        Token INTO144=null;
        Token LPAREN146=null;
        Token RPAREN148=null;
        Token SELECT149=null;
        Token WHERE151=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier145 = null;
        EsperEPL2GrammarParser.columnList_return columnList147 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList150 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause152 = null;
        CommonTree INSERT143_tree=null;
        CommonTree INTO144_tree=null;
        CommonTree LPAREN146_tree=null;
        CommonTree RPAREN148_tree=null;
        CommonTree SELECT149_tree=null;
        CommonTree WHERE151_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            INSERT143=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeInsert3056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT143);
            int alt51=2;
            int LA51_0 = input.LA(1);
            if ( (LA51_0==INTO) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    INTO144=(Token)match(input,INTO,FOLLOW_INTO_in_mergeInsert3059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO144);
                    pushFollow(FOLLOW_classIdentifier_in_mergeInsert3061);
                    classIdentifier145=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier145.getTree());
                    }
                    break;
            }
            int alt52=2;
            int LA52_0 = input.LA(1);
            if ( (LA52_0==LPAREN) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    {
                    LPAREN146=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeInsert3066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN146);
                    pushFollow(FOLLOW_columnList_in_mergeInsert3068);
                    columnList147=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList147.getTree());
                    RPAREN148=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeInsert3070); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN148);
                    }
                    break;
            }
            SELECT149=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeInsert3074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT149);
            pushFollow(FOLLOW_selectionList_in_mergeInsert3076);
            selectionList150=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList150.getTree());
            int alt53=2;
            int LA53_0 = input.LA(1);
            if ( (LA53_0==WHERE) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    {
                    WHERE151=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeInsert3079); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE151);
                    pushFollow(FOLLOW_whereClause_in_mergeInsert3081);
                    whereClause152=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause152.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT153=null;
        Token SELECT155=null;
        Token DISTINCT156=null;
        Token WHERE159=null;
        Token GROUP161=null;
        Token BY162=null;
        Token HAVING164=null;
        Token ORDER166=null;
        Token BY167=null;
        Token ROW_LIMIT_EXPR169=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr154 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList157 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom158 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause160 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr163 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause165 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr168 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit170 = null;
        CommonTree INSERT153_tree=null;
        CommonTree SELECT155_tree=null;
        CommonTree DISTINCT156_tree=null;
        CommonTree WHERE159_tree=null;
        CommonTree GROUP161_tree=null;
        CommonTree BY162_tree=null;
        CommonTree HAVING164_tree=null;
        CommonTree ORDER166_tree=null;
        CommonTree BY167_tree=null;
        CommonTree ROW_LIMIT_EXPR169_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt54=2;
            int LA54_0 = input.LA(1);
            if ( (LA54_0==INSERT) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    {
                    INSERT153=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr3127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT153);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr3129);
                    insertIntoExpr154=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr154.getTree());
                    }
                    break;
            }
            SELECT155=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr3135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT155);
            int alt55=2;
            int LA55_0 = input.LA(1);
            if ( (LA55_0==DISTINCT) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    {
                    DISTINCT156=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr3137); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT156);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr3140);
            selectionList157=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList157.getTree());
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==FROM) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr3144);
                    onExprFrom158=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom158.getTree());
                    }
                    break;
            }
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==WHERE) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    WHERE159=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr3150); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE159);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr3152);
                    whereClause160=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause160.getTree());
                    }
                    break;
            }
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==GROUP) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    GROUP161=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr3161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP161);
                    BY162=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY162);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr3165);
                    groupByListExpr163=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr163.getTree());
                    }
                    break;
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==HAVING) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    HAVING164=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr3172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING164);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr3174);
                    havingClause165=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause165.getTree());
                    }
                    break;
            }
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==ORDER) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    ORDER166=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr3181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER166);
                    BY167=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3183); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY167);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr3185);
                    orderByListExpr168=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr168.getTree());
                    }
                    break;
            }
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==ROW_LIMIT_EXPR) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR169=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3192); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR169);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr3194);
                    rowLimit170=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit170.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE171=null;
        Token AS172=null;
        Token SET173=null;
        Token COMMA175=null;
        Token WHERE177=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment174 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment176 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause178 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE171_tree=null;
        CommonTree AS172_tree=null;
        CommonTree SET173_tree=null;
        CommonTree COMMA175_tree=null;
        CommonTree WHERE177_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE171=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr3254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE171);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3261); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt62=3;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==AS) ) {
                alt62=1;
            }
            else if ( (LA62_0==IDENT) ) {
                alt62=2;
            }
            switch (alt62) {
                case 1 :
                    {
                    AS172=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr3264); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS172);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3268); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3274); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET173=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET173);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3282);
            onSetAssignment174=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment174.getTree());
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);
                if ( (LA63_0==COMMA) ) {
                    alt63=1;
                }
                switch (alt63) {
            	case 1 :
            	    {
            	    COMMA175=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3285); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA175);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3287);
            	    onSetAssignment176=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment176.getTree());
            	    }
            	    break;
            	default :
            	    break loop63;
                }
            } while (true);
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==WHERE) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    WHERE177=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3294); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE177);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3296);
                    whereClause178=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause178.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT179=null;
        Token SELECT181=null;
        Token WHERE183=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr180 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList182 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause184 = null;
        CommonTree INSERT179_tree=null;
        CommonTree SELECT181_tree=null;
        CommonTree WHERE183_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT179=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3347); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT179);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3349);
            insertIntoExpr180=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr180.getTree());
            SELECT181=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT181);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3355);
            selectionList182=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList182.getTree());
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==WHERE) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    WHERE183=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE183);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3362);
                    whereClause184=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause184.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT185=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT185_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT185=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3393); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT185);
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==FIRST) ) {
                alt66=1;
            }
            else if ( (LA66_0==ALL) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);
                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3398); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE186=null;
        Token WHERE188=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom187 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause189 = null;
        CommonTree DELETE186_tree=null;
        CommonTree WHERE188_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE186=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE186);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3450);
            onExprFrom187=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom187.getTree());
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==WHERE) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    WHERE188=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE188);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3457);
                    whereClause189=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause189.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET190=null;
        Token COMMA192=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment191 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment193 = null;
        CommonTree SET190_tree=null;
        CommonTree COMMA192_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET190=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET190);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3499);
            onSetAssignment191=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment191.getTree());
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);
                if ( (LA68_0==COMMA) ) {
                    alt68=1;
                }
                switch (alt68) {
            	case 1 :
            	    {
            	    COMMA192=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3502); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA192);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3504);
            	    onSetAssignment193=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment193.getTree());
            	    }
            	    break;
            	default :
            	    break loop68;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS195=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty194 = null;
        EsperEPL2GrammarParser.expression_return expression196 = null;
        CommonTree EQUALS195_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3529);
            eventProperty194=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty194.getTree());
            EQUALS195=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS195);
            pushFollow(FOLLOW_expression_in_onSetAssignment3533);
            expression196=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression196.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM197=null;
        Token AS198=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM197_tree=null;
        CommonTree AS198_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM197=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3558); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM197);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt69=3;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==AS) ) {
                alt69=1;
            }
            else if ( (LA69_0==IDENT) ) {
                alt69=2;
            }
            switch (alt69) {
                case 1 :
                    {
                    AS198=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS198);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE199=null;
        Token WINDOW200=null;
        Token DOT201=null;
        Token DOT203=null;
        Token AS205=null;
        Token LPAREN207=null;
        Token RPAREN209=null;
        Token WHERE210=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression202 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression204 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter206 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList208 = null;
        EsperEPL2GrammarParser.expression_return expression211 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE199_tree=null;
        CommonTree WINDOW200_tree=null;
        CommonTree DOT201_tree=null;
        CommonTree DOT203_tree=null;
        CommonTree AS205_tree=null;
        CommonTree LPAREN207_tree=null;
        CommonTree RPAREN209_tree=null;
        CommonTree WHERE210_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE199=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE199);
            WINDOW200=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW200);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3609); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==DOT) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    DOT201=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3612); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT201);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3614);
                    viewExpression202=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression202.getTree());
                    loop70:
                    do {
                        int alt70=2;
                        int LA70_0 = input.LA(1);
                        if ( (LA70_0==DOT) ) {
                            alt70=1;
                        }
                        switch (alt70) {
                    	case 1 :
                    	    {
                    	    DOT203=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3617); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT203);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3619);
                    	    viewExpression204=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression204.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop70;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt72=3;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==RETAINUNION) ) {
                alt72=1;
            }
            else if ( (LA72_0==RETAININTERSECTION) ) {
                alt72=2;
            }
            switch (alt72) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==AS) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    AS205=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS205);
                    }
                    break;
            }
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==SELECT||LA74_0==IDENT||LA74_0==TICKED_STRING_LITERAL) ) {
                alt74=1;
            }
            else if ( (LA74_0==LPAREN) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);
                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3651);
                    createWindowExprModelAfter206=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter206.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN207=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3666); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN207);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3668);
                    createColumnList208=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList208.getTree());
                    RPAREN209=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3670); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN209);
                    }
                    break;
            }
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==INSERT) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt75=2;
                    int LA75_0 = input.LA(1);
                    if ( (LA75_0==WHERE) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            {
                            WHERE210=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3690); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE210);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3692);
                            expression211=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression211.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT212=null;
        Token FROM214=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList213 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier215 = null;
        CommonTree SELECT212_tree=null;
        CommonTree FROM214_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt77=2;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==SELECT) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    SELECT212=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3779); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3782);
                    createSelectionList213=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList213.getTree());
                    FROM214=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3784); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3789);
            classIdentifier215=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier215.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE216=null;
        Token INDEX217=null;
        Token ON218=null;
        Token LPAREN219=null;
        Token RPAREN221=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList220 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE216_tree=null;
        CommonTree INDEX217_tree=null;
        CommonTree ON218_tree=null;
        CommonTree LPAREN219_tree=null;
        CommonTree RPAREN221_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE216=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3802); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE216);
            INDEX217=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX217);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON218=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON218);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN219=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN219);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr3818);
            createIndexColumnList220=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList220.getTree());
            RPAREN221=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN221);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA223=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn222 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn224 = null;
        CommonTree COMMA223_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3849);
            createIndexColumn222=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn222.getTree());
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);
                if ( (LA78_0==COMMA) ) {
                    alt78=1;
                }
                switch (alt78) {
            	case 1 :
            	    {
            	    COMMA223=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList3852); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA223);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3854);
            	    createIndexColumn224=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn224.getTree());
            	    }
            	    break;
            	default :
            	    break loop78;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT225=null;
        Token IDENT226=null;
        CommonTree IDENT225_tree=null;
        CommonTree IDENT226_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT225=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn3881); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT225);
            int alt79=2;
            int LA79_0 = input.LA(1);
            if ( (LA79_0==IDENT) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    {
                    IDENT226=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn3883); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT226);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token CREATE227=null;
        Token VARIABLE228=null;
        Token EQUALS230=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier229 = null;
        EsperEPL2GrammarParser.expression_return expression231 = null;
        CommonTree n_tree=null;
        CommonTree CREATE227_tree=null;
        CommonTree VARIABLE228_tree=null;
        CommonTree EQUALS230_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE227=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3908); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE227);
            VARIABLE228=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE228);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3912);
            classIdentifier229=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier229.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==EQUALS) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    EQUALS230=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3919); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS230);
                    pushFollow(FOLLOW_expression_in_createVariableExpr3921);
                    expression231=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression231.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA233=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement232 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement234 = null;
        CommonTree COMMA233_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3963);
            createColumnListElement232=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement232.getTree());
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);
                if ( (LA81_0==COMMA) ) {
                    alt81=1;
                }
                switch (alt81) {
            	case 1 :
            	    {
            	    COMMA233=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3966); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA233);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3968);
            	    createColumnListElement234=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement234.getTree());
            	    }
            	    break;
            	default :
            	    break loop81;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK237=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy235 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier236 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK237_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement3996);
            classIdentifierNonGreedy235=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy235.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3999);
            classIdentifier236=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier236.getTree());
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==LBRACK) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement4004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK237=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement4006); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK237);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA239=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement238 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement240 = null;
        CommonTree COMMA239_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4049);
            createSelectionListElement238=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement238.getTree());
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);
                if ( (LA83_0==COMMA) ) {
                    alt83=1;
                }
                switch (alt83) {
            	case 1 :
            	    {
            	    COMMA239=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList4052); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA239);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4054);
            	    createSelectionListElement240=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement240.getTree());
            	    }
            	    break;
            	default :
            	    break loop83;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS242=null;
        Token AS244=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty241 = null;
        EsperEPL2GrammarParser.constant_return constant243 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS242_tree=null;
        CommonTree AS244_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt85=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt85=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt85=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt85=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);
                throw nvae;
            }
            switch (alt85) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement4083); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement4095);
                    eventProperty241=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty241.getTree());
                    int alt84=2;
                    int LA84_0 = input.LA(1);
                    if ( (LA84_0==AS) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            {
                            AS242=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4098); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS242);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4102); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement4123);
                    constant243=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant243.getTree());
                    AS244=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4125); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS244);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4129); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE245=null;
        Token SCHEMA246=null;
        Token AS247=null;
        Token LPAREN249=null;
        Token RPAREN251=null;
        EsperEPL2GrammarParser.variantList_return variantList248 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList250 = null;
        EsperEPL2GrammarParser.columnList_return columnList252 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE245_tree=null;
        CommonTree SCHEMA246_tree=null;
        CommonTree AS247_tree=null;
        CommonTree LPAREN249_tree=null;
        CommonTree RPAREN251_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE245=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr4154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE245);
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==IDENT) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA246=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr4161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA246);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( (LA87_0==AS) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    {
                    AS247=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr4167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS247);
                    }
                    break;
            }
            int alt90=2;
            int LA90_0 = input.LA(1);
            if ( (LA90_0==IDENT||LA90_0==STAR||LA90_0==TICKED_STRING_LITERAL) ) {
                alt90=1;
            }
            else if ( (LA90_0==LPAREN) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);
                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr4180);
                    variantList248=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList248.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN249=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr4191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN249);
                    int alt88=2;
                    int LA88_0 = input.LA(1);
                    if ( (LA88_0==IDENT||LA88_0==TICKED_STRING_LITERAL) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr4193);
                            createColumnList250=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList250.getTree());
                            }
                            break;
                    }
                    RPAREN251=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr4196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN251);
                    int alt89=2;
                    int LA89_0 = input.LA(1);
                    if ( (LA89_0==IDENT) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4201); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);
                            pushFollow(FOLLOW_columnList_in_createSchemaExpr4203);
                            columnList252=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList252.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (inherits != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);
                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA254=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement253 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement255 = null;
        CommonTree COMMA254_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList4292);
            variantListElement253=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement253.getTree());
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);
                if ( (LA91_0==COMMA) ) {
                    alt91=1;
                }
                switch (alt91) {
            	case 1 :
            	    {
            	    COMMA254=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList4295); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA254);
            	    pushFollow(FOLLOW_variantListElement_in_variantList4297);
            	    variantListElement255=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement255.getTree());
            	    }
            	    break;
            	default :
            	    break loop91;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR256=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier257 = null;
        CommonTree STAR256_tree=null;
        try {
            int alt92=2;
            int LA92_0 = input.LA(1);
            if ( (LA92_0==STAR) ) {
                alt92=1;
            }
            else if ( (LA92_0==IDENT||LA92_0==TICKED_STRING_LITERAL) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);
                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR256=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement4324); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR256_tree = (CommonTree)adaptor.create(STAR256);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR256_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement4330);
                    classIdentifier257=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier257.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO258=null;
        Token LPAREN260=null;
        Token RPAREN262=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier259 = null;
        EsperEPL2GrammarParser.columnList_return columnList261 = null;
        CommonTree s_tree=null;
        CommonTree INTO258_tree=null;
        CommonTree LPAREN260_tree=null;
        CommonTree RPAREN262_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt93=3;
            int LA93_0 = input.LA(1);
            if ( (LA93_0==ISTREAM) ) {
                alt93=1;
            }
            else if ( (LA93_0==RSTREAM) ) {
                alt93=2;
            }
            switch (alt93) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr4355); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr4361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO258=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr4365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO258);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr4367);
            classIdentifier259=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier259.getTree());
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==LPAREN) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    {
                    LPAREN260=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr4370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN260);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr4372);
                    columnList261=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList261.getTree());
                    RPAREN262=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr4374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN262);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT263=null;
        Token COMMA264=null;
        Token IDENT265=null;
        CommonTree IDENT263_tree=null;
        CommonTree COMMA264_tree=null;
        CommonTree IDENT265_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT263=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT263);
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);
                if ( (LA95_0==COMMA) ) {
                    alt95=1;
                }
                switch (alt95) {
            	case 1 :
            	    {
            	    COMMA264=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList4410); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA264);
            	    IDENT265=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4412); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT265);
            	    }
            	    break;
            	default :
            	    break loop95;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression266 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin267 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList268 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause4450);
            streamExpression266=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression266.getTree());
            int alt96=2;
            int LA96_0 = input.LA(1);
            if ( (LA96_0==EOF||LA96_0==WHERE||(LA96_0>=GROUP && LA96_0<=HAVING)||LA96_0==OUTPUT||LA96_0==ORDER||LA96_0==ROW_LIMIT_EXPR||LA96_0==MATCH_RECOGNIZE||LA96_0==FOR||LA96_0==COMMA) ) {
                alt96=1;
            }
            else if ( ((LA96_0>=INNER && LA96_0<=FULL)) ) {
                alt96=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);
                throw nvae;
            }
            switch (alt96) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause4453);
                    regularJoin267=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin267.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause4457);
                    outerJoinList268=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList268.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA269=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression270 = null;
        CommonTree COMMA269_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);
                if ( (LA97_0==COMMA) ) {
                    alt97=1;
                }
                switch (alt97) {
            	case 1 :
            	    {
            	    COMMA269=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin4471); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin4474);
            	    streamExpression270=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression270.getTree());
            	    }
            	    break;
            	default :
            	    break loop97;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin271 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin272 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList4488);
            outerJoin271=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin271.getTree());
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);
                if ( ((LA98_0>=INNER && LA98_0<=FULL)) ) {
                    alt98=1;
                }
                switch (alt98) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList4491);
            	    outerJoin272=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin272.getTree());
            	    }
            	    break;
            	default :
            	    break loop98;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER273=null;
        Token JOIN274=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression275 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent276 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER273_tree=null;
        CommonTree JOIN274_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt101=2;
            int LA101_0 = input.LA(1);
            if ( ((LA101_0>=JOIN && LA101_0<=FULL)) ) {
                alt101=1;
            }
            else if ( (LA101_0==INNER) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);
                throw nvae;
            }
            switch (alt101) {
                case 1 :
                    {
                    int alt100=2;
                    int LA100_0 = input.LA(1);
                    if ( ((LA100_0>=LEFT && LA100_0<=FULL)) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            {
                            int alt99=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt99=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt99=2;
                                }
                                break;
                            case FULL:
                                {
                                alt99=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 99, 0, input);
                                throw nvae;
                            }
                            switch (alt99) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin4534); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin4538); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin4542); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER273=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin4545); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER273);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin4566); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN274=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin4580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN274);
            pushFollow(FOLLOW_streamExpression_in_outerJoin4582);
            streamExpression275=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression275.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin4584);
            outerJoinIdent276=outerJoinIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent276.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON277=null;
        Token AND_EXPR279=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair278 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair280 = null;
        CommonTree ON277_tree=null;
        CommonTree AND_EXPR279_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON277=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent4649); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4652);
            outerJoinIdentPair278=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair278.getTree());
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);
                if ( (LA102_0==AND_EXPR) ) {
                    alt102=1;
                }
                switch (alt102) {
            	case 1 :
            	    {
            	    AND_EXPR279=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent4655); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4658);
            	    outerJoinIdentPair280=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair280.getTree());
            	    }
            	    break;
            	default :
            	    break loop102;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS282=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty281 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty283 = null;
        CommonTree EQUALS282_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4673);
            eventProperty281=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty281.getTree());
            EQUALS282=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair4675); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4678);
            eventProperty283=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty283.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression284 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4700);
            evalOrExpression284=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression284.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList285 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt103=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt103=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt103=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt103=3;
                    }
                    break;
            }
            switch (alt103) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt104=2;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==DISTINCT) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause4757);
            selectionList285=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList285.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA287=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement286 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement288 = null;
        CommonTree COMMA287_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList4788);
            selectionListElement286=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement286.getTree());
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);
                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }
                switch (alt105) {
            	case 1 :
            	    {
            	    COMMA287=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4791); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4794);
            	    selectionListElement288=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement288.getTree());
            	    }
            	    break;
            	default :
            	    break loop105;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS291=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector289 = null;
        EsperEPL2GrammarParser.expression_return expression290 = null;
        CommonTree s_tree=null;
        CommonTree AS291_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt107=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt107=1;
                }
                break;
            case IDENT:
                {
                int LA107_2 = input.LA(2);
                if ( (LA107_2==DOT) ) {
                    int LA107_72 = input.LA(3);
                    if ( (LA107_72==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt107=2;
                    }
                    else if ( (LA107_72==WINDOW||LA107_72==ESCAPE||LA107_72==EVERY_EXPR||LA107_72==WHERE||(LA107_72>=SUM && LA107_72<=COUNT)||LA107_72==OUTER||(LA107_72>=JOIN && LA107_72<=FULL)||(LA107_72>=EVENTS && LA107_72<=LAST)||(LA107_72>=UNIDIRECTIONAL && LA107_72<=PREVIOUSTAIL)||LA107_72==PRIOR||(LA107_72>=WEEKDAY && LA107_72<=CAST)||(LA107_72>=SNAPSHOT && LA107_72<=INDEX)||(LA107_72>=DEFINE && LA107_72<=MATCHES)||LA107_72==WHILE||(LA107_72>=MERGE && LA107_72<=MATCHED)||LA107_72==IDENT||LA107_72==TICKED_STRING_LITERAL) ) {
                        alt107=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 107, 72, input);
                        throw nvae;
                    }
                }
                else if ( (LA107_2==EOF||(LA107_2>=IN_SET && LA107_2<=REGEXP)||(LA107_2>=OR_EXPR && LA107_2<=NOT_EXPR)||(LA107_2>=WHERE && LA107_2<=AS)||(LA107_2>=WHEN && LA107_2<=THEN)||LA107_2==FROM||LA107_2==IS||(LA107_2>=GROUP && LA107_2<=HAVING)||LA107_2==OUTPUT||LA107_2==INSERT||LA107_2==ORDER||LA107_2==ROW_LIMIT_EXPR||LA107_2==FOR||LA107_2==LPAREN||(LA107_2>=COMMA && LA107_2<=EQUALS)||LA107_2==LBRACK||(LA107_2>=STAR && LA107_2<=QUESTION)||(LA107_2>=BAND && LA107_2<=MOD)||LA107_2==ESCAPECHAR) ) {
                    alt107=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt107=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);
                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4838);
                    streamSelector289=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector289.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4843);
                    expression290=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression290.getTree());
                    int alt106=2;
                    int LA106_0 = input.LA(1);
                    if ( (LA106_0==AS) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            {
                            AS291=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4846); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS291);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4850);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT292=null;
        Token STAR293=null;
        Token AS294=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT292_tree=null;
        CommonTree STAR293_tree=null;
        CommonTree AS294_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT292=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4908); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT292);
            STAR293=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR293);
            int alt108=2;
            int LA108_0 = input.LA(1);
            if ( (LA108_0==AS) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    {
                    AS294=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4913); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS294);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT299=null;
        Token DOT301=null;
        Token AS303=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression295 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression296 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression297 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression298 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression300 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression302 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT299_tree=null;
        CommonTree DOT301_tree=null;
        CommonTree AS303_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt109=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA109_1 = input.LA(2);
                if ( (LA109_1==EOF||(LA109_1>=WHERE && LA109_1<=AS)||(LA109_1>=INNER && LA109_1<=ON)||(LA109_1>=GROUP && LA109_1<=HAVING)||LA109_1==OUTPUT||LA109_1==ORDER||(LA109_1>=UNIDIRECTIONAL && LA109_1<=RETAININTERSECTION)||LA109_1==ROW_LIMIT_EXPR||LA109_1==MATCH_RECOGNIZE||LA109_1==FOR||LA109_1==IDENT||LA109_1==LPAREN||(LA109_1>=COMMA && LA109_1<=LBRACK)) ) {
                    alt109=1;
                }
                else if ( (LA109_1==COLON) ) {
                    alt109=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt109=1;
                }
                break;
            case PATTERN:
                {
                alt109=2;
                }
                break;
            case SQL:
                {
                alt109=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);
                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4948);
                    eventFilterExpression295=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression295.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4952);
                    patternInclusionExpression296=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression296.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4956);
                    databaseJoinExpression297=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression297.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4960);
                    methodJoinExpression298=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression298.getTree());
                    }
                    break;
            }
            int alt111=2;
            int LA111_0 = input.LA(1);
            if ( (LA111_0==DOT) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    {
                    DOT299=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT299);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression4969);
                    viewExpression300=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression300.getTree());
                    loop110:
                    do {
                        int alt110=2;
                        int LA110_0 = input.LA(1);
                        if ( (LA110_0==DOT) ) {
                            alt110=1;
                        }
                        switch (alt110) {
                    	case 1 :
                    	    {
                    	    DOT301=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4972); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT301);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4974);
                    	    viewExpression302=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression302.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop110;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt112=3;
            int LA112_0 = input.LA(1);
            if ( (LA112_0==AS) ) {
                alt112=1;
            }
            else if ( (LA112_0==IDENT) ) {
                alt112=2;
            }
            switch (alt112) {
                case 1 :
                    {
                    AS303=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4981); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS303);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt113=2;
            int LA113_0 = input.LA(1);
            if ( (LA113_0==UNIDIRECTIONAL) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt114=3;
            int LA114_0 = input.LA(1);
            if ( (LA114_0==RETAINUNION) ) {
                alt114=1;
            }
            else if ( (LA114_0==RETAININTERSECTION) ) {
                alt114=2;
            }
            switch (alt114) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression5005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression5009); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR304=null;
        Token LPAREN305=null;
        Token RPAREN307=null;
        EsperEPL2GrammarParser.expressionList_return expressionList306 = null;
        CommonTree i_tree=null;
        CommonTree FOR304_tree=null;
        CommonTree LPAREN305_tree=null;
        CommonTree RPAREN307_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR304=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr5065); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR304);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr5069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt116=2;
            int LA116_0 = input.LA(1);
            if ( (LA116_0==LPAREN) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    {
                    LPAREN305=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr5072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN305);
                    int alt115=2;
                    int LA115_0 = input.LA(1);
                    if ( (LA115_0==WINDOW||LA115_0==ESCAPE||(LA115_0>=NOT_EXPR && LA115_0<=EVERY_EXPR)||LA115_0==WHERE||(LA115_0>=SUM && LA115_0<=COUNT)||LA115_0==CASE||LA115_0==OUTER||(LA115_0>=JOIN && LA115_0<=FULL)||(LA115_0>=EVENTS && LA115_0<=LAST)||(LA115_0>=UNIDIRECTIONAL && LA115_0<=CURRENT_TIMESTAMP)||(LA115_0>=SNAPSHOT && LA115_0<=INDEX)||(LA115_0>=BOOLEAN_TRUE && LA115_0<=VALUE_NULL)||(LA115_0>=DEFINE && LA115_0<=MATCHES)||LA115_0==WHILE||(LA115_0>=MERGE && LA115_0<=MATCHED)||LA115_0==NEWKW||LA115_0==NUM_DOUBLE||(LA115_0>=IDENT && LA115_0<=LCURLY)||LA115_0==LPAREN||(LA115_0>=PLUS && LA115_0<=QUESTION)||(LA115_0>=STRING_LITERAL && LA115_0<=QUOTED_STRING_LITERAL)||LA115_0==MINUS||LA115_0==NUM_INT||(LA115_0>=TICKED_STRING_LITERAL && LA115_0<=NUM_FLOAT)) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr5074);
                            expressionList306=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList306.getTree());
                            }
                            break;
                    }
                    RPAREN307=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr5077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN307);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE308=null;
        Token LPAREN309=null;
        Token RPAREN317=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy310 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures311 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection312 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip313 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern314 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval315 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine316 = null;
        CommonTree MATCH_RECOGNIZE308_tree=null;
        CommonTree LPAREN309_tree=null;
        CommonTree RPAREN317_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE308=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog5113); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE308);
            LPAREN309=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog5127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN309);
            int alt117=2;
            int LA117_0 = input.LA(1);
            if ( (LA117_0==PARTITION) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog5133);
                    matchRecogPartitionBy310=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy310.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog5140);
            matchRecogMeasures311=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures311.getTree());
            int alt118=2;
            int LA118_0 = input.LA(1);
            if ( (LA118_0==ALL) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog5145);
                    matchRecogMatchesSelection312=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection312.getTree());
                    }
                    break;
            }
            int alt119=2;
            int LA119_0 = input.LA(1);
            if ( (LA119_0==AFTER) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5151);
                    matchRecogMatchesAfterSkip313=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip313.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog5157);
            matchRecogPattern314=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern314.getTree());
            int alt120=2;
            int LA120_0 = input.LA(1);
            if ( (LA120_0==IDENT) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog5163);
                    matchRecogMatchesInterval315=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval315.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog5169);
            matchRecogDefine316=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine316.getTree());
            RPAREN317=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog5176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN317);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION318=null;
        Token BY319=null;
        Token COMMA321=null;
        EsperEPL2GrammarParser.expression_return expression320 = null;
        EsperEPL2GrammarParser.expression_return expression322 = null;
        CommonTree PARTITION318_tree=null;
        CommonTree BY319_tree=null;
        CommonTree COMMA321_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION318=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy5213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION318);
            BY319=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy5215); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY319);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5217);
            expression320=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression320.getTree());
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);
                if ( (LA121_0==COMMA) ) {
                    alt121=1;
                }
                switch (alt121) {
            	case 1 :
            	    {
            	    COMMA321=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy5220); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA321);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5222);
            	    expression322=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression322.getTree());
            	    }
            	    break;
            	default :
            	    break loop121;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES323=null;
        Token COMMA325=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem324 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem326 = null;
        CommonTree MEASURES323_tree=null;
        CommonTree COMMA325_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES323=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures5251); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES323);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5253);
            matchRecogMeasureItem324=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem324.getTree());
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);
                if ( (LA122_0==COMMA) ) {
                    alt122=1;
                }
                switch (alt122) {
            	case 1 :
            	    {
            	    COMMA325=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures5256); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA325);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5258);
            	    matchRecogMeasureItem326=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem326.getTree());
            	    }
            	    break;
            	default :
            	    break loop122;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS328=null;
        EsperEPL2GrammarParser.expression_return expression327 = null;
        CommonTree i_tree=null;
        CommonTree AS328_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem5283);
            expression327=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression327.getTree());
            int alt124=2;
            int LA124_0 = input.LA(1);
            if ( (LA124_0==AS) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    {
                    AS328=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem5286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS328);
                    int alt123=2;
                    int LA123_0 = input.LA(1);
                    if ( (LA123_0==IDENT) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem5291); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL329=null;
        Token MATCHES330=null;
        CommonTree ALL329_tree=null;
        CommonTree MATCHES330_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL329=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection5322); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL329_tree = (CommonTree)adaptor.create(ALL329);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL329_tree, root_0);
            }
            MATCHES330=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection5325); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN331=null;
        Token LPAREN332=null;
        Token RPAREN334=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration333 = null;
        CommonTree PATTERN331_tree=null;
        CommonTree LPAREN332_tree=null;
        CommonTree RPAREN334_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN331=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern5340); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN331);
            LPAREN332=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern5342); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN332);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5344);
            matchRecogPatternAlteration333=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration333.getTree());
            RPAREN334=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern5346); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN334);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER335=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER335_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER335=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5368); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER335);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5372);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5376);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5380);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5384);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5388);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod336 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval5424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval5426);
            timePeriod336=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod336.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat337 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat338 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5452);
            matchRecogPatternConcat337=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat337.getTree());
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);
                if ( (LA125_0==BOR) ) {
                    alt125=1;
                }
                switch (alt125) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration5457); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5459);
            	    matchRecogPatternConcat338=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat338.getTree());
            	    }
            	    break;
            	default :
            	    break loop125;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary339 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt126=0;
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);
                if ( (LA126_0==IDENT||LA126_0==LPAREN) ) {
                    alt126=1;
                }
                switch (alt126) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5492);
            	    matchRecogPatternUnary339=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary339.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested340 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom341 = null;
        try {
            int alt127=2;
            int LA127_0 = input.LA(1);
            if ( (LA127_0==LPAREN) ) {
                alt127=1;
            }
            else if ( (LA127_0==IDENT) ) {
                alt127=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);
                throw nvae;
            }
            switch (alt127) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5517);
                    matchRecogPatternNested340=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested340.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5523);
                    matchRecogPatternAtom341=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom341.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN342=null;
        Token RPAREN344=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration343 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN342_tree=null;
        CommonTree RPAREN344_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN342=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested5535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN342);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5537);
            matchRecogPatternAlteration343=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration343.getTree());
            RPAREN344=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested5539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN344);
            int alt128=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt128=1;
                    }
                    break;
                case PLUS:
                    {
                    alt128=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt128=3;
                    }
                    break;
            }
            switch (alt128) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested5544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested5550); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested5556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom5595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt131=2;
            int LA131_0 = input.LA(1);
            if ( (LA131_0==STAR||(LA131_0>=PLUS && LA131_0<=QUESTION)) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    {
                    int alt129=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt129=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt129=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt129=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 129, 0, input);
                        throw nvae;
                    }
                    switch (alt129) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom5601); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom5607); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5613); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt130=2;
                    int LA130_0 = input.LA(1);
                    if ( (LA130_0==QUESTION) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5619); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE345=null;
        Token COMMA347=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem346 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem348 = null;
        CommonTree DEFINE345_tree=null;
        CommonTree COMMA347_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE345=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine5663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE345);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5665);
            matchRecogDefineItem346=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem346.getTree());
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);
                if ( (LA132_0==COMMA) ) {
                    alt132=1;
                }
                switch (alt132) {
            	case 1 :
            	    {
            	    COMMA347=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine5668); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA347);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5670);
            	    matchRecogDefineItem348=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem348.getTree());
            	    }
            	    break;
            	default :
            	    break loop132;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS349=null;
        EsperEPL2GrammarParser.expression_return expression350 = null;
        CommonTree i_tree=null;
        CommonTree AS349_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS349=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS349);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5701);
            expression350=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression350.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN351=null;
        Token LBRACK352=null;
        Token RBRACK354=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression353 = null;
        CommonTree PATTERN351_tree=null;
        CommonTree LBRACK352_tree=null;
        CommonTree RBRACK354_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN351=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN351);
            LBRACK352=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK352);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5730);
            patternExpression353=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression353.getTree());
            RBRACK354=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK354);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL355=null;
        Token COLON356=null;
        Token LBRACK357=null;
        Token METADATASQL358=null;
        Token RBRACK359=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL355_tree=null;
        CommonTree COLON356_tree=null;
        CommonTree LBRACK357_tree=null;
        CommonTree METADATASQL358_tree=null;
        CommonTree RBRACK359_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL355=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5765); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL355);
            COLON356=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON356);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK357=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5773); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK357);
            int alt133=2;
            int LA133_0 = input.LA(1);
            if ( (LA133_0==STRING_LITERAL) ) {
                alt133=1;
            }
            else if ( (LA133_0==QUOTED_STRING_LITERAL) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);
                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5778); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt135=2;
            int LA135_0 = input.LA(1);
            if ( (LA135_0==METADATASQL) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    {
                    METADATASQL358=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL358);
                    int alt134=2;
                    int LA134_0 = input.LA(1);
                    if ( (LA134_0==STRING_LITERAL) ) {
                        alt134=1;
                    }
                    else if ( (LA134_0==QUOTED_STRING_LITERAL) ) {
                        alt134=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 134, 0, input);
                        throw nvae;
                    }
                    switch (alt134) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5793); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5799); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK359=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK359);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON360=null;
        Token LPAREN362=null;
        Token RPAREN364=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier361 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList363 = null;
        CommonTree i_tree=null;
        CommonTree COLON360_tree=null;
        CommonTree LPAREN362_tree=null;
        CommonTree RPAREN364_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5855); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON360=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON360);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5859);
            classIdentifier361=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier361.getTree());
            int alt137=2;
            int LA137_0 = input.LA(1);
            if ( (LA137_0==LPAREN) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    {
                    LPAREN362=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5862); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN362);
                    int alt136=2;
                    int LA136_0 = input.LA(1);
                    if ( (LA136_0==WINDOW||LA136_0==ESCAPE||(LA136_0>=NOT_EXPR && LA136_0<=EVERY_EXPR)||LA136_0==WHERE||(LA136_0>=SUM && LA136_0<=COUNT)||LA136_0==CASE||LA136_0==OUTER||(LA136_0>=JOIN && LA136_0<=FULL)||(LA136_0>=EVENTS && LA136_0<=LAST)||(LA136_0>=UNIDIRECTIONAL && LA136_0<=CURRENT_TIMESTAMP)||(LA136_0>=SNAPSHOT && LA136_0<=INDEX)||(LA136_0>=BOOLEAN_TRUE && LA136_0<=VALUE_NULL)||(LA136_0>=DEFINE && LA136_0<=MATCHES)||LA136_0==WHILE||(LA136_0>=MERGE && LA136_0<=MATCHED)||LA136_0==NEWKW||LA136_0==NUM_DOUBLE||(LA136_0>=IDENT && LA136_0<=LCURLY)||LA136_0==LPAREN||(LA136_0>=PLUS && LA136_0<=QUESTION)||(LA136_0>=STRING_LITERAL && LA136_0<=QUOTED_STRING_LITERAL)||LA136_0==MINUS||LA136_0==NUM_INT||(LA136_0>=TICKED_STRING_LITERAL && LA136_0<=NUM_FLOAT)) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5864);
                            expressionList363=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList363.getTree());
                            }
                            break;
                    }
                    RPAREN364=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN364);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON365=null;
        Token LPAREN366=null;
        Token RPAREN368=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList367 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON365_tree=null;
        CommonTree LPAREN366_tree=null;
        CommonTree RPAREN368_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5920); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON365=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON365);
            int alt138=2;
            int LA138_0 = input.LA(1);
            if ( (LA138_0==IDENT) ) {
                alt138=1;
            }
            else if ( (LA138_0==MERGE) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);
                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression5931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN366=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN366);
            int alt139=2;
            int LA139_0 = input.LA(1);
            if ( (LA139_0==WINDOW||LA139_0==ESCAPE||(LA139_0>=NOT_EXPR && LA139_0<=EVERY_EXPR)||LA139_0==WHERE||(LA139_0>=SUM && LA139_0<=COUNT)||LA139_0==CASE||LA139_0==OUTER||(LA139_0>=JOIN && LA139_0<=FULL)||(LA139_0>=EVENTS && LA139_0<=LAST)||(LA139_0>=UNIDIRECTIONAL && LA139_0<=CURRENT_TIMESTAMP)||(LA139_0>=SNAPSHOT && LA139_0<=INDEX)||(LA139_0>=BOOLEAN_TRUE && LA139_0<=VALUE_NULL)||(LA139_0>=DEFINE && LA139_0<=MATCHES)||LA139_0==WHILE||(LA139_0>=MERGE && LA139_0<=MATCHED)||LA139_0==NEWKW||LA139_0==NUM_DOUBLE||(LA139_0>=IDENT && LA139_0<=LCURLY)||LA139_0==LPAREN||LA139_0==LBRACK||LA139_0==STAR||(LA139_0>=PLUS && LA139_0<=QUESTION)||(LA139_0>=STRING_LITERAL && LA139_0<=QUOTED_STRING_LITERAL)||LA139_0==MINUS||LA139_0==NUM_INT||(LA139_0>=TICKED_STRING_LITERAL && LA139_0<=NUM_FLOAT)) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5936);
                    expressionWithTimeList367=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList367.getTree());
                    }
                    break;
            }
            RPAREN368=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN368);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA370=null;
        EsperEPL2GrammarParser.expression_return expression369 = null;
        EsperEPL2GrammarParser.expression_return expression371 = null;
        CommonTree COMMA370_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5999);
            expression369=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression369.getTree());
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);
                if ( (LA140_0==COMMA) ) {
                    alt140=1;
                }
                switch (alt140) {
            	case 1 :
            	    {
            	    COMMA370=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr6002); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA370);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr6004);
            	    expression371=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression371.getTree());
            	    }
            	    break;
            	default :
            	    break loop140;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA373=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement372 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement374 = null;
        CommonTree COMMA373_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6039);
            orderByListElement372=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement372.getTree());
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);
                if ( (LA141_0==COMMA) ) {
                    alt141=1;
                }
                switch (alt141) {
            	case 1 :
            	    {
            	    COMMA373=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr6042); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA373);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6044);
            	    orderByListElement374=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement374.getTree());
            	    }
            	    break;
            	default :
            	    break loop141;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression375 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement6069);
            expression375=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression375.getTree());
            int alt142=3;
            int LA142_0 = input.LA(1);
            if ( (LA142_0==ASC) ) {
                alt142=1;
            }
            else if ( (LA142_0==DESC) ) {
                alt142=2;
            }
            switch (alt142) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement6074); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement6078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression376 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause6116);
            evalOrExpression376=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression376.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN382=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter377 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod378 = null;
        EsperEPL2GrammarParser.number_return number379 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet380 = null;
        EsperEPL2GrammarParser.expression_return expression381 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr383 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN382_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt143=2;
            int LA143_0 = input.LA(1);
            if ( (LA143_0==AFTER) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit6154);
                    outputLimitAfter377=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter377.getTree());
                    }
                    break;
            }
            int alt144=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt144=1;
                    }
                    break;
                case FIRST:
                    {
                    alt144=2;
                    }
                    break;
                case LAST:
                    {
                    alt144=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt144=4;
                    }
                    break;
            }
            switch (alt144) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit6169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit6173); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit6177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit6181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt148=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt148=1;
                }
                break;
            case AT:
                {
                alt148=2;
                }
                break;
            case WHEN:
                {
                alt148=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt148=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);
                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit6212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt146=2;
                    int LA146_0 = input.LA(1);
                    if ( (LA146_0==NUM_INT) ) {
                        int LA146_1 = input.LA(2);
                        if ( (LA146_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==EVENTS) ) {
                            alt146=2;
                        }
                        else if ( (LA146_1==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 146, 1, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA146_0==NUM_LONG) ) {
                        int LA146_2 = input.LA(2);
                        if ( (LA146_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==EVENTS) ) {
                            alt146=2;
                        }
                        else if ( (LA146_2==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 146, 2, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA146_0==NUM_FLOAT) ) {
                        int LA146_3 = input.LA(2);
                        if ( (LA146_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==EVENTS) ) {
                            alt146=2;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 146, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA146_0==NUM_DOUBLE) ) {
                        int LA146_4 = input.LA(2);
                        if ( (LA146_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==EVENTS) ) {
                            alt146=2;
                        }
                        else if ( (LA146_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 146, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA146_0==IDENT) ) {
                        int LA146_5 = input.LA(2);
                        if ( (LA146_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==EVENTS) ) {
                            alt146=2;
                        }
                        else if ( (LA146_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else if ( (LA146_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt146=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 146, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA146_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt146=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 146, 0, input);
                        throw nvae;
                    }
                    switch (alt146) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit6238);
                            timePeriod378=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod378.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt145=2;
                            int LA145_0 = input.LA(1);
                            if ( (LA145_0==NUM_DOUBLE||LA145_0==NUM_INT||(LA145_0>=NUM_LONG && LA145_0<=NUM_FLOAT)) ) {
                                alt145=1;
                            }
                            else if ( (LA145_0==IDENT) ) {
                                alt145=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 145, 0, input);
                                throw nvae;
                            }
                            switch (alt145) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit6249);
                                    number379=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number379.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit6255); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit6261); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit6292); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit6294);
                    crontabLimitParameterSet380=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet380.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit6311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit6313);
                    expression381=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression381.getTree());
                    int alt147=2;
                    int LA147_0 = input.LA(1);
                    if ( (LA147_0==THEN) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            {
                            THEN382=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit6316); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN382);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit6318);
                            onSetExpr383=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr383.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS386=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod384 = null;
        EsperEPL2GrammarParser.number_return number385 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS386_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter6468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt149=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA149_1 = input.LA(2);
                if ( (LA149_1==MIN||(LA149_1>=TIMEPERIOD_YEAR && LA149_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt149=1;
                }
                else if ( (LA149_1==EVENTS) ) {
                    alt149=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA149_2 = input.LA(2);
                if ( (LA149_2==MIN||(LA149_2>=TIMEPERIOD_YEAR && LA149_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt149=1;
                }
                else if ( (LA149_2==EVENTS) ) {
                    alt149=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA149_3 = input.LA(2);
                if ( (LA149_3==MIN||(LA149_3>=TIMEPERIOD_YEAR && LA149_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt149=1;
                }
                else if ( (LA149_3==EVENTS) ) {
                    alt149=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA149_4 = input.LA(2);
                if ( (LA149_4==MIN||(LA149_4>=TIMEPERIOD_YEAR && LA149_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt149=1;
                }
                else if ( (LA149_4==EVENTS) ) {
                    alt149=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt149=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);
                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter6471);
                    timePeriod384=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod384.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter6475);
                    number385=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number385.getTree());
                    EVENTS386=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter6477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS386);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt150=2;
            int LA150_0 = input.LA(1);
            if ( (LA150_0==NUM_DOUBLE||LA150_0==PLUS||LA150_0==MINUS||LA150_0==NUM_INT||(LA150_0>=NUM_LONG && LA150_0<=NUM_FLOAT)) ) {
                alt150=1;
            }
            else if ( (LA150_0==IDENT) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);
                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit6523);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt153=2;
            int LA153_0 = input.LA(1);
            if ( (LA153_0==OFFSET||LA153_0==COMMA) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    {
                    int alt151=2;
                    int LA151_0 = input.LA(1);
                    if ( (LA151_0==COMMA) ) {
                        alt151=1;
                    }
                    else if ( (LA151_0==OFFSET) ) {
                        alt151=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 151, 0, input);
                        throw nvae;
                    }
                    switch (alt151) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit6536); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit6542); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt152=2;
                    int LA152_0 = input.LA(1);
                    if ( (LA152_0==NUM_DOUBLE||LA152_0==PLUS||LA152_0==MINUS||LA152_0==NUM_INT||(LA152_0>=NUM_LONG && LA152_0<=NUM_FLOAT)) ) {
                        alt152=1;
                    }
                    else if ( (LA152_0==IDENT) ) {
                        alt152=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 152, 0, input);
                        throw nvae;
                    }
                    switch (alt152) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit6548);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6554); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN387=null;
        Token COMMA389=null;
        Token COMMA391=null;
        Token COMMA393=null;
        Token COMMA395=null;
        Token COMMA397=null;
        Token RPAREN399=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime388 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime390 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime392 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime394 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime396 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime398 = null;
        CommonTree LPAREN387_tree=null;
        CommonTree COMMA389_tree=null;
        CommonTree COMMA391_tree=null;
        CommonTree COMMA393_tree=null;
        CommonTree COMMA395_tree=null;
        CommonTree COMMA397_tree=null;
        CommonTree RPAREN399_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN387=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet6606); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN387);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6608);
            expressionWithTime388=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime388.getTree());
            COMMA389=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6610); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA389);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6612);
            expressionWithTime390=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime390.getTree());
            COMMA391=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA391);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6616);
            expressionWithTime392=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime392.getTree());
            COMMA393=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA393);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6620);
            expressionWithTime394=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime394.getTree());
            COMMA395=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA395);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6624);
            expressionWithTime396=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime396.getTree());
            int alt154=2;
            int LA154_0 = input.LA(1);
            if ( (LA154_0==COMMA) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    {
                    COMMA397=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6627); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA397);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6629);
                    expressionWithTime398=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime398.getTree());
                    }
                    break;
            }
            RPAREN399=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet6633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN399);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN400=null;
        Token THEN402=null;
        EsperEPL2GrammarParser.expression_return expression401 = null;
        EsperEPL2GrammarParser.expression_return expression403 = null;
        CommonTree WHEN400_tree=null;
        CommonTree THEN402_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN400=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause6663); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6666);
            expression401=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression401.getTree());
            THEN402=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause6668); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6671);
            expression403=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression403.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE404=null;
        EsperEPL2GrammarParser.expression_return expression405 = null;
        CommonTree ELSE404_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE404=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause6684); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause6687);
            expression405=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression405.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression406 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression6700);
            caseExpression406=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression406.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE407=null;
        Token END410=null;
        Token CASE411=null;
        Token END415=null;
        EsperEPL2GrammarParser.whenClause_return whenClause408 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause409 = null;
        EsperEPL2GrammarParser.expression_return expression412 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause413 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause414 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression416 = null;
        CommonTree CASE407_tree=null;
        CommonTree END410_tree=null;
        CommonTree CASE411_tree=null;
        CommonTree END415_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt159=3;
            int LA159_0 = input.LA(1);
            if ( (LA159_0==CASE) ) {
                int LA159_1 = input.LA(2);
                if ( (LA159_1==WINDOW||LA159_1==ESCAPE||(LA159_1>=NOT_EXPR && LA159_1<=EVERY_EXPR)||LA159_1==WHERE||(LA159_1>=SUM && LA159_1<=COUNT)||LA159_1==CASE||LA159_1==OUTER||(LA159_1>=JOIN && LA159_1<=FULL)||(LA159_1>=EVENTS && LA159_1<=LAST)||(LA159_1>=UNIDIRECTIONAL && LA159_1<=CURRENT_TIMESTAMP)||(LA159_1>=SNAPSHOT && LA159_1<=INDEX)||(LA159_1>=BOOLEAN_TRUE && LA159_1<=VALUE_NULL)||(LA159_1>=DEFINE && LA159_1<=MATCHES)||LA159_1==WHILE||(LA159_1>=MERGE && LA159_1<=MATCHED)||LA159_1==NEWKW||LA159_1==NUM_DOUBLE||(LA159_1>=IDENT && LA159_1<=LCURLY)||LA159_1==LPAREN||(LA159_1>=PLUS && LA159_1<=QUESTION)||(LA159_1>=STRING_LITERAL && LA159_1<=QUOTED_STRING_LITERAL)||LA159_1==MINUS||LA159_1==NUM_INT||(LA159_1>=TICKED_STRING_LITERAL && LA159_1<=NUM_FLOAT)) ) {
                    alt159=2;
                }
                else if ( (LA159_1==WHEN) ) {
                    alt159=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA159_0==WINDOW||LA159_0==ESCAPE||(LA159_0>=NOT_EXPR && LA159_0<=EVERY_EXPR)||LA159_0==WHERE||(LA159_0>=SUM && LA159_0<=COUNT)||LA159_0==OUTER||(LA159_0>=JOIN && LA159_0<=FULL)||(LA159_0>=EVENTS && LA159_0<=LAST)||(LA159_0>=UNIDIRECTIONAL && LA159_0<=CURRENT_TIMESTAMP)||(LA159_0>=SNAPSHOT && LA159_0<=INDEX)||(LA159_0>=BOOLEAN_TRUE && LA159_0<=VALUE_NULL)||(LA159_0>=DEFINE && LA159_0<=MATCHES)||LA159_0==WHILE||(LA159_0>=MERGE && LA159_0<=MATCHED)||LA159_0==NEWKW||LA159_0==NUM_DOUBLE||(LA159_0>=IDENT && LA159_0<=LCURLY)||LA159_0==LPAREN||(LA159_0>=PLUS && LA159_0<=QUESTION)||(LA159_0>=STRING_LITERAL && LA159_0<=QUOTED_STRING_LITERAL)||LA159_0==MINUS||LA159_0==NUM_INT||(LA159_0>=TICKED_STRING_LITERAL && LA159_0<=NUM_FLOAT)) ) {
                alt159=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);
                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE407=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6714); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE407_tree = (CommonTree)adaptor.create(CASE407);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE407_tree, root_0);
                    }
                    int cnt155=0;
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);
                        if ( (LA155_0==WHEN) ) {
                            alt155=1;
                        }
                        switch (alt155) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6717);
                    	    whenClause408=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause408.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt155 >= 1 ) break loop155;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(155, input);
                                throw eee;
                        }
                        cnt155++;
                    } while (true);
                    int alt156=2;
                    int LA156_0 = input.LA(1);
                    if ( (LA156_0==ELSE) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6720);
                            elseClause409=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause409.getTree());
                            }
                            break;
                    }
                    END410=(Token)match(input,END,FOLLOW_END_in_caseExpression6723); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE411=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE411);
                    pushFollow(FOLLOW_expression_in_caseExpression6736);
                    expression412=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression412.getTree());
                    int cnt157=0;
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);
                        if ( (LA157_0==WHEN) ) {
                            alt157=1;
                        }
                        switch (alt157) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6738);
                    	    whenClause413=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause413.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt157 >= 1 ) break loop157;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(157, input);
                                throw eee;
                        }
                        cnt157++;
                    } while (true);
                    int alt158=2;
                    int LA158_0 = input.LA(1);
                    if ( (LA158_0==ELSE) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6741);
                            elseClause414=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause414.getTree());
                            }
                            break;
                    }
                    END415=(Token)match(input,END,FOLLOW_END_in_caseExpression6744); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END415);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6768);
                    evalOrExpression416=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression416.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression417 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression418 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6779);
            evalAndExpression417=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression417.getTree());
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);
                if ( (LA160_0==OR_EXPR) ) {
                    alt160=1;
                }
                switch (alt160) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6784); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6786);
            	    evalAndExpression418=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression418.getTree());
            	    }
            	    break;
            	default :
            	    break loop160;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression419 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression420 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6818);
            bitWiseExpression419=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression419.getTree());
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);
                if ( (LA161_0==AND_EXPR) ) {
                    alt161=1;
                }
                switch (alt161) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6823); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6825);
            	    bitWiseExpression420=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression420.getTree());
            	    }
            	    break;
            	default :
            	    break loop161;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND422=null;
        Token BOR423=null;
        Token BXOR424=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression421 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression425 = null;
        CommonTree BAND422_tree=null;
        CommonTree BOR423_tree=null;
        CommonTree BXOR424_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6857);
            negatedExpression421=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression421.getTree());
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);
                if ( (LA163_0==BOR||(LA163_0>=BAND && LA163_0<=BXOR)) ) {
                    alt163=1;
                }
                switch (alt163) {
            	case 1 :
            	    {
            	    int alt162=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt162=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt162=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt162=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 162, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt162) {
            	        case 1 :
            	            {
            	            BAND422=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6862); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND422_tree = (CommonTree)adaptor.create(BAND422);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND422_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR423=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6865); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR423_tree = (CommonTree)adaptor.create(BOR423);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR423_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR424=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6868); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR424_tree = (CommonTree)adaptor.create(BXOR424);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR424_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6872);
            	    negatedExpression425=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression425.getTree());
            	    }
            	    break;
            	default :
            	    break loop163;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR427=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression426 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression428 = null;
        CommonTree NOT_EXPR427_tree=null;
        try {
            int alt164=2;
            int LA164_0 = input.LA(1);
            if ( (LA164_0==WINDOW||LA164_0==ESCAPE||LA164_0==EVERY_EXPR||LA164_0==WHERE||(LA164_0>=SUM && LA164_0<=COUNT)||LA164_0==OUTER||(LA164_0>=JOIN && LA164_0<=FULL)||(LA164_0>=EVENTS && LA164_0<=LAST)||(LA164_0>=UNIDIRECTIONAL && LA164_0<=CURRENT_TIMESTAMP)||(LA164_0>=SNAPSHOT && LA164_0<=INDEX)||(LA164_0>=BOOLEAN_TRUE && LA164_0<=VALUE_NULL)||(LA164_0>=DEFINE && LA164_0<=MATCHES)||LA164_0==WHILE||(LA164_0>=MERGE && LA164_0<=MATCHED)||LA164_0==NEWKW||LA164_0==NUM_DOUBLE||(LA164_0>=IDENT && LA164_0<=LCURLY)||LA164_0==LPAREN||(LA164_0>=PLUS && LA164_0<=QUESTION)||(LA164_0>=STRING_LITERAL && LA164_0<=QUOTED_STRING_LITERAL)||LA164_0==MINUS||LA164_0==NUM_INT||(LA164_0>=TICKED_STRING_LITERAL && LA164_0<=NUM_FLOAT)) ) {
                alt164=1;
            }
            else if ( (LA164_0==NOT_EXPR) ) {
                alt164=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);
                throw nvae;
            }
            switch (alt164) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6887);
                    evalEqualsExpression426=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression426.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR427=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR427_tree = (CommonTree)adaptor.create(NOT_EXPR427);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR427_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6896);
                    evalEqualsExpression428=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression428.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR430=null;
        Token LPAREN432=null;
        Token RPAREN434=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression429 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression431 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList433 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression435 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR430_tree=null;
        CommonTree LPAREN432_tree=null;
        CommonTree RPAREN434_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6909);
            evalRelationalExpression429=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression429.getTree());
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);
                if ( (LA170_0==IS||LA170_0==EQUALS||(LA170_0>=SQL_NE && LA170_0<=NOT_EQUAL)) ) {
                    alt170=1;
                }
                switch (alt170) {
            	case 1 :
            	    {
            	    int alt165=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt165=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA165_2 = input.LA(2);
            	        if ( (LA165_2==NOT_EXPR) ) {
            	            alt165=3;
            	        }
            	        else if ( (LA165_2==WINDOW||LA165_2==ESCAPE||LA165_2==EVERY_EXPR||LA165_2==WHERE||(LA165_2>=SUM && LA165_2<=COUNT)||LA165_2==OUTER||(LA165_2>=JOIN && LA165_2<=FULL)||(LA165_2>=ALL && LA165_2<=SOME)||(LA165_2>=EVENTS && LA165_2<=LAST)||(LA165_2>=UNIDIRECTIONAL && LA165_2<=CURRENT_TIMESTAMP)||(LA165_2>=SNAPSHOT && LA165_2<=INDEX)||(LA165_2>=BOOLEAN_TRUE && LA165_2<=VALUE_NULL)||(LA165_2>=DEFINE && LA165_2<=MATCHES)||LA165_2==WHILE||(LA165_2>=MERGE && LA165_2<=MATCHED)||LA165_2==NEWKW||LA165_2==NUM_DOUBLE||(LA165_2>=IDENT && LA165_2<=LCURLY)||LA165_2==LPAREN||(LA165_2>=PLUS && LA165_2<=QUESTION)||(LA165_2>=STRING_LITERAL && LA165_2<=QUOTED_STRING_LITERAL)||LA165_2==MINUS||LA165_2==NUM_INT||(LA165_2>=TICKED_STRING_LITERAL && LA165_2<=NUM_FLOAT)) ) {
            	            alt165=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 165, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt165=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt165=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 165, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt165) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6922); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6940); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6954); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR430=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6956); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR430);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6970); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6984); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt169=2;
            	    int LA169_0 = input.LA(1);
            	    if ( (LA169_0==WINDOW||LA169_0==ESCAPE||LA169_0==EVERY_EXPR||LA169_0==WHERE||(LA169_0>=SUM && LA169_0<=COUNT)||LA169_0==OUTER||(LA169_0>=JOIN && LA169_0<=FULL)||(LA169_0>=EVENTS && LA169_0<=LAST)||(LA169_0>=UNIDIRECTIONAL && LA169_0<=CURRENT_TIMESTAMP)||(LA169_0>=SNAPSHOT && LA169_0<=INDEX)||(LA169_0>=BOOLEAN_TRUE && LA169_0<=VALUE_NULL)||(LA169_0>=DEFINE && LA169_0<=MATCHES)||LA169_0==WHILE||(LA169_0>=MERGE && LA169_0<=MATCHED)||LA169_0==NEWKW||LA169_0==NUM_DOUBLE||(LA169_0>=IDENT && LA169_0<=LCURLY)||LA169_0==LPAREN||(LA169_0>=PLUS && LA169_0<=QUESTION)||(LA169_0>=STRING_LITERAL && LA169_0<=QUOTED_STRING_LITERAL)||LA169_0==MINUS||LA169_0==NUM_INT||(LA169_0>=TICKED_STRING_LITERAL && LA169_0<=NUM_FLOAT)) ) {
            	        alt169=1;
            	    }
            	    else if ( ((LA169_0>=ALL && LA169_0<=SOME)) ) {
            	        alt169=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 169, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt169) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression7014);
            	            evalRelationalExpression431=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression431.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt166=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt166=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt166=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt166=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 166, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt166) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression7031); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression7037); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression7043); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt168=2;
            	            int LA168_0 = input.LA(1);
            	            if ( (LA168_0==LPAREN) ) {
            	                int LA168_1 = input.LA(2);
            	                if ( (LA168_1==SELECT) ) {
            	                    alt168=2;
            	                }
            	                else if ( (LA168_1==WINDOW||LA168_1==ESCAPE||(LA168_1>=NOT_EXPR && LA168_1<=EVERY_EXPR)||LA168_1==WHERE||(LA168_1>=SUM && LA168_1<=COUNT)||LA168_1==CASE||LA168_1==OUTER||(LA168_1>=JOIN && LA168_1<=FULL)||(LA168_1>=EVENTS && LA168_1<=LAST)||(LA168_1>=UNIDIRECTIONAL && LA168_1<=CURRENT_TIMESTAMP)||(LA168_1>=SNAPSHOT && LA168_1<=INDEX)||(LA168_1>=BOOLEAN_TRUE && LA168_1<=VALUE_NULL)||(LA168_1>=DEFINE && LA168_1<=MATCHES)||LA168_1==WHILE||(LA168_1>=MERGE && LA168_1<=MATCHED)||LA168_1==NEWKW||LA168_1==NUM_DOUBLE||(LA168_1>=IDENT && LA168_1<=LCURLY)||(LA168_1>=LPAREN && LA168_1<=RPAREN)||(LA168_1>=PLUS && LA168_1<=QUESTION)||(LA168_1>=STRING_LITERAL && LA168_1<=QUOTED_STRING_LITERAL)||LA168_1==MINUS||LA168_1==NUM_INT||(LA168_1>=TICKED_STRING_LITERAL && LA168_1<=NUM_FLOAT)) ) {
            	                    alt168=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 168, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 168, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt168) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN432=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression7049); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN432);
            	                    int alt167=2;
            	                    int LA167_0 = input.LA(1);
            	                    if ( (LA167_0==WINDOW||LA167_0==ESCAPE||(LA167_0>=NOT_EXPR && LA167_0<=EVERY_EXPR)||LA167_0==WHERE||(LA167_0>=SUM && LA167_0<=COUNT)||LA167_0==CASE||LA167_0==OUTER||(LA167_0>=JOIN && LA167_0<=FULL)||(LA167_0>=EVENTS && LA167_0<=LAST)||(LA167_0>=UNIDIRECTIONAL && LA167_0<=CURRENT_TIMESTAMP)||(LA167_0>=SNAPSHOT && LA167_0<=INDEX)||(LA167_0>=BOOLEAN_TRUE && LA167_0<=VALUE_NULL)||(LA167_0>=DEFINE && LA167_0<=MATCHES)||LA167_0==WHILE||(LA167_0>=MERGE && LA167_0<=MATCHED)||LA167_0==NEWKW||LA167_0==NUM_DOUBLE||(LA167_0>=IDENT && LA167_0<=LCURLY)||LA167_0==LPAREN||(LA167_0>=PLUS && LA167_0<=QUESTION)||(LA167_0>=STRING_LITERAL && LA167_0<=QUOTED_STRING_LITERAL)||LA167_0==MINUS||LA167_0==NUM_INT||(LA167_0>=TICKED_STRING_LITERAL && LA167_0<=NUM_FLOAT)) ) {
            	                        alt167=1;
            	                    }
            	                    switch (alt167) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression7051);
            	                            expressionList433=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList433.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN434=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression7054); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN434);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7059);
            	                    subSelectGroupExpression435=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression435.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop170;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN438=null;
        Token RPAREN440=null;
        Token COMMA444=null;
        Token IN_SET446=null;
        Token BETWEEN448=null;
        Token LIKE450=null;
        Token ESCAPE452=null;
        Token REGEXP454=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr436 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr437 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList439 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression441 = null;
        EsperEPL2GrammarParser.expression_return expression442 = null;
        EsperEPL2GrammarParser.expression_return expression443 = null;
        EsperEPL2GrammarParser.expression_return expression445 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery447 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList449 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr451 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant453 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr455 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN438_tree=null;
        CommonTree RPAREN440_tree=null;
        CommonTree COMMA444_tree=null;
        CommonTree IN_SET446_tree=null;
        CommonTree BETWEEN448_tree=null;
        CommonTree LIKE450_tree=null;
        CommonTree ESCAPE452_tree=null;
        CommonTree REGEXP454_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7187);
            concatenationExpr436=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr436.getTree());
            int alt184=2;
            int LA184_0 = input.LA(1);
            if ( (LA184_0==EOF||(LA184_0>=OR_EXPR && LA184_0<=AND_EXPR)||(LA184_0>=WHERE && LA184_0<=AS)||(LA184_0>=ELSE && LA184_0<=FROM)||LA184_0==IS||(LA184_0>=GROUP && LA184_0<=HAVING)||LA184_0==ALL||LA184_0==OUTPUT||LA184_0==INSERT||(LA184_0>=ORDER && LA184_0<=DESC)||LA184_0==PATTERN||(LA184_0>=TIMEPERIOD_SEC && LA184_0<=TIMEPERIOD_SECONDS)||LA184_0==ROW_LIMIT_EXPR||LA184_0==MEASURES||(LA184_0>=AFTER && LA184_0<=FOR)||LA184_0==RCURLY||LA184_0==RPAREN||(LA184_0>=COMMA && LA184_0<=EQUALS)||LA184_0==RBRACK||LA184_0==BOR||LA184_0==COLON||(LA184_0>=BAND && LA184_0<=GE)||LA184_0==FOLLOWMAX_END) ) {
                alt184=1;
            }
            else if ( ((LA184_0>=IN_SET && LA184_0<=REGEXP)||LA184_0==NOT_EXPR) ) {
                alt184=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);
                throw nvae;
            }
            switch (alt184) {
                case 1 :
                    {
                    {
                    loop176:
                    do {
                        int alt176=2;
                        int LA176_0 = input.LA(1);
                        if ( ((LA176_0>=LT && LA176_0<=GE)) ) {
                            alt176=1;
                        }
                        switch (alt176) {
                    	case 1 :
                    	    {
                    	    int alt171=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt171=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt171=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt171=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt171=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 171, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt171) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression7219); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression7223); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression7227); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression7231); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt175=2;
                    	    int LA175_0 = input.LA(1);
                    	    if ( (LA175_0==WINDOW||LA175_0==ESCAPE||LA175_0==EVERY_EXPR||LA175_0==WHERE||(LA175_0>=SUM && LA175_0<=COUNT)||LA175_0==OUTER||(LA175_0>=JOIN && LA175_0<=FULL)||(LA175_0>=EVENTS && LA175_0<=LAST)||(LA175_0>=UNIDIRECTIONAL && LA175_0<=CURRENT_TIMESTAMP)||(LA175_0>=SNAPSHOT && LA175_0<=INDEX)||(LA175_0>=BOOLEAN_TRUE && LA175_0<=VALUE_NULL)||(LA175_0>=DEFINE && LA175_0<=MATCHES)||LA175_0==WHILE||(LA175_0>=MERGE && LA175_0<=MATCHED)||LA175_0==NEWKW||LA175_0==NUM_DOUBLE||(LA175_0>=IDENT && LA175_0<=LCURLY)||LA175_0==LPAREN||(LA175_0>=PLUS && LA175_0<=QUESTION)||(LA175_0>=STRING_LITERAL && LA175_0<=QUOTED_STRING_LITERAL)||LA175_0==MINUS||LA175_0==NUM_INT||(LA175_0>=TICKED_STRING_LITERAL && LA175_0<=NUM_FLOAT)) ) {
                    	        alt175=1;
                    	    }
                    	    else if ( ((LA175_0>=ALL && LA175_0<=SOME)) ) {
                    	        alt175=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 175, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt175) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7255);
                    	            concatenationExpr437=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr437.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt172=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt172=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt172=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt172=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 172, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt172) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression7272); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression7278); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression7284); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt174=2;
                    	            int LA174_0 = input.LA(1);
                    	            if ( (LA174_0==LPAREN) ) {
                    	                int LA174_1 = input.LA(2);
                    	                if ( (LA174_1==SELECT) ) {
                    	                    alt174=2;
                    	                }
                    	                else if ( (LA174_1==WINDOW||LA174_1==ESCAPE||(LA174_1>=NOT_EXPR && LA174_1<=EVERY_EXPR)||LA174_1==WHERE||(LA174_1>=SUM && LA174_1<=COUNT)||LA174_1==CASE||LA174_1==OUTER||(LA174_1>=JOIN && LA174_1<=FULL)||(LA174_1>=EVENTS && LA174_1<=LAST)||(LA174_1>=UNIDIRECTIONAL && LA174_1<=CURRENT_TIMESTAMP)||(LA174_1>=SNAPSHOT && LA174_1<=INDEX)||(LA174_1>=BOOLEAN_TRUE && LA174_1<=VALUE_NULL)||(LA174_1>=DEFINE && LA174_1<=MATCHES)||LA174_1==WHILE||(LA174_1>=MERGE && LA174_1<=MATCHED)||LA174_1==NEWKW||LA174_1==NUM_DOUBLE||(LA174_1>=IDENT && LA174_1<=LCURLY)||(LA174_1>=LPAREN && LA174_1<=RPAREN)||(LA174_1>=PLUS && LA174_1<=QUESTION)||(LA174_1>=STRING_LITERAL && LA174_1<=QUOTED_STRING_LITERAL)||LA174_1==MINUS||LA174_1==NUM_INT||(LA174_1>=TICKED_STRING_LITERAL && LA174_1<=NUM_FLOAT)) ) {
                    	                    alt174=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 174, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 174, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt174) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN438=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7290); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN438);
                    	                    int alt173=2;
                    	                    int LA173_0 = input.LA(1);
                    	                    if ( (LA173_0==WINDOW||LA173_0==ESCAPE||(LA173_0>=NOT_EXPR && LA173_0<=EVERY_EXPR)||LA173_0==WHERE||(LA173_0>=SUM && LA173_0<=COUNT)||LA173_0==CASE||LA173_0==OUTER||(LA173_0>=JOIN && LA173_0<=FULL)||(LA173_0>=EVENTS && LA173_0<=LAST)||(LA173_0>=UNIDIRECTIONAL && LA173_0<=CURRENT_TIMESTAMP)||(LA173_0>=SNAPSHOT && LA173_0<=INDEX)||(LA173_0>=BOOLEAN_TRUE && LA173_0<=VALUE_NULL)||(LA173_0>=DEFINE && LA173_0<=MATCHES)||LA173_0==WHILE||(LA173_0>=MERGE && LA173_0<=MATCHED)||LA173_0==NEWKW||LA173_0==NUM_DOUBLE||(LA173_0>=IDENT && LA173_0<=LCURLY)||LA173_0==LPAREN||(LA173_0>=PLUS && LA173_0<=QUESTION)||(LA173_0>=STRING_LITERAL && LA173_0<=QUOTED_STRING_LITERAL)||LA173_0==MINUS||LA173_0==NUM_INT||(LA173_0>=TICKED_STRING_LITERAL && LA173_0<=NUM_FLOAT)) ) {
                    	                        alt173=1;
                    	                    }
                    	                    switch (alt173) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression7292);
                    	                            expressionList439=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList439.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN440=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7295); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN440);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7300);
                    	                    subSelectGroupExpression441=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression441.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop176;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt177=2;
                    int LA177_0 = input.LA(1);
                    if ( (LA177_0==NOT_EXPR) ) {
                        alt177=1;
                    }
                    switch (alt177) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression7396); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt183=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA183_1 = input.LA(2);
                        if ( (LA183_1==LPAREN) ) {
                            int LA183_5 = input.LA(3);
                            if ( (LA183_5==SELECT) ) {
                                alt183=2;
                            }
                            else if ( (LA183_5==WINDOW||LA183_5==ESCAPE||(LA183_5>=NOT_EXPR && LA183_5<=EVERY_EXPR)||LA183_5==WHERE||(LA183_5>=SUM && LA183_5<=COUNT)||LA183_5==CASE||LA183_5==OUTER||(LA183_5>=JOIN && LA183_5<=FULL)||(LA183_5>=EVENTS && LA183_5<=LAST)||(LA183_5>=UNIDIRECTIONAL && LA183_5<=CURRENT_TIMESTAMP)||(LA183_5>=SNAPSHOT && LA183_5<=INDEX)||(LA183_5>=BOOLEAN_TRUE && LA183_5<=VALUE_NULL)||(LA183_5>=DEFINE && LA183_5<=MATCHES)||LA183_5==WHILE||(LA183_5>=MERGE && LA183_5<=MATCHED)||LA183_5==NEWKW||LA183_5==NUM_DOUBLE||(LA183_5>=IDENT && LA183_5<=LCURLY)||LA183_5==LPAREN||(LA183_5>=PLUS && LA183_5<=QUESTION)||(LA183_5>=STRING_LITERAL && LA183_5<=QUOTED_STRING_LITERAL)||LA183_5==MINUS||LA183_5==NUM_INT||(LA183_5>=TICKED_STRING_LITERAL && LA183_5<=NUM_FLOAT)) ) {
                                alt183=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 183, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA183_1==LBRACK) ) {
                            alt183=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 183, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt183=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt183=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt183=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 183, 0, input);
                        throw nvae;
                    }
                    switch (alt183) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7423); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt178=2;
                            int LA178_0 = input.LA(1);
                            if ( (LA178_0==LPAREN) ) {
                                alt178=1;
                            }
                            else if ( (LA178_0==LBRACK) ) {
                                alt178=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 178, 0, input);
                                throw nvae;
                            }
                            switch (alt178) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7435); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression7441); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression7444);
                            expression442=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression442.getTree());
                            int alt180=2;
                            int LA180_0 = input.LA(1);
                            if ( (LA180_0==COLON) ) {
                                alt180=1;
                            }
                            else if ( (LA180_0==RPAREN||LA180_0==COMMA||LA180_0==RBRACK) ) {
                                alt180=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 180, 0, input);
                                throw nvae;
                            }
                            switch (alt180) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression7466); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression7469);
                                    expression443=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression443.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop179:
                                    do {
                                        int alt179=2;
                                        int LA179_0 = input.LA(1);
                                        if ( (LA179_0==COMMA) ) {
                                            alt179=1;
                                        }
                                        switch (alt179) {
                                    	case 1 :
                                    	    {
                                    	    COMMA444=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression7495); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA444);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression7497);
                                    	    expression445=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression445.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop179;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt181=2;
                            int LA181_0 = input.LA(1);
                            if ( (LA181_0==RPAREN) ) {
                                alt181=1;
                            }
                            else if ( (LA181_0==RBRACK) ) {
                                alt181=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 181, 0, input);
                                throw nvae;
                            }
                            switch (alt181) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7523); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression7529); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET446=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7652); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET446);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression7654);
                            inSubSelectQuery447=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery447.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN448=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression7700); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN448);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression7702);
                            betweenList449=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList449.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE450=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7752); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE450);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7754);
                            concatenationExpr451=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr451.getTree());
                            int alt182=2;
                            int LA182_0 = input.LA(1);
                            if ( (LA182_0==ESCAPE) ) {
                                alt182=1;
                            }
                            switch (alt182) {
                                case 1 :
                                    {
                                    ESCAPE452=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7757); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE452);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7759);
                                    stringconstant453=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant453.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP454=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7811); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP454);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7813);
                            concatenationExpr455=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr455.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr456 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7875);
            subQueryExpr456=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr456.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR459=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression457 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression458 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression460 = null;
        CommonTree c_tree=null;
        CommonTree LOR459_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7900);
            additiveExpression457=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression457.getTree());
            int alt186=2;
            int LA186_0 = input.LA(1);
            if ( (LA186_0==LOR) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7908);
                    additiveExpression458=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression458.getTree());
                    loop185:
                    do {
                        int alt185=2;
                        int LA185_0 = input.LA(1);
                        if ( (LA185_0==LOR) ) {
                            alt185=1;
                        }
                        switch (alt185) {
                    	case 1 :
                    	    {
                    	    LOR459=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7912); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR459);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7914);
                    	    additiveExpression460=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression460.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop185;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS462=null;
        Token MINUS463=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression461 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression464 = null;
        CommonTree PLUS462_tree=null;
        CommonTree MINUS463_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7955);
            multiplyExpression461=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression461.getTree());
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);
                if ( (LA188_0==PLUS||LA188_0==MINUS) ) {
                    alt188=1;
                }
                switch (alt188) {
            	case 1 :
            	    {
            	    int alt187=2;
            	    int LA187_0 = input.LA(1);
            	    if ( (LA187_0==PLUS) ) {
            	        alt187=1;
            	    }
            	    else if ( (LA187_0==MINUS) ) {
            	        alt187=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 187, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt187) {
            	        case 1 :
            	            {
            	            PLUS462=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7960); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS462_tree = (CommonTree)adaptor.create(PLUS462);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS462_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS463=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7963); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS463_tree = (CommonTree)adaptor.create(MINUS463);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS463_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7967);
            	    multiplyExpression464=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression464.getTree());
            	    }
            	    break;
            	default :
            	    break loop188;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR466=null;
        Token DIV467=null;
        Token MOD468=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression465 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression469 = null;
        CommonTree STAR466_tree=null;
        CommonTree DIV467_tree=null;
        CommonTree MOD468_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7981);
            unaryExpression465=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression465.getTree());
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);
                if ( (LA190_0==STAR||(LA190_0>=DIV && LA190_0<=MOD)) ) {
                    alt190=1;
                }
                switch (alt190) {
            	case 1 :
            	    {
            	    int alt189=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt189=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt189=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt189=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 189, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt189) {
            	        case 1 :
            	            {
            	            STAR466=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7986); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR466_tree = (CommonTree)adaptor.create(STAR466);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR466_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV467=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7989); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV467_tree = (CommonTree)adaptor.create(DIV467);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV467_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD468=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7992); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD468_tree = (CommonTree)adaptor.create(MOD468);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD468_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7996);
            	    unaryExpression469=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression469.getTree());
            	    }
            	    break;
            	default :
            	    break loop190;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS470=null;
        Token LPAREN474=null;
        Token RPAREN476=null;
        Token NEWKW486=null;
        Token LCURLY487=null;
        Token COMMA489=null;
        Token RCURLY491=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty471 = null;
        EsperEPL2GrammarParser.constant_return constant472 = null;
        EsperEPL2GrammarParser.substitution_return substitution473 = null;
        EsperEPL2GrammarParser.expression_return expression475 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass477 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass478 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction479 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc480 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression481 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression482 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass483 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass484 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression485 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign488 = null;
        EsperEPL2GrammarParser.newAssign_return newAssign490 = null;
        CommonTree d_tree=null;
        CommonTree MINUS470_tree=null;
        CommonTree LPAREN474_tree=null;
        CommonTree RPAREN476_tree=null;
        CommonTree NEWKW486_tree=null;
        CommonTree LCURLY487_tree=null;
        CommonTree COMMA489_tree=null;
        CommonTree RCURLY491_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_NEWKW=new RewriteRuleTokenStream(adaptor,"token NEWKW");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_newAssign=new RewriteRuleSubtreeStream(adaptor,"rule newAssign");
        RewriteRuleSubtreeStream stream_subSelectExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt196=10;
            alt196 = dfa196.predict(input);
            switch (alt196) {
                case 1 :
                    {
                    MINUS470=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression8011); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS470);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression8013);
                    eventProperty471=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty471.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression8026);
                    constant472=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant472.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression8031);
                    substitution473=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution473.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN474=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression8036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN474);
                    pushFollow(FOLLOW_expression_in_unaryExpression8038);
                    expression475=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression475.getTree());
                    RPAREN476=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression8040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN476);
                    int alt192=2;
                    int LA192_0 = input.LA(1);
                    if ( (LA192_0==DOT) ) {
                        alt192=1;
                    }
                    switch (alt192) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8045); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8047);
                            libFunctionNoClass477=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass477.getTree());
                            loop191:
                            do {
                                int alt191=2;
                                int LA191_0 = input.LA(1);
                                if ( (LA191_0==DOT) ) {
                                    alt191=1;
                                }
                                switch (alt191) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8052); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8054);
                            	    libFunctionNoClass478=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass478.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop191;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression8091);
                    eventPropertyOrLibFunction479=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction479.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression8103);
                    builtinFunc480=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc480.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression8109);
                    arrayExpression481=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression481.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression8114);
                    subSelectExpression482=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelectExpression.add(subSelectExpression482.getTree());
                    int alt194=2;
                    int LA194_0 = input.LA(1);
                    if ( (LA194_0==DOT) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8119); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8121);
                            libFunctionNoClass483=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass483.getTree());
                            loop193:
                            do {
                                int alt193=2;
                                int LA193_0 = input.LA(1);
                                if ( (LA193_0==DOT) ) {
                                    alt193=1;
                                }
                                switch (alt193) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8126); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8128);
                            	    libFunctionNoClass484=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass484.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop193;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_subSelectExpression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_subSelectExpression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression8165);
                    existsSubSelectExpression485=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression485.getTree());
                    }
                    break;
                case 10 :
                    {
                    NEWKW486=(Token)match(input,NEWKW,FOLLOW_NEWKW_in_unaryExpression8170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NEWKW.add(NEWKW486);
                    LCURLY487=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_unaryExpression8172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY487);
                    pushFollow(FOLLOW_newAssign_in_unaryExpression8174);
                    newAssign488=newAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_newAssign.add(newAssign488.getTree());
                    loop195:
                    do {
                        int alt195=2;
                        int LA195_0 = input.LA(1);
                        if ( (LA195_0==COMMA) ) {
                            alt195=1;
                        }
                        switch (alt195) {
                    	case 1 :
                    	    {
                    	    COMMA489=(Token)match(input,COMMA,FOLLOW_COMMA_in_unaryExpression8177); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA489);
                    	    pushFollow(FOLLOW_newAssign_in_unaryExpression8179);
                    	    newAssign490=newAssign();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_newAssign.add(newAssign490.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop195;
                        }
                    } while (true);
                    RCURLY491=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_unaryExpression8183); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY491);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_NEWKW.nextNode(), root_1);
                        while ( stream_newAssign.hasNext() ) {
                            adaptor.addChild(root_1, stream_newAssign.nextTree());
                        }
                        stream_newAssign.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class newAssign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.newAssign_return newAssign() throws RecognitionException {
        EsperEPL2GrammarParser.newAssign_return retval = new EsperEPL2GrammarParser.newAssign_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS493=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty492 = null;
        EsperEPL2GrammarParser.expression_return expression494 = null;
        CommonTree EQUALS493_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_newAssign8205);
            eventProperty492=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty492.getTree());
            int alt197=2;
            int LA197_0 = input.LA(1);
            if ( (LA197_0==EQUALS) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    {
                    EQUALS493=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_newAssign8208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS493);
                    pushFollow(FOLLOW_expression_in_newAssign8210);
                    expression494=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression494.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEW_ITEM, "NEW_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr495 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression8238);
            subQueryExpr495=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr495.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr496 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression8260);
            subQueryExpr496=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr496.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS497=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr498 = null;
        CommonTree EXISTS497_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS497=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression8282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS497);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression8284);
            subQueryExpr498=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr498.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN499=null;
        Token SELECT500=null;
        Token DISTINCT501=null;
        Token FROM503=null;
        Token WHERE505=null;
        Token RPAREN507=null;
        EsperEPL2GrammarParser.selectionList_return selectionList502 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr504 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause506 = null;
        CommonTree LPAREN499_tree=null;
        CommonTree SELECT500_tree=null;
        CommonTree DISTINCT501_tree=null;
        CommonTree FROM503_tree=null;
        CommonTree WHERE505_tree=null;
        CommonTree RPAREN507_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN499=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr8317); if (state.failed) return retval;
            SELECT500=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr8323); if (state.failed) return retval;
            int alt198=2;
            int LA198_0 = input.LA(1);
            if ( (LA198_0==DISTINCT) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    {
                    DISTINCT501=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr8326); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT501_tree = (CommonTree)adaptor.create(DISTINCT501);
                    adaptor.addChild(root_0, DISTINCT501_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr8329);
            selectionList502=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList502.getTree());
            FROM503=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr8336); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr8339);
            subSelectFilterExpr504=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr504.getTree());
            int alt199=2;
            int LA199_0 = input.LA(1);
            if ( (LA199_0==WHERE) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    {
                    WHERE505=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr8347); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr8350);
                    whereClause506=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause506.getTree());
                    }
                    break;
            }
            RPAREN507=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr8359); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT509=null;
        Token DOT511=null;
        Token AS513=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression508 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression510 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression512 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT509_tree=null;
        CommonTree DOT511_tree=null;
        CommonTree AS513_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr8383);
            eventFilterExpression508=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression508.getTree());
            int alt201=2;
            int LA201_0 = input.LA(1);
            if ( (LA201_0==DOT) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    {
                    DOT509=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8388); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT509);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8390);
                    viewExpression510=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression510.getTree());
                    loop200:
                    do {
                        int alt200=2;
                        int LA200_0 = input.LA(1);
                        if ( (LA200_0==DOT) ) {
                            alt200=1;
                        }
                        switch (alt200) {
                    	case 1 :
                    	    {
                    	    DOT511=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8393); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT511);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8395);
                    	    viewExpression512=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression512.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop200;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt202=3;
            int LA202_0 = input.LA(1);
            if ( (LA202_0==AS) ) {
                alt202=1;
            }
            else if ( (LA202_0==IDENT) ) {
                alt202=2;
            }
            switch (alt202) {
                case 1 :
                    {
                    AS513=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr8402); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS513);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8406); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8412); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt203=3;
            int LA203_0 = input.LA(1);
            if ( (LA203_0==RETAINUNION) ) {
                alt203=1;
            }
            else if ( (LA203_0==RETAININTERSECTION) ) {
                alt203=2;
            }
            switch (alt203) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr8419); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LCURLY514=null;
        Token COMMA516=null;
        Token RCURLY518=null;
        EsperEPL2GrammarParser.expression_return expression515 = null;
        EsperEPL2GrammarParser.expression_return expression517 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass519 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass520 = null;
        CommonTree d_tree=null;
        CommonTree LCURLY514_tree=null;
        CommonTree COMMA516_tree=null;
        CommonTree RCURLY518_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LCURLY514=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression8463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY514);
            int alt205=2;
            int LA205_0 = input.LA(1);
            if ( (LA205_0==WINDOW||LA205_0==ESCAPE||(LA205_0>=NOT_EXPR && LA205_0<=EVERY_EXPR)||LA205_0==WHERE||(LA205_0>=SUM && LA205_0<=COUNT)||LA205_0==CASE||LA205_0==OUTER||(LA205_0>=JOIN && LA205_0<=FULL)||(LA205_0>=EVENTS && LA205_0<=LAST)||(LA205_0>=UNIDIRECTIONAL && LA205_0<=CURRENT_TIMESTAMP)||(LA205_0>=SNAPSHOT && LA205_0<=INDEX)||(LA205_0>=BOOLEAN_TRUE && LA205_0<=VALUE_NULL)||(LA205_0>=DEFINE && LA205_0<=MATCHES)||LA205_0==WHILE||(LA205_0>=MERGE && LA205_0<=MATCHED)||LA205_0==NEWKW||LA205_0==NUM_DOUBLE||(LA205_0>=IDENT && LA205_0<=LCURLY)||LA205_0==LPAREN||(LA205_0>=PLUS && LA205_0<=QUESTION)||(LA205_0>=STRING_LITERAL && LA205_0<=QUOTED_STRING_LITERAL)||LA205_0==MINUS||LA205_0==NUM_INT||(LA205_0>=TICKED_STRING_LITERAL && LA205_0<=NUM_FLOAT)) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression8466);
                    expression515=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression515.getTree());
                    loop204:
                    do {
                        int alt204=2;
                        int LA204_0 = input.LA(1);
                        if ( (LA204_0==COMMA) ) {
                            alt204=1;
                        }
                        switch (alt204) {
                    	case 1 :
                    	    {
                    	    COMMA516=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression8469); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA516);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression8471);
                    	    expression517=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression517.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop204;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY518=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression8478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY518);
            int alt207=2;
            int LA207_0 = input.LA(1);
            if ( (LA207_0==DOT) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression8483); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression8485);
                    libFunctionNoClass519=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass519.getTree());
                    loop206:
                    do {
                        int alt206=2;
                        int LA206_0 = input.LA(1);
                        if ( (LA206_0==DOT) ) {
                            alt206=1;
                        }
                        switch (alt206) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_arrayExpression8490); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_arrayExpression8492);
                    	    libFunctionNoClass520=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass520.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop206;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_2);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token SUM521=null;
        Token LPAREN522=null;
        Token ALL523=null;
        Token DISTINCT524=null;
        Token RPAREN527=null;
        Token AVG528=null;
        Token LPAREN529=null;
        Token ALL530=null;
        Token DISTINCT531=null;
        Token RPAREN534=null;
        Token COUNT535=null;
        Token LPAREN536=null;
        Token ALL537=null;
        Token DISTINCT538=null;
        Token STAR540=null;
        Token RPAREN542=null;
        Token MEDIAN543=null;
        Token LPAREN544=null;
        Token ALL545=null;
        Token DISTINCT546=null;
        Token RPAREN549=null;
        Token STDDEV550=null;
        Token LPAREN551=null;
        Token ALL552=null;
        Token DISTINCT553=null;
        Token RPAREN556=null;
        Token AVEDEV557=null;
        Token LPAREN558=null;
        Token ALL559=null;
        Token DISTINCT560=null;
        Token RPAREN563=null;
        Token COALESCE567=null;
        Token LPAREN568=null;
        Token COMMA570=null;
        Token COMMA572=null;
        Token RPAREN574=null;
        Token PREVIOUS575=null;
        Token LPAREN576=null;
        Token COMMA578=null;
        Token RPAREN580=null;
        Token PREVIOUSTAIL583=null;
        Token LPAREN584=null;
        Token COMMA586=null;
        Token RPAREN588=null;
        Token PREVIOUSCOUNT591=null;
        Token LPAREN592=null;
        Token RPAREN594=null;
        Token PREVIOUSWINDOW595=null;
        Token LPAREN596=null;
        Token RPAREN598=null;
        Token PRIOR601=null;
        Token LPAREN602=null;
        Token NUM_INT603=null;
        Token COMMA604=null;
        Token RPAREN606=null;
        Token INSTANCEOF607=null;
        Token LPAREN608=null;
        Token COMMA610=null;
        Token COMMA612=null;
        Token RPAREN614=null;
        Token TYPEOF615=null;
        Token LPAREN616=null;
        Token RPAREN618=null;
        Token CAST619=null;
        Token LPAREN620=null;
        Token COMMA622=null;
        Token AS623=null;
        Token RPAREN625=null;
        Token EXISTS628=null;
        Token LPAREN629=null;
        Token RPAREN631=null;
        Token CURRENT_TIMESTAMP632=null;
        Token LPAREN633=null;
        Token RPAREN634=null;
        EsperEPL2GrammarParser.expression_return expression525 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr526 = null;
        EsperEPL2GrammarParser.expression_return expression532 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr533 = null;
        EsperEPL2GrammarParser.expression_return expression539 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr541 = null;
        EsperEPL2GrammarParser.expression_return expression547 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr548 = null;
        EsperEPL2GrammarParser.expression_return expression554 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr555 = null;
        EsperEPL2GrammarParser.expression_return expression561 = null;
        EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr562 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation564 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation565 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation566 = null;
        EsperEPL2GrammarParser.expression_return expression569 = null;
        EsperEPL2GrammarParser.expression_return expression571 = null;
        EsperEPL2GrammarParser.expression_return expression573 = null;
        EsperEPL2GrammarParser.expression_return expression577 = null;
        EsperEPL2GrammarParser.expression_return expression579 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass581 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass582 = null;
        EsperEPL2GrammarParser.expression_return expression585 = null;
        EsperEPL2GrammarParser.expression_return expression587 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass589 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass590 = null;
        EsperEPL2GrammarParser.expression_return expression593 = null;
        EsperEPL2GrammarParser.expression_return expression597 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass599 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass600 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty605 = null;
        EsperEPL2GrammarParser.expression_return expression609 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier611 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier613 = null;
        EsperEPL2GrammarParser.expression_return expression617 = null;
        EsperEPL2GrammarParser.expression_return expression621 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier624 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass626 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass627 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty630 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass635 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass636 = null;
        CommonTree d_tree=null;
        CommonTree SUM521_tree=null;
        CommonTree LPAREN522_tree=null;
        CommonTree ALL523_tree=null;
        CommonTree DISTINCT524_tree=null;
        CommonTree RPAREN527_tree=null;
        CommonTree AVG528_tree=null;
        CommonTree LPAREN529_tree=null;
        CommonTree ALL530_tree=null;
        CommonTree DISTINCT531_tree=null;
        CommonTree RPAREN534_tree=null;
        CommonTree COUNT535_tree=null;
        CommonTree LPAREN536_tree=null;
        CommonTree ALL537_tree=null;
        CommonTree DISTINCT538_tree=null;
        CommonTree STAR540_tree=null;
        CommonTree RPAREN542_tree=null;
        CommonTree MEDIAN543_tree=null;
        CommonTree LPAREN544_tree=null;
        CommonTree ALL545_tree=null;
        CommonTree DISTINCT546_tree=null;
        CommonTree RPAREN549_tree=null;
        CommonTree STDDEV550_tree=null;
        CommonTree LPAREN551_tree=null;
        CommonTree ALL552_tree=null;
        CommonTree DISTINCT553_tree=null;
        CommonTree RPAREN556_tree=null;
        CommonTree AVEDEV557_tree=null;
        CommonTree LPAREN558_tree=null;
        CommonTree ALL559_tree=null;
        CommonTree DISTINCT560_tree=null;
        CommonTree RPAREN563_tree=null;
        CommonTree COALESCE567_tree=null;
        CommonTree LPAREN568_tree=null;
        CommonTree COMMA570_tree=null;
        CommonTree COMMA572_tree=null;
        CommonTree RPAREN574_tree=null;
        CommonTree PREVIOUS575_tree=null;
        CommonTree LPAREN576_tree=null;
        CommonTree COMMA578_tree=null;
        CommonTree RPAREN580_tree=null;
        CommonTree PREVIOUSTAIL583_tree=null;
        CommonTree LPAREN584_tree=null;
        CommonTree COMMA586_tree=null;
        CommonTree RPAREN588_tree=null;
        CommonTree PREVIOUSCOUNT591_tree=null;
        CommonTree LPAREN592_tree=null;
        CommonTree RPAREN594_tree=null;
        CommonTree PREVIOUSWINDOW595_tree=null;
        CommonTree LPAREN596_tree=null;
        CommonTree RPAREN598_tree=null;
        CommonTree PRIOR601_tree=null;
        CommonTree LPAREN602_tree=null;
        CommonTree NUM_INT603_tree=null;
        CommonTree COMMA604_tree=null;
        CommonTree RPAREN606_tree=null;
        CommonTree INSTANCEOF607_tree=null;
        CommonTree LPAREN608_tree=null;
        CommonTree COMMA610_tree=null;
        CommonTree COMMA612_tree=null;
        CommonTree RPAREN614_tree=null;
        CommonTree TYPEOF615_tree=null;
        CommonTree LPAREN616_tree=null;
        CommonTree RPAREN618_tree=null;
        CommonTree CAST619_tree=null;
        CommonTree LPAREN620_tree=null;
        CommonTree COMMA622_tree=null;
        CommonTree AS623_tree=null;
        CommonTree RPAREN625_tree=null;
        CommonTree EXISTS628_tree=null;
        CommonTree LPAREN629_tree=null;
        CommonTree RPAREN631_tree=null;
        CommonTree CURRENT_TIMESTAMP632_tree=null;
        CommonTree LPAREN633_tree=null;
        CommonTree RPAREN634_tree=null;
        RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PREVIOUSTAIL=new RewriteRuleTokenStream(adaptor,"token PREVIOUSTAIL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_CURRENT_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token CURRENT_TIMESTAMP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PREVIOUS=new RewriteRuleTokenStream(adaptor,"token PREVIOUS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_PREVIOUSWINDOW=new RewriteRuleTokenStream(adaptor,"token PREVIOUSWINDOW");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            int alt237=20;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt237=1;
                }
                break;
            case AVG:
                {
                alt237=2;
                }
                break;
            case COUNT:
                {
                alt237=3;
                }
                break;
            case MEDIAN:
                {
                alt237=4;
                }
                break;
            case STDDEV:
                {
                alt237=5;
                }
                break;
            case AVEDEV:
                {
                alt237=6;
                }
                break;
            case FIRST:
                {
                alt237=7;
                }
                break;
            case LAST:
                {
                alt237=8;
                }
                break;
            case WINDOW:
                {
                alt237=9;
                }
                break;
            case COALESCE:
                {
                alt237=10;
                }
                break;
            case PREVIOUS:
                {
                alt237=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt237=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt237=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt237=14;
                }
                break;
            case PRIOR:
                {
                alt237=15;
                }
                break;
            case INSTANCEOF:
                {
                alt237=16;
                }
                break;
            case TYPEOF:
                {
                alt237=17;
                }
                break;
            case CAST:
                {
                alt237=18;
                }
                break;
            case EXISTS:
                {
                alt237=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt237=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);
                throw nvae;
            }
            switch (alt237) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM521=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc8541); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM521_tree = (CommonTree)adaptor.create(SUM521);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM521_tree, root_0);
                    }
                    LPAREN522=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8544); if (state.failed) return retval;
                    int alt208=3;
                    int LA208_0 = input.LA(1);
                    if ( (LA208_0==ALL) ) {
                        alt208=1;
                    }
                    else if ( (LA208_0==DISTINCT) ) {
                        alt208=2;
                    }
                    switch (alt208) {
                        case 1 :
                            {
                            ALL523=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8548); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT524=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8553); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT524_tree = (CommonTree)adaptor.create(DISTINCT524);
                            adaptor.addChild(root_0, DISTINCT524_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8557);
                    expression525=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression525.getTree());
                    int alt209=2;
                    int LA209_0 = input.LA(1);
                    if ( (LA209_0==COMMA) ) {
                        alt209=1;
                    }
                    switch (alt209) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc8559);
                            aggregationFilterExpr526=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr526.getTree());
                            }
                            break;
                    }
                    RPAREN527=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8562); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG528=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc8568); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG528_tree = (CommonTree)adaptor.create(AVG528);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG528_tree, root_0);
                    }
                    LPAREN529=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8571); if (state.failed) return retval;
                    int alt210=3;
                    int LA210_0 = input.LA(1);
                    if ( (LA210_0==ALL) ) {
                        alt210=1;
                    }
                    else if ( (LA210_0==DISTINCT) ) {
                        alt210=2;
                    }
                    switch (alt210) {
                        case 1 :
                            {
                            ALL530=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8575); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT531=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8580); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT531_tree = (CommonTree)adaptor.create(DISTINCT531);
                            adaptor.addChild(root_0, DISTINCT531_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8584);
                    expression532=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression532.getTree());
                    int alt211=2;
                    int LA211_0 = input.LA(1);
                    if ( (LA211_0==COMMA) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc8586);
                            aggregationFilterExpr533=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr533.getTree());
                            }
                            break;
                    }
                    RPAREN534=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8589); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT535=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc8595); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT535_tree = (CommonTree)adaptor.create(COUNT535);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT535_tree, root_0);
                    }
                    LPAREN536=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8598); if (state.failed) return retval;
                    int alt213=2;
                    int LA213_0 = input.LA(1);
                    if ( (LA213_0==WINDOW||LA213_0==ESCAPE||(LA213_0>=NOT_EXPR && LA213_0<=EVERY_EXPR)||LA213_0==WHERE||(LA213_0>=SUM && LA213_0<=COUNT)||LA213_0==CASE||LA213_0==OUTER||(LA213_0>=JOIN && LA213_0<=FULL)||(LA213_0>=DISTINCT && LA213_0<=ALL)||(LA213_0>=EVENTS && LA213_0<=LAST)||(LA213_0>=UNIDIRECTIONAL && LA213_0<=CURRENT_TIMESTAMP)||(LA213_0>=SNAPSHOT && LA213_0<=INDEX)||(LA213_0>=BOOLEAN_TRUE && LA213_0<=VALUE_NULL)||(LA213_0>=DEFINE && LA213_0<=MATCHES)||LA213_0==WHILE||(LA213_0>=MERGE && LA213_0<=MATCHED)||LA213_0==NEWKW||LA213_0==NUM_DOUBLE||(LA213_0>=IDENT && LA213_0<=LCURLY)||LA213_0==LPAREN||(LA213_0>=PLUS && LA213_0<=QUESTION)||(LA213_0>=STRING_LITERAL && LA213_0<=QUOTED_STRING_LITERAL)||LA213_0==MINUS||LA213_0==NUM_INT||(LA213_0>=TICKED_STRING_LITERAL && LA213_0<=NUM_FLOAT)) ) {
                        alt213=1;
                    }
                    else if ( (LA213_0==STAR) ) {
                        alt213=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 213, 0, input);
                        throw nvae;
                    }
                    switch (alt213) {
                        case 1 :
                            {
                            {
                            int alt212=3;
                            int LA212_0 = input.LA(1);
                            if ( (LA212_0==ALL) ) {
                                alt212=1;
                            }
                            else if ( (LA212_0==DISTINCT) ) {
                                alt212=2;
                            }
                            switch (alt212) {
                                case 1 :
                                    {
                                    ALL537=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8610); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT538=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8615); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT538_tree = (CommonTree)adaptor.create(DISTINCT538);
                                    adaptor.addChild(root_0, DISTINCT538_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc8619);
                            expression539=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression539.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR540=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc8630); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    int alt214=2;
                    int LA214_0 = input.LA(1);
                    if ( (LA214_0==COMMA) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc8641);
                            aggregationFilterExpr541=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr541.getTree());
                            }
                            break;
                    }
                    RPAREN542=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8644); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN543=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc8650); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN543_tree = (CommonTree)adaptor.create(MEDIAN543);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN543_tree, root_0);
                    }
                    LPAREN544=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8653); if (state.failed) return retval;
                    int alt215=3;
                    int LA215_0 = input.LA(1);
                    if ( (LA215_0==ALL) ) {
                        alt215=1;
                    }
                    else if ( (LA215_0==DISTINCT) ) {
                        alt215=2;
                    }
                    switch (alt215) {
                        case 1 :
                            {
                            ALL545=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8657); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT546=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8662); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT546_tree = (CommonTree)adaptor.create(DISTINCT546);
                            adaptor.addChild(root_0, DISTINCT546_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8666);
                    expression547=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression547.getTree());
                    int alt216=2;
                    int LA216_0 = input.LA(1);
                    if ( (LA216_0==COMMA) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc8668);
                            aggregationFilterExpr548=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr548.getTree());
                            }
                            break;
                    }
                    RPAREN549=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8671); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV550=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc8677); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV550_tree = (CommonTree)adaptor.create(STDDEV550);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV550_tree, root_0);
                    }
                    LPAREN551=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8680); if (state.failed) return retval;
                    int alt217=3;
                    int LA217_0 = input.LA(1);
                    if ( (LA217_0==ALL) ) {
                        alt217=1;
                    }
                    else if ( (LA217_0==DISTINCT) ) {
                        alt217=2;
                    }
                    switch (alt217) {
                        case 1 :
                            {
                            ALL552=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8684); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT553=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8689); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT553_tree = (CommonTree)adaptor.create(DISTINCT553);
                            adaptor.addChild(root_0, DISTINCT553_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8693);
                    expression554=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression554.getTree());
                    int alt218=2;
                    int LA218_0 = input.LA(1);
                    if ( (LA218_0==COMMA) ) {
                        alt218=1;
                    }
                    switch (alt218) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc8695);
                            aggregationFilterExpr555=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr555.getTree());
                            }
                            break;
                    }
                    RPAREN556=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8698); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV557=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc8704); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV557_tree = (CommonTree)adaptor.create(AVEDEV557);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV557_tree, root_0);
                    }
                    LPAREN558=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8707); if (state.failed) return retval;
                    int alt219=3;
                    int LA219_0 = input.LA(1);
                    if ( (LA219_0==ALL) ) {
                        alt219=1;
                    }
                    else if ( (LA219_0==DISTINCT) ) {
                        alt219=2;
                    }
                    switch (alt219) {
                        case 1 :
                            {
                            ALL559=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8711); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT560=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8716); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT560_tree = (CommonTree)adaptor.create(DISTINCT560);
                            adaptor.addChild(root_0, DISTINCT560_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8720);
                    expression561=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression561.getTree());
                    int alt220=2;
                    int LA220_0 = input.LA(1);
                    if ( (LA220_0==COMMA) ) {
                        alt220=1;
                    }
                    switch (alt220) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_aggregationFilterExpr_in_builtinFunc8722);
                            aggregationFilterExpr562=aggregationFilterExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregationFilterExpr562.getTree());
                            }
                            break;
                    }
                    RPAREN563=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8725); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc8731);
                    firstAggregation564=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation564.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc8736);
                    lastAggregation565=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation565.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc8741);
                    windowAggregation566=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation566.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE567=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc8746); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE567_tree = (CommonTree)adaptor.create(COALESCE567);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE567_tree, root_0);
                    }
                    LPAREN568=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8749); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8752);
                    expression569=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression569.getTree());
                    COMMA570=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8754); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8757);
                    expression571=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression571.getTree());
                    loop221:
                    do {
                        int alt221=2;
                        int LA221_0 = input.LA(1);
                        if ( (LA221_0==COMMA) ) {
                            alt221=1;
                        }
                        switch (alt221) {
                    	case 1 :
                    	    {
                    	    COMMA572=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8760); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc8763);
                    	    expression573=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression573.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop221;
                        }
                    } while (true);
                    RPAREN574=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8767); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    PREVIOUS575=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc8773); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUS.add(PREVIOUS575);
                    LPAREN576=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN576);
                    pushFollow(FOLLOW_expression_in_builtinFunc8777);
                    expression577=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression577.getTree());
                    int alt222=2;
                    int LA222_0 = input.LA(1);
                    if ( (LA222_0==COMMA) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            {
                            COMMA578=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8780); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA578);
                            pushFollow(FOLLOW_expression_in_builtinFunc8782);
                            expression579=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression579.getTree());
                            }
                            break;
                    }
                    RPAREN580=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN580);
                    int alt224=2;
                    int LA224_0 = input.LA(1);
                    if ( (LA224_0==DOT) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8791); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8793);
                            libFunctionNoClass581=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass581.getTree());
                            loop223:
                            do {
                                int alt223=2;
                                int LA223_0 = input.LA(1);
                                if ( (LA223_0==DOT) ) {
                                    alt223=1;
                                }
                                switch (alt223) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8798); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8800);
                            	    libFunctionNoClass582=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass582.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop223;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    {
                    PREVIOUSTAIL583=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc8847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSTAIL.add(PREVIOUSTAIL583);
                    LPAREN584=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8849); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN584);
                    pushFollow(FOLLOW_expression_in_builtinFunc8851);
                    expression585=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression585.getTree());
                    int alt225=2;
                    int LA225_0 = input.LA(1);
                    if ( (LA225_0==COMMA) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            {
                            COMMA586=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8854); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA586);
                            pushFollow(FOLLOW_expression_in_builtinFunc8856);
                            expression587=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression587.getTree());
                            }
                            break;
                    }
                    RPAREN588=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN588);
                    int alt227=2;
                    int LA227_0 = input.LA(1);
                    if ( (LA227_0==DOT) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8865); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8867);
                            libFunctionNoClass589=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass589.getTree());
                            loop226:
                            do {
                                int alt226=2;
                                int LA226_0 = input.LA(1);
                                if ( (LA226_0==DOT) ) {
                                    alt226=1;
                                }
                                switch (alt226) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8872); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8874);
                            	    libFunctionNoClass590=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass590.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop226;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT591=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc8921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT591_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT591);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT591_tree, root_0);
                    }
                    LPAREN592=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8924); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8927);
                    expression593=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression593.getTree());
                    RPAREN594=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8929); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    PREVIOUSWINDOW595=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc8935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSWINDOW.add(PREVIOUSWINDOW595);
                    LPAREN596=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN596);
                    pushFollow(FOLLOW_expression_in_builtinFunc8939);
                    expression597=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression597.getTree());
                    RPAREN598=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8941); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN598);
                    int alt229=2;
                    int LA229_0 = input.LA(1);
                    if ( (LA229_0==DOT) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8946); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8948);
                            libFunctionNoClass599=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass599.getTree());
                            loop228:
                            do {
                                int alt228=2;
                                int LA228_0 = input.LA(1);
                                if ( (LA228_0==DOT) ) {
                                    alt228=1;
                                }
                                switch (alt228) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8953); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8955);
                            	    libFunctionNoClass600=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass600.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop228;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR601=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc9000); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR601_tree = (CommonTree)adaptor.create(PRIOR601);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR601_tree, root_0);
                    }
                    LPAREN602=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9003); if (state.failed) return retval;
                    NUM_INT603=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc9006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT603_tree = (CommonTree)adaptor.create(NUM_INT603);
                    adaptor.addChild(root_0, NUM_INT603_tree);
                    }
                    COMMA604=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9008); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc9011);
                    eventProperty605=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty605.getTree());
                    RPAREN606=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9013); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF607=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc9023); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF607_tree = (CommonTree)adaptor.create(INSTANCEOF607);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF607_tree, root_0);
                    }
                    LPAREN608=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9026); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9029);
                    expression609=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression609.getTree());
                    COMMA610=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9031); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9034);
                    classIdentifier611=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier611.getTree());
                    loop230:
                    do {
                        int alt230=2;
                        int LA230_0 = input.LA(1);
                        if ( (LA230_0==COMMA) ) {
                            alt230=1;
                        }
                        switch (alt230) {
                    	case 1 :
                    	    {
                    	    COMMA612=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9037); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9040);
                    	    classIdentifier613=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier613.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop230;
                        }
                    } while (true);
                    RPAREN614=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9044); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF615=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc9050); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF615_tree = (CommonTree)adaptor.create(TYPEOF615);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF615_tree, root_0);
                    }
                    LPAREN616=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9053); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc9056);
                    expression617=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression617.getTree());
                    RPAREN618=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9058); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    CAST619=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc9064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAST.add(CAST619);
                    LPAREN620=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN620);
                    pushFollow(FOLLOW_expression_in_builtinFunc9068);
                    expression621=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression621.getTree());
                    int alt231=2;
                    int LA231_0 = input.LA(1);
                    if ( (LA231_0==COMMA) ) {
                        alt231=1;
                    }
                    else if ( (LA231_0==AS) ) {
                        alt231=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 231, 0, input);
                        throw nvae;
                    }
                    switch (alt231) {
                        case 1 :
                            {
                            COMMA622=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc9071); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA622);
                            }
                            break;
                        case 2 :
                            {
                            AS623=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc9075); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS623);
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc9078);
                    classIdentifier624=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier624.getTree());
                    RPAREN625=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN625);
                    int alt233=2;
                    int LA233_0 = input.LA(1);
                    if ( (LA233_0==DOT) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9085); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9087);
                            libFunctionNoClass626=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass626.getTree());
                            loop232:
                            do {
                                int alt232=2;
                                int LA232_0 = input.LA(1);
                                if ( (LA232_0==DOT) ) {
                                    alt232=1;
                                }
                                switch (alt232) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9092); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9094);
                            	    libFunctionNoClass627=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass627.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop232;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_2, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CAST.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS628=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc9139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS628_tree = (CommonTree)adaptor.create(EXISTS628);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS628_tree, root_0);
                    }
                    LPAREN629=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9142); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc9145);
                    eventProperty630=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty630.getTree());
                    RPAREN631=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9147); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    CURRENT_TIMESTAMP632=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc9153); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CURRENT_TIMESTAMP.add(CURRENT_TIMESTAMP632);
                    int alt234=2;
                    int LA234_0 = input.LA(1);
                    if ( (LA234_0==LPAREN) ) {
                        alt234=1;
                    }
                    switch (alt234) {
                        case 1 :
                            {
                            LPAREN633=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc9156); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN633);
                            RPAREN634=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc9158); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN634);
                            }
                            break;
                    }
                    int alt236=2;
                    int LA236_0 = input.LA(1);
                    if ( (LA236_0==DOT) ) {
                        alt236=1;
                    }
                    switch (alt236) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9165); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9167);
                            libFunctionNoClass635=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass635.getTree());
                            loop235:
                            do {
                                int alt235=2;
                                int LA235_0 = input.LA(1);
                                if ( (LA235_0==DOT) ) {
                                    alt235=1;
                                }
                                switch (alt235) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc9172); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc9174);
                            	    libFunctionNoClass636=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass636.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop235;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_2);
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CURRENT_TIMESTAMP.nextNode(), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token FIRST637=null;
        Token LPAREN638=null;
        Token COMMA640=null;
        Token RPAREN642=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr639 = null;
        EsperEPL2GrammarParser.expression_return expression641 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass643 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass644 = null;
        CommonTree d_tree=null;
        CommonTree FIRST637_tree=null;
        CommonTree LPAREN638_tree=null;
        CommonTree COMMA640_tree=null;
        CommonTree RPAREN642_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            FIRST637=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation9218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST637);
            LPAREN638=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation9220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN638);
            int alt239=2;
            int LA239_0 = input.LA(1);
            if ( (LA239_0==WINDOW||LA239_0==ESCAPE||(LA239_0>=NOT_EXPR && LA239_0<=EVERY_EXPR)||LA239_0==WHERE||(LA239_0>=SUM && LA239_0<=COUNT)||LA239_0==CASE||LA239_0==OUTER||(LA239_0>=JOIN && LA239_0<=FULL)||(LA239_0>=EVENTS && LA239_0<=LAST)||(LA239_0>=UNIDIRECTIONAL && LA239_0<=CURRENT_TIMESTAMP)||(LA239_0>=SNAPSHOT && LA239_0<=INDEX)||(LA239_0>=BOOLEAN_TRUE && LA239_0<=VALUE_NULL)||(LA239_0>=DEFINE && LA239_0<=MATCHES)||LA239_0==WHILE||(LA239_0>=MERGE && LA239_0<=MATCHED)||LA239_0==NEWKW||LA239_0==NUM_DOUBLE||(LA239_0>=IDENT && LA239_0<=LCURLY)||LA239_0==LPAREN||LA239_0==STAR||(LA239_0>=PLUS && LA239_0<=QUESTION)||(LA239_0>=STRING_LITERAL && LA239_0<=QUOTED_STRING_LITERAL)||LA239_0==MINUS||LA239_0==NUM_INT||(LA239_0>=TICKED_STRING_LITERAL && LA239_0<=NUM_FLOAT)) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_firstAggregation9223);
                    accessAggExpr639=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr639.getTree());
                    int alt238=2;
                    int LA238_0 = input.LA(1);
                    if ( (LA238_0==COMMA) ) {
                        alt238=1;
                    }
                    switch (alt238) {
                        case 1 :
                            {
                            COMMA640=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation9226); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA640);
                            pushFollow(FOLLOW_expression_in_firstAggregation9228);
                            expression641=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression641.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN642=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation9234); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN642);
            int alt241=2;
            int LA241_0 = input.LA(1);
            if ( (LA241_0==DOT) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation9239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation9241);
                    libFunctionNoClass643=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass643.getTree());
                    loop240:
                    do {
                        int alt240=2;
                        int LA240_0 = input.LA(1);
                        if ( (LA240_0==DOT) ) {
                            alt240=1;
                        }
                        switch (alt240) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation9246); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation9248);
                    	    libFunctionNoClass644=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass644.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop240;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LAST645=null;
        Token LPAREN646=null;
        Token COMMA648=null;
        Token RPAREN650=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr647 = null;
        EsperEPL2GrammarParser.expression_return expression649 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass651 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass652 = null;
        CommonTree d_tree=null;
        CommonTree LAST645_tree=null;
        CommonTree LPAREN646_tree=null;
        CommonTree COMMA648_tree=null;
        CommonTree RPAREN650_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LAST645=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation9303); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST645);
            LPAREN646=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation9305); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN646);
            int alt243=2;
            int LA243_0 = input.LA(1);
            if ( (LA243_0==WINDOW||LA243_0==ESCAPE||(LA243_0>=NOT_EXPR && LA243_0<=EVERY_EXPR)||LA243_0==WHERE||(LA243_0>=SUM && LA243_0<=COUNT)||LA243_0==CASE||LA243_0==OUTER||(LA243_0>=JOIN && LA243_0<=FULL)||(LA243_0>=EVENTS && LA243_0<=LAST)||(LA243_0>=UNIDIRECTIONAL && LA243_0<=CURRENT_TIMESTAMP)||(LA243_0>=SNAPSHOT && LA243_0<=INDEX)||(LA243_0>=BOOLEAN_TRUE && LA243_0<=VALUE_NULL)||(LA243_0>=DEFINE && LA243_0<=MATCHES)||LA243_0==WHILE||(LA243_0>=MERGE && LA243_0<=MATCHED)||LA243_0==NEWKW||LA243_0==NUM_DOUBLE||(LA243_0>=IDENT && LA243_0<=LCURLY)||LA243_0==LPAREN||LA243_0==STAR||(LA243_0>=PLUS && LA243_0<=QUESTION)||(LA243_0>=STRING_LITERAL && LA243_0<=QUOTED_STRING_LITERAL)||LA243_0==MINUS||LA243_0==NUM_INT||(LA243_0>=TICKED_STRING_LITERAL && LA243_0<=NUM_FLOAT)) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_lastAggregation9308);
                    accessAggExpr647=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr647.getTree());
                    int alt242=2;
                    int LA242_0 = input.LA(1);
                    if ( (LA242_0==COMMA) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            {
                            COMMA648=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation9311); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA648);
                            pushFollow(FOLLOW_expression_in_lastAggregation9313);
                            expression649=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression649.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            RPAREN650=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation9319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN650);
            int alt245=2;
            int LA245_0 = input.LA(1);
            if ( (LA245_0==DOT) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation9324); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation9326);
                    libFunctionNoClass651=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass651.getTree());
                    loop244:
                    do {
                        int alt244=2;
                        int LA244_0 = input.LA(1);
                        if ( (LA244_0==DOT) ) {
                            alt244=1;
                        }
                        switch (alt244) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation9331); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation9333);
                    	    libFunctionNoClass652=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass652.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop244;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token WINDOW653=null;
        Token LPAREN654=null;
        Token RPAREN656=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr655 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass657 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass658 = null;
        CommonTree d_tree=null;
        CommonTree WINDOW653_tree=null;
        CommonTree LPAREN654_tree=null;
        CommonTree RPAREN656_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            WINDOW653=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation9389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW653);
            LPAREN654=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation9391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN654);
            int alt246=2;
            int LA246_0 = input.LA(1);
            if ( (LA246_0==WINDOW||LA246_0==ESCAPE||(LA246_0>=NOT_EXPR && LA246_0<=EVERY_EXPR)||LA246_0==WHERE||(LA246_0>=SUM && LA246_0<=COUNT)||LA246_0==CASE||LA246_0==OUTER||(LA246_0>=JOIN && LA246_0<=FULL)||(LA246_0>=EVENTS && LA246_0<=LAST)||(LA246_0>=UNIDIRECTIONAL && LA246_0<=CURRENT_TIMESTAMP)||(LA246_0>=SNAPSHOT && LA246_0<=INDEX)||(LA246_0>=BOOLEAN_TRUE && LA246_0<=VALUE_NULL)||(LA246_0>=DEFINE && LA246_0<=MATCHES)||LA246_0==WHILE||(LA246_0>=MERGE && LA246_0<=MATCHED)||LA246_0==NEWKW||LA246_0==NUM_DOUBLE||(LA246_0>=IDENT && LA246_0<=LCURLY)||LA246_0==LPAREN||LA246_0==STAR||(LA246_0>=PLUS && LA246_0<=QUESTION)||(LA246_0>=STRING_LITERAL && LA246_0<=QUOTED_STRING_LITERAL)||LA246_0==MINUS||LA246_0==NUM_INT||(LA246_0>=TICKED_STRING_LITERAL && LA246_0<=NUM_FLOAT)) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    {
                    pushFollow(FOLLOW_accessAggExpr_in_windowAggregation9393);
                    accessAggExpr655=accessAggExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr655.getTree());
                    }
                    break;
            }
            RPAREN656=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation9396); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN656);
            int alt248=2;
            int LA248_0 = input.LA(1);
            if ( (LA248_0==DOT) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation9401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation9403);
                    libFunctionNoClass657=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass657.getTree());
                    loop247:
                    do {
                        int alt247=2;
                        int LA247_0 = input.LA(1);
                        if ( (LA247_0==DOT) ) {
                            alt247=1;
                        }
                        switch (alt247) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation9408); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation9410);
                    	    libFunctionNoClass658=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass658.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop247;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_2);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                if ( stream_accessAggExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                }
                stream_accessAggExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector659 = null;
        EsperEPL2GrammarParser.expression_return expression660 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertyStreamSelector=new RewriteRuleSubtreeStream(adaptor,"rule propertyStreamSelector");
        try {
            int alt249=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt249=1;
                }
                break;
            case IDENT:
                {
                int LA249_2 = input.LA(2);
                if ( (LA249_2==DOT) ) {
                    int LA249_72 = input.LA(3);
                    if ( (LA249_72==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt249=2;
                    }
                    else if ( (LA249_72==WINDOW||LA249_72==ESCAPE||LA249_72==EVERY_EXPR||LA249_72==WHERE||(LA249_72>=SUM && LA249_72<=COUNT)||LA249_72==OUTER||(LA249_72>=JOIN && LA249_72<=FULL)||(LA249_72>=EVENTS && LA249_72<=LAST)||(LA249_72>=UNIDIRECTIONAL && LA249_72<=PREVIOUSTAIL)||LA249_72==PRIOR||(LA249_72>=WEEKDAY && LA249_72<=CAST)||(LA249_72>=SNAPSHOT && LA249_72<=INDEX)||(LA249_72>=DEFINE && LA249_72<=MATCHES)||LA249_72==WHILE||(LA249_72>=MERGE && LA249_72<=MATCHED)||LA249_72==IDENT||LA249_72==TICKED_STRING_LITERAL) ) {
                        alt249=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 249, 72, input);
                        throw nvae;
                    }
                }
                else if ( ((LA249_2>=IN_SET && LA249_2<=REGEXP)||(LA249_2>=OR_EXPR && LA249_2<=NOT_EXPR)||LA249_2==IS||(LA249_2>=LPAREN && LA249_2<=RPAREN)||(LA249_2>=COMMA && LA249_2<=EQUALS)||LA249_2==LBRACK||(LA249_2>=STAR && LA249_2<=QUESTION)||(LA249_2>=BAND && LA249_2<=MOD)||LA249_2==ESCAPECHAR) ) {
                    alt249=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 249, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt249=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);
                throw nvae;
            }
            switch (alt249) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr9467); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr9487);
                    propertyStreamSelector659=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyStreamSelector.add(propertyStreamSelector659.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_propertyStreamSelector.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_accessAggExpr9500);
                    expression660=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression660.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_AGG, "ACCESS_AGG"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class aggregationFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.aggregationFilterExpr_return aggregationFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.aggregationFilterExpr_return retval = new EsperEPL2GrammarParser.aggregationFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA661=null;
        EsperEPL2GrammarParser.expression_return expression662 = null;
        CommonTree COMMA661_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            COMMA661=(Token)match(input,COMMA,FOLLOW_COMMA_in_aggregationFilterExpr9519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA661);
            pushFollow(FOLLOW_expression_in_aggregationFilterExpr9521);
            expression662=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression662.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AGG_FILTER_EXPR, "AGG_FILTER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty663 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction664 = null;
        try {
            int alt250=2;
            int LA250_0 = input.LA(1);
            if ( (LA250_0==IDENT) ) {
                int LA250_1 = input.LA(2);
                if ( (LA250_1==DOT) ) {
                    int LA250_50 = input.LA(3);
                    if ( (LA250_50==IDENT) ) {
                        int LA250_290 = input.LA(4);
                        if ( (LA250_290==LPAREN) ) {
                            int LA250_688 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 688, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_290==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_290==DOT) ) {
                            int LA250_747 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 747, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 290, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_50==TICKED_STRING_LITERAL) ) {
                        int LA250_291 = input.LA(4);
                        if ( (LA250_291==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==LPAREN) ) {
                            int LA250_750 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 750, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_291==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_291==DOT) ) {
                            int LA250_807 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 807, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 291, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_50==MAX) ) {
                        int LA250_292 = input.LA(4);
                        if ( (LA250_292==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==LPAREN) ) {
                            int LA250_810 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 810, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_292==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_292==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 292, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_50==MIN) ) {
                        int LA250_293 = input.LA(4);
                        if ( (LA250_293==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==LPAREN) ) {
                            int LA250_870 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 870, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_293==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_293==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 293, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_50==WHERE||LA250_50==SET) ) {
                        alt250=2;
                    }
                    else if ( (LA250_50==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_50==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 50, input);
                        throw nvae;
                    }
                }
                else if ( (LA250_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt250=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA250_352 = input.LA(4);
                        if ( ((LA250_352>=IN_SET && LA250_352<=REGEXP)||(LA250_352>=OR_EXPR && LA250_352<=NOT_EXPR)||LA250_352==IS||(LA250_352>=ASC && LA250_352<=DESC)||(LA250_352>=TIMEPERIOD_SEC && LA250_352<=TIMEPERIOD_SECONDS)||(LA250_352>=COMMA && LA250_352<=EQUALS)||(LA250_352>=STAR && LA250_352<=PLUS)||(LA250_352>=BAND && LA250_352<=MOD)) ) {
                            alt250=2;
                        }
                        else if ( (LA250_352==RPAREN) ) {
                            int LA250_953 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 953, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 352, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA250_353 = input.LA(4);
                        if ( (LA250_353==RPAREN) ) {
                            int LA250_959 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 959, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA250_353>=IN_SET && LA250_353<=REGEXP)||(LA250_353>=OR_EXPR && LA250_353<=NOT_EXPR)||LA250_353==IS||(LA250_353>=ASC && LA250_353<=DESC)||(LA250_353>=TIMEPERIOD_SEC && LA250_353<=TIMEPERIOD_SECONDS)||(LA250_353>=COMMA && LA250_353<=EQUALS)||(LA250_353>=STAR && LA250_353<=PLUS)||(LA250_353>=BAND && LA250_353<=MOD)) ) {
                            alt250=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 353, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 51, input);
                        throw nvae;
                    }
                }
                else if ( (LA250_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA250_0==TICKED_STRING_LITERAL) ) {
                int LA250_2 = input.LA(2);
                if ( (LA250_2==DOT) ) {
                    int LA250_110 = input.LA(3);
                    if ( (LA250_110==IDENT) ) {
                        int LA250_414 = input.LA(4);
                        if ( (LA250_414==LPAREN) ) {
                            int LA250_990 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 990, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_414==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_414==DOT) ) {
                            int LA250_1049 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1049, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 414, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_110==TICKED_STRING_LITERAL) ) {
                        int LA250_415 = input.LA(4);
                        if ( (LA250_415==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==LPAREN) ) {
                            int LA250_1052 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1052, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_415==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_415==DOT) ) {
                            int LA250_1109 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1109, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 415, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_110==MAX) ) {
                        int LA250_416 = input.LA(4);
                        if ( (LA250_416==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==LPAREN) ) {
                            int LA250_1112 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1112, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_416==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_416==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 416, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_110==MIN) ) {
                        int LA250_417 = input.LA(4);
                        if ( (LA250_417==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==LPAREN) ) {
                            int LA250_1172 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1172, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA250_417==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else if ( (LA250_417==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt250=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 417, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA250_110==WHERE||LA250_110==SET) ) {
                        alt250=2;
                    }
                    else if ( (LA250_110==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else if ( (LA250_110==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt250=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 110, input);
                        throw nvae;
                    }
                }
                else if ( (LA250_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt250=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA250_476 = input.LA(4);
                        if ( ((LA250_476>=IN_SET && LA250_476<=REGEXP)||(LA250_476>=OR_EXPR && LA250_476<=NOT_EXPR)||LA250_476==IS||(LA250_476>=ASC && LA250_476<=DESC)||(LA250_476>=TIMEPERIOD_SEC && LA250_476<=TIMEPERIOD_SECONDS)||(LA250_476>=COMMA && LA250_476<=EQUALS)||(LA250_476>=STAR && LA250_476<=PLUS)||(LA250_476>=BAND && LA250_476<=MOD)) ) {
                            alt250=2;
                        }
                        else if ( (LA250_476==RPAREN) ) {
                            int LA250_1255 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1255, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 476, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA250_477 = input.LA(4);
                        if ( (LA250_477==RPAREN) ) {
                            int LA250_1261 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1261, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA250_477>=IN_SET && LA250_477<=REGEXP)||(LA250_477>=OR_EXPR && LA250_477<=NOT_EXPR)||LA250_477==IS||(LA250_477>=ASC && LA250_477<=DESC)||(LA250_477>=TIMEPERIOD_SEC && LA250_477<=TIMEPERIOD_SECONDS)||(LA250_477>=COMMA && LA250_477<=EQUALS)||(LA250_477>=STAR && LA250_477<=PLUS)||(LA250_477>=BAND && LA250_477<=MOD)) ) {
                            alt250=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 477, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 113, input);
                        throw nvae;
                    }
                }
                else if ( (LA250_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA250_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==MAX) ) {
                int LA250_9 = input.LA(2);
                if ( (LA250_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt250=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA250_551 = input.LA(4);
                        if ( ((LA250_551>=IN_SET && LA250_551<=REGEXP)||(LA250_551>=OR_EXPR && LA250_551<=NOT_EXPR)||LA250_551==IS||(LA250_551>=ASC && LA250_551<=DESC)||(LA250_551>=TIMEPERIOD_SEC && LA250_551<=TIMEPERIOD_SECONDS)||(LA250_551>=COMMA && LA250_551<=EQUALS)||(LA250_551>=STAR && LA250_551<=PLUS)||(LA250_551>=BAND && LA250_551<=MOD)) ) {
                            alt250=2;
                        }
                        else if ( (LA250_551==RPAREN) ) {
                            int LA250_1317 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1317, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 551, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA250_552 = input.LA(4);
                        if ( (LA250_552==RPAREN) ) {
                            int LA250_1323 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1323, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA250_552>=IN_SET && LA250_552<=REGEXP)||(LA250_552>=OR_EXPR && LA250_552<=NOT_EXPR)||LA250_552==IS||(LA250_552>=ASC && LA250_552<=DESC)||(LA250_552>=TIMEPERIOD_SEC && LA250_552<=TIMEPERIOD_SECONDS)||(LA250_552>=COMMA && LA250_552<=EQUALS)||(LA250_552>=STAR && LA250_552<=PLUS)||(LA250_552>=BAND && LA250_552<=MOD)) ) {
                            alt250=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 552, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 170, input);
                        throw nvae;
                    }
                }
                else if ( (LA250_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA250_0==MIN) ) {
                int LA250_10 = input.LA(2);
                if ( (LA250_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case SET:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NEWKW:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case LBRACK:
                    case STAR:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt250=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA250_626 = input.LA(4);
                        if ( ((LA250_626>=IN_SET && LA250_626<=REGEXP)||(LA250_626>=OR_EXPR && LA250_626<=NOT_EXPR)||LA250_626==IS||(LA250_626>=ASC && LA250_626<=DESC)||(LA250_626>=TIMEPERIOD_SEC && LA250_626<=TIMEPERIOD_SECONDS)||(LA250_626>=COMMA && LA250_626<=EQUALS)||(LA250_626>=STAR && LA250_626<=PLUS)||(LA250_626>=BAND && LA250_626<=MOD)) ) {
                            alt250=2;
                        }
                        else if ( (LA250_626==RPAREN) ) {
                            int LA250_1379 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1379, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 626, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA250_627 = input.LA(4);
                        if ( (LA250_627==RPAREN) ) {
                            int LA250_1385 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt250=1;
                            }
                            else if ( (true) ) {
                                alt250=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 250, 1385, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA250_627>=IN_SET && LA250_627<=REGEXP)||(LA250_627>=OR_EXPR && LA250_627<=NOT_EXPR)||LA250_627==IS||(LA250_627>=ASC && LA250_627<=DESC)||(LA250_627>=TIMEPERIOD_SEC && LA250_627<=TIMEPERIOD_SECONDS)||(LA250_627>=COMMA && LA250_627<=EQUALS)||(LA250_627>=STAR && LA250_627<=PLUS)||(LA250_627>=BAND && LA250_627<=MOD)) ) {
                            alt250=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 250, 627, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 232, input);
                        throw nvae;
                    }
                }
                else if ( (LA250_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else if ( (LA250_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt250=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA250_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt250=1;
            }
            else if ( (LA250_0==WHERE||LA250_0==SET) ) {
                alt250=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 250, 0, input);
                throw nvae;
            }
            switch (alt250) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction9549);
                    eventProperty663=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty663.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction9554);
                    libFunction664=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction664.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT666=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass665 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass667 = null;
        CommonTree DOT666_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction9566);
            libFunctionWithClass665=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass665.getTree());
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);
                if ( (LA251_0==DOT) ) {
                    alt251=1;
                }
                switch (alt251) {
            	case 1 :
            	    {
            	    DOT666=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction9569); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT666);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction9571);
            	    libFunctionNoClass667=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass667.getTree());
            	    }
            	    break;
            	default :
            	    break loop251;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token DOT669=null;
        Token RPAREN672=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy668 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent670 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs671 = null;
        CommonTree l_tree=null;
        CommonTree DOT669_tree=null;
        CommonTree RPAREN672_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt252=2;
            int LA252_0 = input.LA(1);
            if ( (LA252_0==IDENT) ) {
                int LA252_1 = input.LA(2);
                if ( (LA252_1==DOT) ) {
                    alt252=1;
                }
            }
            else if ( (LA252_0==TICKED_STRING_LITERAL) ) {
                int LA252_2 = input.LA(2);
                if ( (LA252_2==DOT) ) {
                    alt252=1;
                }
            }
            switch (alt252) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass9601);
                    classIdentifierNonGreedy668=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy668.getTree());
                    DOT669=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass9603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT669);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass9607);
            funcIdent670=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent670.getTree());
            l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass9611); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(l);
            int alt253=2;
            int LA253_0 = input.LA(1);
            if ( (LA253_0==WINDOW||LA253_0==ESCAPE||(LA253_0>=NOT_EXPR && LA253_0<=EVERY_EXPR)||LA253_0==WHERE||(LA253_0>=SUM && LA253_0<=COUNT)||LA253_0==CASE||LA253_0==OUTER||(LA253_0>=JOIN && LA253_0<=FULL)||(LA253_0>=DISTINCT && LA253_0<=ALL)||(LA253_0>=EVENTS && LA253_0<=LAST)||(LA253_0>=UNIDIRECTIONAL && LA253_0<=CURRENT_TIMESTAMP)||(LA253_0>=SNAPSHOT && LA253_0<=INDEX)||(LA253_0>=BOOLEAN_TRUE && LA253_0<=VALUE_NULL)||(LA253_0>=DEFINE && LA253_0<=MATCHES)||LA253_0==WHILE||(LA253_0>=MERGE && LA253_0<=MATCHED)||LA253_0==NEWKW||LA253_0==NUM_DOUBLE||(LA253_0>=IDENT && LA253_0<=LCURLY)||LA253_0==LPAREN||LA253_0==LBRACK||LA253_0==STAR||(LA253_0>=PLUS && LA253_0<=QUESTION)||(LA253_0>=STRING_LITERAL && LA253_0<=QUOTED_STRING_LITERAL)||LA253_0==MINUS||LA253_0==NUM_INT||(LA253_0>=TICKED_STRING_LITERAL && LA253_0<=NUM_FLOAT)) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass9614);
                    libFunctionArgs671=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs671.getTree());
                    }
                    break;
            }
            RPAREN672=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass9618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN672);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token RPAREN675=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent673 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs674 = null;
        CommonTree l_tree=null;
        CommonTree RPAREN675_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass9651);
            funcIdent673=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent673.getTree());
            int alt255=2;
            int LA255_0 = input.LA(1);
            if ( (LA255_0==LPAREN) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass9656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    int alt254=2;
                    int LA254_0 = input.LA(1);
                    if ( (LA254_0==WINDOW||LA254_0==ESCAPE||(LA254_0>=NOT_EXPR && LA254_0<=EVERY_EXPR)||LA254_0==WHERE||(LA254_0>=SUM && LA254_0<=COUNT)||LA254_0==CASE||LA254_0==OUTER||(LA254_0>=JOIN && LA254_0<=FULL)||(LA254_0>=DISTINCT && LA254_0<=ALL)||(LA254_0>=EVENTS && LA254_0<=LAST)||(LA254_0>=UNIDIRECTIONAL && LA254_0<=CURRENT_TIMESTAMP)||(LA254_0>=SNAPSHOT && LA254_0<=INDEX)||(LA254_0>=BOOLEAN_TRUE && LA254_0<=VALUE_NULL)||(LA254_0>=DEFINE && LA254_0<=MATCHES)||LA254_0==WHILE||(LA254_0>=MERGE && LA254_0<=MATCHED)||LA254_0==NEWKW||LA254_0==NUM_DOUBLE||(LA254_0>=IDENT && LA254_0<=LCURLY)||LA254_0==LPAREN||LA254_0==LBRACK||LA254_0==STAR||(LA254_0>=PLUS && LA254_0<=QUESTION)||(LA254_0>=STRING_LITERAL && LA254_0<=QUOTED_STRING_LITERAL)||LA254_0==MINUS||LA254_0==NUM_INT||(LA254_0>=TICKED_STRING_LITERAL && LA254_0<=NUM_FLOAT)) ) {
                        alt254=1;
                    }
                    switch (alt254) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass9659);
                            libFunctionArgs674=libFunctionArgs();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs674.getTree());
                            }
                            break;
                    }
                    RPAREN675=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass9663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN675);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextNode());
                }
                stream_l.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        Token w=null;
        Token s=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent676 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree w_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        try {
            int alt256=5;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt256=1;
                }
                break;
            case MAX:
                {
                alt256=2;
                }
                break;
            case MIN:
                {
                alt256=3;
                }
                break;
            case WHERE:
                {
                alt256=4;
                }
                break;
            case SET:
                {
                alt256=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);
                throw nvae;
            }
            switch (alt256) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent9695);
                    escapableIdent676=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent676.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent9702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent9714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_funcIdent9726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, w));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,SET,FOLLOW_SET_in_funcIdent9738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL677=null;
        Token DISTINCT678=null;
        Token COMMA680=null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem679 = null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem681 = null;
        CommonTree ALL677_tree=null;
        CommonTree DISTINCT678_tree=null;
        CommonTree COMMA680_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt257=3;
            int LA257_0 = input.LA(1);
            if ( (LA257_0==ALL) ) {
                alt257=1;
            }
            else if ( (LA257_0==DISTINCT) ) {
                alt257=2;
            }
            switch (alt257) {
                case 1 :
                    {
                    ALL677=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs9756); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT678=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs9761); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT678_tree = (CommonTree)adaptor.create(DISTINCT678);
                    adaptor.addChild(root_0, DISTINCT678_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs9765);
            libFunctionArgItem679=libFunctionArgItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem679.getTree());
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);
                if ( (LA258_0==COMMA) ) {
                    alt258=1;
                }
                switch (alt258) {
            	case 1 :
            	    {
            	    COMMA680=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs9768); if (state.failed) return retval;
            	    pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs9771);
            	    libFunctionArgItem681=libFunctionArgItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem681.getTree());
            	    }
            	    break;
            	default :
            	    break loop258;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgItem_return retval = new EsperEPL2GrammarParser.libFunctionArgItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl682 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime683 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt259=2;
            int LA259_0 = input.LA(1);
            if ( (LA259_0==IDENT) ) {
                int LA259_1 = input.LA(2);
                if ( (LA259_1==GOES) ) {
                    alt259=1;
                }
            }
            else if ( (LA259_0==LPAREN) ) {
                int LA259_2 = input.LA(2);
                if ( (LA259_2==IDENT) ) {
                    int LA259_144 = input.LA(3);
                    if ( (LA259_144==COMMA) ) {
                        alt259=1;
                    }
                    else if ( (LA259_144==RPAREN) ) {
                        int LA259_203 = input.LA(4);
                        if ( (LA259_203==GOES) ) {
                            alt259=1;
                        }
                    }
                }
            }
            switch (alt259) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_libFunctionArgItem9785);
                    expressionLambdaDecl682=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionLambdaDecl682.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expressionWithTime_in_libFunctionArgItem9788);
            expressionWithTime683=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime683.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR685=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr684 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr686 = null;
        CommonTree AND_EXPR685_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList9799);
            concatenationExpr684=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr684.getTree());
            AND_EXPR685=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList9801); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList9804);
            concatenationExpr686=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr686.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression687 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression9832);
            followedByExpression687=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression687.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression688 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat689 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression9851);
            orExpression688=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression688.getTree());
            loop260:
            do {
                int alt260=2;
                int LA260_0 = input.LA(1);
                if ( ((LA260_0>=FOLLOWED_BY && LA260_0<=FOLLOWMAX_BEGIN)) ) {
                    alt260=1;
                }
                switch (alt260) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression9854);
            	    followedByRepeat689=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat689.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop260;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END691=null;
        EsperEPL2GrammarParser.expression_return expression690 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression692 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END691_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt261=2;
            int LA261_0 = input.LA(1);
            if ( (LA261_0==FOLLOWED_BY) ) {
                alt261=1;
            }
            else if ( (LA261_0==FOLLOWMAX_BEGIN) ) {
                alt261=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);
                throw nvae;
            }
            switch (alt261) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat9907); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat9914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat9916);
                    expression690=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression690.getTree());
                    FOLLOWMAX_END691=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat9918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END691);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat9922);
            orExpression692=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression692.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression693 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression694 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression9951);
            andExpression693=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression693.getTree());
            loop262:
            do {
                int alt262=2;
                int LA262_0 = input.LA(1);
                if ( (LA262_0==OR_EXPR) ) {
                    alt262=1;
                }
                switch (alt262) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression9956); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression9958);
            	    andExpression694=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression694.getTree());
            	    }
            	    break;
            	default :
            	    break loop262;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression695 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression696 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression9990);
            matchUntilExpression695=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression695.getTree());
            loop263:
            do {
                int alt263=2;
                int LA263_0 = input.LA(1);
                if ( (LA263_0==AND_EXPR) ) {
                    alt263=1;
                }
                switch (alt263) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression9995); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression9997);
            	    matchUntilExpression696=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression696.getTree());
            	    }
            	    break;
            	default :
            	    break loop263;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression697 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression698 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt264=2;
            int LA264_0 = input.LA(1);
            if ( (LA264_0==LBRACK) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression10032);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression10036);
            qualifyExpression697=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression697.getTree());
            int alt265=2;
            int LA265_0 = input.LA(1);
            if ( (LA265_0==UNTIL) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression10041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression10043);
                    qualifyExpression698=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression698.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList699 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix700 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt268=2;
            int LA268_0 = input.LA(1);
            if ( ((LA268_0>=NOT_EXPR && LA268_0<=EVERY_DISTINCT_EXPR)) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    {
                    int alt266=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt266=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt266=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt266=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 266, 0, input);
                        throw nvae;
                    }
                    switch (alt266) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression10108); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression10114); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression10120); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression10122);
                            distinctExpressionList699=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList699.getTree());
                            }
                            break;
                    }
                    int alt267=2;
                    int LA267_0 = input.LA(1);
                    if ( (LA267_0==LBRACK) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression10128);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression10137);
            guardPostFix700=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix700.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN701=null;
        Token COMMA703=null;
        Token RPAREN705=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom702 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom704 = null;
        CommonTree LPAREN701_tree=null;
        CommonTree COMMA703_tree=null;
        CommonTree RPAREN705_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN701=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList10252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN701);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList10254);
            distinctExpressionAtom702=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom702.getTree());
            loop269:
            do {
                int alt269=2;
                int LA269_0 = input.LA(1);
                if ( (LA269_0==COMMA) ) {
                    alt269=1;
                }
                switch (alt269) {
            	case 1 :
            	    {
            	    COMMA703=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList10257); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA703);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList10259);
            	    distinctExpressionAtom704=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom704.getTree());
            	    }
            	    break;
            	default :
            	    break loop269;
                }
            } while (true);
            RPAREN705=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList10263); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN705);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime706 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom10286);
            expressionWithTime706=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime706.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN709=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression707 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression708 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression710 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression711 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN709_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt270=2;
            int LA270_0 = input.LA(1);
            if ( (LA270_0==IDENT||LA270_0==TICKED_STRING_LITERAL) ) {
                alt270=1;
            }
            else if ( (LA270_0==LPAREN) ) {
                alt270=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);
                throw nvae;
            }
            switch (alt270) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix10301);
                    atomicExpression707=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression707.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix10307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix10309);
                    patternExpression708=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression708.getTree());
                    RPAREN709=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix10311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN709);
                    }
                    break;
            }
            int alt271=3;
            int LA271_0 = input.LA(1);
            if ( (LA271_0==WHERE) ) {
                alt271=1;
            }
            else if ( (LA271_0==WHILE) ) {
                alt271=2;
            }
            switch (alt271) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix10318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix10320);
                    guardWhereExpression710=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression710.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix10328); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix10330);
                    guardWhileExpression711=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression711.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression712 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression713 = null;
        try {
            int alt272=2;
            int LA272_0 = input.LA(1);
            if ( (LA272_0==IDENT) ) {
                int LA272_1 = input.LA(2);
                if ( (LA272_1==COLON) ) {
                    alt272=1;
                }
                else if ( (LA272_1==EOF||(LA272_1>=OR_EXPR && LA272_1<=AND_EXPR)||LA272_1==WHERE||LA272_1==UNTIL||LA272_1==WHILE||(LA272_1>=LPAREN && LA272_1<=RPAREN)||(LA272_1>=EQUALS && LA272_1<=RBRACK)||(LA272_1>=FOLLOWED_BY && LA272_1<=FOLLOWMAX_BEGIN)||LA272_1==ATCHAR) ) {
                    alt272=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA272_0==TICKED_STRING_LITERAL) ) {
                alt272=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);
                throw nvae;
            }
            switch (alt272) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression10392);
                    observerExpression712=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression712.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression10396);
                    patternFilterExpression713=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression713.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON714=null;
        Token LPAREN715=null;
        Token RPAREN717=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList716 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON714_tree=null;
        CommonTree LPAREN715_tree=null;
        CommonTree RPAREN717_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression10411); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON714=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression10413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON714);
            int alt273=2;
            int LA273_0 = input.LA(1);
            if ( (LA273_0==IDENT) ) {
                alt273=1;
            }
            else if ( (LA273_0==AT) ) {
                alt273=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);
                throw nvae;
            }
            switch (alt273) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression10418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression10424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN715=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression10427); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN715);
            int alt274=2;
            int LA274_0 = input.LA(1);
            if ( (LA274_0==WINDOW||LA274_0==ESCAPE||(LA274_0>=NOT_EXPR && LA274_0<=EVERY_EXPR)||LA274_0==WHERE||(LA274_0>=SUM && LA274_0<=COUNT)||LA274_0==CASE||LA274_0==OUTER||(LA274_0>=JOIN && LA274_0<=FULL)||(LA274_0>=EVENTS && LA274_0<=LAST)||(LA274_0>=UNIDIRECTIONAL && LA274_0<=CURRENT_TIMESTAMP)||(LA274_0>=SNAPSHOT && LA274_0<=INDEX)||(LA274_0>=BOOLEAN_TRUE && LA274_0<=VALUE_NULL)||(LA274_0>=DEFINE && LA274_0<=MATCHES)||LA274_0==WHILE||(LA274_0>=MERGE && LA274_0<=MATCHED)||LA274_0==NEWKW||LA274_0==NUM_DOUBLE||(LA274_0>=IDENT && LA274_0<=LCURLY)||LA274_0==LPAREN||LA274_0==LBRACK||LA274_0==STAR||(LA274_0>=PLUS && LA274_0<=QUESTION)||(LA274_0>=STRING_LITERAL && LA274_0<=QUOTED_STRING_LITERAL)||LA274_0==MINUS||LA274_0==NUM_INT||(LA274_0>=TICKED_STRING_LITERAL && LA274_0<=NUM_FLOAT)) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression10429);
                    expressionWithTimeList716=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList716.getTree());
                    }
                    break;
            }
            RPAREN717=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression10432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN717);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT718=null;
        Token COLON719=null;
        Token IDENT720=null;
        Token LPAREN721=null;
        Token RPAREN723=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList722 = null;
        CommonTree IDENT718_tree=null;
        CommonTree COLON719_tree=null;
        CommonTree IDENT720_tree=null;
        CommonTree LPAREN721_tree=null;
        CommonTree RPAREN723_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT718=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression10481); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT718_tree = (CommonTree)adaptor.create(IDENT718);
            adaptor.addChild(root_0, IDENT718_tree);
            }
            COLON719=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression10483); if (state.failed) return retval;
            IDENT720=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression10486); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT720_tree = (CommonTree)adaptor.create(IDENT720);
            adaptor.addChild(root_0, IDENT720_tree);
            }
            LPAREN721=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression10488); if (state.failed) return retval;
            int alt275=2;
            int LA275_0 = input.LA(1);
            if ( (LA275_0==WINDOW||LA275_0==ESCAPE||(LA275_0>=NOT_EXPR && LA275_0<=EVERY_EXPR)||LA275_0==WHERE||(LA275_0>=SUM && LA275_0<=COUNT)||LA275_0==CASE||LA275_0==OUTER||(LA275_0>=JOIN && LA275_0<=FULL)||(LA275_0>=EVENTS && LA275_0<=LAST)||(LA275_0>=UNIDIRECTIONAL && LA275_0<=CURRENT_TIMESTAMP)||(LA275_0>=SNAPSHOT && LA275_0<=INDEX)||(LA275_0>=BOOLEAN_TRUE && LA275_0<=VALUE_NULL)||(LA275_0>=DEFINE && LA275_0<=MATCHES)||LA275_0==WHILE||(LA275_0>=MERGE && LA275_0<=MATCHED)||LA275_0==NEWKW||LA275_0==NUM_DOUBLE||(LA275_0>=IDENT && LA275_0<=LCURLY)||LA275_0==LPAREN||LA275_0==LBRACK||LA275_0==STAR||(LA275_0>=PLUS && LA275_0<=QUESTION)||(LA275_0>=STRING_LITERAL && LA275_0<=QUOTED_STRING_LITERAL)||LA275_0==MINUS||LA275_0==NUM_INT||(LA275_0>=TICKED_STRING_LITERAL && LA275_0<=NUM_FLOAT)) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression10492);
                    expressionWithTimeList722=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList722.getTree());
                    }
                    break;
            }
            RPAREN723=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression10496); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN724=null;
        Token RPAREN726=null;
        EsperEPL2GrammarParser.expression_return expression725 = null;
        CommonTree LPAREN724_tree=null;
        CommonTree RPAREN726_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN724=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression10509); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression10512);
            expression725=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression725.getTree());
            RPAREN726=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression10514); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK727=null;
        Token RBRACK731=null;
        EsperEPL2GrammarParser.expression_return expression728 = null;
        EsperEPL2GrammarParser.expression_return expression729 = null;
        EsperEPL2GrammarParser.expression_return expression730 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK727_tree=null;
        CommonTree RBRACK731_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK727=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange10535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK727);
            int alt278=2;
            int LA278_0 = input.LA(1);
            if ( (LA278_0==WINDOW||LA278_0==ESCAPE||(LA278_0>=NOT_EXPR && LA278_0<=EVERY_EXPR)||LA278_0==WHERE||(LA278_0>=SUM && LA278_0<=COUNT)||LA278_0==CASE||LA278_0==OUTER||(LA278_0>=JOIN && LA278_0<=FULL)||(LA278_0>=EVENTS && LA278_0<=LAST)||(LA278_0>=UNIDIRECTIONAL && LA278_0<=CURRENT_TIMESTAMP)||(LA278_0>=SNAPSHOT && LA278_0<=INDEX)||(LA278_0>=BOOLEAN_TRUE && LA278_0<=VALUE_NULL)||(LA278_0>=DEFINE && LA278_0<=MATCHES)||LA278_0==WHILE||(LA278_0>=MERGE && LA278_0<=MATCHED)||LA278_0==NEWKW||LA278_0==NUM_DOUBLE||(LA278_0>=IDENT && LA278_0<=LCURLY)||LA278_0==LPAREN||(LA278_0>=PLUS && LA278_0<=QUESTION)||(LA278_0>=STRING_LITERAL && LA278_0<=QUOTED_STRING_LITERAL)||LA278_0==MINUS||LA278_0==NUM_INT||(LA278_0>=TICKED_STRING_LITERAL && LA278_0<=NUM_FLOAT)) ) {
                alt278=1;
            }
            else if ( (LA278_0==COLON) ) {
                alt278=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 278, 0, input);
                throw nvae;
            }
            switch (alt278) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange10542);
                    expression728=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression728.getTree());
                    int alt277=2;
                    int LA277_0 = input.LA(1);
                    if ( (LA277_0==COLON) ) {
                        alt277=1;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange10547); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt276=2;
                            int LA276_0 = input.LA(1);
                            if ( (LA276_0==WINDOW||LA276_0==ESCAPE||(LA276_0>=NOT_EXPR && LA276_0<=EVERY_EXPR)||LA276_0==WHERE||(LA276_0>=SUM && LA276_0<=COUNT)||LA276_0==CASE||LA276_0==OUTER||(LA276_0>=JOIN && LA276_0<=FULL)||(LA276_0>=EVENTS && LA276_0<=LAST)||(LA276_0>=UNIDIRECTIONAL && LA276_0<=CURRENT_TIMESTAMP)||(LA276_0>=SNAPSHOT && LA276_0<=INDEX)||(LA276_0>=BOOLEAN_TRUE && LA276_0<=VALUE_NULL)||(LA276_0>=DEFINE && LA276_0<=MATCHES)||LA276_0==WHILE||(LA276_0>=MERGE && LA276_0<=MATCHED)||LA276_0==NEWKW||LA276_0==NUM_DOUBLE||(LA276_0>=IDENT && LA276_0<=LCURLY)||LA276_0==LPAREN||(LA276_0>=PLUS && LA276_0<=QUESTION)||(LA276_0>=STRING_LITERAL && LA276_0<=QUOTED_STRING_LITERAL)||LA276_0==MINUS||LA276_0==NUM_INT||(LA276_0>=TICKED_STRING_LITERAL && LA276_0<=NUM_FLOAT)) ) {
                                alt276=1;
                            }
                            switch (alt276) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange10550);
                                    expression729=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression729.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange10570); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange10572);
                    expression730=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression730.getTree());
                    }
                    break;
            }
            RBRACK731=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange10583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK731);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS732=null;
        Token LPAREN734=null;
        Token RPAREN736=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier733 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList735 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression737 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS732_tree=null;
        CommonTree LPAREN734_tree=null;
        CommonTree RPAREN736_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt279=2;
            int LA279_0 = input.LA(1);
            if ( (LA279_0==IDENT) ) {
                int LA279_1 = input.LA(2);
                if ( (LA279_1==EQUALS) ) {
                    alt279=1;
                }
            }
            switch (alt279) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression10670); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS732=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression10672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS732);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression10681);
            classIdentifier733=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier733.getTree());
            int alt281=2;
            int LA281_0 = input.LA(1);
            if ( (LA281_0==LPAREN) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    {
                    LPAREN734=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression10692); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN734);
                    int alt280=2;
                    int LA280_0 = input.LA(1);
                    if ( (LA280_0==WINDOW||LA280_0==ESCAPE||(LA280_0>=NOT_EXPR && LA280_0<=EVERY_EXPR)||LA280_0==WHERE||(LA280_0>=SUM && LA280_0<=COUNT)||LA280_0==CASE||LA280_0==OUTER||(LA280_0>=JOIN && LA280_0<=FULL)||(LA280_0>=EVENTS && LA280_0<=LAST)||(LA280_0>=UNIDIRECTIONAL && LA280_0<=CURRENT_TIMESTAMP)||(LA280_0>=SNAPSHOT && LA280_0<=INDEX)||(LA280_0>=BOOLEAN_TRUE && LA280_0<=VALUE_NULL)||(LA280_0>=DEFINE && LA280_0<=MATCHES)||LA280_0==WHILE||(LA280_0>=MERGE && LA280_0<=MATCHED)||LA280_0==NEWKW||LA280_0==NUM_DOUBLE||(LA280_0>=IDENT && LA280_0<=LCURLY)||LA280_0==LPAREN||(LA280_0>=PLUS && LA280_0<=QUESTION)||(LA280_0>=STRING_LITERAL && LA280_0<=QUOTED_STRING_LITERAL)||LA280_0==MINUS||LA280_0==NUM_INT||(LA280_0>=TICKED_STRING_LITERAL && LA280_0<=NUM_FLOAT)) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression10694);
                            expressionList735=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList735.getTree());
                            }
                            break;
                    }
                    RPAREN736=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression10697); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN736);
                    }
                    break;
            }
            int alt282=2;
            int LA282_0 = input.LA(1);
            if ( (LA282_0==LBRACK) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression10709);
                    propertyExpression737=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression737.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic738 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic739 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression10754);
            propertyExpressionAtomic738=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic738.getTree());
            loop283:
            do {
                int alt283=2;
                int LA283_0 = input.LA(1);
                if ( (LA283_0==LBRACK) ) {
                    alt283=1;
                }
                switch (alt283) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression10757);
            	    propertyExpressionAtomic739=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic739.getTree());
            	    }
            	    break;
            	default :
            	    break loop283;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK740=null;
        Token SELECT741=null;
        Token FROM743=null;
        Token AS745=null;
        Token IDENT746=null;
        Token WHERE747=null;
        Token RBRACK749=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList742 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty744 = null;
        EsperEPL2GrammarParser.expression_return expression748 = null;
        CommonTree LBRACK740_tree=null;
        CommonTree SELECT741_tree=null;
        CommonTree FROM743_tree=null;
        CommonTree AS745_tree=null;
        CommonTree IDENT746_tree=null;
        CommonTree WHERE747_tree=null;
        CommonTree RBRACK749_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            LBRACK740=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic10787); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK740);
            int alt284=2;
            int LA284_0 = input.LA(1);
            if ( (LA284_0==SELECT) ) {
                alt284=1;
            }
            switch (alt284) {
                case 1 :
                    {
                    SELECT741=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic10790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT741);
                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic10792);
                    propertySelectionList742=propertySelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList742.getTree());
                    FROM743=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic10794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM743);
                    }
                    break;
            }
            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic10798);
            eventProperty744=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty744.getTree());
            int alt285=2;
            int LA285_0 = input.LA(1);
            if ( (LA285_0==AS) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    {
                    AS745=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic10801); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS745);
                    IDENT746=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic10803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT746);
                    }
                    break;
            }
            int alt286=2;
            int LA286_0 = input.LA(1);
            if ( (LA286_0==WHERE) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    {
                    WHERE747=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic10808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE747);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic10810);
                    expression748=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression748.getTree());
                    }
                    break;
            }
            RBRACK749=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic10814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK749);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA751=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement750 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement752 = null;
        CommonTree COMMA751_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList10864);
            propertySelectionListElement750=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement750.getTree());
            loop287:
            do {
                int alt287=2;
                int LA287_0 = input.LA(1);
                if ( (LA287_0==COMMA) ) {
                    alt287=1;
                }
                switch (alt287) {
            	case 1 :
            	    {
            	    COMMA751=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList10867); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList10870);
            	    propertySelectionListElement752=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement752.getTree());
            	    }
            	    break;
            	default :
            	    break loop287;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS755=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector753 = null;
        EsperEPL2GrammarParser.expression_return expression754 = null;
        CommonTree s_tree=null;
        CommonTree AS755_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt289=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt289=1;
                }
                break;
            case IDENT:
                {
                int LA289_2 = input.LA(2);
                if ( (LA289_2==DOT) ) {
                    int LA289_72 = input.LA(3);
                    if ( (LA289_72==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt289=2;
                    }
                    else if ( (LA289_72==WINDOW||LA289_72==ESCAPE||LA289_72==EVERY_EXPR||LA289_72==WHERE||(LA289_72>=SUM && LA289_72<=COUNT)||LA289_72==OUTER||(LA289_72>=JOIN && LA289_72<=FULL)||(LA289_72>=EVENTS && LA289_72<=LAST)||(LA289_72>=UNIDIRECTIONAL && LA289_72<=PREVIOUSTAIL)||LA289_72==PRIOR||(LA289_72>=WEEKDAY && LA289_72<=CAST)||(LA289_72>=SNAPSHOT && LA289_72<=INDEX)||(LA289_72>=DEFINE && LA289_72<=MATCHES)||LA289_72==WHILE||(LA289_72>=MERGE && LA289_72<=MATCHED)||LA289_72==IDENT||LA289_72==TICKED_STRING_LITERAL) ) {
                        alt289=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 289, 72, input);
                        throw nvae;
                    }
                }
                else if ( ((LA289_2>=IN_SET && LA289_2<=REGEXP)||(LA289_2>=OR_EXPR && LA289_2<=NOT_EXPR)||LA289_2==AS||LA289_2==FROM||LA289_2==IS||LA289_2==LPAREN||(LA289_2>=COMMA && LA289_2<=EQUALS)||LA289_2==LBRACK||(LA289_2>=STAR && LA289_2<=QUESTION)||(LA289_2>=BAND && LA289_2<=MOD)||LA289_2==ESCAPECHAR) ) {
                    alt289=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 289, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case SET:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NEWKW:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt289=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);
                throw nvae;
            }
            switch (alt289) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement10896); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement10912);
                    propertyStreamSelector753=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector753.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement10917);
                    expression754=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression754.getTree());
                    int alt288=2;
                    int LA288_0 = input.LA(1);
                    if ( (LA288_0==AS) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            {
                            AS755=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement10920); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS755);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement10924);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT756=null;
        Token STAR757=null;
        Token AS758=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT756_tree=null;
        CommonTree STAR757_tree=null;
        CommonTree AS758_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector10968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT756=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector10970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT756);
            STAR757=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector10972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR757);
            int alt290=2;
            int LA290_0 = input.LA(1);
            if ( (LA290_0==AS) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    {
                    AS758=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector10975); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS758);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector10979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS759=null;
        Token LPAREN761=null;
        Token RPAREN763=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier760 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList762 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression764 = null;
        EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation765 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS759_tree=null;
        CommonTree LPAREN761_tree=null;
        CommonTree RPAREN763_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        RewriteRuleSubtreeStream stream_patternFilterAnnotation=new RewriteRuleSubtreeStream(adaptor,"rule patternFilterAnnotation");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt291=2;
            int LA291_0 = input.LA(1);
            if ( (LA291_0==IDENT) ) {
                int LA291_1 = input.LA(2);
                if ( (LA291_1==EQUALS) ) {
                    alt291=1;
                }
            }
            switch (alt291) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression11026); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS759=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression11028); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS759);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression11037);
            classIdentifier760=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier760.getTree());
            int alt293=2;
            int LA293_0 = input.LA(1);
            if ( (LA293_0==LPAREN) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    {
                    LPAREN761=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression11048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN761);
                    int alt292=2;
                    int LA292_0 = input.LA(1);
                    if ( (LA292_0==WINDOW||LA292_0==ESCAPE||(LA292_0>=NOT_EXPR && LA292_0<=EVERY_EXPR)||LA292_0==WHERE||(LA292_0>=SUM && LA292_0<=COUNT)||LA292_0==CASE||LA292_0==OUTER||(LA292_0>=JOIN && LA292_0<=FULL)||(LA292_0>=EVENTS && LA292_0<=LAST)||(LA292_0>=UNIDIRECTIONAL && LA292_0<=CURRENT_TIMESTAMP)||(LA292_0>=SNAPSHOT && LA292_0<=INDEX)||(LA292_0>=BOOLEAN_TRUE && LA292_0<=VALUE_NULL)||(LA292_0>=DEFINE && LA292_0<=MATCHES)||LA292_0==WHILE||(LA292_0>=MERGE && LA292_0<=MATCHED)||LA292_0==NEWKW||LA292_0==NUM_DOUBLE||(LA292_0>=IDENT && LA292_0<=LCURLY)||LA292_0==LPAREN||(LA292_0>=PLUS && LA292_0<=QUESTION)||(LA292_0>=STRING_LITERAL && LA292_0<=QUOTED_STRING_LITERAL)||LA292_0==MINUS||LA292_0==NUM_INT||(LA292_0>=TICKED_STRING_LITERAL && LA292_0<=NUM_FLOAT)) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression11050);
                            expressionList762=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList762.getTree());
                            }
                            break;
                    }
                    RPAREN763=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression11053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN763);
                    }
                    break;
            }
            int alt294=2;
            int LA294_0 = input.LA(1);
            if ( (LA294_0==LBRACK) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression11065);
                    propertyExpression764=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression764.getTree());
                    }
                    break;
            }
            int alt295=2;
            int LA295_0 = input.LA(1);
            if ( (LA295_0==ATCHAR) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    {
                    pushFollow(FOLLOW_patternFilterAnnotation_in_patternFilterExpression11076);
                    patternFilterAnnotation765=patternFilterAnnotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternFilterAnnotation.add(patternFilterAnnotation765.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_patternFilterAnnotation.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternFilterAnnotation.nextTree());
                }
                stream_patternFilterAnnotation.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterAnnotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterAnnotation_return patternFilterAnnotation() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterAnnotation_return retval = new EsperEPL2GrammarParser.patternFilterAnnotation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ATCHAR766=null;
        Token LPAREN767=null;
        Token RPAREN769=null;
        EsperEPL2GrammarParser.number_return number768 = null;
        CommonTree i_tree=null;
        CommonTree ATCHAR766_tree=null;
        CommonTree LPAREN767_tree=null;
        CommonTree RPAREN769_tree=null;
        RewriteRuleTokenStream stream_ATCHAR=new RewriteRuleTokenStream(adaptor,"token ATCHAR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            ATCHAR766=(Token)match(input,ATCHAR,FOLLOW_ATCHAR_in_patternFilterAnnotation11128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ATCHAR.add(ATCHAR766);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterAnnotation11132); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt296=2;
            int LA296_0 = input.LA(1);
            if ( (LA296_0==LPAREN) ) {
                alt296=1;
            }
            switch (alt296) {
                case 1 :
                    {
                    LPAREN767=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterAnnotation11135); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN767);
                    pushFollow(FOLLOW_number_in_patternFilterAnnotation11137);
                    number768=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number768.getTree());
                    RPAREN769=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterAnnotation11139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN769);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ATCHAR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT770=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT770_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier11175);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop297:
            do {
                int alt297=2;
                int LA297_0 = input.LA(1);
                if ( (LA297_0==DOT) ) {
                    int LA297_22 = input.LA(2);
                    if ( (LA297_22==IDENT) ) {
                        int LA297_47 = input.LA(3);
                        if ( (LA297_47==EOF||LA297_47==CREATE||(LA297_47>=OR_EXPR && LA297_47<=AS)||LA297_47==SELECT||(LA297_47>=INNER && LA297_47<=ON)||(LA297_47>=GROUP && LA297_47<=HAVING)||LA297_47==OUTPUT||LA297_47==INSERT||LA297_47==ORDER||(LA297_47>=UNIDIRECTIONAL && LA297_47<=RETAININTERSECTION)||LA297_47==DELETE||LA297_47==SET||LA297_47==UNTIL||LA297_47==ROW_LIMIT_EXPR||(LA297_47>=UPDATE && LA297_47<=MATCH_RECOGNIZE)||(LA297_47>=FOR && LA297_47<=WHILE)||LA297_47==MERGE||LA297_47==EXPRESSIONDECL||LA297_47==IDENT||(LA297_47>=RCURLY && LA297_47<=RPAREN)||LA297_47==COMMA||(LA297_47>=DOT && LA297_47<=RBRACK)||(LA297_47>=FOLLOWED_BY && LA297_47<=FOLLOWMAX_BEGIN)||LA297_47==ATCHAR||LA297_47==TICKED_STRING_LITERAL) ) {
                            alt297=1;
                        }
                    }
                    else if ( (LA297_22==TICKED_STRING_LITERAL) ) {
                        alt297=1;
                    }
                }
                switch (alt297) {
            	case 1 :
            	    {
            	    DOT770=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier11194); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT770);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier11198);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop297;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT771=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT771_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy11243);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop298:
            do {
                int alt298=2;
                int LA298_0 = input.LA(1);
                if ( (LA298_0==IDENT||LA298_0==TICKED_STRING_LITERAL) ) {
                    alt298=2;
                }
                else if ( (LA298_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA298_4 = input.LA(3);
                        if ( (LA298_4==LPAREN) ) {
                            alt298=2;
                        }
                        else if ( (LA298_4==IDENT||LA298_4==DOT||LA298_4==TICKED_STRING_LITERAL) ) {
                            alt298=1;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA298_5 = input.LA(3);
                        if ( (LA298_5==LPAREN) ) {
                            alt298=2;
                        }
                        else if ( (LA298_5==IDENT||LA298_5==DOT||LA298_5==TICKED_STRING_LITERAL) ) {
                            alt298=1;
                        }
                        }
                        break;
                    case WHERE:
                    case MAX:
                    case MIN:
                    case SET:
                        {
                        alt298=2;
                        }
                        break;
                    }
                }
                switch (alt298) {
            	case 1 :
            	    {
            	    DOT771=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy11278); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT771);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy11282);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop298;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA773=null;
        EsperEPL2GrammarParser.expression_return expression772 = null;
        EsperEPL2GrammarParser.expression_return expression774 = null;
        CommonTree COMMA773_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList11324);
            expression772=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression772.getTree());
            loop299:
            do {
                int alt299=2;
                int LA299_0 = input.LA(1);
                if ( (LA299_0==COMMA) ) {
                    alt299=1;
                }
                switch (alt299) {
            	case 1 :
            	    {
            	    COMMA773=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList11327); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList11330);
            	    expression774=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression774.getTree());
            	    }
            	    break;
            	default :
            	    break loop299;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA776=null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast775 = null;
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast777 = null;
        CommonTree COMMA776_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11358);
            expressionWithTimeInclLast775=expressionWithTimeInclLast();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast775.getTree());
            loop300:
            do {
                int alt300=2;
                int LA300_0 = input.LA(1);
                if ( (LA300_0==COMMA) ) {
                    alt300=1;
                }
                switch (alt300) {
            	case 1 :
            	    {
            	    COMMA776=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList11361); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11364);
            	    expressionWithTimeInclLast777=expressionWithTimeInclLast();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeInclLast777.getTree());
            	    }
            	    break;
            	default :
            	    break loop300;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand778 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod779 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable780 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand781 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand782 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator783 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator784 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList785 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar786 = null;
        try {
            int alt301=9;
            int LA301_0 = input.LA(1);
            if ( (LA301_0==LW) ) {
                int LA301_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt301=1;
                }
                else if ( (synpred9_EsperEPL2Grammar()) ) {
                    alt301=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==NUM_INT) ) {
                int LA301_2 = input.LA(2);
                if ( (LA301_2==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt301=4;
                }
                else if ( (LA301_2==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==TIMEPERIOD_SECONDS) ) {
                    int LA301_132 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 132, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_2==TIMEPERIOD_SECOND) ) {
                    int LA301_133 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 133, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_2==TIMEPERIOD_SEC) ) {
                    int LA301_134 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 134, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_2==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_2==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt301=6;
                }
                else if ( (LA301_2==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt301=7;
                }
                else if ( (LA301_2==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_2==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==NUM_LONG) ) {
                int LA301_3 = input.LA(2);
                if ( (LA301_3==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==TIMEPERIOD_SECONDS) ) {
                    int LA301_167 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 167, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_3==TIMEPERIOD_SECOND) ) {
                    int LA301_168 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 168, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_3==TIMEPERIOD_SEC) ) {
                    int LA301_169 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 169, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_3==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt301=6;
                }
                else if ( (LA301_3==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt301=7;
                }
                else if ( (LA301_3==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_3==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt301=4;
                }
                else if ( (LA301_3==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_3==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==NUM_FLOAT) ) {
                int LA301_4 = input.LA(2);
                if ( (LA301_4==TIMEPERIOD_SECONDS) ) {
                    int LA301_210 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 210, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_4==TIMEPERIOD_SECOND) ) {
                    int LA301_211 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 211, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_4==TIMEPERIOD_SEC) ) {
                    int LA301_212 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 212, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt301=6;
                }
                else if ( (LA301_4==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt301=7;
                }
                else if ( (LA301_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_4==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt301=4;
                }
                else if ( (LA301_4==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_4==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==NUM_DOUBLE) ) {
                int LA301_5 = input.LA(2);
                if ( (LA301_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_SECONDS) ) {
                    int LA301_267 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 267, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_5==TIMEPERIOD_SECOND) ) {
                    int LA301_268 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 268, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_5==TIMEPERIOD_SEC) ) {
                    int LA301_269 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 269, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_5==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_5==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt301=4;
                }
                else if ( (LA301_5==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt301=6;
                }
                else if ( (LA301_5==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt301=7;
                }
                else if ( (LA301_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==IDENT) ) {
                int LA301_6 = input.LA(2);
                if ( (LA301_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt301=4;
                }
                else if ( (LA301_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt301=7;
                }
                else if ( (LA301_6==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt301=6;
                }
                else if ( (LA301_6==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==DOT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_6==TIMEPERIOD_SECONDS) ) {
                    int LA301_331 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 331, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_6==TIMEPERIOD_SECOND) ) {
                    int LA301_332 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 332, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_6==TIMEPERIOD_SEC) ) {
                    int LA301_333 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 333, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_6==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==LBRACK) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==QUESTION) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==QUESTION) ) {
                int LA301_7 = input.LA(2);
                if ( (LA301_7==TIMEPERIOD_WEEKS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_WEEK) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_MONTHS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_MONTH) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_SECONDS) ) {
                    int LA301_369 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 369, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_7==TIMEPERIOD_SECOND) ) {
                    int LA301_370 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 370, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_7==TIMEPERIOD_SEC) ) {
                    int LA301_371 = input.LA(3);
                    if ( (synpred8_EsperEPL2Grammar()) ) {
                        alt301=2;
                    }
                    else if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt301=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 301, 371, input);
                        throw nvae;
                    }
                }
                else if ( (LA301_7==STAR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==DIV) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==MOD) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==PLUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==MINUS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==LOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==LT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==GT) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==LE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==GE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==IS) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==BAND) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==BOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==BXOR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==ASC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==DESC) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==COMMA) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==LIKE) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {
                    alt301=3;
                }
                else if ( (LA301_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==LAST) && (synpred12_EsperEPL2Grammar())) {
                    alt301=6;
                }
                else if ( (LA301_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {
                    alt301=7;
                }
                else if ( (LA301_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==MIN) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_YEARS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_YEAR) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==COLON) && (synpred10_EsperEPL2Grammar())) {
                    alt301=4;
                }
                else if ( (LA301_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else if ( (LA301_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==CASE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MINUS) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PLUS) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==AT) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==COUNT) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==SUM) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==AVG) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MAX) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MIN) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==FIRST) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==LAST) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==WHILE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MERGE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MATCHED) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==SQL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PREVIOUSTAIL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==TYPEOF) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==CAST) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==INDEX) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==LEFT) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==OUTER) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==FULL) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==JOIN) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==WHERE) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==SET) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PREVIOUSCOUNT) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==PREVIOUSWINDOW) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==NEWKW) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {
                alt301=3;
            }
            else if ( (LA301_0==STAR) ) {
                int LA301_71 = input.LA(2);
                if ( (LA301_71==DIV) && (synpred11_EsperEPL2Grammar())) {
                    alt301=5;
                }
                else if ( (LA301_71==RPAREN||LA301_71==COMMA) ) {
                    alt301=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 71, input);
                    throw nvae;
                }
            }
            else if ( (LA301_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {
                alt301=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 301, 0, input);
                throw nvae;
            }
            switch (alt301) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime11393);
                    lastWeekdayOperand778=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand778.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime11404);
                    timePeriod779=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod779.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime11415);
                    expressionQualifyable780=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable780.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime11426);
                    rangeOperand781=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand781.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime11438);
                    frequencyOperand782=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand782.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime11449);
                    lastOperator783=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator783.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime11461);
                    weekDayOperator784=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator784.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime11473);
                    numericParameterList785=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList785.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime11478);
                    numberSetStar786=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar786.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeInclLast_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeInclLast_return expressionWithTimeInclLast() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeInclLast_return retval = new EsperEPL2GrammarParser.expressionWithTimeInclLast_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand787 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime788 = null;
        try {
            int alt302=2;
            int LA302_0 = input.LA(1);
            if ( (LA302_0==LAST) ) {
                int LA302_1 = input.LA(2);
                if ( (synpred15_EsperEPL2Grammar()) ) {
                    alt302=1;
                }
                else if ( (true) ) {
                    alt302=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 302, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA302_0==WINDOW||LA302_0==ESCAPE||(LA302_0>=NOT_EXPR && LA302_0<=EVERY_EXPR)||LA302_0==WHERE||(LA302_0>=SUM && LA302_0<=COUNT)||LA302_0==CASE||LA302_0==OUTER||(LA302_0>=JOIN && LA302_0<=FULL)||(LA302_0>=EVENTS && LA302_0<=FIRST)||(LA302_0>=UNIDIRECTIONAL && LA302_0<=CURRENT_TIMESTAMP)||(LA302_0>=SNAPSHOT && LA302_0<=INDEX)||(LA302_0>=BOOLEAN_TRUE && LA302_0<=VALUE_NULL)||(LA302_0>=DEFINE && LA302_0<=MATCHES)||LA302_0==WHILE||(LA302_0>=MERGE && LA302_0<=MATCHED)||LA302_0==NEWKW||LA302_0==NUM_DOUBLE||(LA302_0>=IDENT && LA302_0<=LCURLY)||LA302_0==LPAREN||LA302_0==LBRACK||LA302_0==STAR||(LA302_0>=PLUS && LA302_0<=QUESTION)||(LA302_0>=STRING_LITERAL && LA302_0<=QUOTED_STRING_LITERAL)||LA302_0==MINUS||LA302_0==NUM_INT||(LA302_0>=TICKED_STRING_LITERAL && LA302_0<=NUM_FLOAT)) ) {
                alt302=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 302, 0, input);
                throw nvae;
            }
            switch (alt302) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTimeInclLast11498);
                    lastOperand787=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand787.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeInclLast11503);
                    expressionWithTime788=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime788.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression789 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable11514);
            expression789=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression789.getTree());
            int alt303=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt303=1;
                    }
                    break;
                case DESC:
                    {
                    alt303=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt303=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt303=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt303=5;
                    }
                    break;
            }
            switch (alt303) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable11519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable11523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable11527); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable11531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable11535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR790=null;
        CommonTree STAR790_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR790=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar11592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR790);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW791=null;
        CommonTree LW791_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW791=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand11612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW791_tree = (CommonTree)adaptor.create(LW791);
            root_0 = (CommonTree)adaptor.becomeRoot(LW791_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST792=null;
        CommonTree LAST792_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST792=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand11625); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST792_tree = (CommonTree)adaptor.create(LAST792);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST792_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR793=null;
        Token DIV794=null;
        EsperEPL2GrammarParser.number_return number795 = null;
        EsperEPL2GrammarParser.substitution_return substitution796 = null;
        CommonTree i_tree=null;
        CommonTree STAR793_tree=null;
        CommonTree DIV794_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR793=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand11637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR793);
            DIV794=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand11639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV794);
            int alt304=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt304=1;
                }
                break;
            case IDENT:
                {
                alt304=2;
                }
                break;
            case QUESTION:
                {
                alt304=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 304, 0, input);
                throw nvae;
            }
            switch (alt304) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand11642);
                    number795=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number795.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand11646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand11648);
                    substitution796=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution796.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON799=null;
        EsperEPL2GrammarParser.number_return number797 = null;
        EsperEPL2GrammarParser.substitution_return substitution798 = null;
        EsperEPL2GrammarParser.number_return number800 = null;
        EsperEPL2GrammarParser.substitution_return substitution801 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON799_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt305=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt305=1;
                }
                break;
            case IDENT:
                {
                alt305=2;
                }
                break;
            case QUESTION:
                {
                alt305=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 305, 0, input);
                throw nvae;
            }
            switch (alt305) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand11697);
                    number797=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number797.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand11701); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand11703);
                    substitution798=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution798.getTree());
                    }
                    break;
            }
            COLON799=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand11706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON799);
            int alt306=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt306=1;
                }
                break;
            case IDENT:
                {
                alt306=2;
                }
                break;
            case QUESTION:
                {
                alt306=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 306, 0, input);
                throw nvae;
            }
            switch (alt306) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand11709);
                    number800=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number800.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand11713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand11715);
                    substitution801=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution801.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST804=null;
        EsperEPL2GrammarParser.number_return number802 = null;
        EsperEPL2GrammarParser.substitution_return substitution803 = null;
        CommonTree i_tree=null;
        CommonTree LAST804_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt307=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt307=1;
                }
                break;
            case IDENT:
                {
                alt307=2;
                }
                break;
            case QUESTION:
                {
                alt307=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 307, 0, input);
                throw nvae;
            }
            switch (alt307) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator11829);
                    number802=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number802.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator11833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator11835);
                    substitution803=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution803.getTree());
                    }
                    break;
            }
            LAST804=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator11838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST804);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY807=null;
        EsperEPL2GrammarParser.number_return number805 = null;
        EsperEPL2GrammarParser.substitution_return substitution806 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY807_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt308=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt308=1;
                }
                break;
            case IDENT:
                {
                alt308=2;
                }
                break;
            case QUESTION:
                {
                alt308=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 308, 0, input);
                throw nvae;
            }
            switch (alt308) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator11886);
                    number805=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number805.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator11890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator11892);
                    substitution806=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution806.getTree());
                    }
                    break;
            }
            WEEKDAY807=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator11895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY807);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK808=null;
        Token COMMA810=null;
        Token RBRACK812=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter809 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter811 = null;
        CommonTree LBRACK808_tree=null;
        CommonTree COMMA810_tree=null;
        CommonTree RBRACK812_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK808=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList11942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK808);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList11944);
            numericListParameter809=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter809.getTree());
            loop309:
            do {
                int alt309=2;
                int LA309_0 = input.LA(1);
                if ( (LA309_0==COMMA) ) {
                    alt309=1;
                }
                switch (alt309) {
            	case 1 :
            	    {
            	    COMMA810=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList11947); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA810);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList11949);
            	    numericListParameter811=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter811.getTree());
            	    }
            	    break;
            	default :
            	    break loop309;
                }
            } while (true);
            RBRACK812=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList11953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK812);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand813 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand814 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant815 = null;
        try {
            int alt310=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA310_1 = input.LA(2);
                if ( (LA310_1==COMMA||LA310_1==RBRACK) ) {
                    alt310=3;
                }
                else if ( (LA310_1==COLON) ) {
                    alt310=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA310_2 = input.LA(2);
                if ( (LA310_2==COMMA||LA310_2==RBRACK) ) {
                    alt310=3;
                }
                else if ( (LA310_2==COLON) ) {
                    alt310=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA310_3 = input.LA(2);
                if ( (LA310_3==COMMA||LA310_3==RBRACK) ) {
                    alt310=3;
                }
                else if ( (LA310_3==COLON) ) {
                    alt310=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA310_4 = input.LA(2);
                if ( (LA310_4==COMMA||LA310_4==RBRACK) ) {
                    alt310=3;
                }
                else if ( (LA310_4==COLON) ) {
                    alt310=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt310=1;
                }
                break;
            case STAR:
                {
                alt310=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt310=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 310, 0, input);
                throw nvae;
            }
            switch (alt310) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter11975);
                    rangeOperand813=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand813.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter11981);
                    frequencyOperand814=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand814.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter11986);
                    numberconstant815=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant815.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT817=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic816 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic818 = null;
        CommonTree DOT817_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty12002);
            eventPropertyAtomic816=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic816.getTree());
            loop311:
            do {
                int alt311=2;
                int LA311_0 = input.LA(1);
                if ( (LA311_0==DOT) ) {
                    alt311=1;
                }
                switch (alt311) {
            	case 1 :
            	    {
            	    DOT817=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty12005); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT817);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty12007);
            	    eventPropertyAtomic818=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic818.getTree());
            	    }
            	    break;
            	default :
            	    break loop311;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK820=null;
        Token RPAREN821=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent819 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK820_tree=null;
        CommonTree RPAREN821_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic12033);
            eventPropertyIdent819=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent819.getTree());
            int alt315=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt315=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt315=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt315=3;
                    }
                    break;
            }
            switch (alt315) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic12042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic12046); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK820=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic12048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK820);
                    int alt312=2;
                    int LA312_0 = input.LA(1);
                    if ( (LA312_0==QUESTION) ) {
                        alt312=1;
                    }
                    switch (alt312) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic12053); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic12067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt313=2;
                    int LA313_0 = input.LA(1);
                    if ( (LA313_0==STRING_LITERAL) ) {
                        alt313=1;
                    }
                    else if ( (LA313_0==QUOTED_STRING_LITERAL) ) {
                        alt313=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 313, 0, input);
                        throw nvae;
                    }
                    switch (alt313) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic12072); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic12078); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN821=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic12081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN821);
                    int alt314=2;
                    int LA314_0 = input.LA(1);
                    if ( (LA314_0==QUESTION) ) {
                        alt314=1;
                    }
                    switch (alt314) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic12086); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic12100); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR822=null;
        Token DOT823=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR822_tree=null;
        CommonTree DOT823_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12223);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop317:
            do {
                int alt317=2;
                int LA317_0 = input.LA(1);
                if ( (LA317_0==ESCAPECHAR) ) {
                    alt317=1;
                }
                switch (alt317) {
            	case 1 :
            	    {
            	    ESCAPECHAR822=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent12235); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR822);
            	    DOT823=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent12237); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT823);
            	    int alt316=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt316=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA316_5 = input.LA(2);
            	            if ( (LA316_5==EOF||(LA316_5>=IN_SET && LA316_5<=NOT_EXPR)||(LA316_5>=WHERE && LA316_5<=AS)||(LA316_5>=ELSE && LA316_5<=FROM)||(LA316_5>=INNER && LA316_5<=FULL)||LA316_5==IS||(LA316_5>=GROUP && LA316_5<=HAVING)||LA316_5==ALL||LA316_5==OUTPUT||LA316_5==INSERT||(LA316_5>=ORDER && LA316_5<=DESC)||LA316_5==PATTERN||(LA316_5>=TIMEPERIOD_SEC && LA316_5<=TIMEPERIOD_SECONDS)||LA316_5==ROW_LIMIT_EXPR||(LA316_5>=MATCH_RECOGNIZE && LA316_5<=MEASURES)||(LA316_5>=AFTER && LA316_5<=FOR)||(LA316_5>=RCURLY && LA316_5<=RPAREN)||(LA316_5>=COMMA && LA316_5<=COLON)||(LA316_5>=BAND && LA316_5<=MOD)||LA316_5==FOLLOWMAX_END||LA316_5==ESCAPECHAR) ) {
            	                alt316=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA316_25 = input.LA(2);
            	            if ( (LA316_25==LPAREN) ) {
            	                int LA316_176 = input.LA(3);
            	                if ( ((LA316_176>=STRING_LITERAL && LA316_176<=QUOTED_STRING_LITERAL)) ) {
            	                    alt316=1;
            	                }
            	            }
            	            else if ( (LA316_25==EOF||(LA316_25>=IN_SET && LA316_25<=NOT_EXPR)||(LA316_25>=WHERE && LA316_25<=AS)||(LA316_25>=ELSE && LA316_25<=FROM)||(LA316_25>=INNER && LA316_25<=FULL)||LA316_25==IS||(LA316_25>=GROUP && LA316_25<=HAVING)||LA316_25==ALL||LA316_25==OUTPUT||LA316_25==INSERT||(LA316_25>=ORDER && LA316_25<=DESC)||LA316_25==PATTERN||(LA316_25>=TIMEPERIOD_SEC && LA316_25<=TIMEPERIOD_SECONDS)||LA316_25==ROW_LIMIT_EXPR||(LA316_25>=MATCH_RECOGNIZE && LA316_25<=MEASURES)||(LA316_25>=AFTER && LA316_25<=FOR)||LA316_25==RCURLY||LA316_25==RPAREN||(LA316_25>=COMMA && LA316_25<=COLON)||(LA316_25>=BAND && LA316_25<=MOD)||LA316_25==FOLLOWMAX_END||LA316_25==ESCAPECHAR) ) {
            	                alt316=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA316_40 = input.LA(2);
            	            if ( (LA316_40==EOF||(LA316_40>=IN_SET && LA316_40<=NOT_EXPR)||(LA316_40>=WHERE && LA316_40<=AS)||(LA316_40>=ELSE && LA316_40<=FROM)||(LA316_40>=INNER && LA316_40<=FULL)||LA316_40==IS||(LA316_40>=GROUP && LA316_40<=HAVING)||LA316_40==ALL||LA316_40==OUTPUT||LA316_40==INSERT||(LA316_40>=ORDER && LA316_40<=DESC)||LA316_40==PATTERN||(LA316_40>=TIMEPERIOD_SEC && LA316_40<=TIMEPERIOD_SECONDS)||LA316_40==ROW_LIMIT_EXPR||(LA316_40>=MATCH_RECOGNIZE && LA316_40<=MEASURES)||(LA316_40>=AFTER && LA316_40<=FOR)||(LA316_40>=RCURLY && LA316_40<=RPAREN)||(LA316_40>=COMMA && LA316_40<=COLON)||(LA316_40>=BAND && LA316_40<=MOD)||LA316_40==FOLLOWMAX_END||LA316_40==ESCAPECHAR) ) {
            	                alt316=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA316_41 = input.LA(2);
            	            if ( (LA316_41==EOF||(LA316_41>=IN_SET && LA316_41<=NOT_EXPR)||(LA316_41>=WHERE && LA316_41<=AS)||(LA316_41>=ELSE && LA316_41<=FROM)||(LA316_41>=INNER && LA316_41<=FULL)||LA316_41==IS||(LA316_41>=GROUP && LA316_41<=HAVING)||LA316_41==ALL||LA316_41==OUTPUT||LA316_41==INSERT||(LA316_41>=ORDER && LA316_41<=DESC)||LA316_41==PATTERN||(LA316_41>=TIMEPERIOD_SEC && LA316_41<=TIMEPERIOD_SECONDS)||LA316_41==ROW_LIMIT_EXPR||(LA316_41>=MATCH_RECOGNIZE && LA316_41<=MEASURES)||(LA316_41>=AFTER && LA316_41<=FOR)||(LA316_41>=RCURLY && LA316_41<=RPAREN)||(LA316_41>=COMMA && LA316_41<=COLON)||(LA316_41>=BAND && LA316_41<=MOD)||LA316_41==FOLLOWMAX_END||LA316_41==ESCAPECHAR) ) {
            	                alt316=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA316_43 = input.LA(2);
            	            if ( (LA316_43==EOF||(LA316_43>=IN_SET && LA316_43<=NOT_EXPR)||(LA316_43>=WHERE && LA316_43<=AS)||(LA316_43>=ELSE && LA316_43<=FROM)||(LA316_43>=INNER && LA316_43<=FULL)||LA316_43==IS||(LA316_43>=GROUP && LA316_43<=HAVING)||LA316_43==ALL||LA316_43==OUTPUT||LA316_43==INSERT||(LA316_43>=ORDER && LA316_43<=DESC)||LA316_43==PATTERN||(LA316_43>=TIMEPERIOD_SEC && LA316_43<=TIMEPERIOD_SECONDS)||LA316_43==ROW_LIMIT_EXPR||(LA316_43>=MATCH_RECOGNIZE && LA316_43<=MEASURES)||(LA316_43>=AFTER && LA316_43<=FOR)||(LA316_43>=RCURLY && LA316_43<=RPAREN)||(LA316_43>=COMMA && LA316_43<=COLON)||(LA316_43>=BAND && LA316_43<=MOD)||LA316_43==FOLLOWMAX_END||LA316_43==ESCAPECHAR) ) {
            	                alt316=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA316_44 = input.LA(2);
            	            if ( (LA316_44==PATTERN) ) {
            	                int LA316_445 = input.LA(3);
            	                if ( (LA316_445==LPAREN) ) {
            	                    alt316=1;
            	                }
            	            }
            	            else if ( (LA316_44==EOF||(LA316_44>=IN_SET && LA316_44<=NOT_EXPR)||(LA316_44>=WHERE && LA316_44<=AS)||(LA316_44>=ELSE && LA316_44<=FROM)||(LA316_44>=INNER && LA316_44<=FULL)||LA316_44==IS||(LA316_44>=GROUP && LA316_44<=HAVING)||LA316_44==ALL||LA316_44==OUTPUT||LA316_44==INSERT||(LA316_44>=ORDER && LA316_44<=DESC)||(LA316_44>=TIMEPERIOD_SEC && LA316_44<=TIMEPERIOD_SECONDS)||LA316_44==ROW_LIMIT_EXPR||(LA316_44>=MATCH_RECOGNIZE && LA316_44<=MEASURES)||(LA316_44>=AFTER && LA316_44<=FOR)||(LA316_44>=RCURLY && LA316_44<=RPAREN)||(LA316_44>=COMMA && LA316_44<=COLON)||(LA316_44>=BAND && LA316_44<=MOD)||LA316_44==FOLLOWMAX_END||LA316_44==ESCAPECHAR) ) {
            	                alt316=1;
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt316) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12241);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop317;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT824=null;
        Token COUNT825=null;
        Token ESCAPE826=null;
        Token EVERY_EXPR827=null;
        Token SUM828=null;
        Token AVG829=null;
        Token MAX830=null;
        Token MIN831=null;
        Token COALESCE832=null;
        Token MEDIAN833=null;
        Token STDDEV834=null;
        Token AVEDEV835=null;
        Token EVENTS836=null;
        Token FIRST837=null;
        Token LAST838=null;
        Token WHILE839=null;
        Token MERGE840=null;
        Token MATCHED841=null;
        Token UNIDIRECTIONAL842=null;
        Token RETAINUNION843=null;
        Token RETAININTERSECTION844=null;
        Token UNTIL845=null;
        Token PATTERN846=null;
        Token SQL847=null;
        Token METADATASQL848=null;
        Token PREVIOUS849=null;
        Token PREVIOUSTAIL850=null;
        Token PRIOR851=null;
        Token WEEKDAY852=null;
        Token LW853=null;
        Token INSTANCEOF854=null;
        Token TYPEOF855=null;
        Token CAST856=null;
        Token SNAPSHOT857=null;
        Token VARIABLE858=null;
        Token INDEX859=null;
        Token WINDOW860=null;
        Token LEFT861=null;
        Token RIGHT862=null;
        Token OUTER863=null;
        Token FULL864=null;
        Token JOIN865=null;
        Token DEFINE866=null;
        Token PARTITION867=null;
        Token MATCHES868=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT824_tree=null;
        CommonTree COUNT825_tree=null;
        CommonTree ESCAPE826_tree=null;
        CommonTree EVERY_EXPR827_tree=null;
        CommonTree SUM828_tree=null;
        CommonTree AVG829_tree=null;
        CommonTree MAX830_tree=null;
        CommonTree MIN831_tree=null;
        CommonTree COALESCE832_tree=null;
        CommonTree MEDIAN833_tree=null;
        CommonTree STDDEV834_tree=null;
        CommonTree AVEDEV835_tree=null;
        CommonTree EVENTS836_tree=null;
        CommonTree FIRST837_tree=null;
        CommonTree LAST838_tree=null;
        CommonTree WHILE839_tree=null;
        CommonTree MERGE840_tree=null;
        CommonTree MATCHED841_tree=null;
        CommonTree UNIDIRECTIONAL842_tree=null;
        CommonTree RETAINUNION843_tree=null;
        CommonTree RETAININTERSECTION844_tree=null;
        CommonTree UNTIL845_tree=null;
        CommonTree PATTERN846_tree=null;
        CommonTree SQL847_tree=null;
        CommonTree METADATASQL848_tree=null;
        CommonTree PREVIOUS849_tree=null;
        CommonTree PREVIOUSTAIL850_tree=null;
        CommonTree PRIOR851_tree=null;
        CommonTree WEEKDAY852_tree=null;
        CommonTree LW853_tree=null;
        CommonTree INSTANCEOF854_tree=null;
        CommonTree TYPEOF855_tree=null;
        CommonTree CAST856_tree=null;
        CommonTree SNAPSHOT857_tree=null;
        CommonTree VARIABLE858_tree=null;
        CommonTree INDEX859_tree=null;
        CommonTree WINDOW860_tree=null;
        CommonTree LEFT861_tree=null;
        CommonTree RIGHT862_tree=null;
        CommonTree OUTER863_tree=null;
        CommonTree FULL864_tree=null;
        CommonTree JOIN865_tree=null;
        CommonTree DEFINE866_tree=null;
        CommonTree PARTITION867_tree=null;
        CommonTree MATCHES868_tree=null;
        try {
            int alt318=47;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt318=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt318=2;
                }
                break;
            case AT:
                {
                alt318=3;
                }
                break;
            case COUNT:
                {
                alt318=4;
                }
                break;
            case ESCAPE:
                {
                alt318=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt318=6;
                }
                break;
            case SUM:
                {
                alt318=7;
                }
                break;
            case AVG:
                {
                alt318=8;
                }
                break;
            case MAX:
                {
                alt318=9;
                }
                break;
            case MIN:
                {
                alt318=10;
                }
                break;
            case COALESCE:
                {
                alt318=11;
                }
                break;
            case MEDIAN:
                {
                alt318=12;
                }
                break;
            case STDDEV:
                {
                alt318=13;
                }
                break;
            case AVEDEV:
                {
                alt318=14;
                }
                break;
            case EVENTS:
                {
                alt318=15;
                }
                break;
            case FIRST:
                {
                alt318=16;
                }
                break;
            case LAST:
                {
                alt318=17;
                }
                break;
            case WHILE:
                {
                alt318=18;
                }
                break;
            case MERGE:
                {
                alt318=19;
                }
                break;
            case MATCHED:
                {
                alt318=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt318=21;
                }
                break;
            case RETAINUNION:
                {
                alt318=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt318=23;
                }
                break;
            case UNTIL:
                {
                alt318=24;
                }
                break;
            case PATTERN:
                {
                alt318=25;
                }
                break;
            case SQL:
                {
                alt318=26;
                }
                break;
            case METADATASQL:
                {
                alt318=27;
                }
                break;
            case PREVIOUS:
                {
                alt318=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt318=29;
                }
                break;
            case PRIOR:
                {
                alt318=30;
                }
                break;
            case WEEKDAY:
                {
                alt318=31;
                }
                break;
            case LW:
                {
                alt318=32;
                }
                break;
            case INSTANCEOF:
                {
                alt318=33;
                }
                break;
            case TYPEOF:
                {
                alt318=34;
                }
                break;
            case CAST:
                {
                alt318=35;
                }
                break;
            case SNAPSHOT:
                {
                alt318=36;
                }
                break;
            case VARIABLE:
                {
                alt318=37;
                }
                break;
            case INDEX:
                {
                alt318=38;
                }
                break;
            case WINDOW:
                {
                alt318=39;
                }
                break;
            case LEFT:
                {
                alt318=40;
                }
                break;
            case RIGHT:
                {
                alt318=41;
                }
                break;
            case OUTER:
                {
                alt318=42;
                }
                break;
            case FULL:
                {
                alt318=43;
                }
                break;
            case JOIN:
                {
                alt318=44;
                }
                break;
            case DEFINE:
                {
                alt318=45;
                }
                break;
            case PARTITION:
                {
                alt318=46;
                }
                break;
            case MATCHES:
                {
                alt318=47;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 318, 0, input);
                throw nvae;
            }
            switch (alt318) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent12280); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent12289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT824=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent12296); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT824_tree = (CommonTree)adaptor.create(AT824);
                    adaptor.addChild(root_0, AT824_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT825=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent12303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT825_tree = (CommonTree)adaptor.create(COUNT825);
                    adaptor.addChild(root_0, COUNT825_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE826=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent12310); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE826_tree = (CommonTree)adaptor.create(ESCAPE826);
                    adaptor.addChild(root_0, ESCAPE826_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR827=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent12321); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR827_tree = (CommonTree)adaptor.create(EVERY_EXPR827);
                    adaptor.addChild(root_0, EVERY_EXPR827_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM828=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent12328); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM828_tree = (CommonTree)adaptor.create(SUM828);
                    adaptor.addChild(root_0, SUM828_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG829=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent12335); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG829_tree = (CommonTree)adaptor.create(AVG829);
                    adaptor.addChild(root_0, AVG829_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX830=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent12342); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX830_tree = (CommonTree)adaptor.create(MAX830);
                    adaptor.addChild(root_0, MAX830_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN831=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent12349); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN831_tree = (CommonTree)adaptor.create(MIN831);
                    adaptor.addChild(root_0, MIN831_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE832=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent12356); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE832_tree = (CommonTree)adaptor.create(COALESCE832);
                    adaptor.addChild(root_0, COALESCE832_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN833=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent12363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN833_tree = (CommonTree)adaptor.create(MEDIAN833);
                    adaptor.addChild(root_0, MEDIAN833_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV834=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent12370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV834_tree = (CommonTree)adaptor.create(STDDEV834);
                    adaptor.addChild(root_0, STDDEV834_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV835=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent12377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV835_tree = (CommonTree)adaptor.create(AVEDEV835);
                    adaptor.addChild(root_0, AVEDEV835_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS836=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent12384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS836_tree = (CommonTree)adaptor.create(EVENTS836);
                    adaptor.addChild(root_0, EVENTS836_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST837=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent12391); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST837_tree = (CommonTree)adaptor.create(FIRST837);
                    adaptor.addChild(root_0, FIRST837_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST838=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent12398); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST838_tree = (CommonTree)adaptor.create(LAST838);
                    adaptor.addChild(root_0, LAST838_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE839=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent12405); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE839_tree = (CommonTree)adaptor.create(WHILE839);
                    adaptor.addChild(root_0, WHILE839_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE840=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent12412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE840_tree = (CommonTree)adaptor.create(MERGE840);
                    adaptor.addChild(root_0, MERGE840_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED841=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent12419); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED841_tree = (CommonTree)adaptor.create(MATCHED841);
                    adaptor.addChild(root_0, MATCHED841_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL842=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent12426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL842_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL842);
                    adaptor.addChild(root_0, UNIDIRECTIONAL842_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION843=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent12433); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION843_tree = (CommonTree)adaptor.create(RETAINUNION843);
                    adaptor.addChild(root_0, RETAINUNION843_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION844=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent12440); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION844_tree = (CommonTree)adaptor.create(RETAININTERSECTION844);
                    adaptor.addChild(root_0, RETAININTERSECTION844_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL845=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent12447); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL845_tree = (CommonTree)adaptor.create(UNTIL845);
                    adaptor.addChild(root_0, UNTIL845_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN846=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent12454); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN846_tree = (CommonTree)adaptor.create(PATTERN846);
                    adaptor.addChild(root_0, PATTERN846_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL847=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent12461); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL847_tree = (CommonTree)adaptor.create(SQL847);
                    adaptor.addChild(root_0, SQL847_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL848=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent12468); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL848_tree = (CommonTree)adaptor.create(METADATASQL848);
                    adaptor.addChild(root_0, METADATASQL848_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS849=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent12475); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS849_tree = (CommonTree)adaptor.create(PREVIOUS849);
                    adaptor.addChild(root_0, PREVIOUS849_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL850=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent12482); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL850_tree = (CommonTree)adaptor.create(PREVIOUSTAIL850);
                    adaptor.addChild(root_0, PREVIOUSTAIL850_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR851=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent12489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR851_tree = (CommonTree)adaptor.create(PRIOR851);
                    adaptor.addChild(root_0, PRIOR851_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY852=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent12496); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY852_tree = (CommonTree)adaptor.create(WEEKDAY852);
                    adaptor.addChild(root_0, WEEKDAY852_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW853=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent12503); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW853_tree = (CommonTree)adaptor.create(LW853);
                    adaptor.addChild(root_0, LW853_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF854=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent12510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF854_tree = (CommonTree)adaptor.create(INSTANCEOF854);
                    adaptor.addChild(root_0, INSTANCEOF854_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF855=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent12517); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF855_tree = (CommonTree)adaptor.create(TYPEOF855);
                    adaptor.addChild(root_0, TYPEOF855_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST856=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent12524); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST856_tree = (CommonTree)adaptor.create(CAST856);
                    adaptor.addChild(root_0, CAST856_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT857=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent12531); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT857_tree = (CommonTree)adaptor.create(SNAPSHOT857);
                    adaptor.addChild(root_0, SNAPSHOT857_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE858=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent12538); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE858_tree = (CommonTree)adaptor.create(VARIABLE858);
                    adaptor.addChild(root_0, VARIABLE858_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX859=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent12547); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX859_tree = (CommonTree)adaptor.create(INDEX859);
                    adaptor.addChild(root_0, INDEX859_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW860=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent12556); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW860_tree = (CommonTree)adaptor.create(WINDOW860);
                    adaptor.addChild(root_0, WINDOW860_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT861=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent12563); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT861_tree = (CommonTree)adaptor.create(LEFT861);
                    adaptor.addChild(root_0, LEFT861_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT862=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent12570); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT862_tree = (CommonTree)adaptor.create(RIGHT862);
                    adaptor.addChild(root_0, RIGHT862_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER863=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent12577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER863_tree = (CommonTree)adaptor.create(OUTER863);
                    adaptor.addChild(root_0, OUTER863_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL864=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent12584); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL864_tree = (CommonTree)adaptor.create(FULL864);
                    adaptor.addChild(root_0, FULL864_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN865=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent12591); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN865_tree = (CommonTree)adaptor.create(JOIN865);
                    adaptor.addChild(root_0, JOIN865_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE866=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent12598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE866_tree = (CommonTree)adaptor.create(DEFINE866);
                    adaptor.addChild(root_0, DEFINE866_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION867=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent12605); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION867_tree = (CommonTree)adaptor.create(PARTITION867);
                    adaptor.addChild(root_0, PARTITION867_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES868=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent12612); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES868_tree = (CommonTree)adaptor.create(MATCHES868);
                    adaptor.addChild(root_0, MATCHES868_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt319=2;
            int LA319_0 = input.LA(1);
            if ( (LA319_0==IDENT) ) {
                alt319=1;
            }
            else if ( (LA319_0==TICKED_STRING_LITERAL) ) {
                alt319=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);
                throw nvae;
            }
            switch (alt319) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr12633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr12642); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT869=null;
        CommonTree t_tree=null;
        CommonTree IDENT869_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt320=2;
            int LA320_0 = input.LA(1);
            if ( (LA320_0==IDENT) ) {
                alt320=1;
            }
            else if ( (LA320_0==TICKED_STRING_LITERAL) ) {
                alt320=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);
                throw nvae;
            }
            switch (alt320) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT869=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent12656); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT869_tree = (CommonTree)adaptor.create(IDENT869);
                    adaptor.addChild(root_0, IDENT869_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent12664); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart870 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart871 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart872 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart873 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart874 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart875 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart876 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart877 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart878 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart879 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart880 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart881 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart882 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart883 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart884 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart885 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart886 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart887 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart888 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart889 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart890 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart891 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart892 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart893 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart894 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart895 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart896 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart897 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart898 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart899 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart900 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart901 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart902 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart903 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart904 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart905 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt349=8;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt349=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt349=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt349=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt349=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt349=1;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt349=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt349=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt349=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt349=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt349=8;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt349=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt349=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt349=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt349=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt349=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt349=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt349=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt349=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt349=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt349=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt349=7;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt349=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt349=6;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt349=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt349=5;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt349=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt349=6;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt349=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt349=8;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt349=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt349=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt349=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt349=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt349=4;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt349=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt349=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt349=7;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt349=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt349=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt349=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 5, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt349=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt349=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt349=1;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt349=2;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt349=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt349=8;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt349=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt349=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 349, 0, input);
                throw nvae;
            }
            switch (alt349) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod12689);
                    yearPart870=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart870.getTree());
                    int alt321=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA321_1 = input.LA(2);
                            if ( ((LA321_1>=TIMEPERIOD_MONTH && LA321_1<=TIMEPERIOD_MONTHS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA321_2 = input.LA(2);
                            if ( ((LA321_2>=TIMEPERIOD_MONTH && LA321_2<=TIMEPERIOD_MONTHS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA321_3 = input.LA(2);
                            if ( ((LA321_3>=TIMEPERIOD_MONTH && LA321_3<=TIMEPERIOD_MONTHS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA321_4 = input.LA(2);
                            if ( ((LA321_4>=TIMEPERIOD_MONTH && LA321_4<=TIMEPERIOD_MONTHS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA321_5 = input.LA(2);
                            if ( ((LA321_5>=TIMEPERIOD_MONTH && LA321_5<=TIMEPERIOD_MONTHS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA321_6 = input.LA(2);
                            if ( ((LA321_6>=TIMEPERIOD_MONTH && LA321_6<=TIMEPERIOD_MONTHS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                    }
                    switch (alt321) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod12691);
                            monthPart871=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart871.getTree());
                            }
                            break;
                    }
                    int alt322=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA322_1 = input.LA(2);
                            if ( ((LA322_1>=TIMEPERIOD_WEEK && LA322_1<=TIMEPERIOD_WEEKS)) ) {
                                alt322=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA322_2 = input.LA(2);
                            if ( ((LA322_2>=TIMEPERIOD_WEEK && LA322_2<=TIMEPERIOD_WEEKS)) ) {
                                alt322=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA322_3 = input.LA(2);
                            if ( ((LA322_3>=TIMEPERIOD_WEEK && LA322_3<=TIMEPERIOD_WEEKS)) ) {
                                alt322=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA322_4 = input.LA(2);
                            if ( ((LA322_4>=TIMEPERIOD_WEEK && LA322_4<=TIMEPERIOD_WEEKS)) ) {
                                alt322=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA322_5 = input.LA(2);
                            if ( ((LA322_5>=TIMEPERIOD_WEEK && LA322_5<=TIMEPERIOD_WEEKS)) ) {
                                alt322=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA322_6 = input.LA(2);
                            if ( ((LA322_6>=TIMEPERIOD_WEEK && LA322_6<=TIMEPERIOD_WEEKS)) ) {
                                alt322=1;
                            }
                            }
                            break;
                    }
                    switch (alt322) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod12694);
                            weekPart872=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart872.getTree());
                            }
                            break;
                    }
                    int alt323=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA323_1 = input.LA(2);
                            if ( ((LA323_1>=TIMEPERIOD_DAY && LA323_1<=TIMEPERIOD_DAYS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA323_2 = input.LA(2);
                            if ( ((LA323_2>=TIMEPERIOD_DAY && LA323_2<=TIMEPERIOD_DAYS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA323_3 = input.LA(2);
                            if ( ((LA323_3>=TIMEPERIOD_DAY && LA323_3<=TIMEPERIOD_DAYS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA323_4 = input.LA(2);
                            if ( ((LA323_4>=TIMEPERIOD_DAY && LA323_4<=TIMEPERIOD_DAYS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA323_5 = input.LA(2);
                            if ( ((LA323_5>=TIMEPERIOD_DAY && LA323_5<=TIMEPERIOD_DAYS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA323_6 = input.LA(2);
                            if ( ((LA323_6>=TIMEPERIOD_DAY && LA323_6<=TIMEPERIOD_DAYS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                    }
                    switch (alt323) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod12697);
                            dayPart873=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart873.getTree());
                            }
                            break;
                    }
                    int alt324=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA324_1 = input.LA(2);
                            if ( ((LA324_1>=TIMEPERIOD_HOUR && LA324_1<=TIMEPERIOD_HOURS)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA324_2 = input.LA(2);
                            if ( ((LA324_2>=TIMEPERIOD_HOUR && LA324_2<=TIMEPERIOD_HOURS)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA324_3 = input.LA(2);
                            if ( ((LA324_3>=TIMEPERIOD_HOUR && LA324_3<=TIMEPERIOD_HOURS)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA324_4 = input.LA(2);
                            if ( ((LA324_4>=TIMEPERIOD_HOUR && LA324_4<=TIMEPERIOD_HOURS)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA324_5 = input.LA(2);
                            if ( ((LA324_5>=TIMEPERIOD_HOUR && LA324_5<=TIMEPERIOD_HOURS)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA324_6 = input.LA(2);
                            if ( ((LA324_6>=TIMEPERIOD_HOUR && LA324_6<=TIMEPERIOD_HOURS)) ) {
                                alt324=1;
                            }
                            }
                            break;
                    }
                    switch (alt324) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod12700);
                            hourPart874=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart874.getTree());
                            }
                            break;
                    }
                    int alt325=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA325_1 = input.LA(2);
                            if ( (LA325_1==MIN||(LA325_1>=TIMEPERIOD_MINUTE && LA325_1<=TIMEPERIOD_MINUTES)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA325_2 = input.LA(2);
                            if ( (LA325_2==MIN||(LA325_2>=TIMEPERIOD_MINUTE && LA325_2<=TIMEPERIOD_MINUTES)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA325_3 = input.LA(2);
                            if ( (LA325_3==MIN||(LA325_3>=TIMEPERIOD_MINUTE && LA325_3<=TIMEPERIOD_MINUTES)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA325_4 = input.LA(2);
                            if ( (LA325_4==MIN||(LA325_4>=TIMEPERIOD_MINUTE && LA325_4<=TIMEPERIOD_MINUTES)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA325_5 = input.LA(2);
                            if ( (LA325_5==MIN||(LA325_5>=TIMEPERIOD_MINUTE && LA325_5<=TIMEPERIOD_MINUTES)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA325_6 = input.LA(2);
                            if ( (LA325_6==MIN||(LA325_6>=TIMEPERIOD_MINUTE && LA325_6<=TIMEPERIOD_MINUTES)) ) {
                                alt325=1;
                            }
                            }
                            break;
                    }
                    switch (alt325) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12703);
                            minutePart875=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart875.getTree());
                            }
                            break;
                    }
                    int alt326=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA326_1 = input.LA(2);
                            if ( ((LA326_1>=TIMEPERIOD_SEC && LA326_1<=TIMEPERIOD_SECONDS)) ) {
                                alt326=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA326_2 = input.LA(2);
                            if ( ((LA326_2>=TIMEPERIOD_SEC && LA326_2<=TIMEPERIOD_SECONDS)) ) {
                                alt326=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA326_3 = input.LA(2);
                            if ( ((LA326_3>=TIMEPERIOD_SEC && LA326_3<=TIMEPERIOD_SECONDS)) ) {
                                alt326=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA326_4 = input.LA(2);
                            if ( ((LA326_4>=TIMEPERIOD_SEC && LA326_4<=TIMEPERIOD_SECONDS)) ) {
                                alt326=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA326_5 = input.LA(2);
                            if ( ((LA326_5>=TIMEPERIOD_SEC && LA326_5<=TIMEPERIOD_SECONDS)) ) {
                                alt326=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA326_6 = input.LA(2);
                            if ( ((LA326_6>=TIMEPERIOD_SEC && LA326_6<=TIMEPERIOD_SECONDS)) ) {
                                alt326=1;
                            }
                            }
                            break;
                    }
                    switch (alt326) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12706);
                            secondPart876=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart876.getTree());
                            }
                            break;
                    }
                    int alt327=2;
                    int LA327_0 = input.LA(1);
                    if ( (LA327_0==NUM_DOUBLE||LA327_0==IDENT||LA327_0==QUESTION||LA327_0==NUM_INT||(LA327_0>=NUM_LONG && LA327_0<=NUM_FLOAT)) ) {
                        alt327=1;
                    }
                    switch (alt327) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12709);
                            millisecondPart877=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart877.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod12715);
                    monthPart878=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart878.getTree());
                    int alt328=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA328_1 = input.LA(2);
                            if ( ((LA328_1>=TIMEPERIOD_WEEK && LA328_1<=TIMEPERIOD_WEEKS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA328_2 = input.LA(2);
                            if ( ((LA328_2>=TIMEPERIOD_WEEK && LA328_2<=TIMEPERIOD_WEEKS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA328_3 = input.LA(2);
                            if ( ((LA328_3>=TIMEPERIOD_WEEK && LA328_3<=TIMEPERIOD_WEEKS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA328_4 = input.LA(2);
                            if ( ((LA328_4>=TIMEPERIOD_WEEK && LA328_4<=TIMEPERIOD_WEEKS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA328_5 = input.LA(2);
                            if ( ((LA328_5>=TIMEPERIOD_WEEK && LA328_5<=TIMEPERIOD_WEEKS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA328_6 = input.LA(2);
                            if ( ((LA328_6>=TIMEPERIOD_WEEK && LA328_6<=TIMEPERIOD_WEEKS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                    }
                    switch (alt328) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod12717);
                            weekPart879=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart879.getTree());
                            }
                            break;
                    }
                    int alt329=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA329_1 = input.LA(2);
                            if ( ((LA329_1>=TIMEPERIOD_DAY && LA329_1<=TIMEPERIOD_DAYS)) ) {
                                alt329=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA329_2 = input.LA(2);
                            if ( ((LA329_2>=TIMEPERIOD_DAY && LA329_2<=TIMEPERIOD_DAYS)) ) {
                                alt329=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA329_3 = input.LA(2);
                            if ( ((LA329_3>=TIMEPERIOD_DAY && LA329_3<=TIMEPERIOD_DAYS)) ) {
                                alt329=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA329_4 = input.LA(2);
                            if ( ((LA329_4>=TIMEPERIOD_DAY && LA329_4<=TIMEPERIOD_DAYS)) ) {
                                alt329=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA329_5 = input.LA(2);
                            if ( ((LA329_5>=TIMEPERIOD_DAY && LA329_5<=TIMEPERIOD_DAYS)) ) {
                                alt329=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA329_6 = input.LA(2);
                            if ( ((LA329_6>=TIMEPERIOD_DAY && LA329_6<=TIMEPERIOD_DAYS)) ) {
                                alt329=1;
                            }
                            }
                            break;
                    }
                    switch (alt329) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod12720);
                            dayPart880=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart880.getTree());
                            }
                            break;
                    }
                    int alt330=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA330_1 = input.LA(2);
                            if ( ((LA330_1>=TIMEPERIOD_HOUR && LA330_1<=TIMEPERIOD_HOURS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA330_2 = input.LA(2);
                            if ( ((LA330_2>=TIMEPERIOD_HOUR && LA330_2<=TIMEPERIOD_HOURS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA330_3 = input.LA(2);
                            if ( ((LA330_3>=TIMEPERIOD_HOUR && LA330_3<=TIMEPERIOD_HOURS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA330_4 = input.LA(2);
                            if ( ((LA330_4>=TIMEPERIOD_HOUR && LA330_4<=TIMEPERIOD_HOURS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA330_5 = input.LA(2);
                            if ( ((LA330_5>=TIMEPERIOD_HOUR && LA330_5<=TIMEPERIOD_HOURS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA330_6 = input.LA(2);
                            if ( ((LA330_6>=TIMEPERIOD_HOUR && LA330_6<=TIMEPERIOD_HOURS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                    }
                    switch (alt330) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod12723);
                            hourPart881=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart881.getTree());
                            }
                            break;
                    }
                    int alt331=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA331_1 = input.LA(2);
                            if ( (LA331_1==MIN||(LA331_1>=TIMEPERIOD_MINUTE && LA331_1<=TIMEPERIOD_MINUTES)) ) {
                                alt331=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA331_2 = input.LA(2);
                            if ( (LA331_2==MIN||(LA331_2>=TIMEPERIOD_MINUTE && LA331_2<=TIMEPERIOD_MINUTES)) ) {
                                alt331=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA331_3 = input.LA(2);
                            if ( (LA331_3==MIN||(LA331_3>=TIMEPERIOD_MINUTE && LA331_3<=TIMEPERIOD_MINUTES)) ) {
                                alt331=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA331_4 = input.LA(2);
                            if ( (LA331_4==MIN||(LA331_4>=TIMEPERIOD_MINUTE && LA331_4<=TIMEPERIOD_MINUTES)) ) {
                                alt331=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA331_5 = input.LA(2);
                            if ( (LA331_5==MIN||(LA331_5>=TIMEPERIOD_MINUTE && LA331_5<=TIMEPERIOD_MINUTES)) ) {
                                alt331=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA331_6 = input.LA(2);
                            if ( (LA331_6==MIN||(LA331_6>=TIMEPERIOD_MINUTE && LA331_6<=TIMEPERIOD_MINUTES)) ) {
                                alt331=1;
                            }
                            }
                            break;
                    }
                    switch (alt331) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12726);
                            minutePart882=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart882.getTree());
                            }
                            break;
                    }
                    int alt332=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA332_1 = input.LA(2);
                            if ( ((LA332_1>=TIMEPERIOD_SEC && LA332_1<=TIMEPERIOD_SECONDS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA332_2 = input.LA(2);
                            if ( ((LA332_2>=TIMEPERIOD_SEC && LA332_2<=TIMEPERIOD_SECONDS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA332_3 = input.LA(2);
                            if ( ((LA332_3>=TIMEPERIOD_SEC && LA332_3<=TIMEPERIOD_SECONDS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA332_4 = input.LA(2);
                            if ( ((LA332_4>=TIMEPERIOD_SEC && LA332_4<=TIMEPERIOD_SECONDS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA332_5 = input.LA(2);
                            if ( ((LA332_5>=TIMEPERIOD_SEC && LA332_5<=TIMEPERIOD_SECONDS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA332_6 = input.LA(2);
                            if ( ((LA332_6>=TIMEPERIOD_SEC && LA332_6<=TIMEPERIOD_SECONDS)) ) {
                                alt332=1;
                            }
                            }
                            break;
                    }
                    switch (alt332) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12729);
                            secondPart883=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart883.getTree());
                            }
                            break;
                    }
                    int alt333=2;
                    int LA333_0 = input.LA(1);
                    if ( (LA333_0==NUM_DOUBLE||LA333_0==IDENT||LA333_0==QUESTION||LA333_0==NUM_INT||(LA333_0>=NUM_LONG && LA333_0<=NUM_FLOAT)) ) {
                        alt333=1;
                    }
                    switch (alt333) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12732);
                            millisecondPart884=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart884.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod12738);
                    weekPart885=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart885.getTree());
                    int alt334=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA334_1 = input.LA(2);
                            if ( ((LA334_1>=TIMEPERIOD_DAY && LA334_1<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA334_2 = input.LA(2);
                            if ( ((LA334_2>=TIMEPERIOD_DAY && LA334_2<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA334_3 = input.LA(2);
                            if ( ((LA334_3>=TIMEPERIOD_DAY && LA334_3<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA334_4 = input.LA(2);
                            if ( ((LA334_4>=TIMEPERIOD_DAY && LA334_4<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA334_5 = input.LA(2);
                            if ( ((LA334_5>=TIMEPERIOD_DAY && LA334_5<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA334_6 = input.LA(2);
                            if ( ((LA334_6>=TIMEPERIOD_DAY && LA334_6<=TIMEPERIOD_DAYS)) ) {
                                alt334=1;
                            }
                            }
                            break;
                    }
                    switch (alt334) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod12740);
                            dayPart886=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart886.getTree());
                            }
                            break;
                    }
                    int alt335=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA335_1 = input.LA(2);
                            if ( ((LA335_1>=TIMEPERIOD_HOUR && LA335_1<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA335_2 = input.LA(2);
                            if ( ((LA335_2>=TIMEPERIOD_HOUR && LA335_2<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA335_3 = input.LA(2);
                            if ( ((LA335_3>=TIMEPERIOD_HOUR && LA335_3<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA335_4 = input.LA(2);
                            if ( ((LA335_4>=TIMEPERIOD_HOUR && LA335_4<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA335_5 = input.LA(2);
                            if ( ((LA335_5>=TIMEPERIOD_HOUR && LA335_5<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA335_6 = input.LA(2);
                            if ( ((LA335_6>=TIMEPERIOD_HOUR && LA335_6<=TIMEPERIOD_HOURS)) ) {
                                alt335=1;
                            }
                            }
                            break;
                    }
                    switch (alt335) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod12743);
                            hourPart887=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart887.getTree());
                            }
                            break;
                    }
                    int alt336=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA336_1 = input.LA(2);
                            if ( (LA336_1==MIN||(LA336_1>=TIMEPERIOD_MINUTE && LA336_1<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA336_2 = input.LA(2);
                            if ( (LA336_2==MIN||(LA336_2>=TIMEPERIOD_MINUTE && LA336_2<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA336_3 = input.LA(2);
                            if ( (LA336_3==MIN||(LA336_3>=TIMEPERIOD_MINUTE && LA336_3<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA336_4 = input.LA(2);
                            if ( (LA336_4==MIN||(LA336_4>=TIMEPERIOD_MINUTE && LA336_4<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA336_5 = input.LA(2);
                            if ( (LA336_5==MIN||(LA336_5>=TIMEPERIOD_MINUTE && LA336_5<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA336_6 = input.LA(2);
                            if ( (LA336_6==MIN||(LA336_6>=TIMEPERIOD_MINUTE && LA336_6<=TIMEPERIOD_MINUTES)) ) {
                                alt336=1;
                            }
                            }
                            break;
                    }
                    switch (alt336) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12746);
                            minutePart888=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart888.getTree());
                            }
                            break;
                    }
                    int alt337=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA337_1 = input.LA(2);
                            if ( ((LA337_1>=TIMEPERIOD_SEC && LA337_1<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA337_2 = input.LA(2);
                            if ( ((LA337_2>=TIMEPERIOD_SEC && LA337_2<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA337_3 = input.LA(2);
                            if ( ((LA337_3>=TIMEPERIOD_SEC && LA337_3<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA337_4 = input.LA(2);
                            if ( ((LA337_4>=TIMEPERIOD_SEC && LA337_4<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA337_5 = input.LA(2);
                            if ( ((LA337_5>=TIMEPERIOD_SEC && LA337_5<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA337_6 = input.LA(2);
                            if ( ((LA337_6>=TIMEPERIOD_SEC && LA337_6<=TIMEPERIOD_SECONDS)) ) {
                                alt337=1;
                            }
                            }
                            break;
                    }
                    switch (alt337) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12749);
                            secondPart889=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart889.getTree());
                            }
                            break;
                    }
                    int alt338=2;
                    int LA338_0 = input.LA(1);
                    if ( (LA338_0==NUM_DOUBLE||LA338_0==IDENT||LA338_0==QUESTION||LA338_0==NUM_INT||(LA338_0>=NUM_LONG && LA338_0<=NUM_FLOAT)) ) {
                        alt338=1;
                    }
                    switch (alt338) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12752);
                            millisecondPart890=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart890.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod12758);
                    dayPart891=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart891.getTree());
                    int alt339=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA339_1 = input.LA(2);
                            if ( ((LA339_1>=TIMEPERIOD_HOUR && LA339_1<=TIMEPERIOD_HOURS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA339_2 = input.LA(2);
                            if ( ((LA339_2>=TIMEPERIOD_HOUR && LA339_2<=TIMEPERIOD_HOURS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA339_3 = input.LA(2);
                            if ( ((LA339_3>=TIMEPERIOD_HOUR && LA339_3<=TIMEPERIOD_HOURS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA339_4 = input.LA(2);
                            if ( ((LA339_4>=TIMEPERIOD_HOUR && LA339_4<=TIMEPERIOD_HOURS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA339_5 = input.LA(2);
                            if ( ((LA339_5>=TIMEPERIOD_HOUR && LA339_5<=TIMEPERIOD_HOURS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA339_6 = input.LA(2);
                            if ( ((LA339_6>=TIMEPERIOD_HOUR && LA339_6<=TIMEPERIOD_HOURS)) ) {
                                alt339=1;
                            }
                            }
                            break;
                    }
                    switch (alt339) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod12760);
                            hourPart892=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart892.getTree());
                            }
                            break;
                    }
                    int alt340=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA340_1 = input.LA(2);
                            if ( (LA340_1==MIN||(LA340_1>=TIMEPERIOD_MINUTE && LA340_1<=TIMEPERIOD_MINUTES)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA340_2 = input.LA(2);
                            if ( (LA340_2==MIN||(LA340_2>=TIMEPERIOD_MINUTE && LA340_2<=TIMEPERIOD_MINUTES)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA340_3 = input.LA(2);
                            if ( (LA340_3==MIN||(LA340_3>=TIMEPERIOD_MINUTE && LA340_3<=TIMEPERIOD_MINUTES)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA340_4 = input.LA(2);
                            if ( (LA340_4==MIN||(LA340_4>=TIMEPERIOD_MINUTE && LA340_4<=TIMEPERIOD_MINUTES)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA340_5 = input.LA(2);
                            if ( (LA340_5==MIN||(LA340_5>=TIMEPERIOD_MINUTE && LA340_5<=TIMEPERIOD_MINUTES)) ) {
                                alt340=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA340_6 = input.LA(2);
                            if ( (LA340_6==MIN||(LA340_6>=TIMEPERIOD_MINUTE && LA340_6<=TIMEPERIOD_MINUTES)) ) {
                                alt340=1;
                            }
                            }
                            break;
                    }
                    switch (alt340) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12763);
                            minutePart893=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart893.getTree());
                            }
                            break;
                    }
                    int alt341=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA341_1 = input.LA(2);
                            if ( ((LA341_1>=TIMEPERIOD_SEC && LA341_1<=TIMEPERIOD_SECONDS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA341_2 = input.LA(2);
                            if ( ((LA341_2>=TIMEPERIOD_SEC && LA341_2<=TIMEPERIOD_SECONDS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA341_3 = input.LA(2);
                            if ( ((LA341_3>=TIMEPERIOD_SEC && LA341_3<=TIMEPERIOD_SECONDS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA341_4 = input.LA(2);
                            if ( ((LA341_4>=TIMEPERIOD_SEC && LA341_4<=TIMEPERIOD_SECONDS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA341_5 = input.LA(2);
                            if ( ((LA341_5>=TIMEPERIOD_SEC && LA341_5<=TIMEPERIOD_SECONDS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA341_6 = input.LA(2);
                            if ( ((LA341_6>=TIMEPERIOD_SEC && LA341_6<=TIMEPERIOD_SECONDS)) ) {
                                alt341=1;
                            }
                            }
                            break;
                    }
                    switch (alt341) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12766);
                            secondPart894=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart894.getTree());
                            }
                            break;
                    }
                    int alt342=2;
                    int LA342_0 = input.LA(1);
                    if ( (LA342_0==NUM_DOUBLE||LA342_0==IDENT||LA342_0==QUESTION||LA342_0==NUM_INT||(LA342_0>=NUM_LONG && LA342_0<=NUM_FLOAT)) ) {
                        alt342=1;
                    }
                    switch (alt342) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12769);
                            millisecondPart895=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart895.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod12775);
                    hourPart896=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart896.getTree());
                    int alt343=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA343_1 = input.LA(2);
                            if ( (LA343_1==MIN||(LA343_1>=TIMEPERIOD_MINUTE && LA343_1<=TIMEPERIOD_MINUTES)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA343_2 = input.LA(2);
                            if ( (LA343_2==MIN||(LA343_2>=TIMEPERIOD_MINUTE && LA343_2<=TIMEPERIOD_MINUTES)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA343_3 = input.LA(2);
                            if ( (LA343_3==MIN||(LA343_3>=TIMEPERIOD_MINUTE && LA343_3<=TIMEPERIOD_MINUTES)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA343_4 = input.LA(2);
                            if ( (LA343_4==MIN||(LA343_4>=TIMEPERIOD_MINUTE && LA343_4<=TIMEPERIOD_MINUTES)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA343_5 = input.LA(2);
                            if ( (LA343_5==MIN||(LA343_5>=TIMEPERIOD_MINUTE && LA343_5<=TIMEPERIOD_MINUTES)) ) {
                                alt343=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA343_6 = input.LA(2);
                            if ( (LA343_6==MIN||(LA343_6>=TIMEPERIOD_MINUTE && LA343_6<=TIMEPERIOD_MINUTES)) ) {
                                alt343=1;
                            }
                            }
                            break;
                    }
                    switch (alt343) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12777);
                            minutePart897=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart897.getTree());
                            }
                            break;
                    }
                    int alt344=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA344_1 = input.LA(2);
                            if ( ((LA344_1>=TIMEPERIOD_SEC && LA344_1<=TIMEPERIOD_SECONDS)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA344_2 = input.LA(2);
                            if ( ((LA344_2>=TIMEPERIOD_SEC && LA344_2<=TIMEPERIOD_SECONDS)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA344_3 = input.LA(2);
                            if ( ((LA344_3>=TIMEPERIOD_SEC && LA344_3<=TIMEPERIOD_SECONDS)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA344_4 = input.LA(2);
                            if ( ((LA344_4>=TIMEPERIOD_SEC && LA344_4<=TIMEPERIOD_SECONDS)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA344_5 = input.LA(2);
                            if ( ((LA344_5>=TIMEPERIOD_SEC && LA344_5<=TIMEPERIOD_SECONDS)) ) {
                                alt344=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA344_6 = input.LA(2);
                            if ( ((LA344_6>=TIMEPERIOD_SEC && LA344_6<=TIMEPERIOD_SECONDS)) ) {
                                alt344=1;
                            }
                            }
                            break;
                    }
                    switch (alt344) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12780);
                            secondPart898=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart898.getTree());
                            }
                            break;
                    }
                    int alt345=2;
                    int LA345_0 = input.LA(1);
                    if ( (LA345_0==NUM_DOUBLE||LA345_0==IDENT||LA345_0==QUESTION||LA345_0==NUM_INT||(LA345_0>=NUM_LONG && LA345_0<=NUM_FLOAT)) ) {
                        alt345=1;
                    }
                    switch (alt345) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12783);
                            millisecondPart899=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart899.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod12789);
                    minutePart900=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart900.getTree());
                    int alt346=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA346_1 = input.LA(2);
                            if ( ((LA346_1>=TIMEPERIOD_SEC && LA346_1<=TIMEPERIOD_SECONDS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA346_2 = input.LA(2);
                            if ( ((LA346_2>=TIMEPERIOD_SEC && LA346_2<=TIMEPERIOD_SECONDS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA346_3 = input.LA(2);
                            if ( ((LA346_3>=TIMEPERIOD_SEC && LA346_3<=TIMEPERIOD_SECONDS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA346_4 = input.LA(2);
                            if ( ((LA346_4>=TIMEPERIOD_SEC && LA346_4<=TIMEPERIOD_SECONDS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA346_5 = input.LA(2);
                            if ( ((LA346_5>=TIMEPERIOD_SEC && LA346_5<=TIMEPERIOD_SECONDS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA346_6 = input.LA(2);
                            if ( ((LA346_6>=TIMEPERIOD_SEC && LA346_6<=TIMEPERIOD_SECONDS)) ) {
                                alt346=1;
                            }
                            }
                            break;
                    }
                    switch (alt346) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12791);
                            secondPart901=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart901.getTree());
                            }
                            break;
                    }
                    int alt347=2;
                    int LA347_0 = input.LA(1);
                    if ( (LA347_0==NUM_DOUBLE||LA347_0==IDENT||LA347_0==QUESTION||LA347_0==NUM_INT||(LA347_0>=NUM_LONG && LA347_0<=NUM_FLOAT)) ) {
                        alt347=1;
                    }
                    switch (alt347) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12794);
                            millisecondPart902=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart902.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod12800);
                    secondPart903=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart903.getTree());
                    int alt348=2;
                    int LA348_0 = input.LA(1);
                    if ( (LA348_0==NUM_DOUBLE||LA348_0==IDENT||LA348_0==QUESTION||LA348_0==NUM_INT||(LA348_0>=NUM_LONG && LA348_0<=NUM_FLOAT)) ) {
                        alt348=1;
                    }
                    switch (alt348) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12802);
                            millisecondPart904=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart904.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod12808);
                    millisecondPart905=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart905.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS908=null;
        Token TIMEPERIOD_YEAR909=null;
        EsperEPL2GrammarParser.number_return number906 = null;
        EsperEPL2GrammarParser.substitution_return substitution907 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS908_tree=null;
        CommonTree TIMEPERIOD_YEAR909_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt350=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt350=1;
                }
                break;
            case IDENT:
                {
                alt350=2;
                }
                break;
            case QUESTION:
                {
                alt350=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 350, 0, input);
                throw nvae;
            }
            switch (alt350) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_yearPart12855);
                    number906=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number906.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart12859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart12861);
                    substitution907=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution907.getTree());
                    }
                    break;
            }
            int alt351=2;
            int LA351_0 = input.LA(1);
            if ( (LA351_0==TIMEPERIOD_YEARS) ) {
                alt351=1;
            }
            else if ( (LA351_0==TIMEPERIOD_YEAR) ) {
                alt351=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 351, 0, input);
                throw nvae;
            }
            switch (alt351) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS908=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart12865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS908);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR909=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart12869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR909);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS912=null;
        Token TIMEPERIOD_MONTH913=null;
        EsperEPL2GrammarParser.number_return number910 = null;
        EsperEPL2GrammarParser.substitution_return substitution911 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS912_tree=null;
        CommonTree TIMEPERIOD_MONTH913_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt352=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt352=1;
                }
                break;
            case IDENT:
                {
                alt352=2;
                }
                break;
            case QUESTION:
                {
                alt352=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 352, 0, input);
                throw nvae;
            }
            switch (alt352) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_monthPart12917);
                    number910=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number910.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart12921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart12923);
                    substitution911=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution911.getTree());
                    }
                    break;
            }
            int alt353=2;
            int LA353_0 = input.LA(1);
            if ( (LA353_0==TIMEPERIOD_MONTHS) ) {
                alt353=1;
            }
            else if ( (LA353_0==TIMEPERIOD_MONTH) ) {
                alt353=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 353, 0, input);
                throw nvae;
            }
            switch (alt353) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS912=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart12927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS912);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH913=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart12931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH913);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS916=null;
        Token TIMEPERIOD_WEEK917=null;
        EsperEPL2GrammarParser.number_return number914 = null;
        EsperEPL2GrammarParser.substitution_return substitution915 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS916_tree=null;
        CommonTree TIMEPERIOD_WEEK917_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt354=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt354=1;
                }
                break;
            case IDENT:
                {
                alt354=2;
                }
                break;
            case QUESTION:
                {
                alt354=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 354, 0, input);
                throw nvae;
            }
            switch (alt354) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekPart12979);
                    number914=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number914.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart12983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart12985);
                    substitution915=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution915.getTree());
                    }
                    break;
            }
            int alt355=2;
            int LA355_0 = input.LA(1);
            if ( (LA355_0==TIMEPERIOD_WEEKS) ) {
                alt355=1;
            }
            else if ( (LA355_0==TIMEPERIOD_WEEK) ) {
                alt355=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 355, 0, input);
                throw nvae;
            }
            switch (alt355) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS916=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart12989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS916);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK917=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart12993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK917);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS920=null;
        Token TIMEPERIOD_DAY921=null;
        EsperEPL2GrammarParser.number_return number918 = null;
        EsperEPL2GrammarParser.substitution_return substitution919 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS920_tree=null;
        CommonTree TIMEPERIOD_DAY921_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt356=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt356=1;
                }
                break;
            case IDENT:
                {
                alt356=2;
                }
                break;
            case QUESTION:
                {
                alt356=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 356, 0, input);
                throw nvae;
            }
            switch (alt356) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_dayPart13041);
                    number918=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number918.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart13045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart13047);
                    substitution919=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution919.getTree());
                    }
                    break;
            }
            int alt357=2;
            int LA357_0 = input.LA(1);
            if ( (LA357_0==TIMEPERIOD_DAYS) ) {
                alt357=1;
            }
            else if ( (LA357_0==TIMEPERIOD_DAY) ) {
                alt357=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 357, 0, input);
                throw nvae;
            }
            switch (alt357) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS920=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart13051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS920);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY921=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart13055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY921);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS924=null;
        Token TIMEPERIOD_HOUR925=null;
        EsperEPL2GrammarParser.number_return number922 = null;
        EsperEPL2GrammarParser.substitution_return substitution923 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS924_tree=null;
        CommonTree TIMEPERIOD_HOUR925_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt358=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt358=1;
                }
                break;
            case IDENT:
                {
                alt358=2;
                }
                break;
            case QUESTION:
                {
                alt358=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 358, 0, input);
                throw nvae;
            }
            switch (alt358) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_hourPart13104);
                    number922=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number922.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart13108); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart13110);
                    substitution923=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution923.getTree());
                    }
                    break;
            }
            int alt359=2;
            int LA359_0 = input.LA(1);
            if ( (LA359_0==TIMEPERIOD_HOURS) ) {
                alt359=1;
            }
            else if ( (LA359_0==TIMEPERIOD_HOUR) ) {
                alt359=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 359, 0, input);
                throw nvae;
            }
            switch (alt359) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS924=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart13114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS924);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR925=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart13118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR925);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES928=null;
        Token TIMEPERIOD_MINUTE929=null;
        Token MIN930=null;
        EsperEPL2GrammarParser.number_return number926 = null;
        EsperEPL2GrammarParser.substitution_return substitution927 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES928_tree=null;
        CommonTree TIMEPERIOD_MINUTE929_tree=null;
        CommonTree MIN930_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt360=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt360=1;
                }
                break;
            case IDENT:
                {
                alt360=2;
                }
                break;
            case QUESTION:
                {
                alt360=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 360, 0, input);
                throw nvae;
            }
            switch (alt360) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_minutePart13167);
                    number926=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number926.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart13171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart13173);
                    substitution927=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution927.getTree());
                    }
                    break;
            }
            int alt361=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt361=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt361=2;
                }
                break;
            case MIN:
                {
                alt361=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 361, 0, input);
                throw nvae;
            }
            switch (alt361) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES928=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart13177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES928);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE929=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart13181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE929);
                    }
                    break;
                case 3 :
                    {
                    MIN930=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart13185); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN930);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS933=null;
        Token TIMEPERIOD_SECOND934=null;
        Token TIMEPERIOD_SEC935=null;
        EsperEPL2GrammarParser.number_return number931 = null;
        EsperEPL2GrammarParser.substitution_return substitution932 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS933_tree=null;
        CommonTree TIMEPERIOD_SECOND934_tree=null;
        CommonTree TIMEPERIOD_SEC935_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt362=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt362=1;
                }
                break;
            case IDENT:
                {
                alt362=2;
                }
                break;
            case QUESTION:
                {
                alt362=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 362, 0, input);
                throw nvae;
            }
            switch (alt362) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_secondPart13235);
                    number931=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number931.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart13239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart13241);
                    substitution932=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution932.getTree());
                    }
                    break;
            }
            int alt363=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt363=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt363=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt363=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 363, 0, input);
                throw nvae;
            }
            switch (alt363) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS933=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart13245); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS933);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND934=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart13249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND934);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC935=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart13253); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC935);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS938=null;
        Token TIMEPERIOD_MILLISECOND939=null;
        Token TIMEPERIOD_MILLISEC940=null;
        EsperEPL2GrammarParser.number_return number936 = null;
        EsperEPL2GrammarParser.substitution_return substitution937 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS938_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND939_tree=null;
        CommonTree TIMEPERIOD_MILLISEC940_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt364=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt364=1;
                }
                break;
            case IDENT:
                {
                alt364=2;
                }
                break;
            case QUESTION:
                {
                alt364=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 364, 0, input);
                throw nvae;
            }
            switch (alt364) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart13303);
                    number936=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number936.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart13307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart13309);
                    substitution937=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution937.getTree());
                    }
                    break;
            }
            int alt365=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt365=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt365=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt365=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 365, 0, input);
                throw nvae;
            }
            switch (alt365) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS938=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart13313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS938);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND939=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart13317); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND939);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC940=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart13321); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC940);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt366=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt366=1;
                }
                break;
            case NUM_LONG:
                {
                alt366=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt366=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt366=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 366, 0, input);
                throw nvae;
            }
            switch (alt366) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number13376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number13393); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number13410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number13427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution13448); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant941 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant942 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt367=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt367=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt367=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt367=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt367=4;
                }
                break;
            case VALUE_NULL:
                {
                alt367=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 367, 0, input);
                throw nvae;
            }
            switch (alt367) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant13467);
                    numberconstant941=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant941.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant13474);
                    stringconstant942=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant942.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant13487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant13507); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant13527); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number943 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt368=3;
            int LA368_0 = input.LA(1);
            if ( (LA368_0==MINUS) ) {
                alt368=1;
            }
            else if ( (LA368_0==PLUS) ) {
                alt368=2;
            }
            switch (alt368) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant13549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant13555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant13559);
            number943=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number943.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number943!=null?((CommonTree)number943.tree):null).getType(), "-" + (number943!=null?input.toString(number943.start,number943.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt369=2;
            int LA369_0 = input.LA(1);
            if ( (LA369_0==STRING_LITERAL) ) {
                alt369=1;
            }
            else if ( (LA369_0==QUOTED_STRING_LITERAL) ) {
                alt369=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 369, 0, input);
                throw nvae;
            }
            switch (alt369) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant13588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant13604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4833);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6233);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar8097);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar9482);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar9544);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar10907);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar11388);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar11399);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar11410);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar11421);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar11433);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar11444);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar11455);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar11468);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar11493);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA196 dfa196 = new DFA196(this);
    static final String DFA196_eotS =
        "\u0bea\uffff";
    static final String DFA196_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0bb5\uffff";
    static final String DFA196_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\14\uffff\1\u0127\175\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\u0134\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73"+
        "\uffff\1\5\73\uffff\1\5\2\6\107\uffff\2\6\117\uffff\2\6\75\uffff"+
        "\2\6\115\uffff\2\6\106\uffff\2\6\75\uffff\2\6\106\uffff\2\6\117"+
        "\uffff\2\6\75\uffff\2\6\104\uffff\2\6\107\uffff\2\6\113\uffff\2"+
        "\6\75\uffff\2\6\104\uffff\2\6\u008a\uffff\1\0\5\uffff\1\0\55\uffff"+
        "\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1\0\115\uffff\1\0\31\uffff"+
        "\1\0\5\uffff\1\0\31\uffff\1\0\55\uffff\1\0\31\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\115\uffff\1\0\30\uffff\1\0\141\uffff"+
        "\1\0\30\uffff\1\0\5\uffff";
    static final String DFA196_maxS =
        "\2\u014a\13\uffff\1\u014a\3\uffff\1\u0147\2\uffff\2\u0147\2\uffff"+
        "\4\u0147\1\uffff\2\u0147\12\uffff\3\u0147\2\uffff\3\u0147\3\uffff"+
        "\1\u0147\14\uffff\1\u0127\175\uffff\1\u014a\73\uffff\1\u014a\73"+
        "\uffff\1\u014a\73\uffff\1\u014a\73\uffff\1\u014a\73\uffff\1\u014a"+
        "\73\uffff\1\u014a\73\uffff\1\u014a\73\uffff\1\u014a\73\uffff\1\u014a"+
        "\73\uffff\1\u014a\73\uffff\1\u0142\73\uffff\1\u014a\73\uffff\1\u014a"+
        "\73\uffff\1\u014a\73\uffff\1\u014a\73\uffff\1\u0148\2\u0141\107"+
        "\uffff\2\u0141\117\uffff\2\u0141\75\uffff\2\u0141\115\uffff\2\u0141"+
        "\106\uffff\2\u0141\75\uffff\2\u0141\106\uffff\2\u0141\117\uffff"+
        "\2\u0141\75\uffff\2\u0141\104\uffff\2\u0141\107\uffff\2\u0141\113"+
        "\uffff\2\u0141\75\uffff\2\u0141\104\uffff\2\u0141\u008a\uffff\1"+
        "\0\5\uffff\1\0\55\uffff\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1"+
        "\0\115\uffff\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff\1\0\55\uffff"+
        "\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff\1\0\55\uffff"+
        "\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\115\uffff"+
        "\1\0\30\uffff\1\0\141\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA196_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\60\uffff\2\6\1\uffff\1\6"+
        "\1\7\1\12\4\uffff\1\1\56\uffff\1\10\1\4\u0408\uffff\107\6\2\uffff"+
        "\117\6\2\uffff\75\6\2\uffff\115\6\2\uffff\106\6\2\uffff\75\6\2\uffff"+
        "\106\6\2\uffff\117\6\2\uffff\75\6\2\uffff\104\6\2\uffff\105\6\4"+
        "\uffff\113\6\2\uffff\75\6\2\uffff\104\6\2\uffff\106\6\1\11\103\6"+
        "\1\uffff\5\6\1\uffff\55\6\1\uffff\31\6\1\uffff\5\6\1\uffff\55\6"+
        "\1\uffff\5\6\1\uffff\31\6\1\uffff\55\6\1\uffff\31\6\1\uffff\5\6"+
        "\1\uffff\31\6\1\uffff\55\6\1\uffff\31\6\1\uffff\5\6\1\uffff\55\6"+
        "\1\uffff\5\6\1\uffff\55\6\1\uffff\5\6\1\uffff\31\6\1\uffff\31\6"+
        "\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\30"+
        "\6\1\uffff\62\6\1\uffff\32\6\1\uffff\23\6\1\uffff\30\6\1\uffff\5"+
        "\6";
    static final String DFA196_specialS =
        "\1\0\u00be\uffff\1\1\73\uffff\1\2\73\uffff\1\3\73\uffff\1\4\73"+
        "\uffff\1\5\73\uffff\1\6\73\uffff\1\7\73\uffff\1\10\73\uffff\1\11"+
        "\73\uffff\1\12\73\uffff\1\13\73\uffff\1\14\73\uffff\1\15\73\uffff"+
        "\1\16\73\uffff\1\17\73\uffff\1\20\73\uffff\1\21\1\22\1\23\107\uffff"+
        "\1\24\1\25\117\uffff\1\26\1\27\75\uffff\1\30\1\31\115\uffff\1\32"+
        "\1\33\106\uffff\1\34\1\35\75\uffff\1\36\1\37\106\uffff\1\40\1\41"+
        "\117\uffff\1\42\1\43\75\uffff\1\44\1\45\104\uffff\1\46\1\47\107"+
        "\uffff\1\50\1\51\113\uffff\1\52\1\53\75\uffff\1\54\1\55\104\uffff"+
        "\1\56\1\57\u008a\uffff\1\60\5\uffff\1\61\55\uffff\1\62\31\uffff"+
        "\1\63\5\uffff\1\64\55\uffff\1\65\115\uffff\1\66\31\uffff\1\67\5"+
        "\uffff\1\70\31\uffff\1\71\55\uffff\1\72\31\uffff\1\73\5\uffff\1"+
        "\74\55\uffff\1\75\5\uffff\1\76\55\uffff\1\77\5\uffff\1\100\31\uffff"+
        "\1\101\31\uffff\1\102\31\uffff\1\103\115\uffff\1\104\30\uffff\1"+
        "\105\141\uffff\1\106\30\uffff\1\107\5\uffff}>";
    static final String[] DFA196_transitionS = {
            "\1\64\4\uffff\1\16\3\uffff\1\16\1\uffff\1\16\1\uffff\1\24\1"+
            "\25\2\16\1\30\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16"+
            "\12\uffff\1\16\1\35\1\36\11\uffff\6\16\1\51\1\52\1\77\1\100"+
            "\1\53\1\101\2\16\1\56\1\57\1\60\1\102\1\uffff\6\16\22\uffff"+
            "\3\2\5\uffff\3\16\2\uffff\1\16\1\uffff\2\16\1\uffff\1\104\u0099"+
            "\uffff\1\2\15\uffff\1\16\1\103\1\uffff\1\15\11\uffff\1\2\1\14"+
            "\1\uffff\2\2\11\uffff\1\1\2\uffff\1\2\5\uffff\1\16\2\2",
            "\1\111\4\uffff\1\111\3\uffff\1\111\3\uffff\11\111\10\uffff"+
            "\1\111\1\uffff\4\111\12\uffff\3\111\11\uffff\10\111\2\uffff"+
            "\1\111\1\uffff\5\111\2\uffff\1\111\1\uffff\4\111\32\uffff\3"+
            "\111\2\uffff\1\111\1\uffff\2\111\u009b\uffff\1\2\15\uffff\1"+
            "\111\35\uffff\1\2\5\uffff\1\111\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\171\4\uffff\1\171\2\uffff\2\171\1\uffff\1\171\1\uffff\11"+
            "\171\1\170\1\171\6\uffff\1\171\1\uffff\4\171\12\uffff\3\171"+
            "\11\uffff\22\171\1\uffff\6\171\22\uffff\3\171\5\uffff\3\171"+
            "\2\uffff\1\171\1\uffff\2\171\1\uffff\1\171\u0099\uffff\1\171"+
            "\15\uffff\2\171\1\uffff\1\171\11\uffff\2\171\1\uffff\2\171\11"+
            "\uffff\1\171\2\uffff\1\171\5\uffff\3\171",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u00bf\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u00fb\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u0137\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u0173\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u01af\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u01eb\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u0227\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u0263\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u029f\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u02db\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u0317\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u0353\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u038f\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u03cb\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u0407\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00af"+
            "\uffff\1\16\1\u0443\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u047f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04b6\4\uffff\1\u0494\2\uffff\1\u04c7\1\u0495\1\uffff\1"+
            "\u04bf\1\uffff\1\u0496\1\u0497\1\u0498\1\u0499\1\u049a\1\u049b"+
            "\1\u049c\1\u049d\1\u0493\1\uffff\1\u0484\6\uffff\1\u04b9\1\uffff"+
            "\1\u04bb\1\u04b7\1\u04b8\1\u04ba\5\uffff\1\u0483\1\u0482\3\uffff"+
            "\1\u049e\1\u049f\1\u04a0\11\uffff\1\u04a4\1\u04a5\1\u04a6\1"+
            "\u04a8\1\u04a9\1\u04aa\1\u04ab\1\u04ac\1\u04c1\1\u04c2\1\u04ad"+
            "\1\u04c3\1\u04ae\1\u04af\1\u04b0\1\u04b1\1\u04b2\1\u04c4\1\uffff"+
            "\1\u04b3\1\u04c0\1\u04b4\1\u04a7\1\u0492\1\u04b5\22\uffff\1"+
            "\u048b\1\u048c\1\u048d\5\uffff\1\u04bc\1\u04bd\1\u04be\2\uffff"+
            "\1\u04a1\1\uffff\1\u04a2\1\u04a3\1\uffff\1\u04c6\u0099\uffff"+
            "\1\u048a\15\uffff\1\u0490\1\u04c5\1\uffff\1\u048f\7\uffff\1"+
            "\u04c8\1\uffff\1\u0486\1\u048e\1\uffff\1\u0480\1\u0481\11\uffff"+
            "\1\u0485\2\uffff\1\u0487\5\uffff\1\u0491\1\u0488\1\u0489",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04ff\4\uffff\1\u04dd\2\uffff\1\u0510\1\u04de\1\uffff\1"+
            "\u0508\1\uffff\1\u04df\1\u04e0\1\u04e1\1\u04e2\1\u04e3\1\u04e4"+
            "\1\u04e5\1\u04e6\1\u04dc\1\uffff\1\u04cd\6\uffff\1\u0502\1\uffff"+
            "\1\u0504\1\u0500\1\u0501\1\u0503\5\uffff\1\u04cc\1\u04cb\3\uffff"+
            "\1\u04e7\1\u04e8\1\u04e9\11\uffff\1\u04ed\1\u04ee\1\u04ef\1"+
            "\u04f1\1\u04f2\1\u04f3\1\u04f4\1\u04f5\1\u050a\1\u050b\1\u04f6"+
            "\1\u050c\1\u04f7\1\u04f8\1\u04f9\1\u04fa\1\u04fb\1\u050d\1\uffff"+
            "\1\u04fc\1\u0509\1\u04fd\1\u04f0\1\u04db\1\u04fe\22\uffff\1"+
            "\u04d4\1\u04d5\1\u04d6\5\uffff\1\u0505\1\u0506\1\u0507\2\uffff"+
            "\1\u04ea\1\uffff\1\u04eb\1\u04ec\1\uffff\1\u050f\u0099\uffff"+
            "\1\u04d3\15\uffff\1\u04d9\1\u050e\1\uffff\1\u04d8\11\uffff\1"+
            "\u04cf\1\u04d7\1\uffff\1\u04c9\1\u04ca\11\uffff\1\u04ce\2\uffff"+
            "\1\u04d0\5\uffff\1\u04da\1\u04d1\1\u04d2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0547\4\uffff\1\u0525\2\uffff\1\u0558\1\u0526\1\uffff\1"+
            "\u0550\1\uffff\1\u0527\1\u0528\1\u0529\1\u052a\1\u052b\1\u052c"+
            "\1\u052d\1\u052e\1\u0524\1\uffff\1\u0513\6\uffff\1\u054a\1\uffff"+
            "\1\u054c\1\u0548\1\u0549\1\u054b\5\uffff\1\u0512\1\u0511\3\uffff"+
            "\1\u052f\1\u0530\1\u0531\11\uffff\1\u0535\1\u0536\1\u0537\1"+
            "\u0539\1\u053a\1\u053b\1\u053c\1\u053d\1\u0552\1\u0553\1\u053e"+
            "\1\u0554\1\u053f\1\u0540\1\u0541\1\u0542\1\u0543\1\u0555\1\uffff"+
            "\1\u0544\1\u0551\1\u0545\1\u0538\1\u0523\1\u0546\22\uffff\1"+
            "\u051c\1\u051d\1\u051e\5\uffff\1\u054d\1\u054e\1\u054f\2\uffff"+
            "\1\u0532\1\uffff\1\u0533\1\u0534\1\uffff\1\u0557\u0099\uffff"+
            "\1\u0519\15\uffff\1\u0521\1\u0556\1\uffff\1\u0520\11\uffff\1"+
            "\u0515\1\u051f\1\uffff\1\u051a\1\u051b\11\uffff\1\u0514\2\uffff"+
            "\1\u0516\5\uffff\1\u0522\1\u0517\1\u0518",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u058d\4\uffff\1\u056b\2\uffff\1\u059e\1\u056c\1\uffff\1"+
            "\u0596\1\uffff\1\u056d\1\u056e\1\u056f\1\u0570\1\u0571\1\u0572"+
            "\1\u0573\1\u0574\1\u056a\1\uffff\1\u055b\6\uffff\1\u0590\1\uffff"+
            "\1\u0592\1\u058e\1\u058f\1\u0591\12\uffff\1\u0575\1\u0576\1"+
            "\u0577\11\uffff\1\u057b\1\u057c\1\u057d\1\u057f\1\u0580\1\u0581"+
            "\1\u0582\1\u0583\1\u0598\1\u0599\1\u0584\1\u059a\1\u0585\1\u0586"+
            "\1\u0587\1\u0588\1\u0589\1\u059b\1\uffff\1\u058a\1\u0597\1\u058b"+
            "\1\u057e\1\u0569\1\u058c\22\uffff\1\u0562\1\u0563\1\u0564\5"+
            "\uffff\1\u0593\1\u0594\1\u0595\2\uffff\1\u0578\1\uffff\1\u0579"+
            "\1\u057a\1\uffff\1\u059d\u0099\uffff\1\u0561\15\uffff\1\u0567"+
            "\1\u059c\1\uffff\1\u0566\11\uffff\1\u055d\1\u0565\1\uffff\1"+
            "\u0559\1\u055a\11\uffff\1\u055c\2\uffff\1\u055e\5\uffff\1\u0568"+
            "\1\u055f\1\u0560",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05d5\4\uffff\1\u05b3\2\uffff\1\u05e6\1\u05b4\1\uffff\1"+
            "\u05de\1\uffff\1\u05b5\1\u05b6\1\u05b7\1\u05b8\1\u05b9\1\u05ba"+
            "\1\u05bb\1\u05bc\1\u05b2\1\uffff\1\u05a1\6\uffff\1\u05d8\1\uffff"+
            "\1\u05da\1\u05d6\1\u05d7\1\u05d9\5\uffff\1\u05a0\1\u059f\3\uffff"+
            "\1\u05bd\1\u05be\1\u05bf\11\uffff\1\u05c3\1\u05c4\1\u05c5\1"+
            "\u05c7\1\u05c8\1\u05c9\1\u05ca\1\u05cb\1\u05e0\1\u05e1\1\u05cc"+
            "\1\u05e2\1\u05cd\1\u05ce\1\u05cf\1\u05d0\1\u05d1\1\u05e3\1\uffff"+
            "\1\u05d2\1\u05df\1\u05d3\1\u05c6\1\u05b1\1\u05d4\22\uffff\1"+
            "\u05aa\1\u05ab\1\u05ac\5\uffff\1\u05db\1\u05dc\1\u05dd\2\uffff"+
            "\1\u05c0\1\uffff\1\u05c1\1\u05c2\1\uffff\1\u05e5\u0099\uffff"+
            "\1\u05a7\15\uffff\1\u05af\1\u05e4\1\uffff\1\u05ae\11\uffff\1"+
            "\u05a3\1\u05ad\1\uffff\1\u05a8\1\u05a9\11\uffff\1\u05a2\2\uffff"+
            "\1\u05a4\5\uffff\1\u05b0\1\u05a5\1\u05a6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u061d\4\uffff\1\u05fb\2\uffff\1\u062e\1\u05fc\1\uffff\1"+
            "\u0626\1\uffff\1\u05fd\1\u05fe\1\u05ff\1\u0600\1\u0601\1\u0602"+
            "\1\u0603\1\u0604\1\u05fa\1\uffff\1\u05e9\6\uffff\1\u0620\1\uffff"+
            "\1\u0622\1\u061e\1\u061f\1\u0621\5\uffff\1\u05e8\1\u05e7\3\uffff"+
            "\1\u0605\1\u0606\1\u0607\11\uffff\1\u060b\1\u060c\1\u060d\1"+
            "\u060f\1\u0610\1\u0611\1\u0612\1\u0613\1\u0628\1\u0629\1\u0614"+
            "\1\u062a\1\u0615\1\u0616\1\u0617\1\u0618\1\u0619\1\u062b\1\uffff"+
            "\1\u061a\1\u0627\1\u061b\1\u060e\1\u05f9\1\u061c\22\uffff\1"+
            "\u05f2\1\u05f3\1\u05f4\5\uffff\1\u0623\1\u0624\1\u0625\2\uffff"+
            "\1\u0608\1\uffff\1\u0609\1\u060a\1\uffff\1\u062d\u0099\uffff"+
            "\1\u05ef\15\uffff\1\u05f7\1\u062c\1\uffff\1\u05f6\11\uffff\1"+
            "\u05eb\1\u05f5\1\uffff\1\u05f0\1\u05f1\11\uffff\1\u05ea\2\uffff"+
            "\1\u05ec\5\uffff\1\u05f8\1\u05ed\1\u05ee",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0665\4\uffff\1\u0643\2\uffff\1\u0676\1\u0644\1\uffff\1"+
            "\u066e\1\uffff\1\u0645\1\u0646\1\u0647\1\u0648\1\u0649\1\u064a"+
            "\1\u064b\1\u064c\1\u0642\1\uffff\1\u0633\6\uffff\1\u0668\1\uffff"+
            "\1\u066a\1\u0666\1\u0667\1\u0669\5\uffff\1\u0632\1\u0631\3\uffff"+
            "\1\u064d\1\u064e\1\u064f\11\uffff\1\u0653\1\u0654\1\u0655\1"+
            "\u0657\1\u0658\1\u0659\1\u065a\1\u065b\1\u0670\1\u0671\1\u065c"+
            "\1\u0672\1\u065d\1\u065e\1\u065f\1\u0660\1\u0661\1\u0673\1\uffff"+
            "\1\u0662\1\u066f\1\u0663\1\u0656\1\u0641\1\u0664\22\uffff\1"+
            "\u063a\1\u063b\1\u063c\5\uffff\1\u066b\1\u066c\1\u066d\2\uffff"+
            "\1\u0650\1\uffff\1\u0651\1\u0652\1\uffff\1\u0675\u0099\uffff"+
            "\1\u0639\15\uffff\1\u063f\1\u0674\1\uffff\1\u063e\11\uffff\1"+
            "\u0635\1\u063d\1\uffff\1\u062f\1\u0630\11\uffff\1\u0634\2\uffff"+
            "\1\u0636\5\uffff\1\u0640\1\u0637\1\u0638",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06ac\4\uffff\1\u068a\2\uffff\1\u06bd\1\u068b\1\uffff\1"+
            "\u06b5\1\uffff\1\u068c\1\u068d\1\u068e\1\u068f\1\u0690\1\u0691"+
            "\1\u0692\1\u0693\1\u0689\1\uffff\1\u067b\6\uffff\1\u06af\1\uffff"+
            "\1\u06b1\1\u06ad\1\u06ae\1\u06b0\12\uffff\1\u0694\1\u0695\1"+
            "\u0696\11\uffff\1\u069a\1\u069b\1\u069c\1\u069e\1\u069f\1\u06a0"+
            "\1\u06a1\1\u06a2\1\u06b7\1\u06b8\1\u06a3\1\u06b9\1\u06a4\1\u06a5"+
            "\1\u06a6\1\u06a7\1\u06a8\1\u06ba\1\uffff\1\u06a9\1\u06b6\1\u06aa"+
            "\1\u069d\1\u0688\1\u06ab\22\uffff\1\u0682\1\u0683\1\u0684\5"+
            "\uffff\1\u06b2\1\u06b3\1\u06b4\2\uffff\1\u0697\1\uffff\1\u0698"+
            "\1\u0699\1\uffff\1\u06bc\u0099\uffff\1\u0681\15\uffff\1\u067a"+
            "\1\u06bb\1\uffff\1\u0686\1\u06be\6\uffff\1\u0679\1\uffff\1\u067d"+
            "\1\u0685\1\uffff\1\u0677\1\u0678\11\uffff\1\u067c\2\uffff\1"+
            "\u067e\5\uffff\1\u0687\1\u067f\1\u0680",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06f4\4\uffff\1\u06d2\2\uffff\1\u0705\1\u06d3\1\uffff\1"+
            "\u06fd\1\uffff\1\u06d4\1\u06d5\1\u06d6\1\u06d7\1\u06d8\1\u06d9"+
            "\1\u06da\1\u06db\1\u06d1\1\uffff\1\u06c1\6\uffff\1\u06f7\1\uffff"+
            "\1\u06f9\1\u06f5\1\u06f6\1\u06f8\12\uffff\1\u06dc\1\u06dd\1"+
            "\u06de\11\uffff\1\u06e2\1\u06e3\1\u06e4\1\u06e6\1\u06e7\1\u06e8"+
            "\1\u06e9\1\u06ea\1\u06ff\1\u0700\1\u06eb\1\u0701\1\u06ec\1\u06ed"+
            "\1\u06ee\1\u06ef\1\u06f0\1\u0702\1\uffff\1\u06f1\1\u06fe\1\u06f2"+
            "\1\u06e5\1\u06d0\1\u06f3\22\uffff\1\u06ca\1\u06cb\1\u06cc\5"+
            "\uffff\1\u06fa\1\u06fb\1\u06fc\2\uffff\1\u06df\1\uffff\1\u06e0"+
            "\1\u06e1\1\uffff\1\u0704\u0099\uffff\1\u06c7\15\uffff\1\u06c0"+
            "\1\u0703\1\uffff\1\u06ce\1\u0706\6\uffff\1\u06bf\1\uffff\1\u06c3"+
            "\1\u06cd\1\uffff\1\u06c8\1\u06c9\11\uffff\1\u06c2\2\uffff\1"+
            "\u06c4\5\uffff\1\u06cf\1\u06c5\1\u06c6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u073b\4\uffff\1\u0719\2\uffff\1\u074c\1\u071a\1\uffff\1"+
            "\u0744\1\uffff\1\u071b\1\u071c\1\u071d\1\u071e\1\u071f\1\u0720"+
            "\1\u0721\1\u0722\1\u0718\1\uffff\1\u0709\6\uffff\1\u073e\1\uffff"+
            "\1\u0740\1\u073c\1\u073d\1\u073f\12\uffff\1\u0723\1\u0724\1"+
            "\u0725\11\uffff\1\u0729\1\u072a\1\u072b\1\u072d\1\u072e\1\u072f"+
            "\1\u0730\1\u0731\1\u0746\1\u0747\1\u0732\1\u0748\1\u0733\1\u0734"+
            "\1\u0735\1\u0736\1\u0737\1\u0749\1\uffff\1\u0738\1\u0745\1\u0739"+
            "\1\u072c\1\u0717\1\u073a\22\uffff\1\u0710\1\u0711\1\u0712\5"+
            "\uffff\1\u0741\1\u0742\1\u0743\2\uffff\1\u0726\1\uffff\1\u0727"+
            "\1\u0728\1\uffff\1\u074b\u0099\uffff\1\u070f\15\uffff\1\u0715"+
            "\1\u074a\1\uffff\1\u0714\11\uffff\1\u070b\1\u0713\1\uffff\1"+
            "\u0707\1\u0708\11\uffff\1\u070a\2\uffff\1\u070c\5\uffff\1\u0716"+
            "\1\u070d\1\u070e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0781\4\uffff\1\u075f\2\uffff\1\u0792\1\u0760\1\uffff\1"+
            "\u078a\1\uffff\1\u0761\1\u0762\1\u0763\1\u0764\1\u0765\1\u0766"+
            "\1\u0767\1\u0768\1\u075e\1\uffff\1\u074f\6\uffff\1\u0784\1\uffff"+
            "\1\u0786\1\u0782\1\u0783\1\u0785\12\uffff\1\u0769\1\u076a\1"+
            "\u076b\11\uffff\1\u076f\1\u0770\1\u0771\1\u0773\1\u0774\1\u0775"+
            "\1\u0776\1\u0777\1\u078c\1\u078d\1\u0778\1\u078e\1\u0779\1\u077a"+
            "\1\u077b\1\u077c\1\u077d\1\u078f\1\uffff\1\u077e\1\u078b\1\u077f"+
            "\1\u0772\1\u075d\1\u0780\22\uffff\1\u0756\1\u0757\1\u0758\5"+
            "\uffff\1\u0787\1\u0788\1\u0789\2\uffff\1\u076c\1\uffff\1\u076d"+
            "\1\u076e\1\uffff\1\u0791\u0099\uffff\1\u0755\15\uffff\1\u075b"+
            "\1\u0790\1\uffff\1\u075a\11\uffff\1\u0751\1\u0759\1\uffff\1"+
            "\u074d\1\u074e\11\uffff\1\u0750\2\uffff\1\u0752\5\uffff\1\u075c"+
            "\1\u0753\1\u0754",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\14\uffff\1\u0793",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07ca\4\uffff\1\u07a8\2\uffff\1\u07db\1\u07a9\1\uffff\1"+
            "\u07d3\1\uffff\1\u07aa\1\u07ab\1\u07ac\1\u07ad\1\u07ae\1\u07af"+
            "\1\u07b0\1\u07b1\1\u07a7\1\uffff\1\u0798\6\uffff\1\u07cd\1\uffff"+
            "\1\u07cf\1\u07cb\1\u07cc\1\u07ce\12\uffff\1\u07b2\1\u07b3\1"+
            "\u07b4\11\uffff\1\u07b8\1\u07b9\1\u07ba\1\u07bc\1\u07bd\1\u07be"+
            "\1\u07bf\1\u07c0\1\u07d5\1\u07d6\1\u07c1\1\u07d7\1\u07c2\1\u07c3"+
            "\1\u07c4\1\u07c5\1\u07c6\1\u07d8\1\uffff\1\u07c7\1\u07d4\1\u07c8"+
            "\1\u07bb\1\u07a6\1\u07c9\22\uffff\1\u079f\1\u07a0\1\u07a1\5"+
            "\uffff\1\u07d0\1\u07d1\1\u07d2\2\uffff\1\u07b5\1\uffff\1\u07b6"+
            "\1\u07b7\1\uffff\1\u07da\u0099\uffff\1\u079e\15\uffff\1\u07a4"+
            "\1\u07d9\1\uffff\1\u07a3\11\uffff\1\u079a\1\u07a2\1\uffff\1"+
            "\u0796\1\u0797\11\uffff\1\u0799\2\uffff\1\u079b\5\uffff\1\u07a5"+
            "\1\u079c\1\u079d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0810\4\uffff\1\u07ee\2\uffff\1\u0821\1\u07ef\1\uffff\1"+
            "\u0819\1\uffff\1\u07f0\1\u07f1\1\u07f2\1\u07f3\1\u07f4\1\u07f5"+
            "\1\u07f6\1\u07f7\1\u07ed\1\uffff\1\u07dc\6\uffff\1\u0813\1\uffff"+
            "\1\u0815\1\u0811\1\u0812\1\u0814\12\uffff\1\u07f8\1\u07f9\1"+
            "\u07fa\11\uffff\1\u07fe\1\u07ff\1\u0800\1\u0802\1\u0803\1\u0804"+
            "\1\u0805\1\u0806\1\u081b\1\u081c\1\u0807\1\u081d\1\u0808\1\u0809"+
            "\1\u080a\1\u080b\1\u080c\1\u081e\1\uffff\1\u080d\1\u081a\1\u080e"+
            "\1\u0801\1\u07ec\1\u080f\22\uffff\1\u07e5\1\u07e6\1\u07e7\5"+
            "\uffff\1\u0816\1\u0817\1\u0818\2\uffff\1\u07fb\1\uffff\1\u07fc"+
            "\1\u07fd\1\uffff\1\u0820\u0099\uffff\1\u07e2\15\uffff\1\u07ea"+
            "\1\u081f\1\uffff\1\u07e9\11\uffff\1\u07de\1\u07e8\1\uffff\1"+
            "\u07e3\1\u07e4\11\uffff\1\u07dd\2\uffff\1\u07df\5\uffff\1\u07eb"+
            "\1\u07e0\1\u07e1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0856\4\uffff\1\u0834\2\uffff\1\u0867\1\u0835\1\uffff\1"+
            "\u085f\1\uffff\1\u0836\1\u0837\1\u0838\1\u0839\1\u083a\1\u083b"+
            "\1\u083c\1\u083d\1\u0833\1\uffff\1\u0824\6\uffff\1\u0859\1\uffff"+
            "\1\u085b\1\u0857\1\u0858\1\u085a\12\uffff\1\u083e\1\u083f\1"+
            "\u0840\11\uffff\1\u0844\1\u0845\1\u0846\1\u0848\1\u0849\1\u084a"+
            "\1\u084b\1\u084c\1\u0861\1\u0862\1\u084d\1\u0863\1\u084e\1\u084f"+
            "\1\u0850\1\u0851\1\u0852\1\u0864\1\uffff\1\u0853\1\u0860\1\u0854"+
            "\1\u0847\1\u0832\1\u0855\22\uffff\1\u082b\1\u082c\1\u082d\5"+
            "\uffff\1\u085c\1\u085d\1\u085e\2\uffff\1\u0841\1\uffff\1\u0842"+
            "\1\u0843\1\uffff\1\u0866\u0099\uffff\1\u082a\15\uffff\1\u0830"+
            "\1\u0865\1\uffff\1\u082f\11\uffff\1\u0826\1\u082e\1\uffff\1"+
            "\u0822\1\u0823\11\uffff\1\u0825\2\uffff\1\u0827\5\uffff\1\u0831"+
            "\1\u0828\1\u0829",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u089d\4\uffff\1\u087b\2\uffff\1\u08ae\1\u087c\1\uffff\1"+
            "\u08a6\1\uffff\1\u087d\1\u087e\1\u087f\1\u0880\1\u0881\1\u0882"+
            "\1\u0883\1\u0884\1\u087a\1\uffff\1\u086c\6\uffff\1\u08a0\1\uffff"+
            "\1\u08a2\1\u089e\1\u089f\1\u08a1\12\uffff\1\u0885\1\u0886\1"+
            "\u0887\11\uffff\1\u088b\1\u088c\1\u088d\1\u088f\1\u0890\1\u0891"+
            "\1\u0892\1\u0893\1\u08a8\1\u08a9\1\u0894\1\u08aa\1\u0895\1\u0896"+
            "\1\u0897\1\u0898\1\u0899\1\u08ab\1\uffff\1\u089a\1\u08a7\1\u089b"+
            "\1\u088e\1\u0879\1\u089c\22\uffff\1\u0873\1\u0874\1\u0875\5"+
            "\uffff\1\u08a3\1\u08a4\1\u08a5\2\uffff\1\u0888\1\uffff\1\u0889"+
            "\1\u088a\1\uffff\1\u08ad\u0099\uffff\1\u0872\15\uffff\1\u086b"+
            "\1\u08ac\1\uffff\1\u0877\1\u08af\6\uffff\1\u086a\1\uffff\1\u086e"+
            "\1\u0876\1\uffff\1\u0868\1\u0869\11\uffff\1\u086d\2\uffff\1"+
            "\u086f\5\uffff\1\u0878\1\u0870\1\u0871",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08d7\4\uffff\1\u08b5\3\uffff\1\u08b6\3\uffff\1\u08b7\1"+
            "\u08b8\1\u08b9\1\u08ba\1\u08bb\1\u08bc\1\u08bd\1\u08be\1\u08b4"+
            "\1\u08b0\7\uffff\1\u08da\1\uffff\1\u08dc\1\u08d8\1\u08d9\1\u08db"+
            "\12\uffff\1\u08bf\1\u08c0\1\u08c1\11\uffff\1\u08c5\1\u08c6\1"+
            "\u08c7\1\u08c9\1\u08ca\1\u08cb\1\u08cc\1\u08cd\2\uffff\1\u08ce"+
            "\1\uffff\1\u08cf\1\u08d0\1\u08d1\1\u08d2\1\u08d3\2\uffff\1\u08d4"+
            "\1\uffff\1\u08d5\1\u08c8\1\u08b3\1\u08d6\32\uffff\1\u08dd\1"+
            "\u08de\1\u08df\2\uffff\1\u08c2\1\uffff\1\u08c3\1\u08c4\u00a9"+
            "\uffff\1\u08b1\43\uffff\1\u08b2",
            "\1\u08f6\1\u08f7\1\u08f8\1\u08f9\1\uffff\1\u08f2\1\u08f1\1"+
            "\u08f5\34\uffff\1\u08eb\u00fd\uffff\1\u08f4\1\uffff\1\u08f3"+
            "\1\u08ea\3\uffff\1\u08e0\1\u08ef\1\u08e3\4\uffff\1\u08ee\1\u08f0"+
            "\1\u08ec\1\u08ed\1\u08e6\1\u08e7\1\u08e8\1\u08e9\1\u08e5\1\u08e4"+
            "\1\u08e1\1\u08e2",
            "\1\u0910\1\u0911\1\u0912\1\u0913\1\uffff\1\u090d\1\u090c\1"+
            "\u090f\34\uffff\1\u0906\u00fd\uffff\1\u08fa\1\uffff\1\u090e"+
            "\1\u0905\3\uffff\1\u08fb\1\u090a\1\u08fe\4\uffff\1\u0909\1\u090b"+
            "\1\u0907\1\u0908\1\u0901\1\u0902\1\u0903\1\u0904\1\u0900\1\u08ff"+
            "\1\u08fc\1\u08fd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u092a\1\u092b\1\u092c\1\u092d\1\uffff\1\u0926\1\u0925\1"+
            "\u0929\34\uffff\1\u091f\u00fd\uffff\1\u0928\1\uffff\1\u0927"+
            "\1\u091e\3\uffff\1\u0914\1\u0923\1\u0917\4\uffff\1\u0922\1\u0924"+
            "\1\u0920\1\u0921\1\u091a\1\u091b\1\u091c\1\u091d\1\u0919\1\u0918"+
            "\1\u0915\1\u0916",
            "\1\u0944\1\u0945\1\u0946\1\u0947\1\uffff\1\u0940\1\u093f\1"+
            "\u0943\34\uffff\1\u0939\u00fd\uffff\1\u0942\1\uffff\1\u0941"+
            "\1\u0938\3\uffff\1\u092e\1\u093d\1\u0931\4\uffff\1\u093c\1\u093e"+
            "\1\u093a\1\u093b\1\u0934\1\u0935\1\u0936\1\u0937\1\u0933\1\u0932"+
            "\1\u092f\1\u0930",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u095e\1\u095f\1\u0960\1\u0961\1\uffff\1\u095b\1\u095a\1"+
            "\u095d\34\uffff\1\u0954\u00fd\uffff\1\u0948\1\uffff\1\u095c"+
            "\1\u0953\3\uffff\1\u0949\1\u0958\1\u094c\4\uffff\1\u0957\1\u0959"+
            "\1\u0955\1\u0956\1\u094f\1\u0950\1\u0951\1\u0952\1\u094e\1\u094d"+
            "\1\u094a\1\u094b",
            "\1\u0978\1\u0979\1\u097a\1\u097b\1\uffff\1\u0974\1\u0973\1"+
            "\u0977\34\uffff\1\u096d\u00fd\uffff\1\u0976\1\uffff\1\u0975"+
            "\1\u096c\3\uffff\1\u0962\1\u0971\1\u0965\4\uffff\1\u0970\1\u0972"+
            "\1\u096e\1\u096f\1\u0968\1\u0969\1\u096a\1\u096b\1\u0967\1\u0966"+
            "\1\u0963\1\u0964",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0992\1\u0993\1\u0994\1\u0995\1\uffff\1\u098f\1\u098e\1"+
            "\u0991\34\uffff\1\u0988\u00fd\uffff\1\16\1\uffff\1\u0990\1\u0987"+
            "\3\uffff\1\u097d\1\u098c\1\u0980\4\uffff\1\u098b\1\u098d\1\u0989"+
            "\1\u098a\1\u0983\1\u0984\1\u0985\1\u0986\1\u0982\1\u0981\1\u097e"+
            "\1\u097f",
            "\1\u09ac\1\u09ad\1\u09ae\1\u09af\1\uffff\1\u09a9\1\u09a8\1"+
            "\u09ab\34\uffff\1\u09a2\u00fd\uffff\1\16\1\uffff\1\u09aa\1\u09a1"+
            "\3\uffff\1\u0997\1\u09a6\1\u099a\4\uffff\1\u09a5\1\u09a7\1\u09a3"+
            "\1\u09a4\1\u099d\1\u099e\1\u099f\1\u09a0\1\u099c\1\u099b\1\u0998"+
            "\1\u0999",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09c6\1\u09c7\1\u09c8\1\u09c9\1\uffff\1\u09c2\1\u09c1\1"+
            "\u09c5\34\uffff\1\u09bb\u00fd\uffff\1\u09c4\1\uffff\1\u09c3"+
            "\1\u09ba\3\uffff\1\u09b0\1\u09bf\1\u09b3\4\uffff\1\u09be\1\u09c0"+
            "\1\u09bc\1\u09bd\1\u09b6\1\u09b7\1\u09b8\1\u09b9\1\u09b5\1\u09b4"+
            "\1\u09b1\1\u09b2",
            "\1\u09e0\1\u09e1\1\u09e2\1\u09e3\1\uffff\1\u09dc\1\u09db\1"+
            "\u09df\34\uffff\1\u09d5\u00fd\uffff\1\u09de\1\uffff\1\u09dd"+
            "\1\u09d4\3\uffff\1\u09ca\1\u09d9\1\u09cd\4\uffff\1\u09d8\1\u09da"+
            "\1\u09d6\1\u09d7\1\u09d0\1\u09d1\1\u09d2\1\u09d3\1\u09cf\1\u09ce"+
            "\1\u09cb\1\u09cc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09fa\1\u09fb\1\u09fc\1\u09fd\1\uffff\1\u09f7\1\u09f6\1"+
            "\u09f9\34\uffff\1\u09f0\u00fd\uffff\1\u09e4\1\uffff\1\u09f8"+
            "\1\u09ef\3\uffff\1\u09e5\1\u09f4\1\u09e8\4\uffff\1\u09f3\1\u09f5"+
            "\1\u09f1\1\u09f2\1\u09eb\1\u09ec\1\u09ed\1\u09ee\1\u09ea\1\u09e9"+
            "\1\u09e6\1\u09e7",
            "\1\u0a14\1\u0a15\1\u0a16\1\u0a17\1\uffff\1\u0a11\1\u0a10\1"+
            "\u0a13\34\uffff\1\u0a0a\u00fd\uffff\1\u09fe\1\uffff\1\u0a12"+
            "\1\u0a09\3\uffff\1\u09ff\1\u0a0e\1\u0a02\4\uffff\1\u0a0d\1\u0a0f"+
            "\1\u0a0b\1\u0a0c\1\u0a05\1\u0a06\1\u0a07\1\u0a08\1\u0a04\1\u0a03"+
            "\1\u0a00\1\u0a01",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a2e\1\u0a2f\1\u0a30\1\u0a31\1\uffff\1\u0a2a\1\u0a29\1"+
            "\u0a2d\34\uffff\1\u0a23\u00fd\uffff\1\u0a2c\1\uffff\1\u0a2b"+
            "\1\u0a22\3\uffff\1\u0a18\1\u0a27\1\u0a1b\4\uffff\1\u0a26\1\u0a28"+
            "\1\u0a24\1\u0a25\1\u0a1e\1\u0a1f\1\u0a20\1\u0a21\1\u0a1d\1\u0a1c"+
            "\1\u0a19\1\u0a1a",
            "\1\u0a48\1\u0a49\1\u0a4a\1\u0a4b\1\uffff\1\u0a44\1\u0a43\1"+
            "\u0a47\34\uffff\1\u0a3d\u00fd\uffff\1\u0a46\1\uffff\1\u0a45"+
            "\1\u0a3c\3\uffff\1\u0a32\1\u0a41\1\u0a35\4\uffff\1\u0a40\1\u0a42"+
            "\1\u0a3e\1\u0a3f\1\u0a38\1\u0a39\1\u0a3a\1\u0a3b\1\u0a37\1\u0a36"+
            "\1\u0a33\1\u0a34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a62\1\u0a63\1\u0a64\1\u0a65\1\uffff\1\u0a5f\1\u0a5e\1"+
            "\u0a61\34\uffff\1\u0a58\u00fd\uffff\1\u0a4c\1\uffff\1\u0a60"+
            "\1\u0a57\3\uffff\1\u0a4d\1\u0a5c\1\u0a50\4\uffff\1\u0a5b\1\u0a5d"+
            "\1\u0a59\1\u0a5a\1\u0a53\1\u0a54\1\u0a55\1\u0a56\1\u0a52\1\u0a51"+
            "\1\u0a4e\1\u0a4f",
            "\1\u0a7c\1\u0a7d\1\u0a7e\1\u0a7f\1\uffff\1\u0a78\1\u0a77\1"+
            "\u0a7b\34\uffff\1\u0a71\u00fd\uffff\1\u0a7a\1\uffff\1\u0a79"+
            "\1\u0a70\3\uffff\1\u0a66\1\u0a75\1\u0a69\4\uffff\1\u0a74\1\u0a76"+
            "\1\u0a72\1\u0a73\1\u0a6c\1\u0a6d\1\u0a6e\1\u0a6f\1\u0a6b\1\u0a6a"+
            "\1\u0a67\1\u0a68",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a96\1\u0a97\1\u0a98\1\u0a99\1\uffff\1\u0a93\1\u0a92\1"+
            "\u0a95\34\uffff\1\u0a8c\u00fd\uffff\1\u0a80\1\uffff\1\u0a94"+
            "\1\u0a8b\3\uffff\1\u0a81\1\u0a90\1\u0a84\4\uffff\1\u0a8f\1\u0a91"+
            "\1\u0a8d\1\u0a8e\1\u0a87\1\u0a88\1\u0a89\1\u0a8a\1\u0a86\1\u0a85"+
            "\1\u0a82\1\u0a83",
            "\1\u0ab0\1\u0ab1\1\u0ab2\1\u0ab3\1\uffff\1\u0aac\1\u0aab\1"+
            "\u0aaf\34\uffff\1\u0aa5\u00fd\uffff\1\u0aae\1\uffff\1\u0aad"+
            "\1\u0aa4\3\uffff\1\u0a9a\1\u0aa9\1\u0a9d\4\uffff\1\u0aa8\1\u0aaa"+
            "\1\u0aa6\1\u0aa7\1\u0aa0\1\u0aa1\1\u0aa2\1\u0aa3\1\u0a9f\1\u0a9e"+
            "\1\u0a9b\1\u0a9c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0aca\1\u0acb\1\u0acc\1\u0acd\1\uffff\1\u0ac7\1\u0ac6\1"+
            "\u0ac9\34\uffff\1\u0ac0\u00fd\uffff\1\u0ab4\1\uffff\1\u0ac8"+
            "\1\u0abf\3\uffff\1\u0ab5\1\u0ac4\1\u0ab8\4\uffff\1\u0ac3\1\u0ac5"+
            "\1\u0ac1\1\u0ac2\1\u0abb\1\u0abc\1\u0abd\1\u0abe\1\u0aba\1\u0ab9"+
            "\1\u0ab6\1\u0ab7",
            "\1\u0ae4\1\u0ae5\1\u0ae6\1\u0ae7\1\uffff\1\u0ae1\1\u0ae0\1"+
            "\u0ae3\34\uffff\1\u0ada\u00fd\uffff\1\u0ace\1\uffff\1\u0ae2"+
            "\1\u0ad9\3\uffff\1\u0acf\1\u0ade\1\u0ad2\4\uffff\1\u0add\1\u0adf"+
            "\1\u0adb\1\u0adc\1\u0ad5\1\u0ad6\1\u0ad7\1\u0ad8\1\u0ad4\1\u0ad3"+
            "\1\u0ad0\1\u0ad1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0afe\1\u0aff\1\u0b00\1\u0b01\1\uffff\1\u0afb\1\u0afa\1"+
            "\u0afd\34\uffff\1\u0af4\u00fd\uffff\1\u0ae8\1\uffff\1\u0afc"+
            "\1\u0af3\3\uffff\1\u0ae9\1\u0af8\1\u0aec\4\uffff\1\u0af7\1\u0af9"+
            "\1\u0af5\1\u0af6\1\u0aef\1\u0af0\1\u0af1\1\u0af2\1\u0aee\1\u0aed"+
            "\1\u0aea\1\u0aeb",
            "\1\u0b18\1\u0b19\1\u0b1a\1\u0b1b\1\uffff\1\u0b15\1\u0b14\1"+
            "\u0b17\34\uffff\1\u0b0e\u00fd\uffff\1\u0b02\1\uffff\1\u0b16"+
            "\1\u0b0d\3\uffff\1\u0b03\1\u0b12\1\u0b06\4\uffff\1\u0b11\1\u0b13"+
            "\1\u0b0f\1\u0b10\1\u0b09\1\u0b0a\1\u0b0b\1\u0b0c\1\u0b08\1\u0b07"+
            "\1\u0b04\1\u0b05",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b32\1\u0b33\1\u0b34\1\u0b35\1\uffff\1\u0b2f\1\u0b2e\1"+
            "\u0b31\34\uffff\1\u0b28\u00fd\uffff\1\16\1\uffff\1\u0b30\1\u0b27"+
            "\3\uffff\1\u0b1d\1\u0b2c\1\u0b20\4\uffff\1\u0b2b\1\u0b2d\1\u0b29"+
            "\1\u0b2a\1\u0b23\1\u0b24\1\u0b25\1\u0b26\1\u0b22\1\u0b21\1\u0b1e"+
            "\1\u0b1f",
            "\1\u0b4c\1\u0b4d\1\u0b4e\1\u0b4f\1\uffff\1\u0b49\1\u0b48\1"+
            "\u0b4b\34\uffff\1\u0b42\u00fd\uffff\1\16\1\uffff\1\u0b4a\1\u0b41"+
            "\3\uffff\1\u0b37\1\u0b46\1\u0b3a\4\uffff\1\u0b45\1\u0b47\1\u0b43"+
            "\1\u0b44\1\u0b3d\1\u0b3e\1\u0b3f\1\u0b40\1\u0b3c\1\u0b3b\1\u0b38"+
            "\1\u0b39",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b65\1\u0b66\1\u0b67\1\u0b68\1\uffff\1\u0b63\1\u0b62\1"+
            "\u0b64\34\uffff\1\u0b5c\u00fd\uffff\1\u0b50\2\uffff\1\u0b5b"+
            "\3\uffff\1\u0b51\1\u0b60\1\u0b54\4\uffff\1\u0b5f\1\u0b61\1\u0b5d"+
            "\1\u0b5e\1\u0b57\1\u0b58\1\u0b59\1\u0b5a\1\u0b56\1\u0b55\1\u0b52"+
            "\1\u0b53",
            "\1\u0b7e\1\u0b7f\1\u0b80\1\u0b81\1\uffff\1\u0b7c\1\u0b7b\1"+
            "\u0b7d\34\uffff\1\u0b75\u00fd\uffff\1\u0b69\2\uffff\1\u0b74"+
            "\3\uffff\1\u0b6a\1\u0b79\1\u0b6d\4\uffff\1\u0b78\1\u0b7a\1\u0b76"+
            "\1\u0b77\1\u0b70\1\u0b71\1\u0b72\1\u0b73\1\u0b6f\1\u0b6e\1\u0b6b"+
            "\1\u0b6c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b98\1\u0b99\1\u0b9a\1\u0b9b\1\uffff\1\u0b94\1\u0b93\1"+
            "\u0b97\3\uffff\1\u0b96\30\uffff\1\u0b8d\u00fd\uffff\1\16\1\uffff"+
            "\1\u0b95\1\u0b8c\3\uffff\1\u0b82\1\u0b91\1\u0b85\4\uffff\1\u0b90"+
            "\1\u0b92\1\u0b8e\1\u0b8f\1\u0b88\1\u0b89\1\u0b8a\1\u0b8b\1\u0b87"+
            "\1\u0b86\1\u0b83\1\u0b84",
            "\1\u0bb3\1\u0bb4\1\u0bb5\1\u0bb6\1\uffff\1\u0baf\1\u0bae\1"+
            "\u0bb2\3\uffff\1\u0bb1\30\uffff\1\u0ba8\u00fd\uffff\1\16\1\uffff"+
            "\1\u0bb0\1\u0ba7\3\uffff\1\u0b9d\1\u0bac\1\u0ba0\4\uffff\1\u0bab"+
            "\1\u0bad\1\u0ba9\1\u0baa\1\u0ba3\1\u0ba4\1\u0ba5\1\u0ba6\1\u0ba2"+
            "\1\u0ba1\1\u0b9e\1\u0b9f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0bcd\1\u0bce\1\u0bcf\1\u0bd0\1\uffff\1\u0bca\1\u0bc9\1"+
            "\u0bcc\34\uffff\1\u0bc3\u00fd\uffff\1\u0bcb\2\uffff\1\u0bc2"+
            "\3\uffff\1\u0bb8\1\u0bc7\1\u0bbb\4\uffff\1\u0bc6\1\u0bc8\1\u0bc4"+
            "\1\u0bc5\1\u0bbe\1\u0bbf\1\u0bc0\1\u0bc1\1\u0bbd\1\u0bbc\1\u0bb9"+
            "\1\u0bba",
            "\1\u0be6\1\u0be7\1\u0be8\1\u0be9\1\uffff\1\u0be3\1\u0be2\1"+
            "\u0be5\34\uffff\1\u0bdc\u00fd\uffff\1\u0be4\2\uffff\1\u0bdb"+
            "\3\uffff\1\u0bd1\1\u0be0\1\u0bd4\4\uffff\1\u0bdf\1\u0be1\1\u0bdd"+
            "\1\u0bde\1\u0bd7\1\u0bd8\1\u0bd9\1\u0bda\1\u0bd6\1\u0bd5\1\u0bd2"+
            "\1\u0bd3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA196_eot = DFA.unpackEncodedString(DFA196_eotS);
    static final short[] DFA196_eof = DFA.unpackEncodedString(DFA196_eofS);
    static final char[] DFA196_min = DFA.unpackEncodedStringToUnsignedChars(DFA196_minS);
    static final char[] DFA196_max = DFA.unpackEncodedStringToUnsignedChars(DFA196_maxS);
    static final short[] DFA196_accept = DFA.unpackEncodedString(DFA196_acceptS);
    static final short[] DFA196_special = DFA.unpackEncodedString(DFA196_specialS);
    static final short[][] DFA196_transition;
    static {
        int numStates = DFA196_transitionS.length;
        DFA196_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA196_transition[i] = DFA.unpackEncodedString(DFA196_transitionS[i]);
        }
    }
    class DFA196 extends DFA {
        public DFA196(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 196;
            this.eot = DFA196_eot;
            this.eof = DFA196_eof;
            this.min = DFA196_min;
            this.max = DFA196_max;
            this.accept = DFA196_accept;
            this.special = DFA196_special;
            this.transition = DFA196_transition;
        }
        public String getDescription() {
            return "1299:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR subSelectExpression ( libFunctionNoClass )+ ) -> subSelectExpression | existsSubSelectExpression | NEWKW LCURLY newAssign ( COMMA newAssign )* RCURLY -> ^( NEWKW ( newAssign )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 196, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA196_0 = input.LA(1);
                        int index196_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_0==MINUS) ) {s = 1;}
                        else if ( ((LA196_0>=BOOLEAN_TRUE && LA196_0<=VALUE_NULL)||LA196_0==NUM_DOUBLE||LA196_0==PLUS||(LA196_0>=STRING_LITERAL && LA196_0<=QUOTED_STRING_LITERAL)||LA196_0==NUM_INT||(LA196_0>=NUM_LONG && LA196_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA196_0==QUESTION) ) {s = 12;}
                        else if ( (LA196_0==LPAREN) ) {s = 13;}
                        else if ( (LA196_0==ESCAPE||LA196_0==EVERY_EXPR||LA196_0==WHERE||(LA196_0>=MAX && LA196_0<=MIN)||LA196_0==OUTER||(LA196_0>=JOIN && LA196_0<=FULL)||LA196_0==EVENTS||(LA196_0>=UNIDIRECTIONAL && LA196_0<=METADATASQL)||(LA196_0>=WEEKDAY && LA196_0<=LW)||(LA196_0>=SNAPSHOT && LA196_0<=INDEX)||(LA196_0>=DEFINE && LA196_0<=MATCHES)||LA196_0==WHILE||(LA196_0>=MERGE && LA196_0<=MATCHED)||LA196_0==IDENT||LA196_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA196_0==COUNT) ) {s = 17;}
                        else if ( (LA196_0==SUM) ) {s = 20;}
                        else if ( (LA196_0==AVG) ) {s = 21;}
                        else if ( (LA196_0==COALESCE) ) {s = 24;}
                        else if ( (LA196_0==MEDIAN) ) {s = 25;}
                        else if ( (LA196_0==STDDEV) ) {s = 26;}
                        else if ( (LA196_0==AVEDEV) ) {s = 27;}
                        else if ( (LA196_0==FIRST) ) {s = 29;}
                        else if ( (LA196_0==LAST) ) {s = 30;}
                        else if ( (LA196_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA196_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA196_0==PRIOR) ) {s = 43;}
                        else if ( (LA196_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA196_0==TYPEOF) ) {s = 47;}
                        else if ( (LA196_0==CAST) ) {s = 48;}
                        else if ( (LA196_0==WINDOW) ) {s = 52;}
                        else if ( (LA196_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 63;}
                        else if ( (LA196_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 64;}
                        else if ( (LA196_0==EXISTS) ) {s = 65;}
                        else if ( (LA196_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 66;}
                        else if ( (LA196_0==LCURLY) ) {s = 67;}
                        else if ( (LA196_0==NEWKW) ) {s = 68;}
                        input.seek(index196_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA196_191 = input.LA(1);
                        int index196_191 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_191==STRING_LITERAL) ) {s = 1152;}
                        else if ( (LA196_191==QUOTED_STRING_LITERAL) ) {s = 1153;}
                        else if ( (LA196_191==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1154;}
                        else if ( (LA196_191==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1155;}
                        else if ( (LA196_191==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1156;}
                        else if ( (LA196_191==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA196_191==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA196_191==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA196_191==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA196_191==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA196_191==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA196_191==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA196_191==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA196_191==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA196_191==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA196_191==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA196_191==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA196_191==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA196_191==AT) && (synpred3_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA196_191==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA196_191==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA196_191==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA196_191==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA196_191==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA196_191==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA196_191==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA196_191==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA196_191==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA196_191==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA196_191==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA196_191==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA196_191==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA196_191==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA196_191==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA196_191==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA196_191==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA196_191==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA196_191==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA196_191==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA196_191==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA196_191==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA196_191==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA196_191==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA196_191==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA196_191==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA196_191==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA196_191==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA196_191==LW) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA196_191==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA196_191==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA196_191==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA196_191==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA196_191==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA196_191==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA196_191==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA196_191==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA196_191==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA196_191==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA196_191==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA196_191==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA196_191==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA196_191==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA196_191==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA196_191==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA196_191==SET) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA196_191==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA196_191==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA196_191==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA196_191==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA196_191==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA196_191==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA196_191==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA196_191==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        input.seek(index196_191);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA196_251 = input.LA(1);
                        int index196_251 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_251==STRING_LITERAL) ) {s = 1225;}
                        else if ( (LA196_251==QUOTED_STRING_LITERAL) ) {s = 1226;}
                        else if ( (LA196_251==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA196_251==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA196_251==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA196_251==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA196_251==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA196_251==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA196_251==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA196_251==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA196_251==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA196_251==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA196_251==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA196_251==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA196_251==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA196_251==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA196_251==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA196_251==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA196_251==AT) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA196_251==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA196_251==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA196_251==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA196_251==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA196_251==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA196_251==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA196_251==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA196_251==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA196_251==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA196_251==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA196_251==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA196_251==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA196_251==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA196_251==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA196_251==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA196_251==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA196_251==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA196_251==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA196_251==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA196_251==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA196_251==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA196_251==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA196_251==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA196_251==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA196_251==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA196_251==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA196_251==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA196_251==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA196_251==LW) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA196_251==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA196_251==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA196_251==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA196_251==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA196_251==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA196_251==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA196_251==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA196_251==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA196_251==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA196_251==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA196_251==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA196_251==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA196_251==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA196_251==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA196_251==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA196_251==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA196_251==SET) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA196_251==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA196_251==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA196_251==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA196_251==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA196_251==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA196_251==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA196_251==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        input.seek(index196_251);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA196_311 = input.LA(1);
                        int index196_311 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_311==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA196_311==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA196_311==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA196_311==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA196_311==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA196_311==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA196_311==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA196_311==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA196_311==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA196_311==STRING_LITERAL) ) {s = 1306;}
                        else if ( (LA196_311==QUOTED_STRING_LITERAL) ) {s = 1307;}
                        else if ( (LA196_311==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA196_311==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA196_311==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA196_311==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA196_311==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA196_311==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA196_311==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA196_311==AT) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA196_311==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA196_311==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA196_311==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA196_311==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA196_311==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA196_311==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA196_311==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA196_311==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA196_311==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA196_311==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA196_311==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA196_311==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA196_311==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA196_311==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA196_311==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA196_311==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA196_311==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA196_311==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA196_311==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA196_311==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA196_311==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA196_311==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA196_311==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA196_311==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA196_311==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA196_311==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA196_311==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA196_311==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA196_311==LW) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA196_311==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA196_311==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA196_311==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA196_311==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA196_311==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA196_311==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA196_311==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA196_311==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA196_311==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA196_311==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA196_311==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA196_311==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA196_311==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA196_311==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA196_311==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA196_311==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA196_311==SET) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA196_311==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA196_311==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA196_311==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA196_311==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA196_311==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA196_311==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA196_311==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        input.seek(index196_311);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA196_371 = input.LA(1);
                        int index196_371 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_371==STRING_LITERAL) ) {s = 1369;}
                        else if ( (LA196_371==QUOTED_STRING_LITERAL) ) {s = 1370;}
                        else if ( (LA196_371==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA196_371==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA196_371==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA196_371==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA196_371==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA196_371==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA196_371==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA196_371==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA196_371==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA196_371==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA196_371==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA196_371==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA196_371==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA196_371==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA196_371==AT) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA196_371==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA196_371==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA196_371==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA196_371==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA196_371==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA196_371==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA196_371==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA196_371==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA196_371==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA196_371==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA196_371==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA196_371==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA196_371==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA196_371==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA196_371==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA196_371==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA196_371==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA196_371==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA196_371==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA196_371==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA196_371==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA196_371==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA196_371==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA196_371==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA196_371==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA196_371==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA196_371==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA196_371==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA196_371==LW) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA196_371==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA196_371==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA196_371==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA196_371==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA196_371==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA196_371==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA196_371==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA196_371==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA196_371==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA196_371==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA196_371==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA196_371==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA196_371==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA196_371==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA196_371==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA196_371==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA196_371==SET) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA196_371==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA196_371==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA196_371==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA196_371==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA196_371==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA196_371==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA196_371==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        input.seek(index196_371);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA196_431 = input.LA(1);
                        int index196_431 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_431==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA196_431==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA196_431==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA196_431==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA196_431==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA196_431==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA196_431==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA196_431==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA196_431==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA196_431==STRING_LITERAL) ) {s = 1448;}
                        else if ( (LA196_431==QUOTED_STRING_LITERAL) ) {s = 1449;}
                        else if ( (LA196_431==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA196_431==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA196_431==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA196_431==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA196_431==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA196_431==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA196_431==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA196_431==AT) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA196_431==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA196_431==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA196_431==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA196_431==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA196_431==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA196_431==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA196_431==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA196_431==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA196_431==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA196_431==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA196_431==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA196_431==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA196_431==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA196_431==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA196_431==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA196_431==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA196_431==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA196_431==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA196_431==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA196_431==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA196_431==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA196_431==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA196_431==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA196_431==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA196_431==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA196_431==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA196_431==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA196_431==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA196_431==LW) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA196_431==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA196_431==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA196_431==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA196_431==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA196_431==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA196_431==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA196_431==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA196_431==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA196_431==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA196_431==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA196_431==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA196_431==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA196_431==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA196_431==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA196_431==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA196_431==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA196_431==SET) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA196_431==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA196_431==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA196_431==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA196_431==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA196_431==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA196_431==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA196_431==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        input.seek(index196_431);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA196_491 = input.LA(1);
                        int index196_491 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_491==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA196_491==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA196_491==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA196_491==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA196_491==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA196_491==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA196_491==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA196_491==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA196_491==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA196_491==STRING_LITERAL) ) {s = 1520;}
                        else if ( (LA196_491==QUOTED_STRING_LITERAL) ) {s = 1521;}
                        else if ( (LA196_491==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA196_491==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA196_491==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA196_491==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA196_491==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA196_491==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA196_491==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA196_491==AT) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA196_491==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA196_491==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA196_491==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA196_491==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA196_491==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA196_491==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA196_491==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA196_491==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA196_491==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA196_491==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA196_491==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA196_491==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA196_491==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA196_491==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA196_491==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA196_491==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA196_491==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA196_491==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA196_491==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA196_491==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA196_491==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA196_491==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA196_491==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA196_491==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA196_491==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA196_491==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA196_491==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA196_491==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA196_491==LW) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA196_491==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA196_491==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA196_491==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA196_491==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA196_491==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA196_491==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA196_491==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA196_491==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA196_491==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA196_491==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA196_491==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA196_491==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA196_491==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA196_491==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA196_491==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA196_491==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA196_491==SET) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA196_491==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA196_491==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA196_491==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA196_491==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA196_491==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA196_491==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA196_491==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        input.seek(index196_491);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA196_551 = input.LA(1);
                        int index196_551 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_551==STRING_LITERAL) ) {s = 1583;}
                        else if ( (LA196_551==QUOTED_STRING_LITERAL) ) {s = 1584;}
                        else if ( (LA196_551==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA196_551==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA196_551==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA196_551==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA196_551==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA196_551==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA196_551==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA196_551==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA196_551==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA196_551==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA196_551==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA196_551==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA196_551==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA196_551==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA196_551==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA196_551==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA196_551==AT) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA196_551==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA196_551==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA196_551==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA196_551==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA196_551==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA196_551==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA196_551==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA196_551==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA196_551==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA196_551==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA196_551==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA196_551==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA196_551==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA196_551==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA196_551==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA196_551==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA196_551==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA196_551==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA196_551==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA196_551==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA196_551==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA196_551==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA196_551==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA196_551==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA196_551==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA196_551==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA196_551==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA196_551==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA196_551==LW) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA196_551==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA196_551==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA196_551==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA196_551==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA196_551==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA196_551==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA196_551==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA196_551==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA196_551==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA196_551==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA196_551==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA196_551==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA196_551==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA196_551==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA196_551==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA196_551==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA196_551==SET) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA196_551==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA196_551==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA196_551==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA196_551==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA196_551==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA196_551==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA196_551==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        input.seek(index196_551);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA196_611 = input.LA(1);
                        int index196_611 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_611==STRING_LITERAL) ) {s = 1655;}
                        else if ( (LA196_611==QUOTED_STRING_LITERAL) ) {s = 1656;}
                        else if ( (LA196_611==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA196_611==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA196_611==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA196_611==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA196_611==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA196_611==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA196_611==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA196_611==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA196_611==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA196_611==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA196_611==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA196_611==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA196_611==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA196_611==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA196_611==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA196_611==AT) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA196_611==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA196_611==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA196_611==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA196_611==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA196_611==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA196_611==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA196_611==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA196_611==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA196_611==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA196_611==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA196_611==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA196_611==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA196_611==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA196_611==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA196_611==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA196_611==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA196_611==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA196_611==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA196_611==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA196_611==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA196_611==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA196_611==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA196_611==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA196_611==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA196_611==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA196_611==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA196_611==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA196_611==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA196_611==LW) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA196_611==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA196_611==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA196_611==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA196_611==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA196_611==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA196_611==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA196_611==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA196_611==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA196_611==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA196_611==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA196_611==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA196_611==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA196_611==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA196_611==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA196_611==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA196_611==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA196_611==SET) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA196_611==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA196_611==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA196_611==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA196_611==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA196_611==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA196_611==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA196_611==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA196_611==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        input.seek(index196_611);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA196_671 = input.LA(1);
                        int index196_671 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_671==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA196_671==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA196_671==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA196_671==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA196_671==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA196_671==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA196_671==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA196_671==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA196_671==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA196_671==STRING_LITERAL) ) {s = 1736;}
                        else if ( (LA196_671==QUOTED_STRING_LITERAL) ) {s = 1737;}
                        else if ( (LA196_671==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA196_671==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA196_671==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA196_671==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA196_671==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA196_671==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA196_671==AT) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA196_671==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA196_671==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA196_671==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA196_671==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA196_671==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA196_671==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA196_671==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA196_671==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA196_671==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA196_671==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA196_671==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA196_671==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA196_671==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA196_671==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA196_671==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA196_671==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA196_671==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA196_671==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA196_671==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA196_671==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA196_671==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA196_671==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA196_671==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA196_671==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA196_671==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA196_671==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA196_671==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA196_671==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA196_671==LW) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA196_671==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA196_671==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA196_671==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA196_671==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA196_671==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA196_671==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA196_671==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA196_671==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA196_671==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA196_671==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA196_671==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA196_671==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA196_671==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA196_671==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA196_671==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA196_671==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA196_671==SET) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA196_671==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA196_671==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA196_671==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA196_671==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA196_671==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA196_671==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA196_671==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA196_671==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        input.seek(index196_671);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA196_731 = input.LA(1);
                        int index196_731 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_731==STRING_LITERAL) ) {s = 1799;}
                        else if ( (LA196_731==QUOTED_STRING_LITERAL) ) {s = 1800;}
                        else if ( (LA196_731==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA196_731==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA196_731==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA196_731==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA196_731==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA196_731==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA196_731==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA196_731==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA196_731==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA196_731==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA196_731==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA196_731==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA196_731==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA196_731==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA196_731==AT) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA196_731==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA196_731==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA196_731==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA196_731==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA196_731==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA196_731==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA196_731==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA196_731==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA196_731==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA196_731==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA196_731==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA196_731==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA196_731==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA196_731==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA196_731==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA196_731==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA196_731==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA196_731==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA196_731==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA196_731==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA196_731==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA196_731==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA196_731==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA196_731==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA196_731==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA196_731==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA196_731==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA196_731==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA196_731==LW) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA196_731==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA196_731==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA196_731==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA196_731==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA196_731==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA196_731==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA196_731==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA196_731==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA196_731==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA196_731==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA196_731==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA196_731==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA196_731==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA196_731==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA196_731==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA196_731==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA196_731==SET) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA196_731==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA196_731==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA196_731==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA196_731==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA196_731==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA196_731==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA196_731==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        input.seek(index196_731);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA196_791 = input.LA(1);
                        int index196_791 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_791==STRING_LITERAL) ) {s = 1869;}
                        else if ( (LA196_791==QUOTED_STRING_LITERAL) ) {s = 1870;}
                        else if ( (LA196_791==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA196_791==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA196_791==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA196_791==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA196_791==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA196_791==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA196_791==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA196_791==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA196_791==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA196_791==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA196_791==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA196_791==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA196_791==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA196_791==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA196_791==AT) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA196_791==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA196_791==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA196_791==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA196_791==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA196_791==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA196_791==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA196_791==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA196_791==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA196_791==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA196_791==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA196_791==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA196_791==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA196_791==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA196_791==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA196_791==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA196_791==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA196_791==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA196_791==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA196_791==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA196_791==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA196_791==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA196_791==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA196_791==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA196_791==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA196_791==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA196_791==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA196_791==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA196_791==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA196_791==LW) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA196_791==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA196_791==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA196_791==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA196_791==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA196_791==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA196_791==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA196_791==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA196_791==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA196_791==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA196_791==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA196_791==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA196_791==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA196_791==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA196_791==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA196_791==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA196_791==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA196_791==SET) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA196_791==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA196_791==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA196_791==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA196_791==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA196_791==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA196_791==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA196_791==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        input.seek(index196_791);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA196_851 = input.LA(1);
                        int index196_851 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_851==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( ((LA196_851>=STRING_LITERAL && LA196_851<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index196_851);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA196_911 = input.LA(1);
                        int index196_911 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_911==STRING_LITERAL) ) {s = 1942;}
                        else if ( (LA196_911==QUOTED_STRING_LITERAL) ) {s = 1943;}
                        else if ( (LA196_911==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA196_911==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA196_911==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA196_911==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA196_911==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA196_911==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA196_911==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA196_911==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA196_911==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA196_911==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA196_911==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA196_911==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA196_911==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA196_911==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA196_911==AT) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA196_911==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA196_911==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA196_911==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA196_911==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA196_911==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA196_911==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA196_911==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA196_911==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA196_911==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA196_911==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA196_911==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA196_911==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA196_911==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA196_911==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA196_911==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA196_911==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA196_911==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA196_911==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA196_911==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA196_911==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA196_911==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA196_911==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA196_911==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA196_911==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA196_911==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA196_911==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA196_911==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA196_911==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA196_911==LW) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA196_911==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA196_911==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA196_911==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA196_911==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA196_911==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA196_911==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA196_911==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA196_911==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA196_911==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA196_911==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA196_911==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA196_911==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA196_911==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA196_911==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA196_911==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA196_911==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA196_911==SET) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA196_911==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA196_911==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA196_911==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA196_911==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA196_911==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA196_911==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA196_911==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        input.seek(index196_911);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA196_971 = input.LA(1);
                        int index196_971 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_971==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA196_971==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA196_971==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA196_971==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA196_971==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA196_971==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA196_971==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA196_971==STRING_LITERAL) ) {s = 2019;}
                        else if ( (LA196_971==QUOTED_STRING_LITERAL) ) {s = 2020;}
                        else if ( (LA196_971==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA196_971==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA196_971==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA196_971==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA196_971==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA196_971==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA196_971==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA196_971==AT) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA196_971==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA196_971==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA196_971==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA196_971==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA196_971==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA196_971==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA196_971==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA196_971==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA196_971==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA196_971==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA196_971==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA196_971==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA196_971==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA196_971==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA196_971==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA196_971==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA196_971==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA196_971==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA196_971==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA196_971==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA196_971==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA196_971==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA196_971==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA196_971==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA196_971==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA196_971==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA196_971==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA196_971==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA196_971==LW) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA196_971==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA196_971==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA196_971==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA196_971==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA196_971==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA196_971==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA196_971==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA196_971==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA196_971==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA196_971==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA196_971==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA196_971==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA196_971==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA196_971==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA196_971==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA196_971==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA196_971==SET) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA196_971==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA196_971==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA196_971==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA196_971==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA196_971==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA196_971==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA196_971==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        input.seek(index196_971);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA196_1031 = input.LA(1);
                        int index196_1031 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1031==STRING_LITERAL) ) {s = 2082;}
                        else if ( (LA196_1031==QUOTED_STRING_LITERAL) ) {s = 2083;}
                        else if ( (LA196_1031==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA196_1031==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA196_1031==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA196_1031==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA196_1031==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA196_1031==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA196_1031==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA196_1031==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA196_1031==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA196_1031==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA196_1031==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA196_1031==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA196_1031==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA196_1031==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA196_1031==AT) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA196_1031==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA196_1031==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA196_1031==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA196_1031==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA196_1031==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA196_1031==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA196_1031==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA196_1031==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA196_1031==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA196_1031==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA196_1031==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA196_1031==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA196_1031==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA196_1031==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA196_1031==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA196_1031==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA196_1031==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA196_1031==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA196_1031==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA196_1031==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA196_1031==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA196_1031==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA196_1031==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA196_1031==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA196_1031==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA196_1031==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA196_1031==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA196_1031==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA196_1031==LW) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA196_1031==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA196_1031==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA196_1031==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA196_1031==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA196_1031==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA196_1031==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA196_1031==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA196_1031==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA196_1031==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA196_1031==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA196_1031==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA196_1031==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA196_1031==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA196_1031==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA196_1031==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA196_1031==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA196_1031==SET) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA196_1031==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA196_1031==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA196_1031==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA196_1031==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA196_1031==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA196_1031==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA196_1031==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        input.seek(index196_1031);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA196_1091 = input.LA(1);
                        int index196_1091 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1091==STRING_LITERAL) ) {s = 2152;}
                        else if ( (LA196_1091==QUOTED_STRING_LITERAL) ) {s = 2153;}
                        else if ( (LA196_1091==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA196_1091==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA196_1091==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA196_1091==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA196_1091==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA196_1091==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA196_1091==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA196_1091==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA196_1091==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA196_1091==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA196_1091==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA196_1091==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA196_1091==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA196_1091==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA196_1091==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA196_1091==AT) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA196_1091==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA196_1091==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA196_1091==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA196_1091==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA196_1091==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA196_1091==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA196_1091==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA196_1091==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA196_1091==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA196_1091==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA196_1091==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA196_1091==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA196_1091==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA196_1091==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA196_1091==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA196_1091==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA196_1091==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA196_1091==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA196_1091==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA196_1091==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA196_1091==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA196_1091==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA196_1091==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA196_1091==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA196_1091==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA196_1091==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA196_1091==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA196_1091==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA196_1091==LW) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA196_1091==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA196_1091==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA196_1091==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA196_1091==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA196_1091==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA196_1091==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA196_1091==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA196_1091==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA196_1091==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA196_1091==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA196_1091==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA196_1091==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA196_1091==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA196_1091==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA196_1091==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA196_1091==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA196_1091==SET) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA196_1091==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA196_1091==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA196_1091==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA196_1091==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA196_1091==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA196_1091==NEWKW) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA196_1091==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA196_1091==RPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        input.seek(index196_1091);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA196_1151 = input.LA(1);
                        int index196_1151 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1151==SELECT) ) {s = 2224;}
                        else if ( (LA196_1151==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA196_1151==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA196_1151==AT) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA196_1151==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA196_1151==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA196_1151==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA196_1151==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA196_1151==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA196_1151==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA196_1151==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA196_1151==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA196_1151==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA196_1151==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA196_1151==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA196_1151==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA196_1151==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA196_1151==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA196_1151==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA196_1151==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA196_1151==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA196_1151==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA196_1151==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA196_1151==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA196_1151==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA196_1151==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA196_1151==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA196_1151==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA196_1151==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA196_1151==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA196_1151==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA196_1151==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA196_1151==LW) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA196_1151==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA196_1151==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA196_1151==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA196_1151==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA196_1151==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA196_1151==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA196_1151==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA196_1151==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA196_1151==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA196_1151==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA196_1151==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA196_1151==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA196_1151==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA196_1151==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA196_1151==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        input.seek(index196_1151);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA196_1152 = input.LA(1);
                        int index196_1152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1152==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA196_1152==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA196_1152==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA196_1152==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA196_1152==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA196_1152==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA196_1152==LT) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA196_1152==GT) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA196_1152==LE) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA196_1152==GE) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA196_1152==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA196_1152==IS) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA196_1152==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA196_1152==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA196_1152==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA196_1152==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA196_1152==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA196_1152==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA196_1152==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA196_1152==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA196_1152==RPAREN) ) {s = 2292;}
                        else if ( (LA196_1152==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA196_1152==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA196_1152==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA196_1152==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA196_1152==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        input.seek(index196_1152);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA196_1153 = input.LA(1);
                        int index196_1153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1153==RPAREN) ) {s = 2298;}
                        else if ( (LA196_1153==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA196_1153==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA196_1153==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA196_1153==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA196_1153==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA196_1153==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA196_1153==LT) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA196_1153==GT) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA196_1153==LE) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA196_1153==GE) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA196_1153==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA196_1153==IS) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA196_1153==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA196_1153==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA196_1153==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA196_1153==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA196_1153==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA196_1153==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA196_1153==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA196_1153==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA196_1153==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA196_1153==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA196_1153==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA196_1153==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA196_1153==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        input.seek(index196_1153);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA196_1225 = input.LA(1);
                        int index196_1225 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1225==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA196_1225==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA196_1225==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA196_1225==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA196_1225==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA196_1225==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA196_1225==LT) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA196_1225==GT) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA196_1225==LE) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA196_1225==GE) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA196_1225==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA196_1225==IS) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA196_1225==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA196_1225==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA196_1225==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA196_1225==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA196_1225==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA196_1225==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA196_1225==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA196_1225==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA196_1225==RPAREN) ) {s = 2344;}
                        else if ( (LA196_1225==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA196_1225==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA196_1225==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA196_1225==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA196_1225==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        input.seek(index196_1225);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA196_1226 = input.LA(1);
                        int index196_1226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1226==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA196_1226==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA196_1226==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA196_1226==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA196_1226==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA196_1226==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA196_1226==LT) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA196_1226==GT) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA196_1226==LE) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA196_1226==GE) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA196_1226==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA196_1226==IS) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA196_1226==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA196_1226==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA196_1226==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA196_1226==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA196_1226==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA196_1226==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA196_1226==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA196_1226==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA196_1226==RPAREN) ) {s = 2370;}
                        else if ( (LA196_1226==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA196_1226==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA196_1226==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA196_1226==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA196_1226==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        input.seek(index196_1226);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA196_1306 = input.LA(1);
                        int index196_1306 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1306==RPAREN) ) {s = 2376;}
                        else if ( (LA196_1306==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA196_1306==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA196_1306==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA196_1306==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA196_1306==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA196_1306==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA196_1306==LT) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA196_1306==GT) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA196_1306==LE) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA196_1306==GE) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA196_1306==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA196_1306==IS) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA196_1306==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA196_1306==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA196_1306==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA196_1306==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA196_1306==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA196_1306==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA196_1306==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA196_1306==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA196_1306==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA196_1306==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA196_1306==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA196_1306==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA196_1306==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        input.seek(index196_1306);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA196_1307 = input.LA(1);
                        int index196_1307 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1307==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA196_1307==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA196_1307==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA196_1307==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA196_1307==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA196_1307==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA196_1307==LT) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA196_1307==GT) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA196_1307==LE) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA196_1307==GE) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA196_1307==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA196_1307==IS) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA196_1307==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA196_1307==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA196_1307==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA196_1307==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA196_1307==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA196_1307==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA196_1307==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA196_1307==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA196_1307==RPAREN) ) {s = 2422;}
                        else if ( (LA196_1307==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA196_1307==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA196_1307==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA196_1307==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA196_1307==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        input.seek(index196_1307);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA196_1369 = input.LA(1);
                        int index196_1369 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1369==RPAREN) ) {s = 14;}
                        else if ( (LA196_1369==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA196_1369==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA196_1369==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA196_1369==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA196_1369==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA196_1369==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA196_1369==LT) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA196_1369==GT) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA196_1369==LE) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA196_1369==GE) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA196_1369==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA196_1369==IS) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA196_1369==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA196_1369==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA196_1369==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA196_1369==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        else if ( (LA196_1369==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA196_1369==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA196_1369==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA196_1369==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA196_1369==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA196_1369==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA196_1369==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA196_1369==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA196_1369==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        input.seek(index196_1369);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA196_1370 = input.LA(1);
                        int index196_1370 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1370==RPAREN) ) {s = 14;}
                        else if ( (LA196_1370==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA196_1370==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA196_1370==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA196_1370==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA196_1370==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA196_1370==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA196_1370==LT) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA196_1370==GT) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA196_1370==LE) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA196_1370==GE) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA196_1370==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA196_1370==IS) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA196_1370==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA196_1370==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA196_1370==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA196_1370==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA196_1370==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA196_1370==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA196_1370==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA196_1370==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA196_1370==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA196_1370==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA196_1370==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA196_1370==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA196_1370==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        input.seek(index196_1370);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA196_1448 = input.LA(1);
                        int index196_1448 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1448==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA196_1448==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA196_1448==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA196_1448==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA196_1448==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA196_1448==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA196_1448==LT) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA196_1448==GT) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA196_1448==LE) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA196_1448==GE) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA196_1448==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA196_1448==IS) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA196_1448==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA196_1448==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA196_1448==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA196_1448==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA196_1448==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA196_1448==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA196_1448==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA196_1448==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA196_1448==RPAREN) ) {s = 2500;}
                        else if ( (LA196_1448==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA196_1448==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA196_1448==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA196_1448==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA196_1448==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        input.seek(index196_1448);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA196_1449 = input.LA(1);
                        int index196_1449 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1449==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA196_1449==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA196_1449==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA196_1449==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA196_1449==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA196_1449==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA196_1449==LT) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA196_1449==GT) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA196_1449==LE) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA196_1449==GE) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA196_1449==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA196_1449==IS) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA196_1449==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA196_1449==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA196_1449==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA196_1449==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA196_1449==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA196_1449==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA196_1449==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA196_1449==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA196_1449==RPAREN) ) {s = 2526;}
                        else if ( (LA196_1449==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA196_1449==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA196_1449==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA196_1449==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA196_1449==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        input.seek(index196_1449);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA196_1520 = input.LA(1);
                        int index196_1520 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1520==RPAREN) ) {s = 2532;}
                        else if ( (LA196_1520==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA196_1520==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA196_1520==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA196_1520==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA196_1520==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA196_1520==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA196_1520==LT) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA196_1520==GT) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA196_1520==LE) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA196_1520==GE) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA196_1520==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA196_1520==IS) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA196_1520==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA196_1520==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA196_1520==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA196_1520==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA196_1520==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA196_1520==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA196_1520==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA196_1520==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA196_1520==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA196_1520==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA196_1520==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA196_1520==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA196_1520==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        input.seek(index196_1520);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA196_1521 = input.LA(1);
                        int index196_1521 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1521==RPAREN) ) {s = 2558;}
                        else if ( (LA196_1521==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA196_1521==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA196_1521==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA196_1521==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA196_1521==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA196_1521==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA196_1521==LT) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA196_1521==GT) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA196_1521==LE) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA196_1521==GE) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA196_1521==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA196_1521==IS) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA196_1521==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA196_1521==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA196_1521==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA196_1521==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA196_1521==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA196_1521==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA196_1521==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA196_1521==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA196_1521==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA196_1521==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA196_1521==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA196_1521==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA196_1521==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        input.seek(index196_1521);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA196_1583 = input.LA(1);
                        int index196_1583 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1583==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA196_1583==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA196_1583==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA196_1583==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA196_1583==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA196_1583==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA196_1583==LT) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA196_1583==GT) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA196_1583==LE) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA196_1583==GE) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA196_1583==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA196_1583==IS) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA196_1583==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA196_1583==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA196_1583==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA196_1583==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA196_1583==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA196_1583==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA196_1583==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA196_1583==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA196_1583==RPAREN) ) {s = 2604;}
                        else if ( (LA196_1583==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA196_1583==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA196_1583==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA196_1583==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA196_1583==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        input.seek(index196_1583);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA196_1584 = input.LA(1);
                        int index196_1584 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1584==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA196_1584==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA196_1584==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA196_1584==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA196_1584==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA196_1584==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA196_1584==LT) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA196_1584==GT) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA196_1584==LE) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA196_1584==GE) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA196_1584==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA196_1584==IS) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA196_1584==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA196_1584==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA196_1584==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA196_1584==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA196_1584==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA196_1584==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA196_1584==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA196_1584==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA196_1584==RPAREN) ) {s = 2630;}
                        else if ( (LA196_1584==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA196_1584==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA196_1584==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA196_1584==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA196_1584==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        input.seek(index196_1584);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA196_1655 = input.LA(1);
                        int index196_1655 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1655==RPAREN) ) {s = 2636;}
                        else if ( (LA196_1655==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA196_1655==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA196_1655==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA196_1655==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA196_1655==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA196_1655==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA196_1655==LT) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA196_1655==GT) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA196_1655==LE) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA196_1655==GE) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA196_1655==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        else if ( (LA196_1655==IS) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA196_1655==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA196_1655==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA196_1655==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA196_1655==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA196_1655==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA196_1655==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA196_1655==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA196_1655==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA196_1655==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA196_1655==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA196_1655==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA196_1655==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA196_1655==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        input.seek(index196_1655);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA196_1656 = input.LA(1);
                        int index196_1656 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1656==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA196_1656==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA196_1656==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA196_1656==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA196_1656==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA196_1656==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA196_1656==LT) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA196_1656==GT) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA196_1656==LE) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA196_1656==GE) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA196_1656==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA196_1656==IS) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA196_1656==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA196_1656==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA196_1656==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA196_1656==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA196_1656==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA196_1656==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA196_1656==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA196_1656==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA196_1656==RPAREN) ) {s = 2682;}
                        else if ( (LA196_1656==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA196_1656==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA196_1656==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA196_1656==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA196_1656==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        input.seek(index196_1656);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA196_1736 = input.LA(1);
                        int index196_1736 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1736==RPAREN) ) {s = 2688;}
                        else if ( (LA196_1736==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA196_1736==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA196_1736==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA196_1736==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA196_1736==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA196_1736==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA196_1736==LT) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA196_1736==GT) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA196_1736==LE) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA196_1736==GE) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA196_1736==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA196_1736==IS) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA196_1736==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA196_1736==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA196_1736==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA196_1736==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA196_1736==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA196_1736==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA196_1736==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA196_1736==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA196_1736==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA196_1736==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA196_1736==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA196_1736==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA196_1736==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        input.seek(index196_1736);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA196_1737 = input.LA(1);
                        int index196_1737 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1737==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA196_1737==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA196_1737==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA196_1737==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA196_1737==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA196_1737==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA196_1737==LT) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA196_1737==GT) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA196_1737==LE) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA196_1737==GE) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA196_1737==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA196_1737==IS) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA196_1737==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA196_1737==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA196_1737==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA196_1737==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA196_1737==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA196_1737==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA196_1737==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA196_1737==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA196_1737==RPAREN) ) {s = 2734;}
                        else if ( (LA196_1737==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA196_1737==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA196_1737==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA196_1737==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA196_1737==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        input.seek(index196_1737);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA196_1799 = input.LA(1);
                        int index196_1799 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1799==RPAREN) ) {s = 2740;}
                        else if ( (LA196_1799==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA196_1799==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA196_1799==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA196_1799==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA196_1799==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA196_1799==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA196_1799==LT) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA196_1799==GT) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA196_1799==LE) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA196_1799==GE) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA196_1799==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA196_1799==IS) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA196_1799==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA196_1799==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA196_1799==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA196_1799==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA196_1799==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA196_1799==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA196_1799==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA196_1799==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA196_1799==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA196_1799==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA196_1799==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA196_1799==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA196_1799==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        input.seek(index196_1799);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA196_1800 = input.LA(1);
                        int index196_1800 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1800==RPAREN) ) {s = 2766;}
                        else if ( (LA196_1800==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA196_1800==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA196_1800==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA196_1800==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA196_1800==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA196_1800==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA196_1800==LT) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA196_1800==GT) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA196_1800==LE) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA196_1800==GE) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA196_1800==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        else if ( (LA196_1800==IS) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA196_1800==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA196_1800==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA196_1800==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA196_1800==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        else if ( (LA196_1800==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA196_1800==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA196_1800==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA196_1800==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA196_1800==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA196_1800==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA196_1800==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA196_1800==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA196_1800==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        input.seek(index196_1800);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA196_1869 = input.LA(1);
                        int index196_1869 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1869==RPAREN) ) {s = 2792;}
                        else if ( (LA196_1869==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA196_1869==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA196_1869==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA196_1869==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA196_1869==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA196_1869==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA196_1869==LT) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA196_1869==GT) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA196_1869==LE) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA196_1869==GE) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA196_1869==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2803;}
                        else if ( (LA196_1869==IS) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA196_1869==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA196_1869==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA196_1869==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA196_1869==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        else if ( (LA196_1869==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA196_1869==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA196_1869==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA196_1869==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA196_1869==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        else if ( (LA196_1869==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA196_1869==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA196_1869==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA196_1869==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        input.seek(index196_1869);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA196_1870 = input.LA(1);
                        int index196_1870 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1870==RPAREN) ) {s = 2818;}
                        else if ( (LA196_1870==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA196_1870==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA196_1870==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA196_1870==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA196_1870==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA196_1870==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA196_1870==LT) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA196_1870==GT) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA196_1870==LE) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA196_1870==GE) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA196_1870==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        else if ( (LA196_1870==IS) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA196_1870==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA196_1870==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA196_1870==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA196_1870==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        else if ( (LA196_1870==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA196_1870==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA196_1870==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA196_1870==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA196_1870==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2839;}
                        else if ( (LA196_1870==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA196_1870==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA196_1870==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA196_1870==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        input.seek(index196_1870);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA196_1942 = input.LA(1);
                        int index196_1942 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1942==RPAREN) ) {s = 14;}
                        else if ( (LA196_1942==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA196_1942==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA196_1942==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA196_1942==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA196_1942==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA196_1942==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA196_1942==LT) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA196_1942==GT) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA196_1942==LE) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA196_1942==GE) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        else if ( (LA196_1942==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA196_1942==IS) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA196_1942==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA196_1942==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA196_1942==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA196_1942==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        else if ( (LA196_1942==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA196_1942==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA196_1942==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        else if ( (LA196_1942==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA196_1942==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA196_1942==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA196_1942==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA196_1942==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA196_1942==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        input.seek(index196_1942);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA196_1943 = input.LA(1);
                        int index196_1943 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_1943==RPAREN) ) {s = 14;}
                        else if ( (LA196_1943==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA196_1943==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA196_1943==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA196_1943==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2874;}
                        else if ( (LA196_1943==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA196_1943==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA196_1943==LT) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA196_1943==GT) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA196_1943==LE) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        else if ( (LA196_1943==GE) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA196_1943==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA196_1943==IS) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA196_1943==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA196_1943==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA196_1943==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA196_1943==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        else if ( (LA196_1943==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA196_1943==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA196_1943==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA196_1943==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA196_1943==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2891;}
                        else if ( (LA196_1943==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA196_1943==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA196_1943==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA196_1943==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        input.seek(index196_1943);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA196_2019 = input.LA(1);
                        int index196_2019 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_2019==RPAREN) ) {s = 2896;}
                        else if ( (LA196_2019==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA196_2019==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA196_2019==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA196_2019==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA196_2019==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA196_2019==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA196_2019==LT) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA196_2019==GT) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA196_2019==LE) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA196_2019==GE) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        else if ( (LA196_2019==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2907;}
                        else if ( (LA196_2019==IS) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA196_2019==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA196_2019==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA196_2019==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA196_2019==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        else if ( (LA196_2019==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA196_2019==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA196_2019==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA196_2019==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA196_2019==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA196_2019==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA196_2019==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA196_2019==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        input.seek(index196_2019);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA196_2020 = input.LA(1);
                        int index196_2020 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_2020==RPAREN) ) {s = 2921;}
                        else if ( (LA196_2020==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA196_2020==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA196_2020==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA196_2020==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA196_2020==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA196_2020==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA196_2020==LT) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA196_2020==GT) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA196_2020==LE) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA196_2020==GE) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA196_2020==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA196_2020==IS) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        else if ( (LA196_2020==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA196_2020==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA196_2020==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA196_2020==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA196_2020==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA196_2020==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA196_2020==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA196_2020==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA196_2020==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA196_2020==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA196_2020==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA196_2020==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        input.seek(index196_2020);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA196_2082 = input.LA(1);
                        int index196_2082 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_2082==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA196_2082==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA196_2082==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA196_2082==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA196_2082==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA196_2082==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA196_2082==LT) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA196_2082==GT) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA196_2082==LE) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA196_2082==GE) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA196_2082==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA196_2082==IS) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA196_2082==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        else if ( (LA196_2082==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA196_2082==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA196_2082==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA196_2082==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA196_2082==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA196_2082==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA196_2082==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA196_2082==AS) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA196_2082==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        else if ( (LA196_2082==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2968;}
                        else if ( (LA196_2082==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA196_2082==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA196_2082==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA196_2082==RPAREN) ) {s = 14;}
                        input.seek(index196_2082);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA196_2083 = input.LA(1);
                        int index196_2083 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_2083==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        else if ( (LA196_2083==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA196_2083==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA196_2083==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2976;}
                        else if ( (LA196_2083==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA196_2083==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2978;}
                        else if ( (LA196_2083==LT) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA196_2083==GT) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA196_2083==LE) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA196_2083==GE) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA196_2083==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        else if ( (LA196_2083==IS) && (synpred3_EsperEPL2Grammar())) {s = 2984;}
                        else if ( (LA196_2083==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2985;}
                        else if ( (LA196_2083==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2986;}
                        else if ( (LA196_2083==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2987;}
                        else if ( (LA196_2083==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2988;}
                        else if ( (LA196_2083==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2989;}
                        else if ( (LA196_2083==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2990;}
                        else if ( (LA196_2083==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2991;}
                        else if ( (LA196_2083==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2992;}
                        else if ( (LA196_2083==AS) && (synpred3_EsperEPL2Grammar())) {s = 2993;}
                        else if ( (LA196_2083==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2994;}
                        else if ( (LA196_2083==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2995;}
                        else if ( (LA196_2083==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2996;}
                        else if ( (LA196_2083==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2997;}
                        else if ( (LA196_2083==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2998;}
                        else if ( (LA196_2083==RPAREN) ) {s = 14;}
                        input.seek(index196_2083);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA196_2152 = input.LA(1);
                        int index196_2152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_2152==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3000;}
                        else if ( (LA196_2152==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3001;}
                        else if ( (LA196_2152==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3002;}
                        else if ( (LA196_2152==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3003;}
                        else if ( (LA196_2152==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3004;}
                        else if ( (LA196_2152==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3005;}
                        else if ( (LA196_2152==LT) && (synpred3_EsperEPL2Grammar())) {s = 3006;}
                        else if ( (LA196_2152==GT) && (synpred3_EsperEPL2Grammar())) {s = 3007;}
                        else if ( (LA196_2152==LE) && (synpred3_EsperEPL2Grammar())) {s = 3008;}
                        else if ( (LA196_2152==GE) && (synpred3_EsperEPL2Grammar())) {s = 3009;}
                        else if ( (LA196_2152==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3010;}
                        else if ( (LA196_2152==IS) && (synpred3_EsperEPL2Grammar())) {s = 3011;}
                        else if ( (LA196_2152==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3012;}
                        else if ( (LA196_2152==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3013;}
                        else if ( (LA196_2152==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3014;}
                        else if ( (LA196_2152==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3015;}
                        else if ( (LA196_2152==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3016;}
                        else if ( (LA196_2152==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3017;}
                        else if ( (LA196_2152==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3018;}
                        else if ( (LA196_2152==RPAREN) ) {s = 3019;}
                        else if ( (LA196_2152==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3020;}
                        else if ( (LA196_2152==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3021;}
                        else if ( (LA196_2152==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3022;}
                        else if ( (LA196_2152==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3023;}
                        else if ( (LA196_2152==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3024;}
                        input.seek(index196_2152);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA196_2153 = input.LA(1);
                        int index196_2153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_2153==STAR) && (synpred3_EsperEPL2Grammar())) {s = 3025;}
                        else if ( (LA196_2153==DIV) && (synpred3_EsperEPL2Grammar())) {s = 3026;}
                        else if ( (LA196_2153==MOD) && (synpred3_EsperEPL2Grammar())) {s = 3027;}
                        else if ( (LA196_2153==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 3028;}
                        else if ( (LA196_2153==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 3029;}
                        else if ( (LA196_2153==LOR) && (synpred3_EsperEPL2Grammar())) {s = 3030;}
                        else if ( (LA196_2153==LT) && (synpred3_EsperEPL2Grammar())) {s = 3031;}
                        else if ( (LA196_2153==GT) && (synpred3_EsperEPL2Grammar())) {s = 3032;}
                        else if ( (LA196_2153==LE) && (synpred3_EsperEPL2Grammar())) {s = 3033;}
                        else if ( (LA196_2153==GE) && (synpred3_EsperEPL2Grammar())) {s = 3034;}
                        else if ( (LA196_2153==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 3035;}
                        else if ( (LA196_2153==IS) && (synpred3_EsperEPL2Grammar())) {s = 3036;}
                        else if ( (LA196_2153==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 3037;}
                        else if ( (LA196_2153==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 3038;}
                        else if ( (LA196_2153==BAND) && (synpred3_EsperEPL2Grammar())) {s = 3039;}
                        else if ( (LA196_2153==BOR) && (synpred3_EsperEPL2Grammar())) {s = 3040;}
                        else if ( (LA196_2153==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 3041;}
                        else if ( (LA196_2153==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3042;}
                        else if ( (LA196_2153==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3043;}
                        else if ( (LA196_2153==RPAREN) ) {s = 3044;}
                        else if ( (LA196_2153==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 3045;}
                        else if ( (LA196_2153==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 3046;}
                        else if ( (LA196_2153==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 3047;}
                        else if ( (LA196_2153==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 3048;}
                        else if ( (LA196_2153==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3049;}
                        input.seek(index196_2153);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA196_2292 = input.LA(1);
                        int index196_2292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2292);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA196_2298 = input.LA(1);
                        int index196_2298 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2298);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA196_2344 = input.LA(1);
                        int index196_2344 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2344);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA196_2370 = input.LA(1);
                        int index196_2370 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2370);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA196_2376 = input.LA(1);
                        int index196_2376 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2376);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA196_2422 = input.LA(1);
                        int index196_2422 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2422);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA196_2500 = input.LA(1);
                        int index196_2500 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2500);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA196_2526 = input.LA(1);
                        int index196_2526 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2526);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA196_2532 = input.LA(1);
                        int index196_2532 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2532);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA196_2558 = input.LA(1);
                        int index196_2558 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2558);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA196_2604 = input.LA(1);
                        int index196_2604 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2604);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA196_2630 = input.LA(1);
                        int index196_2630 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2630);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA196_2636 = input.LA(1);
                        int index196_2636 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2636);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA196_2682 = input.LA(1);
                        int index196_2682 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2682);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA196_2688 = input.LA(1);
                        int index196_2688 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2688);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA196_2734 = input.LA(1);
                        int index196_2734 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2734);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA196_2740 = input.LA(1);
                        int index196_2740 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2740);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA196_2766 = input.LA(1);
                        int index196_2766 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2766);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA196_2792 = input.LA(1);
                        int index196_2792 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2792);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA196_2818 = input.LA(1);
                        int index196_2818 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2818);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA196_2896 = input.LA(1);
                        int index196_2896 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2896);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA196_2921 = input.LA(1);
                        int index196_2921 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_2921);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA196_3019 = input.LA(1);
                        int index196_3019 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_3019);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA196_3044 = input.LA(1);
                        int index196_3044 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3049;}
                        input.seek(index196_3044);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1764 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_expressionDecl_in_startPatternExpressionRule1768 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1774 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1793 = new BitSet(new long[]{0x004002000800E010L,0x0800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_expressionDecl_in_startEPLExpressionRule1797 = new BitSet(new long[]{0x004002000800E010L,0x0800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1803 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1836 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPRESSIONDECL_in_expressionDecl1859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_expressionDecl1863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LCURLY_in_expressionDecl1865 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_expressionDecl1867 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_expressionDecl1870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RCURLY_in_expressionDecl1872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_expressionLambdaDecl1906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_expressionLambdaDecl1911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_columnList_in_expressionLambdaDecl1913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expressionLambdaDecl1915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_GOES_in_expressionLambdaDecl1919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationNoEnum1954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1956 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1960 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x8032013000400000L,0x0000000000000644L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_annotationEnum2014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum2016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum2020 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x8032013000400000L,0x0000000000000744L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum2024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum2028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum2033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum2077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2101 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum2104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2107 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum2130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum2132 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x8032002000400000L,0x0000000000000644L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum2171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum2173 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x8032003000400000L,0x0000000000000744L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum2175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2305 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x8032046000400000L,0x0000000000000644L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000044000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2311 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x8032002000400000L,0x0000000000000644L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000044000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2353 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x8032047000400000L,0x0000000000000744L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000044000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2359 = new BitSet(new long[]{0x0000000000000000L,0x00001C0000000000L,0x0000000000000000L,0x0000000000000000L,0x8032003000400000L,0x0000000000000744L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000044000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2405 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2410 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2415 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2420 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2425 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2430 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2435 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2452 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2455 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2461 = new BitSet(new long[]{0xB83841E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2464 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2468 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2471 = new BitSet(new long[]{0x0104300000010002L,0x0001200000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2475 = new BitSet(new long[]{0x0104300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2481 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2484 = new BitSet(new long[]{0x0104300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2491 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2494 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2497 = new BitSet(new long[]{0x0104200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2504 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2507 = new BitSet(new long[]{0x0104000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2514 = new BitSet(new long[]{0x0130800080004000L,0x0020200000440000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2517 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2524 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2527 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2530 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8002001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2557 = new BitSet(new long[]{0x0040000008000000L,0x02008000000A0000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2566 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2569 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2632 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2636 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2681 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2685 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2704 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2706 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2709 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2711 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2719 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr2756 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr2758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2763 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr2766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2770 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2776 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr2783 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr2785 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_mergeItem_in_onMergeExpr2793 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeItem2827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeItem2831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched2844 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched2846 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched2849 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_mergeMatched2851 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeMatchedItem_in_mergeMatched2855 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeMatchedItem2881 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatchedItem2896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_mergeMatchedItem2898 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem2900 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatchedItem2903 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem2905 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem2911 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem2913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatchedItem2925 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem2928 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem2930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeMatchedItem2941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched2998 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched3000 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched3002 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeUnmatched3005 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_mergeUnmatched3007 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeUnmatchedItem_in_mergeUnmatched3011 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatchedItem3038 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeUnmatchedItem3041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_mergeInsert3056 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_INTO_in_mergeInsert3059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_mergeInsert3061 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeInsert3066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_columnList_in_mergeInsert3068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeInsert3070 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeInsert3074 = new BitSet(new long[]{0xB83841E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_selectionList_in_mergeInsert3076 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeInsert3079 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_whereClause_in_mergeInsert3081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr3127 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr3129 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr3135 = new BitSet(new long[]{0xB83841E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr3137 = new BitSet(new long[]{0xB83841E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr3140 = new BitSet(new long[]{0x0100300400010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr3144 = new BitSet(new long[]{0x0100300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr3150 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr3152 = new BitSet(new long[]{0x0100300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr3161 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3163 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr3165 = new BitSet(new long[]{0x0100200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr3172 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr3174 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr3181 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3183 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr3185 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8002001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr3194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr3254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3261 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr3264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr3280 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3282 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr3285 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3287 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr3294 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr3296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr3347 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr3349 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3353 = new BitSet(new long[]{0xB83841E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3355 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3360 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3393 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3446 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3450 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3455 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3497 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3499 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3502 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3504 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3531 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3562 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3603 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3609 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000109000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3614 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000109000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3619 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000109000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3628 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000009000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3632 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000009000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3636 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000009000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3651 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3670 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3687 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3690 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3779 = new BitSet(new long[]{0x803801E807FC4420L,0x069C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8032801000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3782 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3808 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_createIndexColumnList_in_createIndexExpr3818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3849 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_createIndexColumnList3852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3854 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn3881 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn3883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3916 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3919 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3963 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3968 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_createColumnListElement3996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3999 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement4004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement4006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4049 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList4052 = new BitSet(new long[]{0x803801E807FC4420L,0x069C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8032801000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4054 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement4083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement4095 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement4123 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr4154 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4158 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr4161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4165 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000809000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr4167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000809000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr4180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr4191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000011000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr4193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr4196 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr4203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4292 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_variantList4295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000801000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4297 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement4324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement4330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr4355 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr4361 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr4365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_insertIntoExpr4367 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr4370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr4372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr4374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList4407 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnList4410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_columnList4412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause4450 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause4453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause4457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin4471 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin4474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4488 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4491 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin4534 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin4538 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin4542 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin4545 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin4566 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin4580 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin4582 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin4584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent4649 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4652 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent4655 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4658 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair4675 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4736 = new BitSet(new long[]{0xB83841E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4742 = new BitSet(new long[]{0xB83841E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4748 = new BitSet(new long[]{0xB83841E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4754 = new BitSet(new long[]{0xB83841E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4791 = new BitSet(new long[]{0xB83841E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4843 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4846 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4910 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4948 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4952 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4956 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4960 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4969 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4974 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression4981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4985 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4991 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression5005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression5009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr5065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr5069 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr5072 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803601B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionList_in_forExpr5074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr5077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog5113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog5127 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog5133 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog5140 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog5145 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5151 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog5157 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog5163 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog5169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog5176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy5213 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy5215 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5217 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy5220 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures5251 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5253 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures5256 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5258 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem5283 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem5286 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem5291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection5322 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection5325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern5340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern5342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000009000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern5346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5368 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5372 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5376 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5380 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5384 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval5424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval5426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration5457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000009000000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5459 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5492 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000009000000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested5535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000009000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested5539 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006800000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested5544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested5550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested5556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom5595 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006800000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom5601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom5607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine5663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5665 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine5668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5670 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5697 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5699 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5728 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5859 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5862 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803601B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5922 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_MERGE_in_viewExpression5931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5934 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A1B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5999 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr6002 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr6004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6039 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr6042 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement6069 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement6074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement6078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause6116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit6154 = new BitSet(new long[]{0x0030800080004002L,0x0000000000440000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit6169 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit6173 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit6177 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit6181 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit6212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit6238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit6249 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit6255 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit6261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit6292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit6294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit6311 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_outputLimit6313 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit6316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit6318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter6468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter6471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter6475 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter6477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6523 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6529 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit6536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8002001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit6542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8002001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet6606 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6610 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6614 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6618 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6622 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6627 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet6633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause6663 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_whenClause6666 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause6668 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_whenClause6671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause6684 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_elseClause6687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression6700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6714 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6717 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6720 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6734 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_caseExpression6736 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6738 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6741 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6779 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6784 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6786 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6818 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6823 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6825 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6857 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C1000000000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6862 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6865 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6868 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6872 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C1000000000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6893 = new BitSet(new long[]{0x803801E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6909 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0300080000000000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6922 = new BitSet(new long[]{0x803B81E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6940 = new BitSet(new long[]{0x803B81E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6954 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6956 = new BitSet(new long[]{0x803B81E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6970 = new BitSet(new long[]{0x803B81E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6984 = new BitSet(new long[]{0x803B81E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression7014 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0300080000000000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression7031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression7037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression7043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression7049 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803601B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression7051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression7054 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0300080000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7059 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0300080000000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7187 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3C00000000000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression7219 = new BitSet(new long[]{0x803B81E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression7223 = new BitSet(new long[]{0x803B81E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression7227 = new BitSet(new long[]{0x803B81E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression7231 = new BitSet(new long[]{0x803B81E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7255 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3C00000000000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression7272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression7278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression7284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7290 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803601B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression7292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3C00000000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7300 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3C00000000000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression7396 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000208000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7435 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression7441 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008450000000000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression7466 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000410000000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression7495 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000450000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression7529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression7654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression7700 = new BitSet(new long[]{0x803801E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression7702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7752 = new BitSet(new long[]{0x803801E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7754 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7811 = new BitSet(new long[]{0x803801E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7900 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7906 = new BitSet(new long[]{0x803801E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7912 = new BitSet(new long[]{0x803801E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7914 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7955 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8002000000000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7960 = new BitSet(new long[]{0x803801E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7963 = new BitSet(new long[]{0x803801E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7967 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8002000000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7981 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7986 = new BitSet(new long[]{0x803801E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7989 = new BitSet(new long[]{0x803801E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7992 = new BitSet(new long[]{0x803801E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7996 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression8011 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression8013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression8026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression8031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression8036 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_unaryExpression8038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression8040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8045 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8047 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8052 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8054 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression8091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression8103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression8109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression8114 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8119 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8126 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression8165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWKW_in_unaryExpression8170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LCURLY_in_unaryExpression8172 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression8174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000044000000000L});
    public static final BitSet FOLLOW_COMMA_in_unaryExpression8177 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_newAssign_in_unaryExpression8179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000044000000000L});
    public static final BitSet FOLLOW_RCURLY_in_unaryExpression8183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_newAssign8205 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_EQUALS_in_newAssign8208 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_newAssign8210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression8238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression8260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression8282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression8284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr8317 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr8323 = new BitSet(new long[]{0xB83841E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr8326 = new BitSet(new long[]{0xB83841E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr8329 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr8336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr8339 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr8347 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr8350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr8359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr8383 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8390 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8395 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000101000000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr8402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr8419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression8463 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600F000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000044000000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression8469 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000044000000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression8478 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression8483 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression8485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_arrayExpression8490 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_arrayExpression8492 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc8541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8544 = new BitSet(new long[]{0x8038C1E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8548 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8553 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc8559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc8568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8571 = new BitSet(new long[]{0x8038C1E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8575 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8580 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc8586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc8595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8598 = new BitSet(new long[]{0x8038C1E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8610 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8615 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc8630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc8641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc8650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8653 = new BitSet(new long[]{0x8038C1E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8657 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8662 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc8668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc8677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8680 = new BitSet(new long[]{0x8038C1E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8684 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8689 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc8695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc8704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8707 = new BitSet(new long[]{0x8038C1E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8711 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8716 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_aggregationFilterExpr_in_builtinFunc8722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc8731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc8736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc8741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc8746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8749 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8754 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8760 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc8773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8775 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8780 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8786 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8791 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8793 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8798 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc8847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8849 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8854 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8860 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8865 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8872 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc8921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8924 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc8935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8937 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8946 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8948 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8953 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8955 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc9000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc9006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9008 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc9011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc9023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9026 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_builtinFunc9050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9053 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc9064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9066 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_builtinFunc9068 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc9071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_AS_in_builtinFunc9075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc9078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9085 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9087 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9092 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9094 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc9139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9142 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc9145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc9153 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000108000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc9156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc9158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9165 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9167 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc9172 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc9174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation9218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation9220 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803681B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation9223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation9226 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_firstAggregation9228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation9234 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation9239 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation9241 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation9246 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation9248 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation9303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation9305 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803681B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation9308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation9311 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_lastAggregation9313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation9319 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation9324 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation9326 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation9331 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation9333 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation9389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation9391 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803681B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation9393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation9396 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation9401 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation9403 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation9408 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation9410 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr9467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr9487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr9500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_aggregationFilterExpr9519 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_aggregationFilterExpr9521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction9549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction9554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction9566 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction9569 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction9571 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass9601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass9603 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000FCFA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass9607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass9611 = new BitSet(new long[]{0x8038C1E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A1B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass9614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass9618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass9651 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass9656 = new BitSet(new long[]{0x8038C1E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A1B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass9659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass9663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent9695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent9702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent9714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_funcIdent9726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_funcIdent9738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs9756 = new BitSet(new long[]{0x8038C1E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs9761 = new BitSet(new long[]{0x8038C1E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs9765 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs9768 = new BitSet(new long[]{0x8038C1E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs9771 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_libFunctionArgItem9785 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionWithTime_in_libFunctionArgItem9788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList9799 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList9801 = new BitSet(new long[]{0x803801E807FD4420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList9804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression9832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression9851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_followedByRepeat_in_followedByExpression9854 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByRepeat9907 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat9914 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_followedByRepeat9916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_FOLLOWMAX_END_in_followedByRepeat9918 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_orExpression_in_followedByRepeat9922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_orExpression9951 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression9956 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_andExpression_in_orExpression9958 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression9990 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression9995 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression9997 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression10032 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression10036 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression10041 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression10043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression10108 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression10114 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression10120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression10122 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression10128 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression10137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList10252 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList10254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList10257 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList10259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList10263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_distinctExpressionAtom10286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix10301 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix10307 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000209000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix10309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix10311 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix10318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix10320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix10328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix10330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression10392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression10396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression10411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression10413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression10418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression10424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression10427 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A1B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression10429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression10432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression10481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression10483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression10486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression10488 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A1B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression10492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression10496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression10509 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression10512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression10514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange10535 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803E00B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange10542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008400000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange10547 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803640B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange10550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange10570 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange10572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange10583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression10670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression10672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression10681 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000208000000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression10692 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803601B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression10694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression10697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression10709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression10754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression10757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic10787 = new BitSet(new long[]{0x803801E80FFC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic10790 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic10792 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic10794 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic10798 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic10801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic10803 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic10808 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic10810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic10814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList10864 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList10867 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803680B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList10870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement10896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement10912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement10917 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement10920 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement10924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector10968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector10970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector10972 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector10975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector10979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression11026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression11028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression11037 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000208000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression11048 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803601B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression11050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression11053 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression11065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_patternFilterAnnotation_in_patternFilterExpression11076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATCHAR_in_patternFilterAnnotation11128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterAnnotation11132 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterAnnotation11135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8002000000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_number_in_patternFilterAnnotation11137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterAnnotation11139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier11175 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier11194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier11198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy11243 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy11278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy11282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList11324 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList11327 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x803600B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expression_in_expressionList11330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList11361 = new BitSet(new long[]{0x803801E817FD6420L,0x169C1C0000FDFFFFL,0x0000000000000000L,0x0000000000000000L,0x8036A0B000400000L,0x0000000000000704L});
    public static final BitSet FOLLOW_expressionWithTimeInclLast_in_expressionWithTimeList11364 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime11393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime11404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime11415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime11426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime11438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime11449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime11461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime11473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime11478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTimeInclLast11498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeInclLast11503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable11514 = new BitSet(new long[]{0x0600000000000002L,0x0000007000000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable11519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable11523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable11527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable11531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable11535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar11592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand11612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand11625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand11637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand11639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_number_in_frequencyOperand11642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand11646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand11648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand11697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand11701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand11703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand11706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_number_in_rangeOperand11709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand11713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand11715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator11829 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator11833 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator11835 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator11838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator11886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator11890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator11892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator11895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList11942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006801000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList11944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000440000000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList11947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006801000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList11949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000440000000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList11953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter11975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter11981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter11986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty12002 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty12005 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty12007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic12033 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004208000000000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic12042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic12046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic12048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic12053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic12067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic12072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic12078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic12081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic12086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic12100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent12235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent12237 = new BitSet(new long[]{0x803801E807FC4422L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent12241 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent12280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent12289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent12296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent12303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent12310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent12321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent12328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent12335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent12342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent12349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent12356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent12363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent12370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent12377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent12384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent12391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent12398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent12405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent12412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent12419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent12426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent12433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent12440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent12447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent12454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent12461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent12468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent12475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent12482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent12489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent12496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent12503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent12510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keywordAllowedIdent12517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent12524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent12531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent12538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent12547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent12556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent12563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent12570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent12577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent12584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent12591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent12598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent12605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent12612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr12633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr12642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent12656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent12664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yearPart_in_timePeriod12689 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod12691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod12694 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod12697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12700 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12703 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12706 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod12715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod12717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod12720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12723 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod12738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod12740 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12743 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod12758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12777 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12789 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8006001000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_yearPart12855 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_yearPart12859 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_yearPart12861 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEARS_in_yearPart12865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEAR_in_yearPart12869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_monthPart12917 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_IDENT_in_monthPart12921 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_substitution_in_monthPart12923 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTHS_in_monthPart12927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTH_in_monthPart12931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekPart12979 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_IDENT_in_weekPart12983 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_substitution_in_weekPart12985 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEKS_in_weekPart12989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEK_in_weekPart12993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart13041 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart13045 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_substitution_in_dayPart13047 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart13051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart13055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart13104 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart13108 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart13110 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart13114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart13118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart13167 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart13171 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart13173 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart13177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart13181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart13185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart13235 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart13239 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart13241 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart13245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart13249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart13253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart13303 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart13307 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart13309 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart13313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart13317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart13321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number13376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number13393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number13410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number13427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution13448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant13467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant13474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant13487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant13507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant13527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant13549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8002000000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant13555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8002000000400000L,0x0000000000000604L});
    public static final BitSet FOLLOW_number_in_numberconstant13559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant13588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant13604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar8097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar9482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar9544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar10907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar11388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar11399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar11410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar11421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar11433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar11444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar11455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar11468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred15_EsperEPL2Grammar11493 = new BitSet(new long[]{0x0000000000000002L});
}
