// $ANTLR 3.1.1 EsperEPL2Grammar.g 2009-07-05 07:44:01

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "INSERTINTO_EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "ON_SET_EXPR_ITEM", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_WINDOW_COL_TYPE_LIST", "CREATE_WINDOW_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "UPDATE_EXPR", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "STAR", "LBRACK", "RBRACK", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BOR", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "PLUS", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "QUESTION", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=160;
    public static final int FLOAT_SUFFIX=294;
    public static final int STAR=235;
    public static final int NUMERIC_PARAM_LIST=101;
    public static final int MOD=254;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=143;
    public static final int BSR=276;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=166;
    public static final int TIMEPERIOD_MILLISECONDS=93;
    public static final int FULL_OUTERJOIN_EXPR=147;
    public static final int INC=269;
    public static final int LNOT=265;
    public static final int RPAREN=234;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=239;
    public static final int BSR_ASSIGN=277;
    public static final int CAST_EXPR=195;
    public static final int STREAM_EXPR=142;
    public static final int TIMEPERIOD_SECONDS=90;
    public static final int NOT_EQUAL=245;
    public static final int METADATASQL=67;
    public static final int EVENT_FILTER_PROPERTY_EXPR=110;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=104;
    public static final int FOLLOWED_BY=258;
    public static final int HOUR_PART=171;
    public static final int RBRACK=237;
    public static final int MATCH_UNTIL_RANGE_CLOSED=211;
    public static final int GE=249;
    public static final int METHOD_JOIN_EXPR=207;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=109;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=108;
    public static final int MINUS_ASSIGN=270;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=120;
    public static final int NUM_DOUBLE=227;
    public static final int INSERTINTO_STREAM_NAME=183;
    public static final int LCURLY=255;
    public static final int TIMEPERIOD_MILLISEC=91;
    public static final int UNARY_MINUS=167;
    public static final int RETAINUNION=63;
    public static final int DBWHERE_CLAUSE=181;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=118;
    public static final int WS=286;
    public static final int EMAILAT=285;
    public static final int SUBSELECT_GROUP_EXPR=187;
    public static final int ON_SELECT_INSERT_EXPR=201;
    public static final int ESCAPECHAR=260;
    public static final int SL_COMMENT=287;
    public static final int NULL_TYPE=226;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=209;
    public static final int GT=247;
    public static final int BNOT=266;
    public static final int WHERE_EXPR=129;
    public static final int END=33;
    public static final int LAND=283;
    public static final int INNERJOIN_EXPR=144;
    public static final int NOT_REGEXP=178;
    public static final int MATCH_UNTIL_EXPR=208;
    public static final int EVENT_PROP_EXPR=151;
    public static final int LBRACK=236;
    public static final int VIEW_EXPR=126;
    public static final int ANNOTATION=216;
    public static final int LONG_TYPE=221;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=111;
    public static final int TIMEPERIOD_SEC=88;
    public static final int TICKED_STRING_LITERAL=261;
    public static final int ON_SELECT_EXPR=200;
    public static final int MINUTE_PART=172;
    public static final int PATTERN_NOT_EXPR=107;
    public static final int SQL_NE=244;
    public static final int SUM=18;
    public static final int HexDigit=292;
    public static final int UPDATE_EXPR=219;
    public static final int LPAREN=233;
    public static final int IN_SUBSELECT_EXPR=189;
    public static final int AT=81;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=94;
    public static final int THEN=32;
    public static final int NOT_IN_RANGE=185;
    public static final int OFFSET=98;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int PREVIOUS=68;
    public static final int SECOND_PART=173;
    public static final int IDENT=230;
    public static final int DATABASE_JOIN_EXPR=128;
    public static final int PLUS=251;
    public static final int BXOR=243;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=82;
    public static final int EXISTS=70;
    public static final int EVENT_PROP_INDEXED=154;
    public static final int TIMEPERIOD_MILLISECOND=92;
    public static final int EVAL_NOTEQUALS_EXPR=135;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=210;
    public static final int CREATE_VARIABLE_EXPR=206;
    public static final int CREATE_WINDOW_COL_TYPE=214;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=105;
    public static final int RIGHT_OUTERJOIN_EXPR=146;
    public static final int NUMBERSETSTAR=215;
    public static final int LAST_OPERATOR=192;
    public static final int PATTERN_FILTER_EXPR=106;
    public static final int EVAL_AND_EXPR=132;
    public static final int LEFT_OUTERJOIN_EXPR=145;
    public static final int EPL_EXPR=228;
    public static final int GROUP_BY_EXPR=148;
    public static final int SET=78;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=73;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=152;
    public static final int MINUS=252;
    public static final int SEMI=284;
    public static final int STAR_ASSIGN=272;
    public static final int COLON=238;
    public static final int EVAL_EQUALS_GROUP_EXPR=136;
    public static final int BAND_ASSIGN=282;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=161;
    public static final int VALUE_NULL=96;
    public static final int NOT_IN_SET=175;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=155;
    public static final int SL=278;
    public static final int NOT_IN_SUBSELECT_EXPR=190;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=124;
    public static final int SR=274;
    public static final int RCURLY=256;
    public static final int PLUS_ASSIGN=268;
    public static final int EXISTS_SUBSELECT_EXPR=188;
    public static final int DAY_PART=170;
    public static final int EVENT_FILTER_IN=119;
    public static final int DIV=253;
    public static final int OBJECT_PARAM_ORDERED_EXPR=103;
    public static final int OctalEscape=291;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=174;
    public static final int PRIOR=69;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=97;
    public static final int SELECTION_EXPR=139;
    public static final int LOR=250;
    public static final int CAST=74;
    public static final int LW=72;
    public static final int WILDCARD_SELECT=182;
    public static final int EXPONENT=293;
    public static final int LT=246;
    public static final int PATTERN_INCL_EXPR=127;
    public static final int ORDER_BY_EXPR=149;
    public static final int BOOL_TYPE=225;
    public static final int MOD_ASSIGN=273;
    public static final int ANNOTATION_ARRAY=217;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=191;
    public static final int EQUALS=231;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=64;
    public static final int DIV_ASSIGN=267;
    public static final int SL_ASSIGN=279;
    public static final int PATTERN=65;
    public static final int SQL=66;
    public static final int WEEKDAY=71;
    public static final int FULL=40;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=169;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=95;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=137;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=222;
    public static final int TIMEPERIOD_SECOND=89;
    public static final int COALESCE=22;
    public static final int EVENT_FILTER_BETWEEN=121;
    public static final int ANNOTATION_VALUE=218;
    public static final int SUBSELECT_EXPR=186;
    public static final int NUMERIC_PARAM_RANGE=100;
    public static final int CONCAT=165;
    public static final int CLASS_IDENT=123;
    public static final int ON_EXPR=198;
    public static final int CREATE_WINDOW_EXPR=196;
    public static final int PROPERTY_SELECTION_STREAM=113;
    public static final int ON_DELETE_EXPR=199;
    public static final int NUM_LONG=262;
    public static final int ON=41;
    public static final int TIME_PERIOD=168;
    public static final int DOUBLE_TYPE=223;
    public static final int DELETE=76;
    public static final int INT_TYPE=220;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=131;
    public static final int ORDER_ELEMENT_EXPR=150;
    public static final int TIMEPERIOD_HOURS=85;
    public static final int VARIABLE=79;
    public static final int SUBSTITUTION=194;
    public static final int UNTIL=80;
    public static final int STRING_TYPE=224;
    public static final int NUM_INT=257;
    public static final int ON_SET_EXPR=204;
    public static final int STDDEV=24;
    public static final int NUM_FLOAT=263;
    public static final int ON_EXPR_FROM=203;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=289;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=112;
    public static final int WEEKDAY_OPERATOR=193;
    public static final int DEC=271;
    public static final int CREATE_WINDOW_COL_TYPE_LIST=213;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=280;
    public static final int NUMERIC_PARAM_FREQUENCY=102;
    public static final int SNAPSHOT=77;
    public static final int ORDER=56;
    public static final int EVENT_FILTER_PARAM=116;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=157;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=99;
    public static final int TIMEPERIOD_DAYS=83;
    public static final int EVENT_FILTER_RANGE=117;
    public static final int ML_COMMENT=288;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=156;
    public static final int BOR_ASSIGN=281;
    public static final int COMMA=229;
    public static final int IS=42;
    public static final int WHEN_LIMIT_EXPR=162;
    public static final int TIMEPERIOD_LIMIT_EXPR=159;
    public static final int SOME=49;
    public static final int EQUAL=264;
    public static final int BOR=242;
    public static final int TIMEPERIOD_HOUR=84;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=122;
    public static final int IN_RANGE=184;
    public static final int DOT=232;
    public static final int CURRENT_TIMESTAMP=75;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=114;
    public static final int INSERTINTO_EXPR=163;
    public static final int UNIDIRECTIONAL=62;
    public static final int HAVING_EXPR=130;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=212;
    public static final int EVAL_EQUALS_EXPR=134;
    public static final int TIMEPERIOD_MINUTES=87;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=177;
    public static final int EVENT_LIMIT_EXPR=158;
    public static final int TIMEPERIOD_MINUTE=86;
    public static final int NOT_BETWEEN=176;
    public static final int EVAL_OR_EXPR=133;
    public static final int ON_SELECT_INSERT_OUTPUT=202;
    public static final int BAND=241;
    public static final int QUOTED_STRING_LITERAL=240;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=259;
    public static final int OBSERVER_EXPR=125;
    public static final int EVENT_FILTER_IDENT=115;
    public static final int EVENT_PROP_MAPPED=153;
    public static final int UnicodeEscape=290;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=179;
    public static final int SELECTION_ELEMENT_EXPR=140;
    public static final int CREATE_WINDOW_SELECT_EXPR=197;
    public static final int WINDOW=5;
    public static final int INSERTINTO_EXPRCOL=164;
    public static final int ON_SET_EXPR_ITEM=205;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=141;
    public static final int SR_ASSIGN=275;
    public static final int LE=248;
    public static final int DBFROM_CLAUSE=180;
    public static final int EVAL_IDENT=138;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:481:1: startPatternExpressionRule : ( annotationNoEnum )* patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:482:2: ( ( annotationNoEnum )* patternExpression EOF )
            // EsperEPL2Grammar.g:482:4: ( annotationNoEnum )* patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:482:4: ( annotationNoEnum )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // EsperEPL2Grammar.g:482:4: annotationNoEnum
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1408);
            	    annotationNoEnum1=annotationNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1413);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1417); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:487:1: startEPLExpressionRule : ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:488:2: ( ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) )
            // EsperEPL2Grammar.g:488:4: ( annotationEnum )* eplExpression EOF
            {
            // EsperEPL2Grammar.g:488:4: ( annotationEnum )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // EsperEPL2Grammar.g:488:4: annotationEnum
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1431);
            	    annotationEnum4=annotationEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1437);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: eplExpression, annotationEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 491:3: -> ^( EPL_EXPR ( annotationEnum )* eplExpression )
            {
                // EsperEPL2Grammar.g:491:6: ^( EPL_EXPR ( annotationEnum )* eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                // EsperEPL2Grammar.g:491:17: ( annotationEnum )*
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());

                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:494:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:495:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:495:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1467);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1471); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationNoEnum"
    // EsperEPL2Grammar.g:502:1: annotationNoEnum : '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;

        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;


        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:503:5: ( '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) )
            // EsperEPL2Grammar.g:503:9: '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);

            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1493);
            classIdentifier10=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            // EsperEPL2Grammar.g:503:29: ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==IDENT) ) {
                    int LA4_13 = input.LA(3);

                    if ( (LA4_13==EQUALS) ) {
                        int LA4_31 = input.LA(4);

                        if ( ((LA4_31>=BOOLEAN_TRUE && LA4_31<=VALUE_NULL)||LA4_31==NUM_DOUBLE||(LA4_31>=STRING_LITERAL && LA4_31<=QUOTED_STRING_LITERAL)||(LA4_31>=PLUS && LA4_31<=MINUS)||LA4_31==LCURLY||LA4_31==NUM_INT||(LA4_31>=NUM_LONG && LA4_31<=NUM_FLOAT)||LA4_31==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||(LA4_1>=PLUS && LA4_1<=MINUS)||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:503:31: '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')'
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1497); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);

                    // EsperEPL2Grammar.g:503:35: ( elementValuePairsNoEnum | elementValueNoEnum )?
                    int alt3=3;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||(LA3_0>=PLUS && LA3_0<=MINUS)||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            // EsperEPL2Grammar.g:503:37: elementValuePairsNoEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1501);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:503:63: elementValueNoEnum
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1505);
                            elementValueNoEnum13=elementValueNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());

                            }
                            break;

                    }

                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1510); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, elementValuePairsNoEnum, elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 504:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
            {
                // EsperEPL2Grammar.g:504:5: ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:504:34: ( elementValuePairsNoEnum )?
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());

                }
                stream_elementValuePairsNoEnum.reset();
                // EsperEPL2Grammar.g:504:59: ( elementValueNoEnum )?
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationNoEnum"

    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationEnum"
    // EsperEPL2Grammar.g:507:1: annotationEnum : '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;

        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;


        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:508:5: ( '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) )
            // EsperEPL2Grammar.g:508:9: '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);

            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1553);
            classIdentifier16=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            // EsperEPL2Grammar.g:508:29: ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:508:31: '(' ( elementValuePairsEnum | elementValueEnum )? ')'
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);

                    // EsperEPL2Grammar.g:508:35: ( elementValuePairsEnum | elementValueEnum )?
                    int alt5=3;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);

                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==DOT||LA5_1==RPAREN) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||(LA5_0>=PLUS && LA5_0<=MINUS)||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            // EsperEPL2Grammar.g:508:37: elementValuePairsEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1561);
                            elementValuePairsEnum18=elementValuePairsEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:508:61: elementValueEnum
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1565);
                            elementValueEnum19=elementValueEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());

                            }
                            break;

                    }

                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1570); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValueEnum, elementValuePairsEnum, classIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 509:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
            {
                // EsperEPL2Grammar.g:509:5: ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:509:34: ( elementValuePairsEnum )?
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());

                }
                stream_elementValuePairsEnum.reset();
                // EsperEPL2Grammar.g:509:57: ( elementValueEnum )?
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationEnum"

    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsNoEnum"
    // EsperEPL2Grammar.g:512:1: elementValuePairsNoEnum : elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;

        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;


        CommonTree COMMA22_tree=null;

        try {
            // EsperEPL2Grammar.g:513:5: ( elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* )
            // EsperEPL2Grammar.g:513:9: elementValuePairNoEnum ( COMMA elementValuePairNoEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1611);
            elementValuePairNoEnum21=elementValuePairNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            // EsperEPL2Grammar.g:513:32: ( COMMA elementValuePairNoEnum )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // EsperEPL2Grammar.g:513:33: COMMA elementValuePairNoEnum
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1614); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1617);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsNoEnum"

    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsEnum"
    // EsperEPL2Grammar.g:516:1: elementValuePairsEnum : elementValuePairEnum ( COMMA elementValuePairEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;

        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;


        CommonTree COMMA25_tree=null;

        try {
            // EsperEPL2Grammar.g:517:5: ( elementValuePairEnum ( COMMA elementValuePairEnum )* )
            // EsperEPL2Grammar.g:517:9: elementValuePairEnum ( COMMA elementValuePairEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1638);
            elementValuePairEnum24=elementValuePairEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            // EsperEPL2Grammar.g:517:30: ( COMMA elementValuePairEnum )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // EsperEPL2Grammar.g:517:31: COMMA elementValuePairEnum
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1641); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1644);
            	    elementValuePairEnum26=elementValuePairEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsEnum"

    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairNoEnum"
    // EsperEPL2Grammar.g:520:1: elementValuePairNoEnum : i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;


        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:521:5: (i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) )
            // EsperEPL2Grammar.g:521:9: i= IDENT '=' elementValueNoEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1667); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);

            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1671);
            elementValueNoEnum28=elementValueNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());


            // AST REWRITE
            // elements: i, elementValueNoEnum
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 522:2: -> ^( ANNOTATION_VALUE $i elementValueNoEnum )
            {
                // EsperEPL2Grammar.g:522:5: ^( ANNOTATION_VALUE $i elementValueNoEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairNoEnum"

    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairEnum"
    // EsperEPL2Grammar.g:525:1: elementValuePairEnum : i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;


        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:526:5: (i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) )
            // EsperEPL2Grammar.g:526:9: i= IDENT '=' elementValueEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1710); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);

            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1712);
            elementValueEnum30=elementValueEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());


            // AST REWRITE
            // elements: i, elementValueEnum
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 527:2: -> ^( ANNOTATION_VALUE $i elementValueEnum )
            {
                // EsperEPL2Grammar.g:527:5: ^( ANNOTATION_VALUE $i elementValueEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairEnum"

    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueNoEnum"
    // EsperEPL2Grammar.g:530:1: elementValueNoEnum : ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant );
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;

        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;

        EsperEPL2GrammarParser.constant_return constant33 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            // EsperEPL2Grammar.g:531:5: ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant )
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:531:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1743);
                    annotationEnum31=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:532:9: ( elementValueArrayNoEnum )
                    {
                    // EsperEPL2Grammar.g:532:9: ( elementValueArrayNoEnum )
                    // EsperEPL2Grammar.g:532:10: elementValueArrayNoEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1754);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayNoEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 532:35: -> elementValueArrayNoEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:533:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueNoEnum1767);
                    constant33=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueNoEnum"

    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueEnum"
    // EsperEPL2Grammar.g:536:1: elementValueEnum : ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier );
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;

        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;

        EsperEPL2GrammarParser.constant_return constant36 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            // EsperEPL2Grammar.g:537:5: ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier )
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // EsperEPL2Grammar.g:537:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum1790);
                    annotationEnum34=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:538:9: ( elementValueArrayEnum )
                    {
                    // EsperEPL2Grammar.g:538:9: ( elementValueArrayEnum )
                    // EsperEPL2Grammar.g:538:10: elementValueArrayEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum1801);
                    elementValueArrayEnum35=elementValueArrayEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 538:33: -> elementValueArrayEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:539:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueEnum1814);
                    constant36=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:540:7: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum1822);
                    classIdentifier37=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueEnum"

    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayNoEnum"
    // EsperEPL2Grammar.g:543:1: elementValueArrayNoEnum : '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;


        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:544:5: ( '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) )
            // EsperEPL2Grammar.g:544:9: '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}'
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum1842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);

            // EsperEPL2Grammar.g:544:13: ( elementValueNoEnum ( ',' elementValueNoEnum )* )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||(LA12_0>=PLUS && LA12_0<=MINUS)||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:544:14: elementValueNoEnum ( ',' elementValueNoEnum )*
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1845);
                    elementValueNoEnum39=elementValueNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    // EsperEPL2Grammar.g:544:33: ( ',' elementValueNoEnum )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||(LA11_1>=PLUS && LA11_1<=MINUS)||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:544:34: ',' elementValueNoEnum
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum1848); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);

                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1850);
                    	    elementValueNoEnum41=elementValueNoEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:544:61: ( ',' )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // EsperEPL2Grammar.g:544:62: ','
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum1857); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);


                    }
                    break;

            }

            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum1861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);



            // AST REWRITE
            // elements: elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 545:2: -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
            {
                // EsperEPL2Grammar.g:545:5: ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:545:24: ( elementValueNoEnum )*
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayNoEnum"

    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayEnum"
    // EsperEPL2Grammar.g:548:1: elementValueArrayEnum : '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;


        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:549:5: ( '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) )
            // EsperEPL2Grammar.g:549:9: '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}'
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum1890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);

            // EsperEPL2Grammar.g:549:13: ( elementValueEnum ( ',' elementValueEnum )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||(LA15_0>=PLUS && LA15_0<=MINUS)||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:549:14: elementValueEnum ( ',' elementValueEnum )*
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum1893);
                    elementValueEnum45=elementValueEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    // EsperEPL2Grammar.g:549:31: ( ',' elementValueEnum )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||(LA14_1>=PLUS && LA14_1<=MINUS)||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }


                        }


                        switch (alt14) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:549:32: ',' elementValueEnum
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum1896); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);

                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum1898);
                    	    elementValueEnum47=elementValueEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:549:57: ( ',' )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:549:58: ','
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum1905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);


                    }
                    break;

            }

            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum1909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);



            // AST REWRITE
            // elements: elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 550:2: -> ^( ANNOTATION_ARRAY ( elementValueEnum )* )
            {
                // EsperEPL2Grammar.g:550:5: ^( ANNOTATION_ARRAY ( elementValueEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:550:24: ( elementValueEnum )*
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayEnum"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:556:1: eplExpression : ( selectExpr | createWindowExpr | createVariableExpr | onExpr | updateExpr );
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr52 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr53 = null;

        EsperEPL2GrammarParser.updateExpr_return updateExpr54 = null;



        try {
            // EsperEPL2Grammar.g:557:2: ( selectExpr | createWindowExpr | createVariableExpr | onExpr | updateExpr )
            int alt17=5;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                int LA17_3 = input.LA(2);

                if ( (LA17_3==WINDOW) ) {
                    alt17=2;
                }
                else if ( (LA17_3==VARIABLE) ) {
                    alt17=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);

                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt17=4;
                }
                break;
            case UPDATE:
                {
                alt17=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:557:4: selectExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectExpr_in_eplExpression1941);
                    selectExpr50=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:558:4: createWindowExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression1946);
                    createWindowExpr51=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:559:4: createVariableExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression1951);
                    createVariableExpr52=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr52.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:560:4: onExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_onExpr_in_eplExpression1956);
                    onExpr53=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr53.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:561:4: updateExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_updateExpr_in_eplExpression1961);
                    updateExpr54=updateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr54.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:564:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT55=null;
        Token SELECT57=null;
        Token FROM59=null;
        Token WHERE61=null;
        Token GROUP63=null;
        Token BY64=null;
        Token HAVING66=null;
        Token OUTPUT68=null;
        Token ORDER70=null;
        Token BY71=null;
        Token ROW_LIMIT_EXPR73=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr56 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause58 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause60 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause62 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr65 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause67 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit69 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr72 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit74 = null;


        CommonTree INSERT55_tree=null;
        CommonTree SELECT57_tree=null;
        CommonTree FROM59_tree=null;
        CommonTree WHERE61_tree=null;
        CommonTree GROUP63_tree=null;
        CommonTree BY64_tree=null;
        CommonTree HAVING66_tree=null;
        CommonTree OUTPUT68_tree=null;
        CommonTree ORDER70_tree=null;
        CommonTree BY71_tree=null;
        CommonTree ROW_LIMIT_EXPR73_tree=null;

        try {
            // EsperEPL2Grammar.g:565:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:565:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:565:4: ( INSERT insertIntoExpr )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==INSERT) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:565:5: INSERT insertIntoExpr
                    {
                    INSERT55=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr1974); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr1977);
                    insertIntoExpr56=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr56.getTree());

                    }
                    break;

            }

            SELECT57=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr1983); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr1986);
            selectClause58=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause58.getTree());
            FROM59=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr1990); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr1993);
            fromClause60=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause60.getTree());
            // EsperEPL2Grammar.g:568:3: ( WHERE whereClause )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==WHERE) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:568:4: WHERE whereClause
                    {
                    WHERE61=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr1998); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2001);
                    whereClause62=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause62.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:569:3: ( GROUP BY groupByListExpr )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==GROUP) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:569:4: GROUP BY groupByListExpr
                    {
                    GROUP63=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2008); if (state.failed) return retval;
                    BY64=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2011); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2014);
                    groupByListExpr65=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr65.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:570:3: ( HAVING havingClause )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==HAVING) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:570:4: HAVING havingClause
                    {
                    HAVING66=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2021); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2024);
                    havingClause67=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause67.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:571:3: ( OUTPUT outputLimit )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==OUTPUT) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:571:4: OUTPUT outputLimit
                    {
                    OUTPUT68=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2031); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2034);
                    outputLimit69=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit69.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:572:3: ( ORDER BY orderByListExpr )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==ORDER) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:572:4: ORDER BY orderByListExpr
                    {
                    ORDER70=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2041); if (state.failed) return retval;
                    BY71=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2044); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2047);
                    orderByListExpr72=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr72.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:573:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ROW_LIMIT_EXPR) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:573:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR73=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2054); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2057);
                    rowLimit74=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit74.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:576:1: onExpr : ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ON75=null;
        Token AS78=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression76 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression77 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr79 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr80 = null;

        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr81 = null;

        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert82 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr83 = null;


        CommonTree i_tree=null;
        CommonTree ON75_tree=null;
        CommonTree AS78_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:577:2: ( ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:577:4: ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr )
            {
            ON75=(Token)match(input,ON,FOLLOW_ON_in_onExpr2072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON75);

            // EsperEPL2Grammar.g:577:7: ( eventFilterExpression | patternInclusionExpression )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==IDENT||LA25_0==TICKED_STRING_LITERAL) ) {
                alt25=1;
            }
            else if ( (LA25_0==PATTERN) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:577:8: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onExpr2075);
                    eventFilterExpression76=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression76.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:577:32: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onExpr2079);
                    patternInclusionExpression77=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression77.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:577:60: ( AS i= IDENT | i= IDENT )?
            int alt26=3;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==AS) ) {
                alt26=1;
            }
            else if ( (LA26_0==IDENT) ) {
                alt26=2;
            }
            switch (alt26) {
                case 1 :
                    // EsperEPL2Grammar.g:577:61: AS i= IDENT
                    {
                    AS78=(Token)match(input,AS,FOLLOW_AS_in_onExpr2083); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS78);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2087); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:577:74: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2093); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:578:3: ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr )
            int alt30=3;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt30=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt30=2;
                }
                break;
            case SET:
                {
                alt30=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }

            switch (alt30) {
                case 1 :
                    // EsperEPL2Grammar.g:578:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2101);
                    onDeleteExpr79=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr79.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:578:19: onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2105);
                    onSelectExpr80=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr80.getTree());
                    // EsperEPL2Grammar.g:578:32: ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==INSERT) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // EsperEPL2Grammar.g:578:33: ( onSelectInsertExpr )+ ( outputClauseInsert )?
                            {
                            // EsperEPL2Grammar.g:578:33: ( onSelectInsertExpr )+
                            int cnt27=0;
                            loop27:
                            do {
                                int alt27=2;
                                int LA27_0 = input.LA(1);

                                if ( (LA27_0==INSERT) ) {
                                    alt27=1;
                                }


                                switch (alt27) {
                            	case 1 :
                            	    // EsperEPL2Grammar.g:578:33: onSelectInsertExpr
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2108);
                            	    onSelectInsertExpr81=onSelectInsertExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr81.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt27 >= 1 ) break loop27;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(27, input);
                                        throw eee;
                                }
                                cnt27++;
                            } while (true);

                            // EsperEPL2Grammar.g:578:53: ( outputClauseInsert )?
                            int alt28=2;
                            int LA28_0 = input.LA(1);

                            if ( (LA28_0==OUTPUT) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    // EsperEPL2Grammar.g:578:53: outputClauseInsert
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2111);
                                    outputClauseInsert82=outputClauseInsert();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert82.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:578:77: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2118);
                    onSetExpr83=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr83.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, onSetExpr, onSelectExpr, eventFilterExpression, onSelectInsertExpr, onDeleteExpr, patternInclusionExpression, outputClauseInsert
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 579:3: -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:579:6: ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                // EsperEPL2Grammar.g:579:16: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:579:39: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:579:67: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:579:71: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:579:85: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:579:99: ( onSelectInsertExpr )*
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());

                }
                stream_onSelectInsertExpr.reset();
                // EsperEPL2Grammar.g:579:119: ( outputClauseInsert )?
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());

                }
                stream_outputClauseInsert.reset();
                // EsperEPL2Grammar.g:579:139: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updateExpr"
    // EsperEPL2Grammar.g:582:1: updateExpr : UPDATE classIdentifier SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token UPDATE84=null;
        Token SET86=null;
        Token COMMA88=null;
        Token WHERE90=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier85 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment87 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment89 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause91 = null;


        CommonTree UPDATE84_tree=null;
        CommonTree SET86_tree=null;
        CommonTree COMMA88_tree=null;
        CommonTree WHERE90_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:583:2: ( UPDATE classIdentifier SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:583:4: UPDATE classIdentifier SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE84=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE84);

            pushFollow(FOLLOW_classIdentifier_in_updateExpr2167);
            classIdentifier85=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier85.getTree());
            SET86=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET86);

            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2173);
            onSetAssignment87=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment87.getTree());
            // EsperEPL2Grammar.g:584:23: ( COMMA onSetAssignment )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==COMMA) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // EsperEPL2Grammar.g:584:24: COMMA onSetAssignment
            	    {
            	    COMMA88=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2176); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA88);

            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2178);
            	    onSetAssignment89=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment89.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);

            // EsperEPL2Grammar.g:585:3: ( WHERE whereClause )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==WHERE) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:585:4: WHERE whereClause
                    {
                    WHERE90=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2186); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE90);

                    pushFollow(FOLLOW_whereClause_in_updateExpr2188);
                    whereClause91=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause91.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onSetAssignment, classIdentifier, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 586:3: -> ^( UPDATE_EXPR classIdentifier ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:586:6: ^( UPDATE_EXPR classIdentifier ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:586:53: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "updateExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:589:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT92=null;
        Token SELECT94=null;
        Token WHERE97=null;
        Token GROUP99=null;
        Token BY100=null;
        Token HAVING102=null;
        Token ORDER104=null;
        Token BY105=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr93 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList95 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom96 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause98 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr101 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause103 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr106 = null;


        CommonTree INSERT92_tree=null;
        CommonTree SELECT94_tree=null;
        CommonTree WHERE97_tree=null;
        CommonTree GROUP99_tree=null;
        CommonTree BY100_tree=null;
        CommonTree HAVING102_tree=null;
        CommonTree ORDER104_tree=null;
        CommonTree BY105_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:592:2: ( ( INSERT insertIntoExpr )? SELECT selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) )
            // EsperEPL2Grammar.g:592:4: ( INSERT insertIntoExpr )? SELECT selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )?
            {
            // EsperEPL2Grammar.g:592:4: ( INSERT insertIntoExpr )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==INSERT) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // EsperEPL2Grammar.g:592:5: INSERT insertIntoExpr
                    {
                    INSERT92=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT92);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2235);
                    insertIntoExpr93=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr93.getTree());

                    }
                    break;

            }

            SELECT94=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT94);

            pushFollow(FOLLOW_selectionList_in_onSelectExpr2243);
            selectionList95=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList95.getTree());
            // EsperEPL2Grammar.g:594:3: ( onExprFrom )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==FROM) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // EsperEPL2Grammar.g:594:3: onExprFrom
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2247);
                    onExprFrom96=onExprFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom96.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:595:3: ( WHERE whereClause )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==WHERE) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // EsperEPL2Grammar.g:595:4: WHERE whereClause
                    {
                    WHERE97=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2253); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE97);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2255);
                    whereClause98=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause98.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:596:3: ( GROUP BY groupByListExpr )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==GROUP) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:596:4: GROUP BY groupByListExpr
                    {
                    GROUP99=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2264); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP99);

                    BY100=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2266); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY100);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2268);
                    groupByListExpr101=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr101.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:597:3: ( HAVING havingClause )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==HAVING) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:597:4: HAVING havingClause
                    {
                    HAVING102=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING102);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2277);
                    havingClause103=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause103.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:598:3: ( ORDER BY orderByListExpr )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==ORDER) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:598:4: ORDER BY orderByListExpr
                    {
                    ORDER104=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2284); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER104);

                    BY105=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY105);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2288);
                    orderByListExpr106=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr106.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onExprFrom, groupByListExpr, selectionList, orderByListExpr, whereClause, insertIntoExpr, havingClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 599:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
            {
                // EsperEPL2Grammar.g:599:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:599:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:599:53: ( onExprFrom )?
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());

                }
                stream_onExprFrom.reset();
                // EsperEPL2Grammar.g:599:65: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:599:78: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:599:95: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:599:109: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectInsertExpr"
    // EsperEPL2Grammar.g:602:1: onSelectInsertExpr : INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT107=null;
        Token SELECT109=null;
        Token WHERE111=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr108 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList110 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause112 = null;


        CommonTree INSERT107_tree=null;
        CommonTree SELECT109_tree=null;
        CommonTree WHERE111_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            // EsperEPL2Grammar.g:605:2: ( INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) )
            // EsperEPL2Grammar.g:605:4: INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )?
            {
            INSERT107=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT107);

            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2343);
            insertIntoExpr108=insertIntoExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr108.getTree());
            SELECT109=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr2347); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT109);

            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr2349);
            selectionList110=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList110.getTree());
            // EsperEPL2Grammar.g:607:3: ( WHERE whereClause )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==WHERE) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // EsperEPL2Grammar.g:607:4: WHERE whereClause
                    {
                    WHERE111=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr2354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE111);

                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr2356);
                    whereClause112=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause112.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: insertIntoExpr, whereClause, selectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 608:3: -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
            {
                // EsperEPL2Grammar.g:608:6: ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:608:59: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectInsertExpr"

    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputClauseInsert"
    // EsperEPL2Grammar.g:611:1: outputClauseInsert : OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) ;
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        Token a=null;
        Token OUTPUT113=null;

        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT113_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

        try {
            // EsperEPL2Grammar.g:612:2: ( OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) )
            // EsperEPL2Grammar.g:612:4: OUTPUT (f= FIRST | a= ALL )
            {
            OUTPUT113=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert2387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT113);

            // EsperEPL2Grammar.g:612:11: (f= FIRST | a= ALL )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==FIRST) ) {
                alt40=1;
            }
            else if ( (LA40_0==ALL) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // EsperEPL2Grammar.g:612:12: f= FIRST
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert2392); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:612:22: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert2398); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;

            }



            // AST REWRITE
            // elements: f, a
            // token labels: f, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 613:3: -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
            {
                // EsperEPL2Grammar.g:613:6: ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);

                // EsperEPL2Grammar.g:613:32: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());

                }
                stream_f.reset();
                // EsperEPL2Grammar.g:613:36: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputClauseInsert"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:616:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE114=null;
        Token WHERE116=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom115 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause117 = null;


        CommonTree DELETE114_tree=null;
        CommonTree WHERE116_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:619:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:619:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE114=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2440); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE114);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2444);
            onExprFrom115=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom115.getTree());
            // EsperEPL2Grammar.g:621:3: ( WHERE whereClause )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==WHERE) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // EsperEPL2Grammar.g:621:4: WHERE whereClause
                    {
                    WHERE116=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE116);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2451);
                    whereClause117=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause117.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, onExprFrom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 622:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:622:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:622:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:625:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET118=null;
        Token COMMA120=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment119 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment121 = null;


        CommonTree SET118_tree=null;
        CommonTree COMMA120_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:628:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:628:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET118=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET118);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2493);
            onSetAssignment119=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment119.getTree());
            // EsperEPL2Grammar.g:628:24: ( COMMA onSetAssignment )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==COMMA) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // EsperEPL2Grammar.g:628:25: COMMA onSetAssignment
            	    {
            	    COMMA120=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2496); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA120);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2498);
            	    onSetAssignment121=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment121.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 629:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:629:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:632:1: onSetAssignment : i= IDENT EQUALS expression -> ^( ON_SET_EXPR_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS122=null;
        EsperEPL2GrammarParser.expression_return expression123 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS122_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:633:2: (i= IDENT EQUALS expression -> ^( ON_SET_EXPR_ITEM $i expression ) )
            // EsperEPL2Grammar.g:633:4: i= IDENT EQUALS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onSetAssignment2525); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            EQUALS122=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS122);

            pushFollow(FOLLOW_expression_in_onSetAssignment2529);
            expression123=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression123.getTree());


            // AST REWRITE
            // elements: i, expression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 634:3: -> ^( ON_SET_EXPR_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:634:6: ^( ON_SET_EXPR_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:637:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM124=null;
        Token AS125=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM124_tree=null;
        CommonTree AS125_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:638:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:638:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM124=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2555); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM124);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:638:17: ( AS i= IDENT | i= IDENT )?
            int alt43=3;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==AS) ) {
                alt43=1;
            }
            else if ( (LA43_0==IDENT) ) {
                alt43=2;
            }
            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:638:18: AS i= IDENT
                    {
                    AS125=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS125);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2566); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:638:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2572); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: n, i
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 639:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:639:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:639:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:642:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE126=null;
        Token WINDOW127=null;
        Token DOT128=null;
        Token DOT130=null;
        Token AS132=null;
        Token LPAREN134=null;
        Token RPAREN136=null;
        Token WHERE137=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression129 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression131 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter133 = null;

        EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList135 = null;

        EsperEPL2GrammarParser.expression_return expression138 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE126_tree=null;
        CommonTree WINDOW127_tree=null;
        CommonTree DOT128_tree=null;
        CommonTree DOT130_tree=null;
        CommonTree AS132_tree=null;
        CommonTree LPAREN134_tree=null;
        CommonTree RPAREN136_tree=null;
        CommonTree WHERE137_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_createWindowColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnList");
        try {
            // EsperEPL2Grammar.g:643:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) )
            // EsperEPL2Grammar.g:643:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE126=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2600); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE126);

            WINDOW127=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2602); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW127);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr2606); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:643:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==DOT) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // EsperEPL2Grammar.g:643:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT128=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT128);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2611);
                    viewExpression129=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression129.getTree());
                    // EsperEPL2Grammar.g:643:46: ( DOT viewExpression )*
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==DOT) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:643:47: DOT viewExpression
                    	    {
                    	    DOT130=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2614); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT130);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2616);
                    	    viewExpression131=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression131.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop44;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:643:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt46=3;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==RETAINUNION) ) {
                alt46=1;
            }
            else if ( (LA46_0==RETAININTERSECTION) ) {
                alt46=2;
            }
            switch (alt46) {
                case 1 :
                    // EsperEPL2Grammar.g:643:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr2625); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:643:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr2629); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:643:110: ( AS )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==AS) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // EsperEPL2Grammar.g:643:110: AS
                    {
                    AS132=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr2633); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS132);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:644:5: ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==SELECT||LA48_0==IDENT||LA48_0==TICKED_STRING_LITERAL) ) {
                alt48=1;
            }
            else if ( (LA48_0==LPAREN) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // EsperEPL2Grammar.g:645:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr2648);
                    createWindowExprModelAfter133=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter133.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:646:10: LPAREN createWindowColumnList RPAREN
                    {
                    LPAREN134=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr2663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN134);

                    pushFollow(FOLLOW_createWindowColumnList_in_createWindowExpr2665);
                    createWindowColumnList135=createWindowColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowColumnList.add(createWindowColumnList135.getTree());
                    RPAREN136=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr2667); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN136);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:648:5: (i1= INSERT ( WHERE expression )? )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==INSERT) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // EsperEPL2Grammar.g:648:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr2684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:648:16: ( WHERE expression )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==WHERE) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // EsperEPL2Grammar.g:648:17: WHERE expression
                            {
                            WHERE137=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr2687); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE137);

                            pushFollow(FOLLOW_expression_in_createWindowExpr2689);
                            expression138=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression138.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: viewExpression, expression, i, ru, ri, createWindowColumnList, viewExpression, ri, createWindowColumnList, i, ru, INSERT, createWindowExprModelAfter, createWindowExprModelAfter
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 649:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:649:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:649:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:649:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:649:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:649:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:649:98: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();
                // EsperEPL2Grammar.g:650:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:650:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 651:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
            {
                // EsperEPL2Grammar.g:651:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:651:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:651:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:651:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:651:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:651:84: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:654:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT139=null;
        Token FROM141=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList140 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier142 = null;


        CommonTree SELECT139_tree=null;
        CommonTree FROM141_tree=null;

        try {
            // EsperEPL2Grammar.g:655:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:655:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:655:4: ( SELECT createSelectionList FROM )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==SELECT) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // EsperEPL2Grammar.g:655:5: SELECT createSelectionList FROM
                    {
                    SELECT139=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter2776); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter2779);
                    createSelectionList140=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList140.getTree());
                    FROM141=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter2781); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter2786);
            classIdentifier142=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier142.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:658:1: createVariableExpr : CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token n=null;
        Token CREATE143=null;
        Token VARIABLE144=null;
        Token EQUALS145=null;
        EsperEPL2GrammarParser.expression_return expression146 = null;


        CommonTree t_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE143_tree=null;
        CommonTree VARIABLE144_tree=null;
        CommonTree EQUALS145_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:659:2: ( CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) )
            // EsperEPL2Grammar.g:659:4: CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )?
            {
            CREATE143=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr2799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE143);

            VARIABLE144=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr2801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE144);

            t=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(t);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:659:36: ( EQUALS expression )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==EQUALS) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // EsperEPL2Grammar.g:659:37: EQUALS expression
                    {
                    EQUALS145=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr2812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS145);

                    pushFollow(FOLLOW_expression_in_createVariableExpr2814);
                    expression146=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression146.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: n, expression, t
            // token labels: t, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 660:3: -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
            {
                // EsperEPL2Grammar.g:660:6: ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:660:35: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createWindowColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnList"
    // EsperEPL2Grammar.g:663:1: createWindowColumnList : createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnList_return retval = new EsperEPL2GrammarParser.createWindowColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA148=null;
        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement147 = null;

        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement149 = null;


        CommonTree COMMA148_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createWindowColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnListElement");
         paraphrases.push("create window column list"); 
        try {
            // EsperEPL2Grammar.g:666:2: ( createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) )
            // EsperEPL2Grammar.g:666:4: createWindowColumnListElement ( COMMA createWindowColumnListElement )*
            {
            pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList2857);
            createWindowColumnListElement147=createWindowColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement147.getTree());
            // EsperEPL2Grammar.g:666:34: ( COMMA createWindowColumnListElement )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==COMMA) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // EsperEPL2Grammar.g:666:35: COMMA createWindowColumnListElement
            	    {
            	    COMMA148=(Token)match(input,COMMA,FOLLOW_COMMA_in_createWindowColumnList2860); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA148);

            	    pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList2862);
            	    createWindowColumnListElement149=createWindowColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement149.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);



            // AST REWRITE
            // elements: createWindowColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 667:3: -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:667:6: ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE_LIST, "CREATE_WINDOW_COL_TYPE_LIST"), root_1);

                if ( !(stream_createWindowColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createWindowColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnListElement.nextTree());

                }
                stream_createWindowColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnList"

    public static class createWindowColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnListElement"
    // EsperEPL2Grammar.g:670:1: createWindowColumnListElement : name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) ;
    public final EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnListElement_return retval = new EsperEPL2GrammarParser.createWindowColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token type=null;

        CommonTree name_tree=null;
        CommonTree type_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            // EsperEPL2Grammar.g:671:2: (name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) )
            // EsperEPL2Grammar.g:671:7: name= IDENT type= IDENT
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement2892); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            type=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement2896); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(type);



            // AST REWRITE
            // elements: type, name
            // token labels: name, type
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_type=new RewriteRuleTokenStream(adaptor,"token type",type);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 672:3: -> ^( CREATE_WINDOW_COL_TYPE $name $type)
            {
                // EsperEPL2Grammar.g:672:6: ^( CREATE_WINDOW_COL_TYPE $name $type)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE, "CREATE_WINDOW_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_type.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:675:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA151=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement150 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement152 = null;


        CommonTree COMMA151_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:678:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:678:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2934);
            createSelectionListElement150=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement150.getTree());
            // EsperEPL2Grammar.g:678:31: ( COMMA createSelectionListElement )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==COMMA) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // EsperEPL2Grammar.g:678:32: COMMA createSelectionListElement
            	    {
            	    COMMA151=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList2937); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA151);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2939);
            	    createSelectionListElement152=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement152.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 679:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:679:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:682:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS154=null;
        Token AS156=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty153 = null;

        EsperEPL2GrammarParser.constant_return constant155 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS154_tree=null;
        CommonTree AS156_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:683:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt56=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt56=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt56=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt56=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }

            switch (alt56) {
                case 1 :
                    // EsperEPL2Grammar.g:683:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement2968); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 684:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:685:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement2980);
                    eventProperty153=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty153.getTree());
                    // EsperEPL2Grammar.g:685:18: ( AS i= IDENT )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==AS) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // EsperEPL2Grammar.g:685:19: AS i= IDENT
                            {
                            AS154=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement2983); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS154);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement2987); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: eventProperty, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 686:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:686:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:686:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:687:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3008);
                    constant155=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant155.getTree());
                    AS156=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS156);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3014); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: i, constant
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 688:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:688:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:688:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:691:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO157=null;
        EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList158 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO157_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_insertIntoColumnList=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoColumnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:694:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) )
            // EsperEPL2Grammar.g:694:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )?
            {
            // EsperEPL2Grammar.g:694:4: (s= ISTREAM | s= RSTREAM )?
            int alt57=3;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==ISTREAM) ) {
                alt57=1;
            }
            else if ( (LA57_0==RSTREAM) ) {
                alt57=2;
            }
            switch (alt57) {
                case 1 :
                    // EsperEPL2Grammar.g:694:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:694:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO157=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO157);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:694:42: ( insertIntoColumnList )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==LPAREN) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // EsperEPL2Grammar.g:694:43: insertIntoColumnList
                    {
                    pushFollow(FOLLOW_insertIntoColumnList_in_insertIntoExpr3070);
                    insertIntoColumnList158=insertIntoColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoColumnList.add(insertIntoColumnList158.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: s, i, insertIntoColumnList
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 695:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
            {
                // EsperEPL2Grammar.g:695:6: ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:695:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:695:31: ( insertIntoColumnList )?
                if ( stream_insertIntoColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoColumnList.nextTree());

                }
                stream_insertIntoColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class insertIntoColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoColumnList"
    // EsperEPL2Grammar.g:698:1: insertIntoColumnList : LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoColumnList_return retval = new EsperEPL2GrammarParser.insertIntoColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN159=null;
        Token IDENT160=null;
        Token COMMA161=null;
        Token IDENT162=null;
        Token RPAREN163=null;

        CommonTree LPAREN159_tree=null;
        CommonTree IDENT160_tree=null;
        CommonTree COMMA161_tree=null;
        CommonTree IDENT162_tree=null;
        CommonTree RPAREN163_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");

        try {
            // EsperEPL2Grammar.g:699:2: ( LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:699:5: LPAREN IDENT ( COMMA IDENT )* RPAREN
            {
            LPAREN159=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoColumnList3104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN159);

            IDENT160=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList3106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT160);

            // EsperEPL2Grammar.g:699:18: ( COMMA IDENT )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==COMMA) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // EsperEPL2Grammar.g:699:19: COMMA IDENT
            	    {
            	    COMMA161=(Token)match(input,COMMA,FOLLOW_COMMA_in_insertIntoColumnList3109); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA161);

            	    IDENT162=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList3111); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT162);


            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            RPAREN163=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoColumnList3115); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN163);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 700:3: -> ^( INSERTINTO_EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:700:6: ^( INSERTINTO_EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPRCOL, "INSERTINTO_EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:700:27: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoColumnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:703:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression164 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin165 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList166 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:706:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:706:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause3150);
            streamExpression164=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression164.getTree());
            // EsperEPL2Grammar.g:706:21: ( regularJoin | outerJoinList )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==EOF||LA60_0==WHERE||(LA60_0>=GROUP && LA60_0<=HAVING)||LA60_0==OUTPUT||LA60_0==ORDER||LA60_0==ROW_LIMIT_EXPR||LA60_0==COMMA) ) {
                alt60=1;
            }
            else if ( ((LA60_0>=INNER && LA60_0<=FULL)) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    // EsperEPL2Grammar.g:706:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause3153);
                    regularJoin165=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin165.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:706:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause3157);
                    outerJoinList166=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList166.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:709:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA167=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression168 = null;


        CommonTree COMMA167_tree=null;

        try {
            // EsperEPL2Grammar.g:710:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:710:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:710:4: ( COMMA streamExpression )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==COMMA) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // EsperEPL2Grammar.g:710:5: COMMA streamExpression
            	    {
            	    COMMA167=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin3171); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin3174);
            	    streamExpression168=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression168.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:713:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin169 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin170 = null;



        try {
            // EsperEPL2Grammar.g:714:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:714:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList3188);
            outerJoin169=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin169.getTree());
            // EsperEPL2Grammar.g:714:14: ( outerJoin )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( ((LA62_0>=INNER && LA62_0<=FULL)) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // EsperEPL2Grammar.g:714:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList3191);
            	    outerJoin170=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin170.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:717:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER171=null;
        Token JOIN172=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression173 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent174 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER171_tree=null;
        CommonTree JOIN172_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:720:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:720:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:720:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( ((LA65_0>=JOIN && LA65_0<=FULL)) ) {
                alt65=1;
            }
            else if ( (LA65_0==INNER) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    // EsperEPL2Grammar.g:721:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:721:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( ((LA64_0>=LEFT && LA64_0<=FULL)) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // EsperEPL2Grammar.g:721:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:721:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt63=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt63=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt63=2;
                                }
                                break;
                            case FULL:
                                {
                                alt63=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 0, input);

                                throw nvae;
                            }

                            switch (alt63) {
                                case 1 :
                                    // EsperEPL2Grammar.g:721:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin3234); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:721:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin3238); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:721:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin3242); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER171=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin3245); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER171);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:722:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:722:14: (i= INNER )
                    // EsperEPL2Grammar.g:722:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin3266); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN172=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin3280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN172);

            pushFollow(FOLLOW_streamExpression_in_outerJoin3282);
            streamExpression173=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression173.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin3284);
            outerJoinIdent174=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent174.getTree());


            // AST REWRITE
            // elements: streamExpression, streamExpression, outerJoinIdent, streamExpression, outerJoinIdent, outerJoinIdent, outerJoinIdent, streamExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 724:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:724:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 725:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:725:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 726:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:726:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 727:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:727:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:730:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON175=null;
        Token AND_EXPR177=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair176 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair178 = null;


        CommonTree ON175_tree=null;
        CommonTree AND_EXPR177_tree=null;

        try {
            // EsperEPL2Grammar.g:731:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:731:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON175=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent3349); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3352);
            outerJoinIdentPair176=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair176.getTree());
            // EsperEPL2Grammar.g:731:27: ( AND_EXPR outerJoinIdentPair )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==AND_EXPR) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // EsperEPL2Grammar.g:731:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR177=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent3355); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3358);
            	    outerJoinIdentPair178=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair178.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:734:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS180=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty179 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty181 = null;


        CommonTree EQUALS180_tree=null;

        try {
            // EsperEPL2Grammar.g:735:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:735:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3373);
            eventProperty179=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty179.getTree());
            EQUALS180=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair3375); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3378);
            eventProperty181=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty181.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:738:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression182 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:741:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:741:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause3400);
            evalOrExpression182=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression182.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 742:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:742:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:745:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        EsperEPL2GrammarParser.selectionList_return selectionList183 = null;


        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:748:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) )
            // EsperEPL2Grammar.g:748:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList
            {
            // EsperEPL2Grammar.g:748:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt67=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt67=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt67=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt67=3;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // EsperEPL2Grammar.g:748:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause3436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:748:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause3442); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:748:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause3448); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause3452);
            selectionList183=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList183.getTree());


            // AST REWRITE
            // elements: s, selectionList
            // token labels: s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 749:3: -> ^( SELECTION_EXPR ( $s)? selectionList )
            {
                // EsperEPL2Grammar.g:749:6: ^( SELECTION_EXPR ( $s)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:749:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:752:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA185=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement184 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement186 = null;


        CommonTree COMMA185_tree=null;

        try {
            // EsperEPL2Grammar.g:753:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:753:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList3479);
            selectionListElement184=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement184.getTree());
            // EsperEPL2Grammar.g:753:25: ( COMMA selectionListElement )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==COMMA) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // EsperEPL2Grammar.g:753:26: COMMA selectionListElement
            	    {
            	    COMMA185=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList3482); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList3485);
            	    selectionListElement186=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement186.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:756:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS189=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector187 = null;

        EsperEPL2GrammarParser.expression_return expression188 = null;


        CommonTree s_tree=null;
        CommonTree AS189_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:758:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt70=3;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // EsperEPL2Grammar.g:758:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement3511); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 758:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:759:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement3527);
                    streamSelector187=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector187.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:760:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement3532);
                    expression188=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression188.getTree());
                    // EsperEPL2Grammar.g:760:15: ( AS i= keywordAllowedIdent )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==AS) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // EsperEPL2Grammar.g:760:16: AS i= keywordAllowedIdent
                            {
                            AS189=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement3535); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS189);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement3539);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 761:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:761:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 762:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:762:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 763:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:763:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:766:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT190=null;
        Token STAR191=null;
        Token AS192=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT190_tree=null;
        CommonTree STAR191_tree=null;
        CommonTree AS192_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:767:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:767:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT190=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector3597); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT190);

            STAR191=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector3599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR191);

            // EsperEPL2Grammar.g:767:21: ( AS i= IDENT )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==AS) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // EsperEPL2Grammar.g:767:22: AS i= IDENT
                    {
                    AS192=(Token)match(input,AS,FOLLOW_AS_in_streamSelector3602); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS192);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3606); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 768:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:768:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:768:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:771:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT197=null;
        Token DOT199=null;
        Token AS201=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression193 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression194 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression195 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression196 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression198 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression200 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT197_tree=null;
        CommonTree DOT199_tree=null;
        CommonTree AS201_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:772:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:772:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:772:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt72=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA72_1 = input.LA(2);

                if ( (LA72_1==EOF||(LA72_1>=WHERE && LA72_1<=AS)||(LA72_1>=INNER && LA72_1<=ON)||(LA72_1>=GROUP && LA72_1<=HAVING)||LA72_1==OUTPUT||LA72_1==ORDER||(LA72_1>=UNIDIRECTIONAL && LA72_1<=RETAININTERSECTION)||LA72_1==ROW_LIMIT_EXPR||(LA72_1>=COMMA && LA72_1<=LPAREN)||LA72_1==LBRACK) ) {
                    alt72=1;
                }
                else if ( (LA72_1==COLON) ) {
                    alt72=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 72, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt72=1;
                }
                break;
            case PATTERN:
                {
                alt72=2;
                }
                break;
            case SQL:
                {
                alt72=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }

            switch (alt72) {
                case 1 :
                    // EsperEPL2Grammar.g:772:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression3636);
                    eventFilterExpression193=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression193.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:772:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression3640);
                    patternInclusionExpression194=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression194.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:772:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression3644);
                    databaseJoinExpression195=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression195.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:772:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression3648);
                    methodJoinExpression196=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression196.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:773:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==DOT) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // EsperEPL2Grammar.g:773:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT197=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT197);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression3656);
                    viewExpression198=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression198.getTree());
                    // EsperEPL2Grammar.g:773:23: ( DOT viewExpression )*
                    loop73:
                    do {
                        int alt73=2;
                        int LA73_0 = input.LA(1);

                        if ( (LA73_0==DOT) ) {
                            alt73=1;
                        }


                        switch (alt73) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:773:24: DOT viewExpression
                    	    {
                    	    DOT199=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3659); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT199);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression3661);
                    	    viewExpression200=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression200.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop73;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:773:47: ( AS i= IDENT | i= IDENT )?
            int alt75=3;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==AS) ) {
                alt75=1;
            }
            else if ( (LA75_0==IDENT) ) {
                alt75=2;
            }
            switch (alt75) {
                case 1 :
                    // EsperEPL2Grammar.g:773:48: AS i= IDENT
                    {
                    AS201=(Token)match(input,AS,FOLLOW_AS_in_streamExpression3668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS201);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:773:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3678); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:773:71: (u= UNIDIRECTIONAL )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==UNIDIRECTIONAL) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // EsperEPL2Grammar.g:773:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression3685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:773:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt77=3;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==RETAINUNION) ) {
                alt77=1;
            }
            else if ( (LA77_0==RETAININTERSECTION) ) {
                alt77=2;
            }
            switch (alt77) {
                case 1 :
                    // EsperEPL2Grammar.g:773:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression3692); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:773:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression3696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ri, eventFilterExpression, patternInclusionExpression, i, databaseJoinExpression, methodJoinExpression, ru, u, viewExpression
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 774:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:774:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:774:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:774:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:774:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:774:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:775:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:775:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:775:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:775:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:775:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:778:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN202=null;
        Token LBRACK203=null;
        Token RBRACK205=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression204 = null;


        CommonTree PATTERN202_tree=null;
        CommonTree LBRACK203_tree=null;
        CommonTree RBRACK205_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:779:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:779:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN202=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression3753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN202);

            LBRACK203=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression3755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK203);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression3757);
            patternExpression204=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression204.getTree());
            RBRACK205=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression3759); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK205);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 780:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:780:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:783:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL206=null;
        Token COLON207=null;
        Token LBRACK208=null;
        Token METADATASQL209=null;
        Token RBRACK210=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL206_tree=null;
        CommonTree COLON207_tree=null;
        CommonTree LBRACK208_tree=null;
        CommonTree METADATASQL209_tree=null;
        CommonTree RBRACK210_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:786:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:786:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL206=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression3792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL206);

            COLON207=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression3794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON207);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression3798); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK208=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression3800); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK208);

            // EsperEPL2Grammar.g:786:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==STRING_LITERAL) ) {
                alt78=1;
            }
            else if ( (LA78_0==QUOTED_STRING_LITERAL) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // EsperEPL2Grammar.g:786:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression3805); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:786:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:786:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==METADATASQL) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // EsperEPL2Grammar.g:786:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL209=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression3815); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL209);

                    // EsperEPL2Grammar.g:786:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==STRING_LITERAL) ) {
                        alt79=1;
                    }
                    else if ( (LA79_0==QUOTED_STRING_LITERAL) ) {
                        alt79=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 79, 0, input);

                        throw nvae;
                    }
                    switch (alt79) {
                        case 1 :
                            // EsperEPL2Grammar.g:786:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression3820); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:786:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3826); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK210=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression3831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK210);



            // AST REWRITE
            // elements: s, s2, i
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 787:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:787:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:787:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:790:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON211=null;
        Token LPAREN213=null;
        Token RPAREN215=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier212 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList214 = null;


        CommonTree i_tree=null;
        CommonTree COLON211_tree=null;
        CommonTree LPAREN213_tree=null;
        CommonTree RPAREN215_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:793:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:793:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression3882); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON211=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression3884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON211);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression3886);
            classIdentifier212=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier212.getTree());
            // EsperEPL2Grammar.g:793:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==LPAREN) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // EsperEPL2Grammar.g:793:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN213=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression3889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN213);

                    // EsperEPL2Grammar.g:793:49: ( expressionList )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==WINDOW||LA81_0==ESCAPE||(LA81_0>=NOT_EXPR && LA81_0<=EVERY_EXPR)||(LA81_0>=SUM && LA81_0<=COUNT)||LA81_0==CASE||LA81_0==OUTER||(LA81_0>=JOIN && LA81_0<=FULL)||(LA81_0>=EVENTS && LA81_0<=LAST)||(LA81_0>=UNIDIRECTIONAL && LA81_0<=CURRENT_TIMESTAMP)||LA81_0==SNAPSHOT||(LA81_0>=VARIABLE && LA81_0<=AT)||(LA81_0>=BOOLEAN_TRUE && LA81_0<=VALUE_NULL)||LA81_0==NUM_DOUBLE||LA81_0==IDENT||LA81_0==LPAREN||(LA81_0>=STRING_LITERAL && LA81_0<=QUOTED_STRING_LITERAL)||(LA81_0>=PLUS && LA81_0<=MINUS)||LA81_0==LCURLY||LA81_0==NUM_INT||LA81_0==QUESTION||(LA81_0>=TICKED_STRING_LITERAL && LA81_0<=NUM_FLOAT)) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // EsperEPL2Grammar.g:793:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression3891);
                            expressionList214=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList214.getTree());

                            }
                            break;

                    }

                    RPAREN215=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression3894); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN215);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, expressionList, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 794:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:794:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:794:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:797:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON216=null;
        Token LPAREN217=null;
        Token RPAREN219=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList218 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON216_tree=null;
        CommonTree LPAREN217_tree=null;
        CommonTree RPAREN219_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:800:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:800:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression3947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON216=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression3949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON216);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression3953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN217=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression3955); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN217);

            // EsperEPL2Grammar.g:800:35: ( expressionWithTimeList )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==WINDOW||LA83_0==ESCAPE||(LA83_0>=NOT_EXPR && LA83_0<=EVERY_EXPR)||(LA83_0>=SUM && LA83_0<=COUNT)||LA83_0==CASE||LA83_0==OUTER||(LA83_0>=JOIN && LA83_0<=FULL)||(LA83_0>=EVENTS && LA83_0<=LAST)||(LA83_0>=UNIDIRECTIONAL && LA83_0<=CURRENT_TIMESTAMP)||LA83_0==SNAPSHOT||(LA83_0>=VARIABLE && LA83_0<=AT)||(LA83_0>=BOOLEAN_TRUE && LA83_0<=VALUE_NULL)||LA83_0==NUM_DOUBLE||LA83_0==IDENT||LA83_0==LPAREN||(LA83_0>=STAR && LA83_0<=LBRACK)||(LA83_0>=STRING_LITERAL && LA83_0<=QUOTED_STRING_LITERAL)||(LA83_0>=PLUS && LA83_0<=MINUS)||LA83_0==LCURLY||LA83_0==NUM_INT||LA83_0==QUESTION||(LA83_0>=TICKED_STRING_LITERAL && LA83_0<=NUM_FLOAT)) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // EsperEPL2Grammar.g:800:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression3957);
                    expressionWithTimeList218=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList218.getTree());

                    }
                    break;

            }

            RPAREN219=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression3960); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN219);



            // AST REWRITE
            // elements: expressionWithTimeList, ns, nm
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 801:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:801:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:801:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:804:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA221=null;
        EsperEPL2GrammarParser.expression_return expression220 = null;

        EsperEPL2GrammarParser.expression_return expression222 = null;


        CommonTree COMMA221_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:807:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:807:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr3999);
            expression220=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression220.getTree());
            // EsperEPL2Grammar.g:807:15: ( COMMA expression )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==COMMA) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // EsperEPL2Grammar.g:807:16: COMMA expression
            	    {
            	    COMMA221=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr4002); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA221);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr4004);
            	    expression222=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression222.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 808:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:808:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:811:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA224=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement223 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement225 = null;


        CommonTree COMMA224_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:814:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:814:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr4039);
            orderByListElement223=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement223.getTree());
            // EsperEPL2Grammar.g:814:23: ( COMMA orderByListElement )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // EsperEPL2Grammar.g:814:24: COMMA orderByListElement
            	    {
            	    COMMA224=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr4042); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA224);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr4044);
            	    orderByListElement225=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement225.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 815:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:815:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:818:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression226 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:819:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:819:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement4069);
            expression226=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression226.getTree());
            // EsperEPL2Grammar.g:819:15: (d= ASC | d= DESC )?
            int alt86=3;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==ASC) ) {
                alt86=1;
            }
            else if ( (LA86_0==DESC) ) {
                alt86=2;
            }
            switch (alt86) {
                case 1 :
                    // EsperEPL2Grammar.g:819:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement4074); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:819:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement4078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 820:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:820:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:820:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:823:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression227 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:826:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:826:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause4116);
            evalOrExpression227=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression227.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 827:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:827:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:830:1: outputLimit : (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN232=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod228 = null;

        EsperEPL2GrammarParser.number_return number229 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet230 = null;

        EsperEPL2GrammarParser.expression_return expression231 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr233 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN232_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:833:2: ( (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:833:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            {
            // EsperEPL2Grammar.g:833:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt87=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt87=1;
                    }
                    break;
                case FIRST:
                    {
                    alt87=2;
                    }
                    break;
                case LAST:
                    {
                    alt87=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt87=4;
                    }
                    break;
            }

            switch (alt87) {
                case 1 :
                    // EsperEPL2Grammar.g:833:7: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit4154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:833:13: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit4158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:833:21: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit4162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:833:28: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit4166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:834:8: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            int alt91=3;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt91=1;
                }
                break;
            case AT:
                {
                alt91=2;
                }
                break;
            case WHEN:
                {
                alt91=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }

            switch (alt91) {
                case 1 :
                    // EsperEPL2Grammar.g:835:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:835:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:835:12: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit4193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:836:5: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==NUM_INT) ) {
                        int LA89_1 = input.LA(2);

                        if ( (LA89_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_1==EVENTS) ) {
                            alt89=2;
                        }
                        else if ( (LA89_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 89, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA89_0==NUM_LONG) ) {
                        int LA89_2 = input.LA(2);

                        if ( (LA89_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_2==EVENTS) ) {
                            alt89=2;
                        }
                        else if ( (LA89_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 89, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA89_0==NUM_FLOAT) ) {
                        int LA89_3 = input.LA(2);

                        if ( (LA89_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_3==EVENTS) ) {
                            alt89=2;
                        }
                        else if ( (LA89_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 89, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA89_0==NUM_DOUBLE) ) {
                        int LA89_4 = input.LA(2);

                        if ( (LA89_4==EVENTS) ) {
                            alt89=2;
                        }
                        else if ( (LA89_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 89, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA89_0==IDENT) ) {
                        int LA89_5 = input.LA(2);

                        if ( (LA89_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_5==EVENTS) ) {
                            alt89=2;
                        }
                        else if ( (LA89_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else if ( (LA89_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt89=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 89, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA89_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt89=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 89, 0, input);

                        throw nvae;
                    }
                    switch (alt89) {
                        case 1 :
                            // EsperEPL2Grammar.g:837:7: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit4215);
                            timePeriod228=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod228.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:838:7: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:838:7: ( number | i= IDENT )
                            int alt88=2;
                            int LA88_0 = input.LA(1);

                            if ( (LA88_0==NUM_DOUBLE||LA88_0==NUM_INT||(LA88_0>=NUM_LONG && LA88_0<=NUM_FLOAT)) ) {
                                alt88=1;
                            }
                            else if ( (LA88_0==IDENT) ) {
                                alt88=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 88, 0, input);

                                throw nvae;
                            }
                            switch (alt88) {
                                case 1 :
                                    // EsperEPL2Grammar.g:838:8: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit4224);
                                    number229=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number229.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:838:17: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit4230); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:838:26: (e= EVENTS )
                            // EsperEPL2Grammar.g:838:27: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit4236); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:842:3: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:842:3: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:842:5: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit4259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit4261);
                    crontabLimitParameterSet230=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet230.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:844:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:844:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:844:5: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit4275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit4277);
                    expression231=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression231.getTree());
                    // EsperEPL2Grammar.g:844:24: ( THEN onSetExpr )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==THEN) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // EsperEPL2Grammar.g:844:25: THEN onSetExpr
                            {
                            THEN232=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit4280); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN232);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit4282);
                            onSetExpr233=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr233.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: k, crontabLimitParameterSet, k, i, number, k, onSetExpr, expression, k, timePeriod
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 846:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:846:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:846:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:846:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:846:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 847:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
            if (ev != null) {
                // EsperEPL2Grammar.g:847:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:847:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 848:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
            if (at != null) {
                // EsperEPL2Grammar.g:848:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:848:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 849:6: -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:849:9: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:849:27: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:849:42: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:852:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:855:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:855:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:855:6: (n1= numberconstant | i1= IDENT )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==NUM_DOUBLE||(LA92_0>=PLUS && LA92_0<=MINUS)||LA92_0==NUM_INT||(LA92_0>=NUM_LONG && LA92_0<=NUM_FLOAT)) ) {
                alt92=1;
            }
            else if ( (LA92_0==IDENT) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    // EsperEPL2Grammar.g:855:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit4411);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:855:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit4417); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:855:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==OFFSET||LA95_0==COMMA) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // EsperEPL2Grammar.g:855:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:855:38: (c= COMMA | o= OFFSET )
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==COMMA) ) {
                        alt93=1;
                    }
                    else if ( (LA93_0==OFFSET) ) {
                        alt93=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 0, input);

                        throw nvae;
                    }
                    switch (alt93) {
                        case 1 :
                            // EsperEPL2Grammar.g:855:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit4424); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:855:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit4430); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:855:59: (n2= numberconstant | i2= IDENT )
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==NUM_DOUBLE||(LA94_0>=PLUS && LA94_0<=MINUS)||LA94_0==NUM_INT||(LA94_0>=NUM_LONG && LA94_0<=NUM_FLOAT)) ) {
                        alt94=1;
                    }
                    else if ( (LA94_0==IDENT) ) {
                        alt94=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 94, 0, input);

                        throw nvae;
                    }
                    switch (alt94) {
                        case 1 :
                            // EsperEPL2Grammar.g:855:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit4436);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:855:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit4442); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: n1, i2, o, i1, n2, c
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 856:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:856:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:856:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:856:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:856:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:856:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:856:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:856:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:859:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN234=null;
        Token COMMA236=null;
        Token COMMA238=null;
        Token COMMA240=null;
        Token COMMA242=null;
        Token COMMA244=null;
        Token RPAREN246=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime235 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime237 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime239 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime241 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime243 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime245 = null;


        CommonTree LPAREN234_tree=null;
        CommonTree COMMA236_tree=null;
        CommonTree COMMA238_tree=null;
        CommonTree COMMA240_tree=null;
        CommonTree COMMA242_tree=null;
        CommonTree COMMA244_tree=null;
        CommonTree RPAREN246_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:860:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:860:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN234=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet4494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN234);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4496);
            expressionWithTime235=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime235.getTree());
            COMMA236=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA236);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4500);
            expressionWithTime237=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime237.getTree());
            COMMA238=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA238);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4504);
            expressionWithTime239=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime239.getTree());
            COMMA240=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA240);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4508);
            expressionWithTime241=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime241.getTree());
            COMMA242=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA242);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4512);
            expressionWithTime243=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime243.getTree());
            // EsperEPL2Grammar.g:860:130: ( COMMA expressionWithTime )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==COMMA) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // EsperEPL2Grammar.g:860:131: COMMA expressionWithTime
                    {
                    COMMA244=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4515); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA244);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4517);
                    expressionWithTime245=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime245.getTree());

                    }
                    break;

            }

            RPAREN246=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet4521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN246);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 861:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:861:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:861:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:864:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN247=null;
        Token THEN249=null;
        EsperEPL2GrammarParser.expression_return expression248 = null;

        EsperEPL2GrammarParser.expression_return expression250 = null;


        CommonTree WHEN247_tree=null;
        CommonTree THEN249_tree=null;

        try {
            // EsperEPL2Grammar.g:865:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:865:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:865:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:865:5: WHEN expression THEN expression
            {
            WHEN247=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause4551); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause4554);
            expression248=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression248.getTree());
            THEN249=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause4556); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause4559);
            expression250=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression250.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:868:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE251=null;
        EsperEPL2GrammarParser.expression_return expression252 = null;


        CommonTree ELSE251_tree=null;

        try {
            // EsperEPL2Grammar.g:869:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:869:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:869:4: ( ELSE expression )
            // EsperEPL2Grammar.g:869:5: ELSE expression
            {
            ELSE251=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause4572); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause4575);
            expression252=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression252.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:873:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression253 = null;



        try {
            // EsperEPL2Grammar.g:874:2: ( caseExpression )
            // EsperEPL2Grammar.g:874:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression4588);
            caseExpression253=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression253.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:877:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE254=null;
        Token END257=null;
        Token CASE258=null;
        Token END262=null;
        EsperEPL2GrammarParser.whenClause_return whenClause255 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause256 = null;

        EsperEPL2GrammarParser.expression_return expression259 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause260 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause261 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression263 = null;


        CommonTree CASE254_tree=null;
        CommonTree END257_tree=null;
        CommonTree CASE258_tree=null;
        CommonTree END262_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:878:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt101=3;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // EsperEPL2Grammar.g:878:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE254=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression4602); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE254_tree = (CommonTree)adaptor.create(CASE254);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE254_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:878:52: ( whenClause )+
                    int cnt97=0;
                    loop97:
                    do {
                        int alt97=2;
                        int LA97_0 = input.LA(1);

                        if ( (LA97_0==WHEN) ) {
                            alt97=1;
                        }


                        switch (alt97) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:878:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression4605);
                    	    whenClause255=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause255.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt97 >= 1 ) break loop97;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(97, input);
                                throw eee;
                        }
                        cnt97++;
                    } while (true);

                    // EsperEPL2Grammar.g:878:64: ( elseClause )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==ELSE) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // EsperEPL2Grammar.g:878:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression4608);
                            elseClause256=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause256.getTree());

                            }
                            break;

                    }

                    END257=(Token)match(input,END,FOLLOW_END_in_caseExpression4611); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:879:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE258=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression4622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE258);

                    pushFollow(FOLLOW_expression_in_caseExpression4624);
                    expression259=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression259.getTree());
                    // EsperEPL2Grammar.g:879:62: ( whenClause )+
                    int cnt99=0;
                    loop99:
                    do {
                        int alt99=2;
                        int LA99_0 = input.LA(1);

                        if ( (LA99_0==WHEN) ) {
                            alt99=1;
                        }


                        switch (alt99) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:879:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression4626);
                    	    whenClause260=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause260.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt99 >= 1 ) break loop99;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(99, input);
                                throw eee;
                        }
                        cnt99++;
                    } while (true);

                    // EsperEPL2Grammar.g:879:74: ( elseClause )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==ELSE) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // EsperEPL2Grammar.g:879:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression4629);
                            elseClause261=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause261.getTree());

                            }
                            break;

                    }

                    END262=(Token)match(input,END,FOLLOW_END_in_caseExpression4632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END262);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: elseClause, whenClause, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 880:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:880:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:880:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:881:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression4656);
                    evalOrExpression263=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression263.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:884:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression264 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression265 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:885:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:885:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression4667);
            evalAndExpression264=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression264.getTree());
            // EsperEPL2Grammar.g:885:22: (op= OR_EXPR evalAndExpression )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==OR_EXPR) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // EsperEPL2Grammar.g:885:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression4672); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression4674);
            	    evalAndExpression265=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression265.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 886:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:886:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:886:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 887:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:890:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression266 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression267 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:891:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:891:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression4706);
            bitWiseExpression266=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression266.getTree());
            // EsperEPL2Grammar.g:891:22: (op= AND_EXPR bitWiseExpression )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==AND_EXPR) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // EsperEPL2Grammar.g:891:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression4711); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression4713);
            	    bitWiseExpression267=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression267.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 892:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:892:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 893:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:896:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND269=null;
        Token BOR270=null;
        Token BXOR271=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression268 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression272 = null;


        CommonTree BAND269_tree=null;
        CommonTree BOR270_tree=null;
        CommonTree BXOR271_tree=null;

        try {
            // EsperEPL2Grammar.g:897:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:897:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression4745);
            negatedExpression268=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression268.getTree());
            // EsperEPL2Grammar.g:897:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( ((LA105_0>=BAND && LA105_0<=BXOR)) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // EsperEPL2Grammar.g:897:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:897:24: ( BAND | BOR | BXOR )
            	    int alt104=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt104=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt104=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt104=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 104, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt104) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:897:25: BAND
            	            {
            	            BAND269=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression4750); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND269_tree = (CommonTree)adaptor.create(BAND269);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND269_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:897:31: BOR
            	            {
            	            BOR270=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression4753); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR270_tree = (CommonTree)adaptor.create(BOR270);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR270_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:897:36: BXOR
            	            {
            	            BXOR271=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression4756); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR271_tree = (CommonTree)adaptor.create(BXOR271);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR271_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression4760);
            	    negatedExpression272=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression272.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:900:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR274=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression273 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression275 = null;


        CommonTree NOT_EXPR274_tree=null;

        try {
            // EsperEPL2Grammar.g:901:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==WINDOW||LA106_0==ESCAPE||LA106_0==EVERY_EXPR||(LA106_0>=SUM && LA106_0<=COUNT)||LA106_0==OUTER||(LA106_0>=JOIN && LA106_0<=FULL)||(LA106_0>=EVENTS && LA106_0<=LAST)||(LA106_0>=UNIDIRECTIONAL && LA106_0<=CURRENT_TIMESTAMP)||LA106_0==SNAPSHOT||(LA106_0>=VARIABLE && LA106_0<=AT)||(LA106_0>=BOOLEAN_TRUE && LA106_0<=VALUE_NULL)||LA106_0==NUM_DOUBLE||LA106_0==IDENT||LA106_0==LPAREN||(LA106_0>=STRING_LITERAL && LA106_0<=QUOTED_STRING_LITERAL)||(LA106_0>=PLUS && LA106_0<=MINUS)||LA106_0==LCURLY||LA106_0==NUM_INT||LA106_0==QUESTION||(LA106_0>=TICKED_STRING_LITERAL && LA106_0<=NUM_FLOAT)) ) {
                alt106=1;
            }
            else if ( (LA106_0==NOT_EXPR) ) {
                alt106=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;
            }
            switch (alt106) {
                case 1 :
                    // EsperEPL2Grammar.g:901:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression4775);
                    evalEqualsExpression273=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression273.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:902:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR274=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression4781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR274_tree = (CommonTree)adaptor.create(NOT_EXPR274);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR274_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression4784);
                    evalEqualsExpression275=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression275.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:905:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR277=null;
        Token LPAREN279=null;
        Token RPAREN281=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression276 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression278 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList280 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression282 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR277_tree=null;
        CommonTree LPAREN279_tree=null;
        CommonTree RPAREN281_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:906:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:906:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression4797);
            evalRelationalExpression276=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression276.getTree());
            // EsperEPL2Grammar.g:906:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==IS||LA112_0==EQUALS||(LA112_0>=SQL_NE && LA112_0<=NOT_EQUAL)) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // EsperEPL2Grammar.g:907:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:907:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt107=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt107=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA107_2 = input.LA(2);

            	        if ( (LA107_2==NOT_EXPR) ) {
            	            alt107=3;
            	        }
            	        else if ( (LA107_2==WINDOW||LA107_2==ESCAPE||LA107_2==EVERY_EXPR||(LA107_2>=SUM && LA107_2<=COUNT)||LA107_2==OUTER||(LA107_2>=JOIN && LA107_2<=FULL)||(LA107_2>=ALL && LA107_2<=SOME)||(LA107_2>=EVENTS && LA107_2<=LAST)||(LA107_2>=UNIDIRECTIONAL && LA107_2<=CURRENT_TIMESTAMP)||LA107_2==SNAPSHOT||(LA107_2>=VARIABLE && LA107_2<=AT)||(LA107_2>=BOOLEAN_TRUE && LA107_2<=VALUE_NULL)||LA107_2==NUM_DOUBLE||LA107_2==IDENT||LA107_2==LPAREN||(LA107_2>=STRING_LITERAL && LA107_2<=QUOTED_STRING_LITERAL)||(LA107_2>=PLUS && LA107_2<=MINUS)||LA107_2==LCURLY||LA107_2==NUM_INT||LA107_2==QUESTION||(LA107_2>=TICKED_STRING_LITERAL && LA107_2<=NUM_FLOAT)) ) {
            	            alt107=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 107, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt107=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt107=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 107, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt107) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:907:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression4810); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:908:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression4828); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:909:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression4842); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR277=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression4844); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR277);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:910:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression4858); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:911:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression4872); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:913:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt111=2;
            	    int LA111_0 = input.LA(1);

            	    if ( (LA111_0==WINDOW||LA111_0==ESCAPE||LA111_0==EVERY_EXPR||(LA111_0>=SUM && LA111_0<=COUNT)||LA111_0==OUTER||(LA111_0>=JOIN && LA111_0<=FULL)||(LA111_0>=EVENTS && LA111_0<=LAST)||(LA111_0>=UNIDIRECTIONAL && LA111_0<=CURRENT_TIMESTAMP)||LA111_0==SNAPSHOT||(LA111_0>=VARIABLE && LA111_0<=AT)||(LA111_0>=BOOLEAN_TRUE && LA111_0<=VALUE_NULL)||LA111_0==NUM_DOUBLE||LA111_0==IDENT||LA111_0==LPAREN||(LA111_0>=STRING_LITERAL && LA111_0<=QUOTED_STRING_LITERAL)||(LA111_0>=PLUS && LA111_0<=MINUS)||LA111_0==LCURLY||LA111_0==NUM_INT||LA111_0==QUESTION||(LA111_0>=TICKED_STRING_LITERAL && LA111_0<=NUM_FLOAT)) ) {
            	        alt111=1;
            	    }
            	    else if ( ((LA111_0>=ALL && LA111_0<=SOME)) ) {
            	        alt111=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 111, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt111) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:914:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression4902);
            	            evalRelationalExpression278=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression278.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:915:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:915:13: (a= ANY | a= SOME | a= ALL )
            	            int alt108=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt108=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt108=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt108=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 108, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt108) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:915:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression4919); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:915:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression4925); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:915:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression4931); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:915:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt110=2;
            	            int LA110_0 = input.LA(1);

            	            if ( (LA110_0==LPAREN) ) {
            	                int LA110_1 = input.LA(2);

            	                if ( (LA110_1==SELECT) ) {
            	                    alt110=2;
            	                }
            	                else if ( (LA110_1==WINDOW||LA110_1==ESCAPE||(LA110_1>=NOT_EXPR && LA110_1<=EVERY_EXPR)||(LA110_1>=SUM && LA110_1<=COUNT)||LA110_1==CASE||LA110_1==OUTER||(LA110_1>=JOIN && LA110_1<=FULL)||(LA110_1>=EVENTS && LA110_1<=LAST)||(LA110_1>=UNIDIRECTIONAL && LA110_1<=CURRENT_TIMESTAMP)||LA110_1==SNAPSHOT||(LA110_1>=VARIABLE && LA110_1<=AT)||(LA110_1>=BOOLEAN_TRUE && LA110_1<=VALUE_NULL)||LA110_1==NUM_DOUBLE||LA110_1==IDENT||(LA110_1>=LPAREN && LA110_1<=RPAREN)||(LA110_1>=STRING_LITERAL && LA110_1<=QUOTED_STRING_LITERAL)||(LA110_1>=PLUS && LA110_1<=MINUS)||LA110_1==LCURLY||LA110_1==NUM_INT||LA110_1==QUESTION||(LA110_1>=TICKED_STRING_LITERAL && LA110_1<=NUM_FLOAT)) ) {
            	                    alt110=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 110, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 110, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt110) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:915:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:915:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:915:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN279=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression4937); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN279);

            	                    // EsperEPL2Grammar.g:915:48: ( expressionList )?
            	                    int alt109=2;
            	                    int LA109_0 = input.LA(1);

            	                    if ( (LA109_0==WINDOW||LA109_0==ESCAPE||(LA109_0>=NOT_EXPR && LA109_0<=EVERY_EXPR)||(LA109_0>=SUM && LA109_0<=COUNT)||LA109_0==CASE||LA109_0==OUTER||(LA109_0>=JOIN && LA109_0<=FULL)||(LA109_0>=EVENTS && LA109_0<=LAST)||(LA109_0>=UNIDIRECTIONAL && LA109_0<=CURRENT_TIMESTAMP)||LA109_0==SNAPSHOT||(LA109_0>=VARIABLE && LA109_0<=AT)||(LA109_0>=BOOLEAN_TRUE && LA109_0<=VALUE_NULL)||LA109_0==NUM_DOUBLE||LA109_0==IDENT||LA109_0==LPAREN||(LA109_0>=STRING_LITERAL && LA109_0<=QUOTED_STRING_LITERAL)||(LA109_0>=PLUS && LA109_0<=MINUS)||LA109_0==LCURLY||LA109_0==NUM_INT||LA109_0==QUESTION||(LA109_0>=TICKED_STRING_LITERAL && LA109_0<=NUM_FLOAT)) ) {
            	                        alt109=1;
            	                    }
            	                    switch (alt109) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:915:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression4939);
            	                            expressionList280=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList280.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN281=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression4942); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN281);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:915:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression4947);
            	                    subSelectGroupExpression282=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression282.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);



            // AST REWRITE
            // elements: subSelectGroupExpression, a, evalRelationalExpression, expressionList, evalRelationalExpression, expressionList, subSelectGroupExpression, evalRelationalExpression, evalRelationalExpression, a, evalRelationalExpression
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 918:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:918:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 919:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:919:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:919:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:919:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 920:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:920:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 921:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:921:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:921:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:921:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 922:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:925:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN285=null;
        Token RPAREN287=null;
        Token COMMA291=null;
        Token IN_SET293=null;
        Token BETWEEN295=null;
        Token LIKE297=null;
        Token ESCAPE299=null;
        Token REGEXP301=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr283 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr284 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList286 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression288 = null;

        EsperEPL2GrammarParser.expression_return expression289 = null;

        EsperEPL2GrammarParser.expression_return expression290 = null;

        EsperEPL2GrammarParser.expression_return expression292 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery294 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList296 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr298 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant300 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr302 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN285_tree=null;
        CommonTree RPAREN287_tree=null;
        CommonTree COMMA291_tree=null;
        CommonTree IN_SET293_tree=null;
        CommonTree BETWEEN295_tree=null;
        CommonTree LIKE297_tree=null;
        CommonTree ESCAPE299_tree=null;
        CommonTree REGEXP301_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:926:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:926:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5075);
            concatenationExpr283=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr283.getTree());
            // EsperEPL2Grammar.g:927:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==EOF||(LA126_0>=OR_EXPR && LA126_0<=AND_EXPR)||(LA126_0>=WHERE && LA126_0<=AS)||(LA126_0>=ELSE && LA126_0<=FROM)||LA126_0==IS||(LA126_0>=GROUP && LA126_0<=HAVING)||LA126_0==OUTPUT||LA126_0==INSERT||(LA126_0>=ORDER && LA126_0<=DESC)||(LA126_0>=TIMEPERIOD_SEC && LA126_0<=TIMEPERIOD_SECONDS)||LA126_0==ROW_LIMIT_EXPR||LA126_0==COMMA||LA126_0==EQUALS||LA126_0==RPAREN||(LA126_0>=RBRACK && LA126_0<=COLON)||(LA126_0>=BAND && LA126_0<=GE)||LA126_0==RCURLY) ) {
                alt126=1;
            }
            else if ( ((LA126_0>=IN_SET && LA126_0<=REGEXP)||LA126_0==NOT_EXPR) ) {
                alt126=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }
            switch (alt126) {
                case 1 :
                    // EsperEPL2Grammar.g:928:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:928:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:929:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:929:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( ((LA118_0>=LT && LA118_0<=GE)) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:930:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:930:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt113=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt113=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt113=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt113=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt113=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 113, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt113) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:930:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression5107); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:930:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression5111); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:930:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression5115); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:930:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression5119); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:931:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt117=2;
                    	    int LA117_0 = input.LA(1);

                    	    if ( (LA117_0==WINDOW||LA117_0==ESCAPE||LA117_0==EVERY_EXPR||(LA117_0>=SUM && LA117_0<=COUNT)||LA117_0==OUTER||(LA117_0>=JOIN && LA117_0<=FULL)||(LA117_0>=EVENTS && LA117_0<=LAST)||(LA117_0>=UNIDIRECTIONAL && LA117_0<=CURRENT_TIMESTAMP)||LA117_0==SNAPSHOT||(LA117_0>=VARIABLE && LA117_0<=AT)||(LA117_0>=BOOLEAN_TRUE && LA117_0<=VALUE_NULL)||LA117_0==NUM_DOUBLE||LA117_0==IDENT||LA117_0==LPAREN||(LA117_0>=STRING_LITERAL && LA117_0<=QUOTED_STRING_LITERAL)||(LA117_0>=PLUS && LA117_0<=MINUS)||LA117_0==LCURLY||LA117_0==NUM_INT||LA117_0==QUESTION||(LA117_0>=TICKED_STRING_LITERAL && LA117_0<=NUM_FLOAT)) ) {
                    	        alt117=1;
                    	    }
                    	    else if ( ((LA117_0>=ALL && LA117_0<=SOME)) ) {
                    	        alt117=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 117, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt117) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:932:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5143);
                    	            concatenationExpr284=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr284.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:933:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:933:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt114=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt114=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt114=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt114=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 114, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt114) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:933:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression5160); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:933:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression5166); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:933:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression5172); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:933:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt116=2;
                    	            int LA116_0 = input.LA(1);

                    	            if ( (LA116_0==LPAREN) ) {
                    	                int LA116_1 = input.LA(2);

                    	                if ( (LA116_1==SELECT) ) {
                    	                    alt116=2;
                    	                }
                    	                else if ( (LA116_1==WINDOW||LA116_1==ESCAPE||(LA116_1>=NOT_EXPR && LA116_1<=EVERY_EXPR)||(LA116_1>=SUM && LA116_1<=COUNT)||LA116_1==CASE||LA116_1==OUTER||(LA116_1>=JOIN && LA116_1<=FULL)||(LA116_1>=EVENTS && LA116_1<=LAST)||(LA116_1>=UNIDIRECTIONAL && LA116_1<=CURRENT_TIMESTAMP)||LA116_1==SNAPSHOT||(LA116_1>=VARIABLE && LA116_1<=AT)||(LA116_1>=BOOLEAN_TRUE && LA116_1<=VALUE_NULL)||LA116_1==NUM_DOUBLE||LA116_1==IDENT||(LA116_1>=LPAREN && LA116_1<=RPAREN)||(LA116_1>=STRING_LITERAL && LA116_1<=QUOTED_STRING_LITERAL)||(LA116_1>=PLUS && LA116_1<=MINUS)||LA116_1==LCURLY||LA116_1==NUM_INT||LA116_1==QUESTION||(LA116_1>=TICKED_STRING_LITERAL && LA116_1<=NUM_FLOAT)) ) {
                    	                    alt116=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 116, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 116, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt116) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:933:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:933:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:933:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN285=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression5178); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN285);

                    	                    // EsperEPL2Grammar.g:933:48: ( expressionList )?
                    	                    int alt115=2;
                    	                    int LA115_0 = input.LA(1);

                    	                    if ( (LA115_0==WINDOW||LA115_0==ESCAPE||(LA115_0>=NOT_EXPR && LA115_0<=EVERY_EXPR)||(LA115_0>=SUM && LA115_0<=COUNT)||LA115_0==CASE||LA115_0==OUTER||(LA115_0>=JOIN && LA115_0<=FULL)||(LA115_0>=EVENTS && LA115_0<=LAST)||(LA115_0>=UNIDIRECTIONAL && LA115_0<=CURRENT_TIMESTAMP)||LA115_0==SNAPSHOT||(LA115_0>=VARIABLE && LA115_0<=AT)||(LA115_0>=BOOLEAN_TRUE && LA115_0<=VALUE_NULL)||LA115_0==NUM_DOUBLE||LA115_0==IDENT||LA115_0==LPAREN||(LA115_0>=STRING_LITERAL && LA115_0<=QUOTED_STRING_LITERAL)||(LA115_0>=PLUS && LA115_0<=MINUS)||LA115_0==LCURLY||LA115_0==NUM_INT||LA115_0==QUESTION||(LA115_0>=TICKED_STRING_LITERAL && LA115_0<=NUM_FLOAT)) ) {
                    	                        alt115=1;
                    	                    }
                    	                    switch (alt115) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:933:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression5180);
                    	                            expressionList286=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList286.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN287=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression5183); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN287);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:933:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression5188);
                    	                    subSelectGroupExpression288=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression288.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: expressionList, concatenationExpr, concatenationExpr, g, subSelectGroupExpression, concatenationExpr
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 937:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:937:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 938:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:938:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:938:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:938:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 939:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:941:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:941:6: (n= NOT_EXPR )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==NOT_EXPR) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // EsperEPL2Grammar.g:941:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression5284); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:942:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt125=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA125_1 = input.LA(2);

                        if ( (LA125_1==LPAREN) ) {
                            int LA125_5 = input.LA(3);

                            if ( (LA125_5==SELECT) ) {
                                alt125=2;
                            }
                            else if ( (LA125_5==WINDOW||LA125_5==ESCAPE||(LA125_5>=NOT_EXPR && LA125_5<=EVERY_EXPR)||(LA125_5>=SUM && LA125_5<=COUNT)||LA125_5==CASE||LA125_5==OUTER||(LA125_5>=JOIN && LA125_5<=FULL)||(LA125_5>=EVENTS && LA125_5<=LAST)||(LA125_5>=UNIDIRECTIONAL && LA125_5<=CURRENT_TIMESTAMP)||LA125_5==SNAPSHOT||(LA125_5>=VARIABLE && LA125_5<=AT)||(LA125_5>=BOOLEAN_TRUE && LA125_5<=VALUE_NULL)||LA125_5==NUM_DOUBLE||LA125_5==IDENT||LA125_5==LPAREN||(LA125_5>=STRING_LITERAL && LA125_5<=QUOTED_STRING_LITERAL)||(LA125_5>=PLUS && LA125_5<=MINUS)||LA125_5==LCURLY||LA125_5==NUM_INT||LA125_5==QUESTION||(LA125_5>=TICKED_STRING_LITERAL && LA125_5<=NUM_FLOAT)) ) {
                                alt125=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 125, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA125_1==LBRACK) ) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt125=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt125=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt125=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);

                        throw nvae;
                    }

                    switch (alt125) {
                        case 1 :
                            // EsperEPL2Grammar.g:945:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:945:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:945:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression5311); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:946:8: (l= LPAREN | l= LBRACK )
                            int alt120=2;
                            int LA120_0 = input.LA(1);

                            if ( (LA120_0==LPAREN) ) {
                                alt120=1;
                            }
                            else if ( (LA120_0==LBRACK) ) {
                                alt120=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 120, 0, input);

                                throw nvae;
                            }
                            switch (alt120) {
                                case 1 :
                                    // EsperEPL2Grammar.g:946:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression5323); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:946:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression5329); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression5332);
                            expression289=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression289.getTree());
                            // EsperEPL2Grammar.g:947:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt122=2;
                            int LA122_0 = input.LA(1);

                            if ( (LA122_0==COLON) ) {
                                alt122=1;
                            }
                            else if ( (LA122_0==COMMA||LA122_0==RPAREN||LA122_0==RBRACK) ) {
                                alt122=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 122, 0, input);

                                throw nvae;
                            }
                            switch (alt122) {
                                case 1 :
                                    // EsperEPL2Grammar.g:948:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:948:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:948:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression5354); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:948:20: ( expression )
                                    // EsperEPL2Grammar.g:948:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression5357);
                                    expression290=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression290.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:950:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:950:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:950:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:950:10: ( COMMA expression )*
                                    loop121:
                                    do {
                                        int alt121=2;
                                        int LA121_0 = input.LA(1);

                                        if ( (LA121_0==COMMA) ) {
                                            alt121=1;
                                        }


                                        switch (alt121) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:950:11: COMMA expression
                                    	    {
                                    	    COMMA291=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression5383); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA291);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression5385);
                                    	    expression292=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression292.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop121;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:952:8: (r= RPAREN | r= RBRACK )
                            int alt123=2;
                            int LA123_0 = input.LA(1);

                            if ( (LA123_0==RPAREN) ) {
                                alt123=1;
                            }
                            else if ( (LA123_0==RBRACK) ) {
                                alt123=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 123, 0, input);

                                throw nvae;
                            }
                            switch (alt123) {
                                case 1 :
                                    // EsperEPL2Grammar.g:952:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression5411); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:952:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression5417); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: l, r, IN_SET, expression, l, concatenationExpr, concatenationExpr, expression, concatenationExpr, l, l, expression, r, expression, r, r, concatenationExpr
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 954:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:954:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 955:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:955:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 956:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:956:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 957:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:957:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:958:7: IN_SET inSubSelectQuery
                            {
                            IN_SET293=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression5540); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET293);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression5542);
                            inSubSelectQuery294=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery294.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, concatenationExpr, inSubSelectQuery, inSubSelectQuery
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 959:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:959:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 960:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:960:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:961:7: BETWEEN betweenList
                            {
                            BETWEEN295=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression5588); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN295);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression5590);
                            betweenList296=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList296.getTree());


                            // AST REWRITE
                            // elements: betweenList, BETWEEN, betweenList, concatenationExpr, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 962:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:962:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 963:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:963:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:964:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE297=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression5640); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE297);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5642);
                            concatenationExpr298=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr298.getTree());
                            // EsperEPL2Grammar.g:964:30: ( ESCAPE stringconstant )?
                            int alt124=2;
                            int LA124_0 = input.LA(1);

                            if ( (LA124_0==ESCAPE) ) {
                                alt124=1;
                            }
                            switch (alt124) {
                                case 1 :
                                    // EsperEPL2Grammar.g:964:31: ESCAPE stringconstant
                                    {
                                    ESCAPE299=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression5645); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE299);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression5647);
                                    stringconstant300=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant300.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: concatenationExpr, LIKE, concatenationExpr, stringconstant, stringconstant
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 965:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:965:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:965:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:965:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 966:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:966:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:966:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:966:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:967:7: REGEXP concatenationExpr
                            {
                            REGEXP301=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression5699); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP301);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5701);
                            concatenationExpr302=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr302.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, concatenationExpr, REGEXP
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 968:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:968:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 969:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:969:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:974:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr303 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:975:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:975:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery5763);
            subQueryExpr303=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr303.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 976:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:976:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:979:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR306=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression304 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression305 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression307 = null;


        CommonTree c_tree=null;
        CommonTree LOR306_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:980:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:980:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr5788);
            additiveExpression304=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression304.getTree());
            // EsperEPL2Grammar.g:980:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==LOR) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // EsperEPL2Grammar.g:980:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr5794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr5796);
                    additiveExpression305=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression305.getTree());
                    // EsperEPL2Grammar.g:980:50: ( LOR additiveExpression )*
                    loop127:
                    do {
                        int alt127=2;
                        int LA127_0 = input.LA(1);

                        if ( (LA127_0==LOR) ) {
                            alt127=1;
                        }


                        switch (alt127) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:980:52: LOR additiveExpression
                    	    {
                    	    LOR306=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr5800); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR306);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr5802);
                    	    additiveExpression307=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression307.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop127;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 981:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:981:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 982:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:985:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS309=null;
        Token MINUS310=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression308 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression311 = null;


        CommonTree PLUS309_tree=null;
        CommonTree MINUS310_tree=null;

        try {
            // EsperEPL2Grammar.g:986:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:986:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression5843);
            multiplyExpression308=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression308.getTree());
            // EsperEPL2Grammar.g:986:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( ((LA130_0>=PLUS && LA130_0<=MINUS)) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // EsperEPL2Grammar.g:986:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:986:25: ( PLUS | MINUS )
            	    int alt129=2;
            	    int LA129_0 = input.LA(1);

            	    if ( (LA129_0==PLUS) ) {
            	        alt129=1;
            	    }
            	    else if ( (LA129_0==MINUS) ) {
            	        alt129=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 129, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt129) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:986:26: PLUS
            	            {
            	            PLUS309=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression5848); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS309_tree = (CommonTree)adaptor.create(PLUS309);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS309_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:986:32: MINUS
            	            {
            	            MINUS310=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression5851); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS310_tree = (CommonTree)adaptor.create(MINUS310);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS310_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression5855);
            	    multiplyExpression311=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression311.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:989:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR313=null;
        Token DIV314=null;
        Token MOD315=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression312 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression316 = null;


        CommonTree STAR313_tree=null;
        CommonTree DIV314_tree=null;
        CommonTree MOD315_tree=null;

        try {
            // EsperEPL2Grammar.g:990:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:990:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression5869);
            unaryExpression312=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression312.getTree());
            // EsperEPL2Grammar.g:990:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==STAR||(LA132_0>=DIV && LA132_0<=MOD)) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // EsperEPL2Grammar.g:990:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:990:22: ( STAR | DIV | MOD )
            	    int alt131=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt131=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt131=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt131=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 131, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt131) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:990:23: STAR
            	            {
            	            STAR313=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression5874); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR313_tree = (CommonTree)adaptor.create(STAR313);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR313_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:990:29: DIV
            	            {
            	            DIV314=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression5877); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV314_tree = (CommonTree)adaptor.create(DIV314);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV314_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:990:34: MOD
            	            {
            	            MOD315=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression5880); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD315_tree = (CommonTree)adaptor.create(MOD315);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD315_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression5884);
            	    unaryExpression316=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression316.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:993:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS317=null;
        Token LPAREN321=null;
        Token RPAREN323=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty318 = null;

        EsperEPL2GrammarParser.constant_return constant319 = null;

        EsperEPL2GrammarParser.substitution_return substitution320 = null;

        EsperEPL2GrammarParser.expression_return expression322 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction324 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc325 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression326 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression327 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression328 = null;


        CommonTree MINUS317_tree=null;
        CommonTree LPAREN321_tree=null;
        CommonTree RPAREN323_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:994:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt133=9;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // EsperEPL2Grammar.g:994:4: MINUS eventProperty
                    {
                    MINUS317=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression5899); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS317);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression5901);
                    eventProperty318=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty318.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 994:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:994:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:995:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression5914);
                    constant319=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant319.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:996:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression5919);
                    substitution320=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution320.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:997:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN321=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression5924); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression5927);
                    expression322=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression322.getTree());
                    RPAREN323=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression5929); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:998:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression5935);
                    eventPropertyOrLibFunction324=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction324.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:999:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:999:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:999:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression5947);
                    builtinFunc325=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc325.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1000:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression5953);
                    arrayExpression326=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression326.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1001:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression5958);
                    subSelectExpression327=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression327.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1002:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression5963);
                    existsSubSelectExpression328=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression328.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:1005:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr329 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1006:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1006:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression5980);
            subQueryExpr329=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr329.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1007:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1007:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:1010:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr330 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1011:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1011:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression6002);
            subQueryExpr330=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr330.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1012:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1012:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:1015:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS331=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr332 = null;


        CommonTree EXISTS331_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1016:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1016:4: EXISTS subQueryExpr
            {
            EXISTS331=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression6024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS331);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression6026);
            subQueryExpr332=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr332.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1017:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1017:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:1020:1: subQueryExpr : LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN333=null;
        Token SELECT334=null;
        Token FROM336=null;
        Token WHERE338=null;
        Token RPAREN340=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement335 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr337 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause339 = null;


        CommonTree LPAREN333_tree=null;
        CommonTree SELECT334_tree=null;
        CommonTree FROM336_tree=null;
        CommonTree WHERE338_tree=null;
        CommonTree RPAREN340_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:1023:2: ( LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:1023:4: LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN333=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr6059); if (state.failed) return retval;
            SELECT334=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr6065); if (state.failed) return retval;
            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr6068);
            selectionListElement335=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement335.getTree());
            FROM336=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr6075); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr6078);
            subSelectFilterExpr337=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr337.getTree());
            // EsperEPL2Grammar.g:1026:6: ( WHERE whereClause )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==WHERE) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // EsperEPL2Grammar.g:1026:7: WHERE whereClause
                    {
                    WHERE338=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr6086); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr6089);
                    whereClause339=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause339.getTree());

                    }
                    break;

            }

            RPAREN340=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr6098); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:1030:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT342=null;
        Token DOT344=null;
        Token AS346=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression341 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression343 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression345 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT342_tree=null;
        CommonTree DOT344_tree=null;
        CommonTree AS346_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:1033:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:1033:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr6122);
            eventFilterExpression341=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression341.getTree());
            // EsperEPL2Grammar.g:1034:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==DOT) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // EsperEPL2Grammar.g:1034:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT342=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr6127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT342);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr6129);
                    viewExpression343=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression343.getTree());
                    // EsperEPL2Grammar.g:1034:23: ( DOT viewExpression )*
                    loop135:
                    do {
                        int alt135=2;
                        int LA135_0 = input.LA(1);

                        if ( (LA135_0==DOT) ) {
                            alt135=1;
                        }


                        switch (alt135) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1034:24: DOT viewExpression
                    	    {
                    	    DOT344=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr6132); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT344);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr6134);
                    	    viewExpression345=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression345.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop135;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1034:47: ( AS i= IDENT | i= IDENT )?
            int alt137=3;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==AS) ) {
                alt137=1;
            }
            else if ( (LA137_0==IDENT) ) {
                alt137=2;
            }
            switch (alt137) {
                case 1 :
                    // EsperEPL2Grammar.g:1034:48: AS i= IDENT
                    {
                    AS346=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr6141); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS346);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr6145); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1034:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr6151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1034:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt138=3;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==RETAINUNION) ) {
                alt138=1;
            }
            else if ( (LA138_0==RETAININTERSECTION) ) {
                alt138=2;
            }
            switch (alt138) {
                case 1 :
                    // EsperEPL2Grammar.g:1034:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr6158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1034:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr6162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ru, eventFilterExpression, viewExpression, i, ri
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1035:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:1035:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:1035:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:1035:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1035:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:1035:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:1038:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY347=null;
        Token COMMA349=null;
        Token RCURLY351=null;
        EsperEPL2GrammarParser.expression_return expression348 = null;

        EsperEPL2GrammarParser.expression_return expression350 = null;


        CommonTree LCURLY347_tree=null;
        CommonTree COMMA349_tree=null;
        CommonTree RCURLY351_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1039:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:1039:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY347=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression6202); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY347);

            // EsperEPL2Grammar.g:1039:11: ( expression ( COMMA expression )* )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==WINDOW||LA140_0==ESCAPE||(LA140_0>=NOT_EXPR && LA140_0<=EVERY_EXPR)||(LA140_0>=SUM && LA140_0<=COUNT)||LA140_0==CASE||LA140_0==OUTER||(LA140_0>=JOIN && LA140_0<=FULL)||(LA140_0>=EVENTS && LA140_0<=LAST)||(LA140_0>=UNIDIRECTIONAL && LA140_0<=CURRENT_TIMESTAMP)||LA140_0==SNAPSHOT||(LA140_0>=VARIABLE && LA140_0<=AT)||(LA140_0>=BOOLEAN_TRUE && LA140_0<=VALUE_NULL)||LA140_0==NUM_DOUBLE||LA140_0==IDENT||LA140_0==LPAREN||(LA140_0>=STRING_LITERAL && LA140_0<=QUOTED_STRING_LITERAL)||(LA140_0>=PLUS && LA140_0<=MINUS)||LA140_0==LCURLY||LA140_0==NUM_INT||LA140_0==QUESTION||(LA140_0>=TICKED_STRING_LITERAL && LA140_0<=NUM_FLOAT)) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // EsperEPL2Grammar.g:1039:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression6205);
                    expression348=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression348.getTree());
                    // EsperEPL2Grammar.g:1039:23: ( COMMA expression )*
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==COMMA) ) {
                            alt139=1;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1039:24: COMMA expression
                    	    {
                    	    COMMA349=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression6208); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA349);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression6210);
                    	    expression350=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression350.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY351=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression6217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY351);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1040:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:1040:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:1040:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:1043:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM352=null;
        Token LPAREN353=null;
        Token ALL354=null;
        Token DISTINCT355=null;
        Token RPAREN357=null;
        Token AVG358=null;
        Token LPAREN359=null;
        Token ALL360=null;
        Token DISTINCT361=null;
        Token RPAREN363=null;
        Token COUNT364=null;
        Token LPAREN365=null;
        Token ALL366=null;
        Token DISTINCT367=null;
        Token STAR369=null;
        Token RPAREN370=null;
        Token MEDIAN371=null;
        Token LPAREN372=null;
        Token ALL373=null;
        Token DISTINCT374=null;
        Token RPAREN376=null;
        Token STDDEV377=null;
        Token LPAREN378=null;
        Token ALL379=null;
        Token DISTINCT380=null;
        Token RPAREN382=null;
        Token AVEDEV383=null;
        Token LPAREN384=null;
        Token ALL385=null;
        Token DISTINCT386=null;
        Token RPAREN388=null;
        Token COALESCE389=null;
        Token LPAREN390=null;
        Token COMMA392=null;
        Token COMMA394=null;
        Token RPAREN396=null;
        Token PREVIOUS397=null;
        Token LPAREN398=null;
        Token COMMA400=null;
        Token RPAREN402=null;
        Token PRIOR403=null;
        Token LPAREN404=null;
        Token NUM_INT405=null;
        Token COMMA406=null;
        Token RPAREN408=null;
        Token INSTANCEOF409=null;
        Token LPAREN410=null;
        Token COMMA412=null;
        Token COMMA414=null;
        Token RPAREN416=null;
        Token CAST417=null;
        Token LPAREN418=null;
        Token COMMA420=null;
        Token AS421=null;
        Token RPAREN423=null;
        Token EXISTS424=null;
        Token LPAREN425=null;
        Token RPAREN427=null;
        Token CURRENT_TIMESTAMP428=null;
        Token LPAREN429=null;
        Token RPAREN430=null;
        EsperEPL2GrammarParser.expression_return expression356 = null;

        EsperEPL2GrammarParser.expression_return expression362 = null;

        EsperEPL2GrammarParser.expression_return expression368 = null;

        EsperEPL2GrammarParser.expression_return expression375 = null;

        EsperEPL2GrammarParser.expression_return expression381 = null;

        EsperEPL2GrammarParser.expression_return expression387 = null;

        EsperEPL2GrammarParser.expression_return expression391 = null;

        EsperEPL2GrammarParser.expression_return expression393 = null;

        EsperEPL2GrammarParser.expression_return expression395 = null;

        EsperEPL2GrammarParser.expression_return expression399 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty401 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty407 = null;

        EsperEPL2GrammarParser.expression_return expression411 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier413 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier415 = null;

        EsperEPL2GrammarParser.expression_return expression419 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier422 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty426 = null;


        CommonTree SUM352_tree=null;
        CommonTree LPAREN353_tree=null;
        CommonTree ALL354_tree=null;
        CommonTree DISTINCT355_tree=null;
        CommonTree RPAREN357_tree=null;
        CommonTree AVG358_tree=null;
        CommonTree LPAREN359_tree=null;
        CommonTree ALL360_tree=null;
        CommonTree DISTINCT361_tree=null;
        CommonTree RPAREN363_tree=null;
        CommonTree COUNT364_tree=null;
        CommonTree LPAREN365_tree=null;
        CommonTree ALL366_tree=null;
        CommonTree DISTINCT367_tree=null;
        CommonTree STAR369_tree=null;
        CommonTree RPAREN370_tree=null;
        CommonTree MEDIAN371_tree=null;
        CommonTree LPAREN372_tree=null;
        CommonTree ALL373_tree=null;
        CommonTree DISTINCT374_tree=null;
        CommonTree RPAREN376_tree=null;
        CommonTree STDDEV377_tree=null;
        CommonTree LPAREN378_tree=null;
        CommonTree ALL379_tree=null;
        CommonTree DISTINCT380_tree=null;
        CommonTree RPAREN382_tree=null;
        CommonTree AVEDEV383_tree=null;
        CommonTree LPAREN384_tree=null;
        CommonTree ALL385_tree=null;
        CommonTree DISTINCT386_tree=null;
        CommonTree RPAREN388_tree=null;
        CommonTree COALESCE389_tree=null;
        CommonTree LPAREN390_tree=null;
        CommonTree COMMA392_tree=null;
        CommonTree COMMA394_tree=null;
        CommonTree RPAREN396_tree=null;
        CommonTree PREVIOUS397_tree=null;
        CommonTree LPAREN398_tree=null;
        CommonTree COMMA400_tree=null;
        CommonTree RPAREN402_tree=null;
        CommonTree PRIOR403_tree=null;
        CommonTree LPAREN404_tree=null;
        CommonTree NUM_INT405_tree=null;
        CommonTree COMMA406_tree=null;
        CommonTree RPAREN408_tree=null;
        CommonTree INSTANCEOF409_tree=null;
        CommonTree LPAREN410_tree=null;
        CommonTree COMMA412_tree=null;
        CommonTree COMMA414_tree=null;
        CommonTree RPAREN416_tree=null;
        CommonTree CAST417_tree=null;
        CommonTree LPAREN418_tree=null;
        CommonTree COMMA420_tree=null;
        CommonTree AS421_tree=null;
        CommonTree RPAREN423_tree=null;
        CommonTree EXISTS424_tree=null;
        CommonTree LPAREN425_tree=null;
        CommonTree RPAREN427_tree=null;
        CommonTree CURRENT_TIMESTAMP428_tree=null;
        CommonTree LPAREN429_tree=null;
        CommonTree RPAREN430_tree=null;

        try {
            // EsperEPL2Grammar.g:1044:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt152=13;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt152=1;
                }
                break;
            case AVG:
                {
                alt152=2;
                }
                break;
            case COUNT:
                {
                alt152=3;
                }
                break;
            case MEDIAN:
                {
                alt152=4;
                }
                break;
            case STDDEV:
                {
                alt152=5;
                }
                break;
            case AVEDEV:
                {
                alt152=6;
                }
                break;
            case COALESCE:
                {
                alt152=7;
                }
                break;
            case PREVIOUS:
                {
                alt152=8;
                }
                break;
            case PRIOR:
                {
                alt152=9;
                }
                break;
            case INSTANCEOF:
                {
                alt152=10;
                }
                break;
            case CAST:
                {
                alt152=11;
                }
                break;
            case EXISTS:
                {
                alt152=12;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt152=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }

            switch (alt152) {
                case 1 :
                    // EsperEPL2Grammar.g:1044:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM352=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc6240); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM352_tree = (CommonTree)adaptor.create(SUM352);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM352_tree, root_0);
                    }
                    LPAREN353=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6243); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1044:17: ( ALL | DISTINCT )?
                    int alt141=3;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==ALL) ) {
                        alt141=1;
                    }
                    else if ( (LA141_0==DISTINCT) ) {
                        alt141=2;
                    }
                    switch (alt141) {
                        case 1 :
                            // EsperEPL2Grammar.g:1044:18: ALL
                            {
                            ALL354=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6247); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1044:25: DISTINCT
                            {
                            DISTINCT355=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6252); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT355_tree = (CommonTree)adaptor.create(DISTINCT355);
                            adaptor.addChild(root_0, DISTINCT355_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6256);
                    expression356=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression356.getTree());
                    RPAREN357=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6258); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1045:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG358=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc6264); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG358_tree = (CommonTree)adaptor.create(AVG358);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG358_tree, root_0);
                    }
                    LPAREN359=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6267); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1045:17: ( ALL | DISTINCT )?
                    int alt142=3;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==ALL) ) {
                        alt142=1;
                    }
                    else if ( (LA142_0==DISTINCT) ) {
                        alt142=2;
                    }
                    switch (alt142) {
                        case 1 :
                            // EsperEPL2Grammar.g:1045:18: ALL
                            {
                            ALL360=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6271); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1045:25: DISTINCT
                            {
                            DISTINCT361=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6276); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT361_tree = (CommonTree)adaptor.create(DISTINCT361);
                            adaptor.addChild(root_0, DISTINCT361_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6280);
                    expression362=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression362.getTree());
                    RPAREN363=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6282); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1046:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT364=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc6288); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT364_tree = (CommonTree)adaptor.create(COUNT364);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT364_tree, root_0);
                    }
                    LPAREN365=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6291); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1047:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==WINDOW||LA144_0==ESCAPE||(LA144_0>=NOT_EXPR && LA144_0<=EVERY_EXPR)||(LA144_0>=SUM && LA144_0<=COUNT)||LA144_0==CASE||LA144_0==OUTER||(LA144_0>=JOIN && LA144_0<=FULL)||(LA144_0>=DISTINCT && LA144_0<=ALL)||(LA144_0>=EVENTS && LA144_0<=LAST)||(LA144_0>=UNIDIRECTIONAL && LA144_0<=CURRENT_TIMESTAMP)||LA144_0==SNAPSHOT||(LA144_0>=VARIABLE && LA144_0<=AT)||(LA144_0>=BOOLEAN_TRUE && LA144_0<=VALUE_NULL)||LA144_0==NUM_DOUBLE||LA144_0==IDENT||LA144_0==LPAREN||(LA144_0>=STRING_LITERAL && LA144_0<=QUOTED_STRING_LITERAL)||(LA144_0>=PLUS && LA144_0<=MINUS)||LA144_0==LCURLY||LA144_0==NUM_INT||LA144_0==QUESTION||(LA144_0>=TICKED_STRING_LITERAL && LA144_0<=NUM_FLOAT)) ) {
                        alt144=1;
                    }
                    else if ( (LA144_0==STAR) ) {
                        alt144=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 144, 0, input);

                        throw nvae;
                    }
                    switch (alt144) {
                        case 1 :
                            // EsperEPL2Grammar.g:1048:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:1048:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:1048:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:1048:5: ( ALL | DISTINCT )?
                            int alt143=3;
                            int LA143_0 = input.LA(1);

                            if ( (LA143_0==ALL) ) {
                                alt143=1;
                            }
                            else if ( (LA143_0==DISTINCT) ) {
                                alt143=2;
                            }
                            switch (alt143) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1048:6: ALL
                                    {
                                    ALL366=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6303); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1048:13: DISTINCT
                                    {
                                    DISTINCT367=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6308); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT367_tree = (CommonTree)adaptor.create(DISTINCT367);
                                    adaptor.addChild(root_0, DISTINCT367_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc6312);
                            expression368=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression368.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1050:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:1050:4: ( STAR )
                            // EsperEPL2Grammar.g:1050:5: STAR
                            {
                            STAR369=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc6323); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN370=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6334); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1053:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN371=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc6340); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN371_tree = (CommonTree)adaptor.create(MEDIAN371);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN371_tree, root_0);
                    }
                    LPAREN372=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6343); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1053:20: ( ALL | DISTINCT )?
                    int alt145=3;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==ALL) ) {
                        alt145=1;
                    }
                    else if ( (LA145_0==DISTINCT) ) {
                        alt145=2;
                    }
                    switch (alt145) {
                        case 1 :
                            // EsperEPL2Grammar.g:1053:21: ALL
                            {
                            ALL373=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6347); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1053:28: DISTINCT
                            {
                            DISTINCT374=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6352); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT374_tree = (CommonTree)adaptor.create(DISTINCT374);
                            adaptor.addChild(root_0, DISTINCT374_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6356);
                    expression375=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression375.getTree());
                    RPAREN376=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6358); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1054:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV377=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc6364); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV377_tree = (CommonTree)adaptor.create(STDDEV377);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV377_tree, root_0);
                    }
                    LPAREN378=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6367); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1054:20: ( ALL | DISTINCT )?
                    int alt146=3;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==ALL) ) {
                        alt146=1;
                    }
                    else if ( (LA146_0==DISTINCT) ) {
                        alt146=2;
                    }
                    switch (alt146) {
                        case 1 :
                            // EsperEPL2Grammar.g:1054:21: ALL
                            {
                            ALL379=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6371); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1054:28: DISTINCT
                            {
                            DISTINCT380=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6376); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT380_tree = (CommonTree)adaptor.create(DISTINCT380);
                            adaptor.addChild(root_0, DISTINCT380_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6380);
                    expression381=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression381.getTree());
                    RPAREN382=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6382); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1055:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV383=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc6388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV383_tree = (CommonTree)adaptor.create(AVEDEV383);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV383_tree, root_0);
                    }
                    LPAREN384=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6391); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1055:20: ( ALL | DISTINCT )?
                    int alt147=3;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==ALL) ) {
                        alt147=1;
                    }
                    else if ( (LA147_0==DISTINCT) ) {
                        alt147=2;
                    }
                    switch (alt147) {
                        case 1 :
                            // EsperEPL2Grammar.g:1055:21: ALL
                            {
                            ALL385=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6395); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1055:28: DISTINCT
                            {
                            DISTINCT386=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6400); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT386_tree = (CommonTree)adaptor.create(DISTINCT386);
                            adaptor.addChild(root_0, DISTINCT386_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6404);
                    expression387=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression387.getTree());
                    RPAREN388=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6406); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1056:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE389=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc6412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE389_tree = (CommonTree)adaptor.create(COALESCE389);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE389_tree, root_0);
                    }
                    LPAREN390=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6415); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6418);
                    expression391=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression391.getTree());
                    COMMA392=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6420); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6423);
                    expression393=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression393.getTree());
                    // EsperEPL2Grammar.g:1056:51: ( COMMA expression )*
                    loop148:
                    do {
                        int alt148=2;
                        int LA148_0 = input.LA(1);

                        if ( (LA148_0==COMMA) ) {
                            alt148=1;
                        }


                        switch (alt148) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1056:52: COMMA expression
                    	    {
                    	    COMMA394=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6426); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc6429);
                    	    expression395=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression395.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop148;
                        }
                    } while (true);

                    RPAREN396=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6433); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1057:4: PREVIOUS LPAREN expression COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS397=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc6439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS397_tree = (CommonTree)adaptor.create(PREVIOUS397);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS397_tree, root_0);
                    }
                    LPAREN398=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6442); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6445);
                    expression399=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression399.getTree());
                    COMMA400=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6447); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc6450);
                    eventProperty401=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty401.getTree());
                    RPAREN402=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6452); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1058:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR403=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc6458); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR403_tree = (CommonTree)adaptor.create(PRIOR403);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR403_tree, root_0);
                    }
                    LPAREN404=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6461); if (state.failed) return retval;
                    NUM_INT405=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc6464); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT405_tree = (CommonTree)adaptor.create(NUM_INT405);
                    adaptor.addChild(root_0, NUM_INT405_tree);
                    }
                    COMMA406=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6466); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc6469);
                    eventProperty407=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty407.getTree());
                    RPAREN408=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6471); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1061:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF409=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc6481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF409_tree = (CommonTree)adaptor.create(INSTANCEOF409);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF409_tree, root_0);
                    }
                    LPAREN410=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6484); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6487);
                    expression411=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression411.getTree());
                    COMMA412=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6489); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc6492);
                    classIdentifier413=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier413.getTree());
                    // EsperEPL2Grammar.g:1061:58: ( COMMA classIdentifier )*
                    loop149:
                    do {
                        int alt149=2;
                        int LA149_0 = input.LA(1);

                        if ( (LA149_0==COMMA) ) {
                            alt149=1;
                        }


                        switch (alt149) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1061:59: COMMA classIdentifier
                    	    {
                    	    COMMA414=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6495); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc6498);
                    	    classIdentifier415=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier415.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop149;
                        }
                    } while (true);

                    RPAREN416=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6502); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1062:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST417=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc6508); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST417_tree = (CommonTree)adaptor.create(CAST417);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST417_tree, root_0);
                    }
                    LPAREN418=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6511); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6514);
                    expression419=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression419.getTree());
                    // EsperEPL2Grammar.g:1062:29: ( COMMA | AS )
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==COMMA) ) {
                        alt150=1;
                    }
                    else if ( (LA150_0==AS) ) {
                        alt150=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 150, 0, input);

                        throw nvae;
                    }
                    switch (alt150) {
                        case 1 :
                            // EsperEPL2Grammar.g:1062:30: COMMA
                            {
                            COMMA420=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6517); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1062:39: AS
                            {
                            AS421=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc6522); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc6526);
                    classIdentifier422=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier422.getTree());
                    RPAREN423=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6528); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1063:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS424=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc6534); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS424_tree = (CommonTree)adaptor.create(EXISTS424);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS424_tree, root_0);
                    }
                    LPAREN425=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6537); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc6540);
                    eventProperty426=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty426.getTree());
                    RPAREN427=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6542); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1064:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP428=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc6548); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP428_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP428);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP428_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1064:23: ( LPAREN RPAREN )?
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==LPAREN) ) {
                        alt151=1;
                    }
                    switch (alt151) {
                        case 1 :
                            // EsperEPL2Grammar.g:1064:24: LPAREN RPAREN
                            {
                            LPAREN429=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6552); if (state.failed) return retval;
                            RPAREN430=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6555); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1067:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX431=null;
        Token MIN432=null;
        Token LPAREN433=null;
        Token COMMA435=null;
        Token COMMA437=null;
        Token RPAREN439=null;
        EsperEPL2GrammarParser.expression_return expression434 = null;

        EsperEPL2GrammarParser.expression_return expression436 = null;

        EsperEPL2GrammarParser.expression_return expression438 = null;


        CommonTree MAX431_tree=null;
        CommonTree MIN432_tree=null;
        CommonTree LPAREN433_tree=null;
        CommonTree COMMA435_tree=null;
        CommonTree COMMA437_tree=null;
        CommonTree RPAREN439_tree=null;

        try {
            // EsperEPL2Grammar.g:1068:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1068:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1068:4: ( MAX | MIN )
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==MAX) ) {
                alt153=1;
            }
            else if ( (LA153_0==MIN) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    // EsperEPL2Grammar.g:1068:5: MAX
                    {
                    MAX431=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc6571); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX431_tree = (CommonTree)adaptor.create(MAX431);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX431_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1068:12: MIN
                    {
                    MIN432=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc6576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN432_tree = (CommonTree)adaptor.create(MIN432);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN432_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN433=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc6580); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc6583);
            expression434=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression434.getTree());
            // EsperEPL2Grammar.g:1068:37: ( COMMA expression ( COMMA expression )* )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==COMMA) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // EsperEPL2Grammar.g:1068:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA435=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc6586); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc6589);
                    expression436=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression436.getTree());
                    // EsperEPL2Grammar.g:1068:56: ( COMMA expression )*
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==COMMA) ) {
                            alt154=1;
                        }


                        switch (alt154) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1068:57: COMMA expression
                    	    {
                    	    COMMA437=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc6592); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc6595);
                    	    expression438=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression438.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN439=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc6602); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1071:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty440 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction441 = null;



        try {
            // EsperEPL2Grammar.g:1072:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt156=2;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // EsperEPL2Grammar.g:1072:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction6621);
                    eventProperty440=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty440.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1073:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction6626);
                    libFunction441=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction441.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1076:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT443=null;
        Token LPAREN445=null;
        Token RPAREN447=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy442 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent444 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs446 = null;


        CommonTree DOT443_tree=null;
        CommonTree LPAREN445_tree=null;
        CommonTree RPAREN447_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1077:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1077:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1077:4: ( classIdentifierNonGreedy DOT )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==IDENT) ) {
                int LA157_1 = input.LA(2);

                if ( (LA157_1==DOT) ) {
                    alt157=1;
                }
            }
            else if ( (LA157_0==TICKED_STRING_LITERAL) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // EsperEPL2Grammar.g:1077:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction6639);
                    classIdentifierNonGreedy442=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy442.getTree());
                    DOT443=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction6641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT443);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction6645);
            funcIdent444=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent444.getTree());
            LPAREN445=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction6647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN445);

            // EsperEPL2Grammar.g:1077:53: ( libFunctionArgs )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==WINDOW||LA158_0==ESCAPE||(LA158_0>=NOT_EXPR && LA158_0<=EVERY_EXPR)||(LA158_0>=SUM && LA158_0<=COUNT)||LA158_0==CASE||LA158_0==OUTER||(LA158_0>=JOIN && LA158_0<=FULL)||(LA158_0>=DISTINCT && LA158_0<=ALL)||(LA158_0>=EVENTS && LA158_0<=LAST)||(LA158_0>=UNIDIRECTIONAL && LA158_0<=CURRENT_TIMESTAMP)||LA158_0==SNAPSHOT||(LA158_0>=VARIABLE && LA158_0<=AT)||(LA158_0>=BOOLEAN_TRUE && LA158_0<=VALUE_NULL)||LA158_0==NUM_DOUBLE||LA158_0==IDENT||LA158_0==LPAREN||(LA158_0>=STRING_LITERAL && LA158_0<=QUOTED_STRING_LITERAL)||(LA158_0>=PLUS && LA158_0<=MINUS)||LA158_0==LCURLY||LA158_0==NUM_INT||LA158_0==QUESTION||(LA158_0>=TICKED_STRING_LITERAL && LA158_0<=NUM_FLOAT)) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // EsperEPL2Grammar.g:1077:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction6650);
                    libFunctionArgs446=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs446.getTree());

                    }
                    break;

            }

            RPAREN447=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction6654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN447);



            // AST REWRITE
            // elements: funcIdent, classIdentifierNonGreedy, libFunctionArgs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1078:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1078:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1078:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1078:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1081:1: funcIdent : ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        Token IDENT448=null;

        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree IDENT448_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1082:2: ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt159=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt159=1;
                }
                break;
            case MAX:
                {
                alt159=2;
                }
                break;
            case MIN:
                {
                alt159=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // EsperEPL2Grammar.g:1082:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT448=(Token)match(input,IDENT,FOLLOW_IDENT_in_funcIdent6684); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT448_tree = (CommonTree)adaptor.create(IDENT448);
                    adaptor.addChild(root_0, IDENT448_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1083:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent6691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1083:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1084:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent6703); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1084:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1087:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL449=null;
        Token DISTINCT450=null;
        Token COMMA452=null;
        EsperEPL2GrammarParser.expression_return expression451 = null;

        EsperEPL2GrammarParser.expression_return expression453 = null;


        CommonTree ALL449_tree=null;
        CommonTree DISTINCT450_tree=null;
        CommonTree COMMA452_tree=null;

        try {
            // EsperEPL2Grammar.g:1088:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1088:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1088:4: ( ALL | DISTINCT )?
            int alt160=3;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==ALL) ) {
                alt160=1;
            }
            else if ( (LA160_0==DISTINCT) ) {
                alt160=2;
            }
            switch (alt160) {
                case 1 :
                    // EsperEPL2Grammar.g:1088:5: ALL
                    {
                    ALL449=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs6721); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1088:12: DISTINCT
                    {
                    DISTINCT450=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs6726); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT450_tree = (CommonTree)adaptor.create(DISTINCT450);
                    adaptor.addChild(root_0, DISTINCT450_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs6730);
            expression451=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression451.getTree());
            // EsperEPL2Grammar.g:1088:34: ( COMMA expression )*
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==COMMA) ) {
                    alt161=1;
                }


                switch (alt161) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1088:35: COMMA expression
            	    {
            	    COMMA452=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs6733); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs6736);
            	    expression453=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression453.getTree());

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1091:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR455=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr454 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr456 = null;


        CommonTree AND_EXPR455_tree=null;

        try {
            // EsperEPL2Grammar.g:1092:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1092:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList6750);
            concatenationExpr454=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr454.getTree());
            AND_EXPR455=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList6752); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList6755);
            concatenationExpr456=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr456.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1101:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression457 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1104:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1104:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression6783);
            followedByExpression457=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression457.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1107:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression458 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression459 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1108:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1108:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression6795);
            orExpression458=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression458.getTree());
            // EsperEPL2Grammar.g:1108:17: (f= FOLLOWED_BY orExpression )*
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==FOLLOWED_BY) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1108:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression6800); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression6802);
            	    orExpression459=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression459.getTree());

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1109:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1109:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1110:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1113:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression460 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression461 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1114:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1114:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression6841);
            andExpression460=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression460.getTree());
            // EsperEPL2Grammar.g:1114:18: (o= OR_EXPR andExpression )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==OR_EXPR) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1114:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression6846); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression6848);
            	    andExpression461=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression461.getTree());

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);



            // AST REWRITE
            // elements: OR_EXPR, andExpression, andExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1115:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1115:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1116:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1119:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression462 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression463 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1120:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1120:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression6880);
            matchUntilExpression462=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression462.getTree());
            // EsperEPL2Grammar.g:1120:25: (a= AND_EXPR matchUntilExpression )*
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==AND_EXPR) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1120:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression6885); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression6887);
            	    matchUntilExpression463=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression463.getTree());

            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);



            // AST REWRITE
            // elements: AND_EXPR, matchUntilExpression, matchUntilExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1121:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1121:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1122:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1125:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression464 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression465 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1126:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1126:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1126:4: (r= matchUntilRange )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==LBRACK) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // EsperEPL2Grammar.g:1126:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression6922);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression6926);
            qualifyExpression464=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression464.getTree());
            // EsperEPL2Grammar.g:1126:43: (a= UNTIL qualifyExpression )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==UNTIL) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // EsperEPL2Grammar.g:1126:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression6931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression6933);
                    qualifyExpression465=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression465.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qualifyExpression, matchUntilRange, qualifyExpression, qualifyExpression, qualifyExpression, matchUntilRange
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1127:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1127:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1128:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1128:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1129:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1129:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1130:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1133:1: qualifyExpression : ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList466 = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix467 = null;


        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1134:2: ( ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1134:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1134:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( ((LA169_0>=NOT_EXPR && LA169_0<=EVERY_DISTINCT_EXPR)) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // EsperEPL2Grammar.g:1134:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1134:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList )
                    int alt167=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt167=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt167=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt167=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 167, 0, input);

                        throw nvae;
                    }

                    switch (alt167) {
                        case 1 :
                            // EsperEPL2Grammar.g:1134:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression6998); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1134:21: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression7004); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1134:34: d= EVERY_DISTINCT_EXPR distinctExpressionList
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression7010); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);

                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression7012);
                            distinctExpressionList466=distinctExpressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList466.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1134:80: (r= matchUntilRange )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==LBRACK) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // EsperEPL2Grammar.g:1134:81: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression7018);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression7027);
            guardPostFix467=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix467.getTree());


            // AST REWRITE
            // elements: guardPostFix, EVERY_DISTINCT_EXPR, distinctExpressionList, guardPostFix, guardPostFix, EVERY_EXPR, guardPostFix, EVERY_EXPR, distinctExpressionList, matchUntilRange, guardPostFix, matchUntilRange, matchUntilRange, EVERY_DISTINCT_EXPR, guardPostFix, guardPostFix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1136:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1136:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1137:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1137:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1138:3: -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
            if (d != null && r == null) {
                // EsperEPL2Grammar.g:1138:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1139:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1139:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1139:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1140:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1140:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1140:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1141:3: -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (d != null && r != null) {
                // EsperEPL2Grammar.g:1141:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                // EsperEPL2Grammar.g:1141:77: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1142:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionList"
    // EsperEPL2Grammar.g:1145:1: distinctExpressionList : LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) ;
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN468=null;
        Token COMMA470=null;
        Token RPAREN472=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom469 = null;

        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom471 = null;


        CommonTree LPAREN468_tree=null;
        CommonTree COMMA470_tree=null;
        CommonTree RPAREN472_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            // EsperEPL2Grammar.g:1146:2: ( LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) )
            // EsperEPL2Grammar.g:1146:4: LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN
            {
            LPAREN468=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList7142); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN468);

            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList7144);
            distinctExpressionAtom469=distinctExpressionAtom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom469.getTree());
            // EsperEPL2Grammar.g:1146:34: ( COMMA distinctExpressionAtom )*
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==COMMA) ) {
                    alt170=1;
                }


                switch (alt170) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1146:35: COMMA distinctExpressionAtom
            	    {
            	    COMMA470=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList7147); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA470);

            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList7149);
            	    distinctExpressionAtom471=distinctExpressionAtom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom471.getTree());

            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);

            RPAREN472=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList7153); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN472);



            // AST REWRITE
            // elements: distinctExpressionAtom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1147:3: -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
            {
                // EsperEPL2Grammar.g:1147:6: ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);

                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());

                }
                stream_distinctExpressionAtom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionList"

    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionAtom"
    // EsperEPL2Grammar.g:1150:1: distinctExpressionAtom : expression ;
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.expression_return expression473 = null;



        try {
            // EsperEPL2Grammar.g:1151:2: ( expression )
            // EsperEPL2Grammar.g:1151:4: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_distinctExpressionAtom7176);
            expression473=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression473.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionAtom"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1154:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token w=null;
        Token RPAREN476=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression474 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression475 = null;

        EsperEPL2GrammarParser.guardExpression_return guardExpression477 = null;


        CommonTree l_tree=null;
        CommonTree w_tree=null;
        CommonTree RPAREN476_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1155:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1155:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )?
            {
            // EsperEPL2Grammar.g:1155:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==IDENT||LA171_0==TICKED_STRING_LITERAL) ) {
                alt171=1;
            }
            else if ( (LA171_0==LPAREN) ) {
                alt171=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;
            }
            switch (alt171) {
                case 1 :
                    // EsperEPL2Grammar.g:1155:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix7191);
                    atomicExpression474=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression474.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1155:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix7197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix7199);
                    patternExpression475=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression475.getTree());
                    RPAREN476=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix7201); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN476);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1155:59: (w= WHERE guardExpression )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==WHERE) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // EsperEPL2Grammar.g:1155:60: w= WHERE guardExpression
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix7207); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);

                    pushFollow(FOLLOW_guardExpression_in_guardPostFix7209);
                    guardExpression477=guardExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardExpression.add(guardExpression477.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: guardExpression, patternExpression, atomicExpression, atomicExpression, patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1156:3: -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            if (w != null) {
                // EsperEPL2Grammar.g:1156:20: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1156:33: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1156:51: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1157:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1157:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1157:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1160:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression478 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression479 = null;



        try {
            // EsperEPL2Grammar.g:1161:2: ( observerExpression | patternFilterExpression )
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==IDENT) ) {
                int LA173_1 = input.LA(2);

                if ( (LA173_1==COLON) ) {
                    alt173=1;
                }
                else if ( (LA173_1==EOF||(LA173_1>=OR_EXPR && LA173_1<=AND_EXPR)||LA173_1==WHERE||LA173_1==UNTIL||(LA173_1>=EQUALS && LA173_1<=RPAREN)||(LA173_1>=LBRACK && LA173_1<=RBRACK)||LA173_1==FOLLOWED_BY) ) {
                    alt173=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 173, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA173_0==TICKED_STRING_LITERAL) ) {
                alt173=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }
            switch (alt173) {
                case 1 :
                    // EsperEPL2Grammar.g:1161:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression7251);
                    observerExpression478=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression478.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1161:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression7255);
                    patternFilterExpression479=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression479.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1164:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON480=null;
        Token LPAREN481=null;
        Token RPAREN483=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList482 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON480_tree=null;
        CommonTree LPAREN481_tree=null;
        CommonTree RPAREN483_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1165:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1165:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression7270); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON480=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression7272); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON480);

            // EsperEPL2Grammar.g:1165:19: (nm= IDENT | a= AT )
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==IDENT) ) {
                alt174=1;
            }
            else if ( (LA174_0==AT) ) {
                alt174=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;
            }
            switch (alt174) {
                case 1 :
                    // EsperEPL2Grammar.g:1165:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression7277); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1165:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression7283); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN481=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression7286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN481);

            // EsperEPL2Grammar.g:1165:44: ( expressionWithTimeList )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==WINDOW||LA175_0==ESCAPE||(LA175_0>=NOT_EXPR && LA175_0<=EVERY_EXPR)||(LA175_0>=SUM && LA175_0<=COUNT)||LA175_0==CASE||LA175_0==OUTER||(LA175_0>=JOIN && LA175_0<=FULL)||(LA175_0>=EVENTS && LA175_0<=LAST)||(LA175_0>=UNIDIRECTIONAL && LA175_0<=CURRENT_TIMESTAMP)||LA175_0==SNAPSHOT||(LA175_0>=VARIABLE && LA175_0<=AT)||(LA175_0>=BOOLEAN_TRUE && LA175_0<=VALUE_NULL)||LA175_0==NUM_DOUBLE||LA175_0==IDENT||LA175_0==LPAREN||(LA175_0>=STAR && LA175_0<=LBRACK)||(LA175_0>=STRING_LITERAL && LA175_0<=QUOTED_STRING_LITERAL)||(LA175_0>=PLUS && LA175_0<=MINUS)||LA175_0==LCURLY||LA175_0==NUM_INT||LA175_0==QUESTION||(LA175_0>=TICKED_STRING_LITERAL && LA175_0<=NUM_FLOAT)) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // EsperEPL2Grammar.g:1165:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression7288);
                    expressionWithTimeList482=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList482.getTree());

                    }
                    break;

            }

            RPAREN483=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression7291); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN483);



            // AST REWRITE
            // elements: nm, IDENT, expressionWithTimeList, expressionWithTimeList, ns, ns
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1166:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1166:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1166:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1166:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1167:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1167:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1167:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardExpression"
    // EsperEPL2Grammar.g:1170:1: guardExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardExpression_return guardExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardExpression_return retval = new EsperEPL2GrammarParser.guardExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT484=null;
        Token COLON485=null;
        Token IDENT486=null;
        Token LPAREN487=null;
        Token RPAREN489=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList488 = null;


        CommonTree IDENT484_tree=null;
        CommonTree COLON485_tree=null;
        CommonTree IDENT486_tree=null;
        CommonTree LPAREN487_tree=null;
        CommonTree RPAREN489_tree=null;

        try {
            // EsperEPL2Grammar.g:1171:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1171:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT484=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression7340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT484_tree = (CommonTree)adaptor.create(IDENT484);
            adaptor.addChild(root_0, IDENT484_tree);
            }
            COLON485=(Token)match(input,COLON,FOLLOW_COLON_in_guardExpression7342); if (state.failed) return retval;
            IDENT486=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression7345); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT486_tree = (CommonTree)adaptor.create(IDENT486);
            adaptor.addChild(root_0, IDENT486_tree);
            }
            LPAREN487=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardExpression7347); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1171:31: ( expressionWithTimeList )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==WINDOW||LA176_0==ESCAPE||(LA176_0>=NOT_EXPR && LA176_0<=EVERY_EXPR)||(LA176_0>=SUM && LA176_0<=COUNT)||LA176_0==CASE||LA176_0==OUTER||(LA176_0>=JOIN && LA176_0<=FULL)||(LA176_0>=EVENTS && LA176_0<=LAST)||(LA176_0>=UNIDIRECTIONAL && LA176_0<=CURRENT_TIMESTAMP)||LA176_0==SNAPSHOT||(LA176_0>=VARIABLE && LA176_0<=AT)||(LA176_0>=BOOLEAN_TRUE && LA176_0<=VALUE_NULL)||LA176_0==NUM_DOUBLE||LA176_0==IDENT||LA176_0==LPAREN||(LA176_0>=STAR && LA176_0<=LBRACK)||(LA176_0>=STRING_LITERAL && LA176_0<=QUOTED_STRING_LITERAL)||(LA176_0>=PLUS && LA176_0<=MINUS)||LA176_0==LCURLY||LA176_0==NUM_INT||LA176_0==QUESTION||(LA176_0>=TICKED_STRING_LITERAL && LA176_0<=NUM_FLOAT)) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // EsperEPL2Grammar.g:1171:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardExpression7351);
                    expressionWithTimeList488=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList488.getTree());

                    }
                    break;

            }

            RPAREN489=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardExpression7355); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1175:1: matchUntilRange : LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token d1=null;
        Token r=null;
        Token c1=null;
        Token db=null;
        Token db2=null;
        Token db3=null;
        Token LBRACK490=null;
        Token DOT491=null;
        Token DOT492=null;
        Token DOT493=null;
        Token DOT494=null;
        Token RBRACK495=null;

        CommonTree l_tree=null;
        CommonTree d1_tree=null;
        CommonTree r_tree=null;
        CommonTree c1_tree=null;
        CommonTree db_tree=null;
        CommonTree db2_tree=null;
        CommonTree db3_tree=null;
        CommonTree LBRACK490_tree=null;
        CommonTree DOT491_tree=null;
        CommonTree DOT492_tree=null;
        CommonTree DOT493_tree=null;
        CommonTree DOT494_tree=null;
        CommonTree RBRACK495_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1176:2: ( LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) )
            // EsperEPL2Grammar.g:1176:4: LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK
            {
            LBRACK490=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange7369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK490);

            // EsperEPL2Grammar.g:1176:11: (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE )
            int alt181=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt181=1;
                }
                break;
            case NUM_DOUBLE:
                {
                alt181=2;
                }
                break;
            case DOT:
                {
                int LA181_3 = input.LA(2);

                if ( (LA181_3==DOT) ) {
                    alt181=3;
                }
                else if ( (LA181_3==NUM_DOUBLE) ) {
                    alt181=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // EsperEPL2Grammar.g:1177:4: l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    {
                    l=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(l);

                    // EsperEPL2Grammar.g:1177:14: ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    int alt178=3;
                    int LA178_0 = input.LA(1);

                    if ( (LA178_0==DOT) ) {
                        alt178=1;
                    }
                    else if ( (LA178_0==COLON) ) {
                        alt178=2;
                    }
                    switch (alt178) {
                        case 1 :
                            // EsperEPL2Grammar.g:1177:17: (d1= DOT DOT (r= NUM_INT )? )
                            {
                            // EsperEPL2Grammar.g:1177:17: (d1= DOT DOT (r= NUM_INT )? )
                            // EsperEPL2Grammar.g:1177:18: d1= DOT DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7386); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            DOT491=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7388); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT491);

                            // EsperEPL2Grammar.g:1177:30: (r= NUM_INT )?
                            int alt177=2;
                            int LA177_0 = input.LA(1);

                            if ( (LA177_0==NUM_INT) ) {
                                alt177=1;
                            }
                            switch (alt177) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1177:30: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7392); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1178:17: (c1= COLON r= NUM_INT )
                            {
                            // EsperEPL2Grammar.g:1178:17: (c1= COLON r= NUM_INT )
                            // EsperEPL2Grammar.g:1178:18: c1= COLON r= NUM_INT
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange7416); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7420); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1180:8: db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    {
                    db=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange7442); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db);

                    // EsperEPL2Grammar.g:1180:22: (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    int alt180=3;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==DOT) ) {
                        alt180=1;
                    }
                    else if ( (LA180_0==NUM_DOUBLE) ) {
                        alt180=2;
                    }
                    switch (alt180) {
                        case 1 :
                            // EsperEPL2Grammar.g:1181:27: d1= DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7474); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            // EsperEPL2Grammar.g:1181:35: (r= NUM_INT )?
                            int alt179=2;
                            int LA179_0 = input.LA(1);

                            if ( (LA179_0==NUM_INT) ) {
                                alt179=1;
                            }
                            switch (alt179) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1181:35: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7478); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1183:27: db2= NUM_DOUBLE
                            {
                            db2=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange7538); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db2);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1185:8: DOT DOT r= NUM_INT
                    {
                    DOT492=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT492);

                    DOT493=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT493);

                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1186:8: DOT db3= NUM_DOUBLE
                    {
                    DOT494=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7590); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT494);

                    db3=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange7594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db3);


                    }
                    break;

            }

            RBRACK495=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange7605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK495);



            // AST REWRITE
            // elements: r, db, r, db3, db, l, db, r, l, l, db2, r, l, db
            // token labels: db, r, l, db2, db3
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleTokenStream stream_db2=new RewriteRuleTokenStream(adaptor,"token db2",db2);
            RewriteRuleTokenStream stream_db3=new RewriteRuleTokenStream(adaptor,"token db3",db3);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1189:3: -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1189:47: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1190:3: -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
            if (l != null && d1 != null) {
                // EsperEPL2Grammar.g:1190:34: ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1191:3: -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && c1 != null) {
                // EsperEPL2Grammar.g:1191:34: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1192:3: -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l)
            if (l != null) {
                // EsperEPL2Grammar.g:1192:20: ^( MATCH_UNTIL_RANGE_BOUNDED $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1193:3: -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
            if (db != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1193:48: ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1194:3: -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
            if (db != null && d1 != null) {
                // EsperEPL2Grammar.g:1194:35: ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1195:3: -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
            if (db != null && db2 != null) {
                // EsperEPL2Grammar.g:1195:36: ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_db2.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1196:3: -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
            if (db3 != null) {
                // EsperEPL2Grammar.g:1196:22: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db3.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1197:3: -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
            if (r != null) {
                // EsperEPL2Grammar.g:1197:20: ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1198:3: -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
            {
                // EsperEPL2Grammar.g:1198:6: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1206:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS496=null;
        Token LPAREN498=null;
        Token RPAREN500=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier497 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList499 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression501 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS496_tree=null;
        CommonTree LPAREN498_tree=null;
        CommonTree RPAREN500_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1209:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1209:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1209:9: (i= IDENT EQUALS )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==IDENT) ) {
                int LA182_1 = input.LA(2);

                if ( (LA182_1==EQUALS) ) {
                    alt182=1;
                }
            }
            switch (alt182) {
                case 1 :
                    // EsperEPL2Grammar.g:1209:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression7790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS496=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression7792); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS496);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression7801);
            classIdentifier497=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier497.getTree());
            // EsperEPL2Grammar.g:1211:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==LPAREN) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // EsperEPL2Grammar.g:1211:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN498=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression7812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN498);

                    // EsperEPL2Grammar.g:1211:17: ( expressionList )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==WINDOW||LA183_0==ESCAPE||(LA183_0>=NOT_EXPR && LA183_0<=EVERY_EXPR)||(LA183_0>=SUM && LA183_0<=COUNT)||LA183_0==CASE||LA183_0==OUTER||(LA183_0>=JOIN && LA183_0<=FULL)||(LA183_0>=EVENTS && LA183_0<=LAST)||(LA183_0>=UNIDIRECTIONAL && LA183_0<=CURRENT_TIMESTAMP)||LA183_0==SNAPSHOT||(LA183_0>=VARIABLE && LA183_0<=AT)||(LA183_0>=BOOLEAN_TRUE && LA183_0<=VALUE_NULL)||LA183_0==NUM_DOUBLE||LA183_0==IDENT||LA183_0==LPAREN||(LA183_0>=STRING_LITERAL && LA183_0<=QUOTED_STRING_LITERAL)||(LA183_0>=PLUS && LA183_0<=MINUS)||LA183_0==LCURLY||LA183_0==NUM_INT||LA183_0==QUESTION||(LA183_0>=TICKED_STRING_LITERAL && LA183_0<=NUM_FLOAT)) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // EsperEPL2Grammar.g:1211:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression7814);
                            expressionList499=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList499.getTree());

                            }
                            break;

                    }

                    RPAREN500=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression7817); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN500);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1212:9: ( propertyExpression )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==LBRACK) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // EsperEPL2Grammar.g:1212:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression7829);
                    propertyExpression501=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression501.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, propertyExpression, classIdentifier, expressionList
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1213:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1213:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1213:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1213:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1213:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1216:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic502 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic503 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1217:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1217:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression7874);
            propertyExpressionAtomic502=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic502.getTree());
            // EsperEPL2Grammar.g:1217:29: ( propertyExpressionAtomic )*
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==LBRACK) ) {
                    alt186=1;
                }


                switch (alt186) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1217:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression7877);
            	    propertyExpressionAtomic503=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic503.getTree());

            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1218:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1218:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1221:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK504=null;
        Token SELECT505=null;
        Token FROM507=null;
        Token AS509=null;
        Token IDENT510=null;
        Token WHERE511=null;
        Token RBRACK513=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList506 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty508 = null;

        EsperEPL2GrammarParser.expression_return expression512 = null;


        CommonTree LBRACK504_tree=null;
        CommonTree SELECT505_tree=null;
        CommonTree FROM507_tree=null;
        CommonTree AS509_tree=null;
        CommonTree IDENT510_tree=null;
        CommonTree WHERE511_tree=null;
        CommonTree RBRACK513_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1222:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1222:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK504=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic7907); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK504);

            // EsperEPL2Grammar.g:1222:11: ( SELECT propertySelectionList FROM )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==SELECT) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // EsperEPL2Grammar.g:1222:12: SELECT propertySelectionList FROM
                    {
                    SELECT505=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic7910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT505);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic7912);
                    propertySelectionList506=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList506.getTree());
                    FROM507=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic7914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM507);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic7918);
            eventProperty508=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty508.getTree());
            // EsperEPL2Grammar.g:1222:62: ( AS IDENT )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==AS) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // EsperEPL2Grammar.g:1222:63: AS IDENT
                    {
                    AS509=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic7921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS509);

                    IDENT510=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic7923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT510);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1222:74: ( WHERE expression )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==WHERE) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // EsperEPL2Grammar.g:1222:75: WHERE expression
                    {
                    WHERE511=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic7928); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE511);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic7930);
                    expression512=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression512.getTree());

                    }
                    break;

            }

            RBRACK513=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic7934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK513);



            // AST REWRITE
            // elements: eventProperty, expression, IDENT, propertySelectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1223:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1223:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1223:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1223:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1223:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1223:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1226:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA515=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement514 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement516 = null;


        CommonTree COMMA515_tree=null;

        try {
            // EsperEPL2Grammar.g:1227:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1227:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList7984);
            propertySelectionListElement514=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement514.getTree());
            // EsperEPL2Grammar.g:1227:33: ( COMMA propertySelectionListElement )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==COMMA) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1227:34: COMMA propertySelectionListElement
            	    {
            	    COMMA515=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList7987); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList7990);
            	    propertySelectionListElement516=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement516.getTree());

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1230:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS519=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector517 = null;

        EsperEPL2GrammarParser.expression_return expression518 = null;


        CommonTree s_tree=null;
        CommonTree AS519_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1232:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt192=3;
            alt192 = dfa192.predict(input);
            switch (alt192) {
                case 1 :
                    // EsperEPL2Grammar.g:1232:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement8016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1232:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1233:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement8032);
                    propertyStreamSelector517=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector517.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1234:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement8037);
                    expression518=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression518.getTree());
                    // EsperEPL2Grammar.g:1234:15: ( AS i= keywordAllowedIdent )?
                    int alt191=2;
                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==AS) ) {
                        alt191=1;
                    }
                    switch (alt191) {
                        case 1 :
                            // EsperEPL2Grammar.g:1234:16: AS i= keywordAllowedIdent
                            {
                            AS519=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement8040); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS519);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement8044);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1235:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1235:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1236:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1236:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1239:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT520=null;
        Token STAR521=null;
        Token AS522=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT520_tree=null;
        CommonTree STAR521_tree=null;
        CommonTree AS522_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1240:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1240:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector8088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT520=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector8090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT520);

            STAR521=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector8092); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR521);

            // EsperEPL2Grammar.g:1240:21: ( AS i= IDENT )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==AS) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // EsperEPL2Grammar.g:1240:22: AS i= IDENT
                    {
                    AS522=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector8095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS522);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector8099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, i
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1241:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1241:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1241:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1244:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS523=null;
        Token LPAREN525=null;
        Token RPAREN527=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier524 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList526 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression528 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS523_tree=null;
        CommonTree LPAREN525_tree=null;
        CommonTree RPAREN527_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1247:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1247:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1247:9: (i= IDENT EQUALS )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==IDENT) ) {
                int LA194_1 = input.LA(2);

                if ( (LA194_1==EQUALS) ) {
                    alt194=1;
                }
            }
            switch (alt194) {
                case 1 :
                    // EsperEPL2Grammar.g:1247:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression8146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS523=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression8148); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS523);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression8157);
            classIdentifier524=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier524.getTree());
            // EsperEPL2Grammar.g:1249:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==LPAREN) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // EsperEPL2Grammar.g:1249:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN525=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression8168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN525);

                    // EsperEPL2Grammar.g:1249:17: ( expressionList )?
                    int alt195=2;
                    int LA195_0 = input.LA(1);

                    if ( (LA195_0==WINDOW||LA195_0==ESCAPE||(LA195_0>=NOT_EXPR && LA195_0<=EVERY_EXPR)||(LA195_0>=SUM && LA195_0<=COUNT)||LA195_0==CASE||LA195_0==OUTER||(LA195_0>=JOIN && LA195_0<=FULL)||(LA195_0>=EVENTS && LA195_0<=LAST)||(LA195_0>=UNIDIRECTIONAL && LA195_0<=CURRENT_TIMESTAMP)||LA195_0==SNAPSHOT||(LA195_0>=VARIABLE && LA195_0<=AT)||(LA195_0>=BOOLEAN_TRUE && LA195_0<=VALUE_NULL)||LA195_0==NUM_DOUBLE||LA195_0==IDENT||LA195_0==LPAREN||(LA195_0>=STRING_LITERAL && LA195_0<=QUOTED_STRING_LITERAL)||(LA195_0>=PLUS && LA195_0<=MINUS)||LA195_0==LCURLY||LA195_0==NUM_INT||LA195_0==QUESTION||(LA195_0>=TICKED_STRING_LITERAL && LA195_0<=NUM_FLOAT)) ) {
                        alt195=1;
                    }
                    switch (alt195) {
                        case 1 :
                            // EsperEPL2Grammar.g:1249:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression8170);
                            expressionList526=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList526.getTree());

                            }
                            break;

                    }

                    RPAREN527=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression8173); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN527);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1250:9: ( propertyExpression )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==LBRACK) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // EsperEPL2Grammar.g:1250:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression8185);
                    propertyExpression528=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression528.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, classIdentifier, propertyExpression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1251:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1251:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1251:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1251:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1251:74: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1255:1: classIdentifier : i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT529=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT529_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1257:2: (i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1257:4: i1= escapableIdent ( DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifier8240);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1258:6: ( DOT i2= escapableIdent )*
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==DOT) ) {
                    int LA198_19 = input.LA(2);

                    if ( (LA198_19==IDENT) ) {
                        int LA198_41 = input.LA(3);

                        if ( (LA198_41==EOF||LA198_41==CREATE||(LA198_41>=OR_EXPR && LA198_41<=AS)||LA198_41==SELECT||(LA198_41>=INNER && LA198_41<=ON)||(LA198_41>=GROUP && LA198_41<=HAVING)||LA198_41==OUTPUT||LA198_41==INSERT||LA198_41==ORDER||(LA198_41>=UNIDIRECTIONAL && LA198_41<=RETAININTERSECTION)||LA198_41==DELETE||LA198_41==SET||LA198_41==UNTIL||LA198_41==ROW_LIMIT_EXPR||LA198_41==UPDATE||(LA198_41>=COMMA && LA198_41<=IDENT)||(LA198_41>=DOT && LA198_41<=RPAREN)||(LA198_41>=LBRACK && LA198_41<=RBRACK)||LA198_41==RCURLY||LA198_41==FOLLOWED_BY||LA198_41==TICKED_STRING_LITERAL||LA198_41==EMAILAT) ) {
                            alt198=1;
                        }


                    }
                    else if ( (LA198_19==TICKED_STRING_LITERAL) ) {
                        alt198=1;
                    }


                }


                switch (alt198) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1259:8: DOT i2= escapableIdent
            	    {
            	    DOT529=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier8259); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT529);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifier8263);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1261:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1261:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1264:1: classIdentifierNonGreedy : i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT530=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT530_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1266:2: (i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1266:4: i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy8308);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1267:6: ( options {greedy=false; } : DOT i2= escapableIdent )*
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA199_2 = input.LA(3);

                        if ( (LA199_2==DOT) ) {
                            alt199=1;
                        }
                        else if ( (LA199_2==LPAREN) ) {
                            alt199=2;
                        }


                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        alt199=1;
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt199=2;
                        }
                        break;

                    }

                }


                switch (alt199) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1269:8: DOT i2= escapableIdent
            	    {
            	    DOT530=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy8343); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT530);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy8347);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1271:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1271:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1274:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA532=null;
        EsperEPL2GrammarParser.expression_return expression531 = null;

        EsperEPL2GrammarParser.expression_return expression533 = null;


        CommonTree COMMA532_tree=null;

        try {
            // EsperEPL2Grammar.g:1275:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1275:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList8389);
            expression531=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression531.getTree());
            // EsperEPL2Grammar.g:1275:22: ( COMMA expression )*
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==COMMA) ) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1275:23: COMMA expression
            	    {
            	    COMMA532=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList8392); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList8395);
            	    expression533=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression533.getTree());

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1278:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA535=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime534 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime536 = null;


        CommonTree COMMA535_tree=null;

        try {
            // EsperEPL2Grammar.g:1279:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1279:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList8423);
            expressionWithTime534=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime534.getTree());
            // EsperEPL2Grammar.g:1279:30: ( COMMA expressionWithTime )*
            loop201:
            do {
                int alt201=2;
                int LA201_0 = input.LA(1);

                if ( (LA201_0==COMMA) ) {
                    alt201=1;
                }


                switch (alt201) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1279:31: COMMA expressionWithTime
            	    {
            	    COMMA535=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList8426); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList8429);
            	    expressionWithTime536=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime536.getTree());

            	    }
            	    break;

            	default :
            	    break loop201;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1282:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand537 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand538 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod539 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable540 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand541 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand542 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator543 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator544 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList545 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar546 = null;



        try {
            // EsperEPL2Grammar.g:1283:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt202=10;
            alt202 = dfa202.predict(input);
            switch (alt202) {
                case 1 :
                    // EsperEPL2Grammar.g:1283:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime8455);
                    lastOperand537=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand537.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1284:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime8466);
                    lastWeekdayOperand538=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand538.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1285:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime8477);
                    timePeriod539=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod539.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1286:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime8488);
                    expressionQualifyable540=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable540.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1287:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime8499);
                    rangeOperand541=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand541.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1288:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime8511);
                    frequencyOperand542=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand542.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1289:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime8522);
                    lastOperator543=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator543.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1290:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime8534);
                    weekDayOperator544=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator544.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1291:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime8546);
                    numericParameterList545=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList545.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1292:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime8551);
                    numberSetStar546=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar546.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1295:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression547 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1296:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1296:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable8562);
            expression547=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression547.getTree());
            // EsperEPL2Grammar.g:1296:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt203=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt203=1;
                    }
                    break;
                case DESC:
                    {
                    alt203=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt203=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt203=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt203=5;
                    }
                    break;
            }

            switch (alt203) {
                case 1 :
                    // EsperEPL2Grammar.g:1296:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable8567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1296:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable8571); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1296:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable8575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1296:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable8579); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1296:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable8583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, expression, d, a, expression
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1297:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1297:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1297:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1297:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1298:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1298:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1298:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1299:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1303:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR548=null;

        CommonTree STAR548_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1304:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1304:4: STAR
            {
            STAR548=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar8640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR548);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1305:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1305:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1308:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW549=null;

        CommonTree LW549_tree=null;

        try {
            // EsperEPL2Grammar.g:1309:2: ( LW )
            // EsperEPL2Grammar.g:1309:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW549=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand8660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW549_tree = (CommonTree)adaptor.create(LW549);
            root_0 = (CommonTree)adaptor.becomeRoot(LW549_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1312:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST550=null;

        CommonTree LAST550_tree=null;

        try {
            // EsperEPL2Grammar.g:1313:2: ( LAST )
            // EsperEPL2Grammar.g:1313:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST550=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand8673); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST550_tree = (CommonTree)adaptor.create(LAST550);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST550_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1316:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR551=null;
        Token DIV552=null;
        EsperEPL2GrammarParser.number_return number553 = null;

        EsperEPL2GrammarParser.substitution_return substitution554 = null;


        CommonTree i_tree=null;
        CommonTree STAR551_tree=null;
        CommonTree DIV552_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1317:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1317:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR551=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand8685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR551);

            DIV552=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand8687); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV552);

            // EsperEPL2Grammar.g:1317:13: ( number | i= IDENT | substitution )
            int alt204=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt204=1;
                }
                break;
            case IDENT:
                {
                alt204=2;
                }
                break;
            case QUESTION:
                {
                alt204=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }

            switch (alt204) {
                case 1 :
                    // EsperEPL2Grammar.g:1317:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand8690);
                    number553=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number553.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1317:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand8694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1317:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand8696);
                    substitution554=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution554.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1318:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1318:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1318:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1318:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1319:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1319:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1319:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1319:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1322:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON557=null;
        EsperEPL2GrammarParser.number_return number555 = null;

        EsperEPL2GrammarParser.substitution_return substitution556 = null;

        EsperEPL2GrammarParser.number_return number558 = null;

        EsperEPL2GrammarParser.substitution_return substitution559 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON557_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1323:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1323:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1323:4: ( number | i1= IDENT | substitution )
            int alt205=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt205=1;
                }
                break;
            case IDENT:
                {
                alt205=2;
                }
                break;
            case QUESTION:
                {
                alt205=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);

                throw nvae;
            }

            switch (alt205) {
                case 1 :
                    // EsperEPL2Grammar.g:1323:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand8745);
                    number555=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number555.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1323:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand8749); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1323:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand8751);
                    substitution556=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution556.getTree());

                    }
                    break;

            }

            COLON557=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand8754); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON557);

            // EsperEPL2Grammar.g:1323:41: ( number | i2= IDENT | substitution )
            int alt206=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt206=1;
                }
                break;
            case IDENT:
                {
                alt206=2;
                }
                break;
            case QUESTION:
                {
                alt206=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;
            }

            switch (alt206) {
                case 1 :
                    // EsperEPL2Grammar.g:1323:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand8757);
                    number558=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number558.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1323:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand8761); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1323:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand8763);
                    substitution559=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution559.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, substitution, number, i1, i2, substitution, i1, i2, number, number
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1324:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1324:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1324:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1324:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1324:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1324:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1325:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1325:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1325:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1325:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1325:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1325:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1326:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1326:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1326:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1326:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1326:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1326:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1327:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1327:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1327:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1327:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1330:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST562=null;
        EsperEPL2GrammarParser.number_return number560 = null;

        EsperEPL2GrammarParser.substitution_return substitution561 = null;


        CommonTree i_tree=null;
        CommonTree LAST562_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1331:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1331:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1331:4: ( number | i= IDENT | substitution )
            int alt207=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt207=1;
                }
                break;
            case IDENT:
                {
                alt207=2;
                }
                break;
            case QUESTION:
                {
                alt207=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;
            }

            switch (alt207) {
                case 1 :
                    // EsperEPL2Grammar.g:1331:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator8877);
                    number560=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number560.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1331:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator8881); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1331:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator8883);
                    substitution561=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution561.getTree());

                    }
                    break;

            }

            LAST562=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator8886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST562);



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1332:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1332:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1332:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1332:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1333:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1333:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1333:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1333:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1336:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY565=null;
        EsperEPL2GrammarParser.number_return number563 = null;

        EsperEPL2GrammarParser.substitution_return substitution564 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY565_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1337:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1337:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1337:4: ( number | i= IDENT | substitution )
            int alt208=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt208=1;
                }
                break;
            case IDENT:
                {
                alt208=2;
                }
                break;
            case QUESTION:
                {
                alt208=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;
            }

            switch (alt208) {
                case 1 :
                    // EsperEPL2Grammar.g:1337:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator8934);
                    number563=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number563.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1337:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator8938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1337:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator8940);
                    substitution564=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution564.getTree());

                    }
                    break;

            }

            WEEKDAY565=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator8943); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY565);



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1338:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1338:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1338:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1338:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1339:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1339:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1339:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1339:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1342:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK566=null;
        Token COMMA568=null;
        Token RBRACK570=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter567 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter569 = null;


        CommonTree LBRACK566_tree=null;
        CommonTree COMMA568_tree=null;
        CommonTree RBRACK570_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1343:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1343:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK566=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList8990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK566);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList8992);
            numericListParameter567=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter567.getTree());
            // EsperEPL2Grammar.g:1343:32: ( COMMA numericListParameter )*
            loop209:
            do {
                int alt209=2;
                int LA209_0 = input.LA(1);

                if ( (LA209_0==COMMA) ) {
                    alt209=1;
                }


                switch (alt209) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1343:33: COMMA numericListParameter
            	    {
            	    COMMA568=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList8995); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA568);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList8997);
            	    numericListParameter569=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter569.getTree());

            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);

            RBRACK570=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList9001); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK570);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1344:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1344:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1347:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand571 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand572 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant573 = null;



        try {
            // EsperEPL2Grammar.g:1348:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt210=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA210_1 = input.LA(2);

                if ( (LA210_1==COLON) ) {
                    alt210=1;
                }
                else if ( (LA210_1==COMMA||LA210_1==RBRACK) ) {
                    alt210=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 210, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA210_2 = input.LA(2);

                if ( (LA210_2==COLON) ) {
                    alt210=1;
                }
                else if ( (LA210_2==COMMA||LA210_2==RBRACK) ) {
                    alt210=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 210, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA210_3 = input.LA(2);

                if ( (LA210_3==COMMA||LA210_3==RBRACK) ) {
                    alt210=3;
                }
                else if ( (LA210_3==COLON) ) {
                    alt210=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 210, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA210_4 = input.LA(2);

                if ( (LA210_4==COMMA||LA210_4==RBRACK) ) {
                    alt210=3;
                }
                else if ( (LA210_4==COLON) ) {
                    alt210=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 210, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt210=1;
                }
                break;
            case STAR:
                {
                alt210=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt210=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;
            }

            switch (alt210) {
                case 1 :
                    // EsperEPL2Grammar.g:1348:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter9023);
                    rangeOperand571=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand571.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1349:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter9029);
                    frequencyOperand572=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand572.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1350:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter9034);
                    numberconstant573=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant573.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1353:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT575=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic574 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic576 = null;


        CommonTree DOT575_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1354:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1354:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty9050);
            eventPropertyAtomic574=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic574.getTree());
            // EsperEPL2Grammar.g:1354:24: ( DOT eventPropertyAtomic )*
            loop211:
            do {
                int alt211=2;
                int LA211_0 = input.LA(1);

                if ( (LA211_0==DOT) ) {
                    alt211=1;
                }


                switch (alt211) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1354:25: DOT eventPropertyAtomic
            	    {
            	    DOT575=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty9053); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT575);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty9055);
            	    eventPropertyAtomic576=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic576.getTree());

            	    }
            	    break;

            	default :
            	    break loop211;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1355:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1355:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1358:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK578=null;
        Token RPAREN579=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent577 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK578_tree=null;
        CommonTree RPAREN579_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1359:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1359:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic9081);
            eventPropertyIdent577=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent577.getTree());
            // EsperEPL2Grammar.g:1359:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt215=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt215=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt215=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt215=3;
                    }
                    break;
            }

            switch (alt215) {
                case 1 :
                    // EsperEPL2Grammar.g:1360:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic9090); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic9094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK578=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic9096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK578);

                    // EsperEPL2Grammar.g:1360:32: (q= QUESTION )?
                    int alt212=2;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==QUESTION) ) {
                        alt212=1;
                    }
                    switch (alt212) {
                        case 1 :
                            // EsperEPL2Grammar.g:1360:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic9101); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1362:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic9115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1362:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==STRING_LITERAL) ) {
                        alt213=1;
                    }
                    else if ( (LA213_0==QUOTED_STRING_LITERAL) ) {
                        alt213=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 213, 0, input);

                        throw nvae;
                    }
                    switch (alt213) {
                        case 1 :
                            // EsperEPL2Grammar.g:1362:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic9120); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1362:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic9126); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN579=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic9129); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN579);

                    // EsperEPL2Grammar.g:1362:66: (q= QUESTION )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==QUESTION) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // EsperEPL2Grammar.g:1362:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic9134); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1364:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic9148); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventPropertyIdent, eventPropertyIdent, s, eventPropertyIdent, eventPropertyIdent, ni, eventPropertyIdent, s, ni, eventPropertyIdent
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1367:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1367:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1368:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1368:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1369:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1369:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1370:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1370:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1371:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1371:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1372:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1372:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1375:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR580=null;
        Token DOT581=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR580_tree=null;
        CommonTree DOT581_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1377:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1377:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent9271);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1378:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop217:
            do {
                int alt217=2;
                int LA217_0 = input.LA(1);

                if ( (LA217_0==ESCAPECHAR) ) {
                    alt217=1;
                }


                switch (alt217) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1379:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR580=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent9283); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR580);

            	    DOT581=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent9285); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT581);

            	    // EsperEPL2Grammar.g:1379:24: (ipi2= keywordAllowedIdent )?
            	    int alt216=2;
            	    alt216 = dfa216.predict(input);
            	    switch (alt216) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1379:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent9289);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop217;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1381:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1381:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1384:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT582=null;
        Token COUNT583=null;
        Token ESCAPE584=null;
        Token EVERY_EXPR585=null;
        Token SUM586=null;
        Token AVG587=null;
        Token MAX588=null;
        Token MIN589=null;
        Token COALESCE590=null;
        Token MEDIAN591=null;
        Token STDDEV592=null;
        Token AVEDEV593=null;
        Token EVENTS594=null;
        Token FIRST595=null;
        Token LAST596=null;
        Token UNIDIRECTIONAL597=null;
        Token RETAINUNION598=null;
        Token RETAININTERSECTION599=null;
        Token UNTIL600=null;
        Token PATTERN601=null;
        Token SQL602=null;
        Token METADATASQL603=null;
        Token PREVIOUS604=null;
        Token PRIOR605=null;
        Token WEEKDAY606=null;
        Token LW607=null;
        Token INSTANCEOF608=null;
        Token CAST609=null;
        Token SNAPSHOT610=null;
        Token VARIABLE611=null;
        Token WINDOW612=null;
        Token LEFT613=null;
        Token RIGHT614=null;
        Token OUTER615=null;
        Token FULL616=null;
        Token JOIN617=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT582_tree=null;
        CommonTree COUNT583_tree=null;
        CommonTree ESCAPE584_tree=null;
        CommonTree EVERY_EXPR585_tree=null;
        CommonTree SUM586_tree=null;
        CommonTree AVG587_tree=null;
        CommonTree MAX588_tree=null;
        CommonTree MIN589_tree=null;
        CommonTree COALESCE590_tree=null;
        CommonTree MEDIAN591_tree=null;
        CommonTree STDDEV592_tree=null;
        CommonTree AVEDEV593_tree=null;
        CommonTree EVENTS594_tree=null;
        CommonTree FIRST595_tree=null;
        CommonTree LAST596_tree=null;
        CommonTree UNIDIRECTIONAL597_tree=null;
        CommonTree RETAINUNION598_tree=null;
        CommonTree RETAININTERSECTION599_tree=null;
        CommonTree UNTIL600_tree=null;
        CommonTree PATTERN601_tree=null;
        CommonTree SQL602_tree=null;
        CommonTree METADATASQL603_tree=null;
        CommonTree PREVIOUS604_tree=null;
        CommonTree PRIOR605_tree=null;
        CommonTree WEEKDAY606_tree=null;
        CommonTree LW607_tree=null;
        CommonTree INSTANCEOF608_tree=null;
        CommonTree CAST609_tree=null;
        CommonTree SNAPSHOT610_tree=null;
        CommonTree VARIABLE611_tree=null;
        CommonTree WINDOW612_tree=null;
        CommonTree LEFT613_tree=null;
        CommonTree RIGHT614_tree=null;
        CommonTree OUTER615_tree=null;
        CommonTree FULL616_tree=null;
        CommonTree JOIN617_tree=null;

        try {
            // EsperEPL2Grammar.g:1385:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN )
            int alt218=38;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt218=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt218=2;
                }
                break;
            case AT:
                {
                alt218=3;
                }
                break;
            case COUNT:
                {
                alt218=4;
                }
                break;
            case ESCAPE:
                {
                alt218=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt218=6;
                }
                break;
            case SUM:
                {
                alt218=7;
                }
                break;
            case AVG:
                {
                alt218=8;
                }
                break;
            case MAX:
                {
                alt218=9;
                }
                break;
            case MIN:
                {
                alt218=10;
                }
                break;
            case COALESCE:
                {
                alt218=11;
                }
                break;
            case MEDIAN:
                {
                alt218=12;
                }
                break;
            case STDDEV:
                {
                alt218=13;
                }
                break;
            case AVEDEV:
                {
                alt218=14;
                }
                break;
            case EVENTS:
                {
                alt218=15;
                }
                break;
            case FIRST:
                {
                alt218=16;
                }
                break;
            case LAST:
                {
                alt218=17;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt218=18;
                }
                break;
            case RETAINUNION:
                {
                alt218=19;
                }
                break;
            case RETAININTERSECTION:
                {
                alt218=20;
                }
                break;
            case UNTIL:
                {
                alt218=21;
                }
                break;
            case PATTERN:
                {
                alt218=22;
                }
                break;
            case SQL:
                {
                alt218=23;
                }
                break;
            case METADATASQL:
                {
                alt218=24;
                }
                break;
            case PREVIOUS:
                {
                alt218=25;
                }
                break;
            case PRIOR:
                {
                alt218=26;
                }
                break;
            case WEEKDAY:
                {
                alt218=27;
                }
                break;
            case LW:
                {
                alt218=28;
                }
                break;
            case INSTANCEOF:
                {
                alt218=29;
                }
                break;
            case CAST:
                {
                alt218=30;
                }
                break;
            case SNAPSHOT:
                {
                alt218=31;
                }
                break;
            case VARIABLE:
                {
                alt218=32;
                }
                break;
            case WINDOW:
                {
                alt218=33;
                }
                break;
            case LEFT:
                {
                alt218=34;
                }
                break;
            case RIGHT:
                {
                alt218=35;
                }
                break;
            case OUTER:
                {
                alt218=36;
                }
                break;
            case FULL:
                {
                alt218=37;
                }
                break;
            case JOIN:
                {
                alt218=38;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }

            switch (alt218) {
                case 1 :
                    // EsperEPL2Grammar.g:1385:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent9328); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1386:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent9337); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1387:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT582=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent9344); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT582_tree = (CommonTree)adaptor.create(AT582);
                    adaptor.addChild(root_0, AT582_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1388:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT583=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent9351); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT583_tree = (CommonTree)adaptor.create(COUNT583);
                    adaptor.addChild(root_0, COUNT583_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1389:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE584=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent9358); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE584_tree = (CommonTree)adaptor.create(ESCAPE584);
                    adaptor.addChild(root_0, ESCAPE584_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1390:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR585=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent9369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR585_tree = (CommonTree)adaptor.create(EVERY_EXPR585);
                    adaptor.addChild(root_0, EVERY_EXPR585_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1391:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM586=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent9376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM586_tree = (CommonTree)adaptor.create(SUM586);
                    adaptor.addChild(root_0, SUM586_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1392:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG587=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent9383); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG587_tree = (CommonTree)adaptor.create(AVG587);
                    adaptor.addChild(root_0, AVG587_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1393:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX588=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent9390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX588_tree = (CommonTree)adaptor.create(MAX588);
                    adaptor.addChild(root_0, MAX588_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1394:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN589=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent9397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN589_tree = (CommonTree)adaptor.create(MIN589);
                    adaptor.addChild(root_0, MIN589_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1395:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE590=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent9404); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE590_tree = (CommonTree)adaptor.create(COALESCE590);
                    adaptor.addChild(root_0, COALESCE590_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1396:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN591=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent9411); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN591_tree = (CommonTree)adaptor.create(MEDIAN591);
                    adaptor.addChild(root_0, MEDIAN591_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1397:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV592=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent9418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV592_tree = (CommonTree)adaptor.create(STDDEV592);
                    adaptor.addChild(root_0, STDDEV592_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1398:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV593=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent9425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV593_tree = (CommonTree)adaptor.create(AVEDEV593);
                    adaptor.addChild(root_0, AVEDEV593_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1399:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS594=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent9432); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS594_tree = (CommonTree)adaptor.create(EVENTS594);
                    adaptor.addChild(root_0, EVENTS594_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1400:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST595=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent9439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST595_tree = (CommonTree)adaptor.create(FIRST595);
                    adaptor.addChild(root_0, FIRST595_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1401:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST596=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent9446); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST596_tree = (CommonTree)adaptor.create(LAST596);
                    adaptor.addChild(root_0, LAST596_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1402:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL597=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent9453); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL597_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL597);
                    adaptor.addChild(root_0, UNIDIRECTIONAL597_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1403:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION598=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent9460); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION598_tree = (CommonTree)adaptor.create(RETAINUNION598);
                    adaptor.addChild(root_0, RETAINUNION598_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1404:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION599=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent9467); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION599_tree = (CommonTree)adaptor.create(RETAININTERSECTION599);
                    adaptor.addChild(root_0, RETAININTERSECTION599_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1405:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL600=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent9474); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL600_tree = (CommonTree)adaptor.create(UNTIL600);
                    adaptor.addChild(root_0, UNTIL600_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1406:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN601=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent9481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN601_tree = (CommonTree)adaptor.create(PATTERN601);
                    adaptor.addChild(root_0, PATTERN601_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1407:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL602=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent9488); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL602_tree = (CommonTree)adaptor.create(SQL602);
                    adaptor.addChild(root_0, SQL602_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1408:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL603=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent9495); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL603_tree = (CommonTree)adaptor.create(METADATASQL603);
                    adaptor.addChild(root_0, METADATASQL603_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1409:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS604=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent9502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS604_tree = (CommonTree)adaptor.create(PREVIOUS604);
                    adaptor.addChild(root_0, PREVIOUS604_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1410:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR605=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent9509); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR605_tree = (CommonTree)adaptor.create(PRIOR605);
                    adaptor.addChild(root_0, PRIOR605_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1411:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY606=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent9516); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY606_tree = (CommonTree)adaptor.create(WEEKDAY606);
                    adaptor.addChild(root_0, WEEKDAY606_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1412:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW607=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent9523); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW607_tree = (CommonTree)adaptor.create(LW607);
                    adaptor.addChild(root_0, LW607_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1413:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF608=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent9530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF608_tree = (CommonTree)adaptor.create(INSTANCEOF608);
                    adaptor.addChild(root_0, INSTANCEOF608_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1414:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST609=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent9537); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST609_tree = (CommonTree)adaptor.create(CAST609);
                    adaptor.addChild(root_0, CAST609_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1415:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT610=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent9544); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT610_tree = (CommonTree)adaptor.create(SNAPSHOT610);
                    adaptor.addChild(root_0, SNAPSHOT610_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1416:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE611=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent9551); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE611_tree = (CommonTree)adaptor.create(VARIABLE611);
                    adaptor.addChild(root_0, VARIABLE611_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1417:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW612=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent9560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW612_tree = (CommonTree)adaptor.create(WINDOW612);
                    adaptor.addChild(root_0, WINDOW612_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1418:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT613=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent9567); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT613_tree = (CommonTree)adaptor.create(LEFT613);
                    adaptor.addChild(root_0, LEFT613_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1419:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT614=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent9574); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT614_tree = (CommonTree)adaptor.create(RIGHT614);
                    adaptor.addChild(root_0, RIGHT614_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1420:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER615=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent9581); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER615_tree = (CommonTree)adaptor.create(OUTER615);
                    adaptor.addChild(root_0, OUTER615_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1421:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL616=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent9588); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL616_tree = (CommonTree)adaptor.create(FULL616);
                    adaptor.addChild(root_0, FULL616_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1422:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN617=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent9595); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN617_tree = (CommonTree)adaptor.create(JOIN617);
                    adaptor.addChild(root_0, JOIN617_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1425:1: escapableIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1426:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==IDENT) ) {
                alt219=1;
            }
            else if ( (LA219_0==TICKED_STRING_LITERAL) ) {
                alt219=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }
            switch (alt219) {
                case 1 :
                    // EsperEPL2Grammar.g:1426:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent9616); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1427:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent9625); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1430:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart618 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart619 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart620 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart621 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart622 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart623 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart624 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart625 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart626 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart627 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart628 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart629 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart630 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart631 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart632 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1431:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1432:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1432:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt230=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt230=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt230=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt230=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt230=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt230=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt230=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt230=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt230=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt230=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt230=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt230=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt230=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt230=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt230=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt230=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt230=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt230=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt230=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt230=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt230=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt230=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt230=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt230=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt230=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt230=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt230=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt230=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt230=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt230=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt230=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }

            switch (alt230) {
                case 1 :
                    // EsperEPL2Grammar.g:1433:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod9648);
                    dayPart618=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart618.getTree());
                    // EsperEPL2Grammar.g:1433:11: ( hourPart )?
                    int alt220=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA220_1 = input.LA(2);

                            if ( ((LA220_1>=TIMEPERIOD_HOUR && LA220_1<=TIMEPERIOD_HOURS)) ) {
                                alt220=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA220_2 = input.LA(2);

                            if ( ((LA220_2>=TIMEPERIOD_HOUR && LA220_2<=TIMEPERIOD_HOURS)) ) {
                                alt220=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA220_3 = input.LA(2);

                            if ( ((LA220_3>=TIMEPERIOD_HOUR && LA220_3<=TIMEPERIOD_HOURS)) ) {
                                alt220=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA220_4 = input.LA(2);

                            if ( ((LA220_4>=TIMEPERIOD_HOUR && LA220_4<=TIMEPERIOD_HOURS)) ) {
                                alt220=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA220_5 = input.LA(2);

                            if ( ((LA220_5>=TIMEPERIOD_HOUR && LA220_5<=TIMEPERIOD_HOURS)) ) {
                                alt220=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA220_6 = input.LA(2);

                            if ( ((LA220_6>=TIMEPERIOD_HOUR && LA220_6<=TIMEPERIOD_HOURS)) ) {
                                alt220=1;
                            }
                            }
                            break;
                    }

                    switch (alt220) {
                        case 1 :
                            // EsperEPL2Grammar.g:1433:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod9650);
                            hourPart619=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart619.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1433:21: ( minutePart )?
                    int alt221=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA221_1 = input.LA(2);

                            if ( (LA221_1==MIN||(LA221_1>=TIMEPERIOD_MINUTE && LA221_1<=TIMEPERIOD_MINUTES)) ) {
                                alt221=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA221_2 = input.LA(2);

                            if ( (LA221_2==MIN||(LA221_2>=TIMEPERIOD_MINUTE && LA221_2<=TIMEPERIOD_MINUTES)) ) {
                                alt221=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA221_3 = input.LA(2);

                            if ( (LA221_3==MIN||(LA221_3>=TIMEPERIOD_MINUTE && LA221_3<=TIMEPERIOD_MINUTES)) ) {
                                alt221=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA221_4 = input.LA(2);

                            if ( (LA221_4==MIN||(LA221_4>=TIMEPERIOD_MINUTE && LA221_4<=TIMEPERIOD_MINUTES)) ) {
                                alt221=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA221_5 = input.LA(2);

                            if ( (LA221_5==MIN||(LA221_5>=TIMEPERIOD_MINUTE && LA221_5<=TIMEPERIOD_MINUTES)) ) {
                                alt221=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA221_6 = input.LA(2);

                            if ( (LA221_6==MIN||(LA221_6>=TIMEPERIOD_MINUTE && LA221_6<=TIMEPERIOD_MINUTES)) ) {
                                alt221=1;
                            }
                            }
                            break;
                    }

                    switch (alt221) {
                        case 1 :
                            // EsperEPL2Grammar.g:1433:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod9653);
                            minutePart620=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart620.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1433:33: ( secondPart )?
                    int alt222=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA222_1 = input.LA(2);

                            if ( ((LA222_1>=TIMEPERIOD_SEC && LA222_1<=TIMEPERIOD_SECONDS)) ) {
                                alt222=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA222_2 = input.LA(2);

                            if ( ((LA222_2>=TIMEPERIOD_SEC && LA222_2<=TIMEPERIOD_SECONDS)) ) {
                                alt222=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA222_3 = input.LA(2);

                            if ( ((LA222_3>=TIMEPERIOD_SEC && LA222_3<=TIMEPERIOD_SECONDS)) ) {
                                alt222=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA222_4 = input.LA(2);

                            if ( ((LA222_4>=TIMEPERIOD_SEC && LA222_4<=TIMEPERIOD_SECONDS)) ) {
                                alt222=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA222_5 = input.LA(2);

                            if ( ((LA222_5>=TIMEPERIOD_SEC && LA222_5<=TIMEPERIOD_SECONDS)) ) {
                                alt222=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA222_6 = input.LA(2);

                            if ( ((LA222_6>=TIMEPERIOD_SEC && LA222_6<=TIMEPERIOD_SECONDS)) ) {
                                alt222=1;
                            }
                            }
                            break;
                    }

                    switch (alt222) {
                        case 1 :
                            // EsperEPL2Grammar.g:1433:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod9656);
                            secondPart621=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart621.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1433:45: ( millisecondPart )?
                    int alt223=2;
                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==NUM_DOUBLE||LA223_0==IDENT||LA223_0==NUM_INT||LA223_0==QUESTION||(LA223_0>=NUM_LONG && LA223_0<=NUM_FLOAT)) ) {
                        alt223=1;
                    }
                    switch (alt223) {
                        case 1 :
                            // EsperEPL2Grammar.g:1433:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9659);
                            millisecondPart622=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart622.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1434:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod9665);
                    hourPart623=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart623.getTree());
                    // EsperEPL2Grammar.g:1434:13: ( minutePart )?
                    int alt224=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA224_1 = input.LA(2);

                            if ( (LA224_1==MIN||(LA224_1>=TIMEPERIOD_MINUTE && LA224_1<=TIMEPERIOD_MINUTES)) ) {
                                alt224=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA224_2 = input.LA(2);

                            if ( (LA224_2==MIN||(LA224_2>=TIMEPERIOD_MINUTE && LA224_2<=TIMEPERIOD_MINUTES)) ) {
                                alt224=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA224_3 = input.LA(2);

                            if ( (LA224_3==MIN||(LA224_3>=TIMEPERIOD_MINUTE && LA224_3<=TIMEPERIOD_MINUTES)) ) {
                                alt224=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA224_4 = input.LA(2);

                            if ( (LA224_4==MIN||(LA224_4>=TIMEPERIOD_MINUTE && LA224_4<=TIMEPERIOD_MINUTES)) ) {
                                alt224=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA224_5 = input.LA(2);

                            if ( (LA224_5==MIN||(LA224_5>=TIMEPERIOD_MINUTE && LA224_5<=TIMEPERIOD_MINUTES)) ) {
                                alt224=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA224_6 = input.LA(2);

                            if ( (LA224_6==MIN||(LA224_6>=TIMEPERIOD_MINUTE && LA224_6<=TIMEPERIOD_MINUTES)) ) {
                                alt224=1;
                            }
                            }
                            break;
                    }

                    switch (alt224) {
                        case 1 :
                            // EsperEPL2Grammar.g:1434:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod9667);
                            minutePart624=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart624.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1434:25: ( secondPart )?
                    int alt225=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA225_1 = input.LA(2);

                            if ( ((LA225_1>=TIMEPERIOD_SEC && LA225_1<=TIMEPERIOD_SECONDS)) ) {
                                alt225=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA225_2 = input.LA(2);

                            if ( ((LA225_2>=TIMEPERIOD_SEC && LA225_2<=TIMEPERIOD_SECONDS)) ) {
                                alt225=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA225_3 = input.LA(2);

                            if ( ((LA225_3>=TIMEPERIOD_SEC && LA225_3<=TIMEPERIOD_SECONDS)) ) {
                                alt225=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA225_4 = input.LA(2);

                            if ( ((LA225_4>=TIMEPERIOD_SEC && LA225_4<=TIMEPERIOD_SECONDS)) ) {
                                alt225=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA225_5 = input.LA(2);

                            if ( ((LA225_5>=TIMEPERIOD_SEC && LA225_5<=TIMEPERIOD_SECONDS)) ) {
                                alt225=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA225_6 = input.LA(2);

                            if ( ((LA225_6>=TIMEPERIOD_SEC && LA225_6<=TIMEPERIOD_SECONDS)) ) {
                                alt225=1;
                            }
                            }
                            break;
                    }

                    switch (alt225) {
                        case 1 :
                            // EsperEPL2Grammar.g:1434:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod9670);
                            secondPart625=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart625.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1434:37: ( millisecondPart )?
                    int alt226=2;
                    int LA226_0 = input.LA(1);

                    if ( (LA226_0==NUM_DOUBLE||LA226_0==IDENT||LA226_0==NUM_INT||LA226_0==QUESTION||(LA226_0>=NUM_LONG && LA226_0<=NUM_FLOAT)) ) {
                        alt226=1;
                    }
                    switch (alt226) {
                        case 1 :
                            // EsperEPL2Grammar.g:1434:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9673);
                            millisecondPart626=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart626.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1435:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod9679);
                    minutePart627=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart627.getTree());
                    // EsperEPL2Grammar.g:1435:15: ( secondPart )?
                    int alt227=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA227_1 = input.LA(2);

                            if ( ((LA227_1>=TIMEPERIOD_SEC && LA227_1<=TIMEPERIOD_SECONDS)) ) {
                                alt227=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA227_2 = input.LA(2);

                            if ( ((LA227_2>=TIMEPERIOD_SEC && LA227_2<=TIMEPERIOD_SECONDS)) ) {
                                alt227=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA227_3 = input.LA(2);

                            if ( ((LA227_3>=TIMEPERIOD_SEC && LA227_3<=TIMEPERIOD_SECONDS)) ) {
                                alt227=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA227_4 = input.LA(2);

                            if ( ((LA227_4>=TIMEPERIOD_SEC && LA227_4<=TIMEPERIOD_SECONDS)) ) {
                                alt227=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA227_5 = input.LA(2);

                            if ( ((LA227_5>=TIMEPERIOD_SEC && LA227_5<=TIMEPERIOD_SECONDS)) ) {
                                alt227=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA227_6 = input.LA(2);

                            if ( ((LA227_6>=TIMEPERIOD_SEC && LA227_6<=TIMEPERIOD_SECONDS)) ) {
                                alt227=1;
                            }
                            }
                            break;
                    }

                    switch (alt227) {
                        case 1 :
                            // EsperEPL2Grammar.g:1435:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod9681);
                            secondPart628=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart628.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1435:27: ( millisecondPart )?
                    int alt228=2;
                    int LA228_0 = input.LA(1);

                    if ( (LA228_0==NUM_DOUBLE||LA228_0==IDENT||LA228_0==NUM_INT||LA228_0==QUESTION||(LA228_0>=NUM_LONG && LA228_0<=NUM_FLOAT)) ) {
                        alt228=1;
                    }
                    switch (alt228) {
                        case 1 :
                            // EsperEPL2Grammar.g:1435:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9684);
                            millisecondPart629=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart629.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1436:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod9690);
                    secondPart630=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart630.getTree());
                    // EsperEPL2Grammar.g:1436:15: ( millisecondPart )?
                    int alt229=2;
                    int LA229_0 = input.LA(1);

                    if ( (LA229_0==NUM_DOUBLE||LA229_0==IDENT||LA229_0==NUM_INT||LA229_0==QUESTION||(LA229_0>=NUM_LONG && LA229_0<=NUM_FLOAT)) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            // EsperEPL2Grammar.g:1436:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9692);
                            millisecondPart631=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart631.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1437:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod9698);
                    millisecondPart632=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart632.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: millisecondPart, minutePart, secondPart, dayPart, hourPart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1439:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1439:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1439:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1439:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1439:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1439:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1439:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1442:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS635=null;
        Token TIMEPERIOD_DAY636=null;
        EsperEPL2GrammarParser.number_return number633 = null;

        EsperEPL2GrammarParser.substitution_return substitution634 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS635_tree=null;
        CommonTree TIMEPERIOD_DAY636_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1443:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1443:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1443:4: ( number | i= IDENT | substitution )
            int alt231=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt231=1;
                }
                break;
            case IDENT:
                {
                alt231=2;
                }
                break;
            case QUESTION:
                {
                alt231=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;
            }

            switch (alt231) {
                case 1 :
                    // EsperEPL2Grammar.g:1443:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart9736);
                    number633=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number633.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1443:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart9740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1443:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart9742);
                    substitution634=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution634.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1443:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==TIMEPERIOD_DAYS) ) {
                alt232=1;
            }
            else if ( (LA232_0==TIMEPERIOD_DAY) ) {
                alt232=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    // EsperEPL2Grammar.g:1443:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS635=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart9746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS635);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1443:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY636=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart9750); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY636);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1444:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1444:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1444:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1444:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1445:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1445:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1445:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1445:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1448:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS639=null;
        Token TIMEPERIOD_HOUR640=null;
        EsperEPL2GrammarParser.number_return number637 = null;

        EsperEPL2GrammarParser.substitution_return substitution638 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS639_tree=null;
        CommonTree TIMEPERIOD_HOUR640_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1449:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1449:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1449:4: ( number | i= IDENT | substitution )
            int alt233=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt233=1;
                }
                break;
            case IDENT:
                {
                alt233=2;
                }
                break;
            case QUESTION:
                {
                alt233=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }

            switch (alt233) {
                case 1 :
                    // EsperEPL2Grammar.g:1449:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart9799);
                    number637=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number637.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1449:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart9803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1449:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart9805);
                    substitution638=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution638.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1449:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==TIMEPERIOD_HOURS) ) {
                alt234=1;
            }
            else if ( (LA234_0==TIMEPERIOD_HOUR) ) {
                alt234=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;
            }
            switch (alt234) {
                case 1 :
                    // EsperEPL2Grammar.g:1449:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS639=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart9809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS639);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1449:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR640=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart9813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR640);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1450:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1450:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1450:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1450:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1451:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1451:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1451:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1451:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1454:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES643=null;
        Token TIMEPERIOD_MINUTE644=null;
        Token MIN645=null;
        EsperEPL2GrammarParser.number_return number641 = null;

        EsperEPL2GrammarParser.substitution_return substitution642 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES643_tree=null;
        CommonTree TIMEPERIOD_MINUTE644_tree=null;
        CommonTree MIN645_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1455:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1455:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1455:4: ( number | i= IDENT | substitution )
            int alt235=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt235=1;
                }
                break;
            case IDENT:
                {
                alt235=2;
                }
                break;
            case QUESTION:
                {
                alt235=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;
            }

            switch (alt235) {
                case 1 :
                    // EsperEPL2Grammar.g:1455:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart9862);
                    number641=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number641.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1455:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart9866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1455:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart9868);
                    substitution642=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution642.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1455:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt236=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt236=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt236=2;
                }
                break;
            case MIN:
                {
                alt236=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }

            switch (alt236) {
                case 1 :
                    // EsperEPL2Grammar.g:1455:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES643=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart9872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES643);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1455:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE644=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart9876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE644);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1455:76: MIN
                    {
                    MIN645=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart9880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN645);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1456:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1456:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1456:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1456:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1457:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1457:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1457:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1457:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1460:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS648=null;
        Token TIMEPERIOD_SECOND649=null;
        Token TIMEPERIOD_SEC650=null;
        EsperEPL2GrammarParser.number_return number646 = null;

        EsperEPL2GrammarParser.substitution_return substitution647 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS648_tree=null;
        CommonTree TIMEPERIOD_SECOND649_tree=null;
        CommonTree TIMEPERIOD_SEC650_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1461:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1461:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1461:4: ( number | i= IDENT | substitution )
            int alt237=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt237=1;
                }
                break;
            case IDENT:
                {
                alt237=2;
                }
                break;
            case QUESTION:
                {
                alt237=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;
            }

            switch (alt237) {
                case 1 :
                    // EsperEPL2Grammar.g:1461:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart9930);
                    number646=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number646.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1461:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart9934); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1461:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart9936);
                    substitution647=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution647.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1461:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt238=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt238=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt238=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt238=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);

                throw nvae;
            }

            switch (alt238) {
                case 1 :
                    // EsperEPL2Grammar.g:1461:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS648=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart9940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS648);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1461:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND649=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart9944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND649);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1461:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC650=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart9948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC650);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, i, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1462:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1462:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1462:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1462:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1463:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1463:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1463:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1463:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1466:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS653=null;
        Token TIMEPERIOD_MILLISECOND654=null;
        Token TIMEPERIOD_MILLISEC655=null;
        EsperEPL2GrammarParser.number_return number651 = null;

        EsperEPL2GrammarParser.substitution_return substitution652 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS653_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND654_tree=null;
        CommonTree TIMEPERIOD_MILLISEC655_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1467:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1467:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1467:4: ( number | i= IDENT | substitution )
            int alt239=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt239=1;
                }
                break;
            case IDENT:
                {
                alt239=2;
                }
                break;
            case QUESTION:
                {
                alt239=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;
            }

            switch (alt239) {
                case 1 :
                    // EsperEPL2Grammar.g:1467:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart9998);
                    number651=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number651.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1467:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart10002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1467:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart10004);
                    substitution652=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution652.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1467:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt240=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt240=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt240=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt240=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                throw nvae;
            }

            switch (alt240) {
                case 1 :
                    // EsperEPL2Grammar.g:1467:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS653=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart10008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS653);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1467:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND654=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart10012); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND654);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1467:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC655=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart10016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC655);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1468:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1468:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1468:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1468:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1469:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1469:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1469:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1469:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1472:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1473:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt241=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt241=1;
                }
                break;
            case NUM_LONG:
                {
                alt241=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt241=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt241=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 241, 0, input);

                throw nvae;
            }

            switch (alt241) {
                case 1 :
                    // EsperEPL2Grammar.g:1473:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number10071); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1473:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1474:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number10088); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1474:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1475:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number10105); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1475:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1476:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number10122); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1476:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1479:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1480:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1480:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution10143); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1480:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1483:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant656 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant657 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1484:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt242=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt242=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt242=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt242=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt242=4;
                }
                break;
            case VALUE_NULL:
                {
                alt242=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;
            }

            switch (alt242) {
                case 1 :
                    // EsperEPL2Grammar.g:1484:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant10162);
                    numberconstant656=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant656.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1485:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant10169);
                    stringconstant657=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant657.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1486:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant10182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1486:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1486:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1487:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant10202); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1487:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1487:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1488:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant10222); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1488:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1488:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1491:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number658 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1492:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1492:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1492:5: (m= MINUS | p= PLUS )?
            int alt243=3;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==MINUS) ) {
                alt243=1;
            }
            else if ( (LA243_0==PLUS) ) {
                alt243=2;
            }
            switch (alt243) {
                case 1 :
                    // EsperEPL2Grammar.g:1492:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant10244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1492:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant10250); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant10254);
            number658=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number658.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1493:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number658!=null?((CommonTree)number658.tree):null).getType(), "-" + (number658!=null?input.toString(number658.start,number658.stop):null)));

            }
            else // 1494:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1497:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1498:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==STRING_LITERAL) ) {
                alt244=1;
            }
            else if ( (LA244_0==QUOTED_STRING_LITERAL) ) {
                alt244=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;
            }
            switch (alt244) {
                case 1 :
                    // EsperEPL2Grammar.g:1498:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant10283); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1498:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1498:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1499:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant10299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1499:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1499:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:759:4: ( streamSelector )
        // EsperEPL2Grammar.g:759:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3522);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:837:7: ( timePeriod )
        // EsperEPL2Grammar.g:837:8: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar4210);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:999:4: ( builtinFunc )
        // EsperEPL2Grammar.g:999:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar5941);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1072:4: ( eventProperty )
        // EsperEPL2Grammar.g:1072:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar6616);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1233:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1233:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar8027);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1283:7: ( lastOperand )
        // EsperEPL2Grammar.g:1283:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar8450);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1284:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1284:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar8461);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1285:4: ( timePeriod )
        // EsperEPL2Grammar.g:1285:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar8472);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1286:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1286:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar8483);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1287:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1287:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar8494);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1288:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1288:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar8506);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1289:4: ( lastOperator )
        // EsperEPL2Grammar.g:1289:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar8517);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1290:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1290:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar8528);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1291:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1291:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar8541);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA70 dfa70 = new DFA70(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA192 dfa192 = new DFA192(this);
    protected DFA202 dfa202 = new DFA202(this);
    protected DFA216 dfa216 = new DFA216(this);
    static final String DFA70_eotS =
        "\u0088\uffff";
    static final String DFA70_eofS =
        "\2\uffff\1\3\u0085\uffff";
    static final String DFA70_minS =
        "\1\5\1\uffff\1\6\67\uffff\1\5\115\uffff";
    static final String DFA70_maxS =
        "\1\u0107\1\uffff\1\u0104\67\uffff\1\u0105\115\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\135\uffff\1\2\46\uffff";
    static final String DFA70_specialS =
        "\72\uffff\1\0\115\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\3\4\uffff\1\3\2\uffff\2\3\3\uffff\11\3\1\uffff\1\3\6\uffff"+
            "\1\3\1\uffff\4\3\12\uffff\3\3\10\uffff\16\3\1\uffff\1\3\1\uffff"+
            "\3\3\14\uffff\3\3\u0082\uffff\1\3\2\uffff\1\2\2\uffff\1\3\1"+
            "\uffff\1\1\3\uffff\2\3\12\uffff\2\3\2\uffff\1\3\1\uffff\1\3"+
            "\1\uffff\1\3\1\uffff\3\3",
            "",
            "\4\3\1\uffff\3\3\2\uffff\2\3\20\uffff\1\3\7\uffff\1\3\1\uffff"+
            "\2\3\4\uffff\1\3\3\uffff\1\3\1\uffff\1\3\u00ac\uffff\1\3\1\uffff"+
            "\1\3\1\72\1\3\1\uffff\2\3\4\uffff\16\3\4\uffff\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\4\uffff\1\3\3\uffff\1\3\3\uffff\11\3\10\uffff\1\3\1\uffff"+
            "\4\3\12\uffff\3\3\10\uffff\10\3\1\uffff\4\3\2\uffff\1\3\1\uffff"+
            "\3\3\u0094\uffff\1\3\4\uffff\1\141\31\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "756:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_58 = input.LA(1);

                         
                        int index70_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA70_58==STAR) && (synpred1_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA70_58==WINDOW||LA70_58==ESCAPE||LA70_58==EVERY_EXPR||(LA70_58>=SUM && LA70_58<=COUNT)||LA70_58==OUTER||(LA70_58>=JOIN && LA70_58<=FULL)||(LA70_58>=EVENTS && LA70_58<=LAST)||(LA70_58>=UNIDIRECTIONAL && LA70_58<=PRIOR)||(LA70_58>=WEEKDAY && LA70_58<=CAST)||LA70_58==SNAPSHOT||(LA70_58>=VARIABLE && LA70_58<=AT)||LA70_58==IDENT||LA70_58==TICKED_STRING_LITERAL) ) {s = 3;}

                         
                        input.seek(index70_58);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA101_eotS =
        "\162\uffff";
    static final String DFA101_eofS =
        "\162\uffff";
    static final String DFA101_minS =
        "\2\5\160\uffff";
    static final String DFA101_maxS =
        "\2\u0107\160\uffff";
    static final String DFA101_acceptS =
        "\2\uffff\1\3\66\uffff\1\2\67\uffff\1\1";
    static final String DFA101_specialS =
        "\162\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\2\4\uffff\1\2\2\uffff\2\2\3\uffff\11\2\1\uffff\1\1\6\uffff"+
            "\1\2\1\uffff\4\2\12\uffff\3\2\10\uffff\16\2\1\uffff\1\2\1\uffff"+
            "\3\2\14\uffff\3\2\u0082\uffff\1\2\2\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\2\2\12\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2"+
            "\1\uffff\3\2",
            "\1\71\4\uffff\1\71\2\uffff\2\71\3\uffff\11\71\1\uffff\1\71"+
            "\2\uffff\1\161\3\uffff\1\71\1\uffff\4\71\12\uffff\3\71\10\uffff"+
            "\16\71\1\uffff\1\71\1\uffff\3\71\14\uffff\3\71\u0082\uffff\1"+
            "\71\2\uffff\1\71\2\uffff\1\71\5\uffff\2\71\12\uffff\2\71\2\uffff"+
            "\1\71\1\uffff\1\71\1\uffff\1\71\1\uffff\3\71",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "877:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );";
        }
    }
    static final String DFA133_eotS =
        "\u0752\uffff";
    static final String DFA133_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\12\uffff\2\16\2\uffff"+
        "\2\16\u0726\uffff";
    static final String DFA133_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\12\uffff"+
        "\2\6\2\uffff\2\6\10\uffff\1\u00e9\145\uffff\1\5\65\uffff\1\5\65"+
        "\uffff\1\5\65\uffff\1\5\65\uffff\1\5\65\uffff\1\5\65\uffff\1\5\65"+
        "\uffff\1\5\65\uffff\1\u00ef\65\uffff\1\5\65\uffff\1\5\65\uffff\1"+
        "\5\11\uffff\2\6\71\uffff\2\6\70\uffff\2\6\57\uffff\2\6\77\uffff"+
        "\2\6\57\uffff\2\6\70\uffff\2\6\77\uffff\2\6\62\uffff\2\6\66\uffff"+
        "\2\6\135\uffff\1\0\53\uffff\1\0\5\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\137\uffff\1\0\30\uffff\1\0\5\uffff\1\0\53\uffff"+
        "\1\0\5\uffff\1\0\53\uffff\1\0\u00a3\uffff";
    static final String DFA133_maxS =
        "\2\u0107\13\uffff\1\u0107\3\uffff\1\u0104\2\uffff\2\u0104\2\uffff"+
        "\4\u0104\12\uffff\2\u0104\2\uffff\2\u0104\10\uffff\1\u00e9\145\uffff"+
        "\1\u0107\65\uffff\1\u0107\65\uffff\1\u0107\65\uffff\1\u0107\65\uffff"+
        "\1\u0107\65\uffff\1\u0107\65\uffff\1\u0107\65\uffff\1\u0107\65\uffff"+
        "\1\u0101\65\uffff\1\u0107\65\uffff\1\u0107\65\uffff\1\u0105\11\uffff"+
        "\2\u00fe\71\uffff\2\u00fe\70\uffff\2\u00fe\57\uffff\2\u00fe\77\uffff"+
        "\2\u00fe\57\uffff\2\u00fe\70\uffff\2\u00fe\77\uffff\2\u00fe\62\uffff"+
        "\2\u00fe\66\uffff\2\u00fe\135\uffff\1\0\53\uffff\1\0\5\uffff\1\0"+
        "\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\137\uffff\1\0\30\uffff\1"+
        "\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0\53\uffff\1\0\u00a3\uffff";
    static final String DFA133_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\46\uffff\1\6\1\7\4\uffff"+
        "\1\1\45\uffff\1\10\1\4\u028a\uffff\11\6\2\uffff\71\6\2\uffff\70"+
        "\6\2\uffff\57\6\2\uffff\77\6\2\uffff\57\6\2\uffff\70\6\2\uffff\77"+
        "\6\2\uffff\60\6\4\uffff\66\6\2\uffff\66\6\1\11\46\6\1\uffff\53\6"+
        "\1\uffff\5\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6"+
        "\1\uffff\62\6\1\uffff\23\6\1\uffff\30\6\1\uffff\5\6\1\uffff\53\6"+
        "\1\uffff\5\6\1\uffff\53\6\1\uffff\36\6\1\uffff\31\6\2\uffff\62\6"+
        "\2\uffff\64\6\1\uffff";
    static final String DFA133_specialS =
        "\1\0\u0099\uffff\1\1\65\uffff\1\2\65\uffff\1\3\65\uffff\1\4\65"+
        "\uffff\1\5\65\uffff\1\6\65\uffff\1\7\65\uffff\1\10\65\uffff\1\11"+
        "\65\uffff\1\12\65\uffff\1\13\65\uffff\1\14\11\uffff\1\15\1\16\71"+
        "\uffff\1\17\1\20\70\uffff\1\21\1\22\57\uffff\1\23\1\24\77\uffff"+
        "\1\25\1\26\57\uffff\1\27\1\30\70\uffff\1\31\1\32\77\uffff\1\33\1"+
        "\34\62\uffff\1\35\1\36\66\uffff\1\37\1\40\135\uffff\1\41\53\uffff"+
        "\1\42\5\uffff\1\43\30\uffff\1\44\30\uffff\1\45\30\uffff\1\46\137"+
        "\uffff\1\47\30\uffff\1\50\5\uffff\1\51\53\uffff\1\52\5\uffff\1\53"+
        "\53\uffff\1\54\u00a3\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\16\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\3\16"+
            "\10\uffff\6\16\1\46\1\47\1\64\2\16\1\52\1\53\1\65\1\uffff\1"+
            "\16\1\uffff\3\16\14\uffff\3\2\u0082\uffff\1\2\2\uffff\1\16\2"+
            "\uffff\1\15\5\uffff\2\2\12\uffff\1\2\1\1\2\uffff\1\66\1\uffff"+
            "\1\2\1\uffff\1\14\1\uffff\1\16\2\2",
            "\1\73\4\uffff\1\73\3\uffff\1\73\3\uffff\11\73\10\uffff\1\73"+
            "\1\uffff\4\73\12\uffff\3\73\10\uffff\10\73\1\uffff\4\73\2\uffff"+
            "\1\73\1\uffff\3\73\u0091\uffff\1\2\2\uffff\1\73\32\uffff\1\2"+
            "\3\uffff\1\73\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\142\4\uffff\1\142\2\uffff\2\142\3\uffff\11\142\1\141\1"+
            "\142\6\uffff\1\142\1\uffff\4\142\12\uffff\3\142\10\uffff\16"+
            "\142\1\uffff\1\142\1\uffff\3\142\14\uffff\3\142\u0082\uffff"+
            "\1\142\2\uffff\1\142\2\uffff\1\142\5\uffff\2\142\12\uffff\2"+
            "\142\2\uffff\1\142\1\uffff\1\142\1\uffff\1\142\1\uffff\3\142",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0083\uffff\1\16\1\uffff\2\16\1\u009a\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0083\uffff\1\16\1\uffff\2\16\1\u00d0\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0083\uffff\1\16\1\uffff\2\16\1\u0106\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0083\uffff\1\16\1\uffff\2\16\1\u013c\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0083\uffff\1\16\1\uffff\2\16\1\u0172\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0083\uffff\1\16\1\uffff\2\16\1\u01a8\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0083\uffff\1\16\1\uffff\2\16\1\u01de\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0083\uffff\1\16\1\uffff\2\16\1\u0214\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0083\uffff\1\16\1\uffff\2\16\1\u024a\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0083\uffff\1\16\1\uffff\2\16\1\u0280\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0083\uffff\1\16\1\uffff\2\16\1\u02b6\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02ec",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u031d\4\uffff\1\u0301\2\uffff\1\u0326\1\u0302\3\uffff\1"+
            "\u0303\1\u0304\1\u0305\1\u0306\1\u0307\1\u0308\1\u0309\1\u030a"+
            "\1\u0300\1\uffff\1\u02ef\6\uffff\1\u0320\1\uffff\1\u0322\1\u031e"+
            "\1\u031f\1\u0321\5\uffff\1\u02ee\1\u02ed\3\uffff\1\u030b\1\u030c"+
            "\1\u030d\10\uffff\1\u030e\1\u030f\1\u0310\1\u0312\1\u0313\1"+
            "\u0314\1\u0315\1\u0316\1\u0323\1\u0317\1\u0318\1\u0319\1\u031a"+
            "\1\u0324\1\uffff\1\u031b\1\uffff\1\u031c\1\u0311\1\u02ff\14"+
            "\uffff\1\u02f8\1\u02f9\1\u02fa\u0082\uffff\1\u02f5\2\uffff\1"+
            "\u02fd\2\uffff\1\u02fc\1\uffff\1\u0327\3\uffff\1\u02f6\1\u02f7"+
            "\12\uffff\1\u02f1\1\u02f0\2\uffff\1\u0325\1\uffff\1\u02f2\1"+
            "\uffff\1\u02fb\1\uffff\1\u02fe\1\u02f3\1\u02f4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0358\4\uffff\1\u033c\2\uffff\1\u0361\1\u033d\3\uffff\1"+
            "\u033e\1\u033f\1\u0340\1\u0341\1\u0342\1\u0343\1\u0344\1\u0345"+
            "\1\u033b\1\uffff\1\u032a\6\uffff\1\u035b\1\uffff\1\u035d\1\u0359"+
            "\1\u035a\1\u035c\5\uffff\1\u0329\1\u0328\3\uffff\1\u0346\1\u0347"+
            "\1\u0348\10\uffff\1\u0349\1\u034a\1\u034b\1\u034d\1\u034e\1"+
            "\u034f\1\u0350\1\u0351\1\u035e\1\u0352\1\u0353\1\u0354\1\u0355"+
            "\1\u035f\1\uffff\1\u0356\1\uffff\1\u0357\1\u034c\1\u033a\14"+
            "\uffff\1\u0333\1\u0334\1\u0335\u0082\uffff\1\u0330\2\uffff\1"+
            "\u0338\2\uffff\1\u0337\5\uffff\1\u0331\1\u0332\12\uffff\1\u032c"+
            "\1\u032b\2\uffff\1\u0360\1\uffff\1\u032d\1\uffff\1\u0336\1\uffff"+
            "\1\u0339\1\u032e\1\u032f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0392\4\uffff\1\u0376\2\uffff\1\u039b\1\u0377\3\uffff\1"+
            "\u0378\1\u0379\1\u037a\1\u037b\1\u037c\1\u037d\1\u037e\1\u037f"+
            "\1\u0375\1\uffff\1\u0364\6\uffff\1\u0395\1\uffff\1\u0397\1\u0393"+
            "\1\u0394\1\u0396\5\uffff\1\u0363\1\u0362\3\uffff\1\u0380\1\u0381"+
            "\1\u0382\10\uffff\1\u0383\1\u0384\1\u0385\1\u0387\1\u0388\1"+
            "\u0389\1\u038a\1\u038b\1\u0398\1\u038c\1\u038d\1\u038e\1\u038f"+
            "\1\u0399\1\uffff\1\u0390\1\uffff\1\u0391\1\u0386\1\u0374\14"+
            "\uffff\1\u036d\1\u036e\1\u036f\u0082\uffff\1\u036a\2\uffff\1"+
            "\u0372\2\uffff\1\u0371\5\uffff\1\u036b\1\u036c\12\uffff\1\u0366"+
            "\1\u0365\2\uffff\1\u039a\1\uffff\1\u0367\1\uffff\1\u0370\1\uffff"+
            "\1\u0373\1\u0368\1\u0369",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03ca\4\uffff\1\u03ae\2\uffff\1\u03d3\1\u03af\3\uffff\1"+
            "\u03b0\1\u03b1\1\u03b2\1\u03b3\1\u03b4\1\u03b5\1\u03b6\1\u03b7"+
            "\1\u03ad\1\uffff\1\u039e\6\uffff\1\u03cd\1\uffff\1\u03cf\1\u03cb"+
            "\1\u03cc\1\u03ce\12\uffff\1\u03b8\1\u03b9\1\u03ba\10\uffff\1"+
            "\u03bb\1\u03bc\1\u03bd\1\u03bf\1\u03c0\1\u03c1\1\u03c2\1\u03c3"+
            "\1\u03d0\1\u03c4\1\u03c5\1\u03c6\1\u03c7\1\u03d1\1\uffff\1\u03c8"+
            "\1\uffff\1\u03c9\1\u03be\1\u03ac\14\uffff\1\u03a5\1\u03a6\1"+
            "\u03a7\u0082\uffff\1\u03a4\2\uffff\1\u03aa\2\uffff\1\u03a9\5"+
            "\uffff\1\u039c\1\u039d\12\uffff\1\u03a0\1\u039f\2\uffff\1\u03d2"+
            "\1\uffff\1\u03a1\1\uffff\1\u03a8\1\uffff\1\u03ab\1\u03a2\1\u03a3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0404\4\uffff\1\u03e8\2\uffff\1\u040d\1\u03e9\3\uffff\1"+
            "\u03ea\1\u03eb\1\u03ec\1\u03ed\1\u03ee\1\u03ef\1\u03f0\1\u03f1"+
            "\1\u03e7\1\uffff\1\u03d6\6\uffff\1\u0407\1\uffff\1\u0409\1\u0405"+
            "\1\u0406\1\u0408\5\uffff\1\u03d5\1\u03d4\3\uffff\1\u03f2\1\u03f3"+
            "\1\u03f4\10\uffff\1\u03f5\1\u03f6\1\u03f7\1\u03f9\1\u03fa\1"+
            "\u03fb\1\u03fc\1\u03fd\1\u040a\1\u03fe\1\u03ff\1\u0400\1\u0401"+
            "\1\u040b\1\uffff\1\u0402\1\uffff\1\u0403\1\u03f8\1\u03e6\14"+
            "\uffff\1\u03df\1\u03e0\1\u03e1\u0082\uffff\1\u03dc\2\uffff\1"+
            "\u03e4\2\uffff\1\u03e3\5\uffff\1\u03dd\1\u03de\12\uffff\1\u03d8"+
            "\1\u03d7\2\uffff\1\u040c\1\uffff\1\u03d9\1\uffff\1\u03e2\1\uffff"+
            "\1\u03e5\1\u03da\1\u03db",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u043e\4\uffff\1\u0422\2\uffff\1\u0447\1\u0423\3\uffff\1"+
            "\u0424\1\u0425\1\u0426\1\u0427\1\u0428\1\u0429\1\u042a\1\u042b"+
            "\1\u0421\1\uffff\1\u0412\6\uffff\1\u0441\1\uffff\1\u0443\1\u043f"+
            "\1\u0440\1\u0442\5\uffff\1\u0411\1\u0410\3\uffff\1\u042c\1\u042d"+
            "\1\u042e\10\uffff\1\u042f\1\u0430\1\u0431\1\u0433\1\u0434\1"+
            "\u0435\1\u0436\1\u0437\1\u0444\1\u0438\1\u0439\1\u043a\1\u043b"+
            "\1\u0445\1\uffff\1\u043c\1\uffff\1\u043d\1\u0432\1\u0420\14"+
            "\uffff\1\u0419\1\u041a\1\u041b\u0082\uffff\1\u0418\2\uffff\1"+
            "\u041e\2\uffff\1\u041d\5\uffff\1\u040e\1\u040f\12\uffff\1\u0414"+
            "\1\u0413\2\uffff\1\u0446\1\uffff\1\u0415\1\uffff\1\u041c\1\uffff"+
            "\1\u041f\1\u0416\1\u0417",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0478\4\uffff\1\u045c\2\uffff\1\u0481\1\u045d\3\uffff\1"+
            "\u045e\1\u045f\1\u0460\1\u0461\1\u0462\1\u0463\1\u0464\1\u0465"+
            "\1\u045b\1\uffff\1\u044c\6\uffff\1\u047b\1\uffff\1\u047d\1\u0479"+
            "\1\u047a\1\u047c\5\uffff\1\u044b\1\u044a\3\uffff\1\u0466\1\u0467"+
            "\1\u0468\10\uffff\1\u0469\1\u046a\1\u046b\1\u046d\1\u046e\1"+
            "\u046f\1\u0470\1\u0471\1\u047e\1\u0472\1\u0473\1\u0474\1\u0475"+
            "\1\u047f\1\uffff\1\u0476\1\uffff\1\u0477\1\u046c\1\u045a\14"+
            "\uffff\1\u0453\1\u0454\1\u0455\u0082\uffff\1\u0452\2\uffff\1"+
            "\u0458\2\uffff\1\u0457\5\uffff\1\u0448\1\u0449\12\uffff\1\u044e"+
            "\1\u044d\2\uffff\1\u0480\1\uffff\1\u044f\1\uffff\1\u0456\1\uffff"+
            "\1\u0459\1\u0450\1\u0451",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04b0\4\uffff\1\u0494\2\uffff\1\u04b9\1\u0495\3\uffff\1"+
            "\u0496\1\u0497\1\u0498\1\u0499\1\u049a\1\u049b\1\u049c\1\u049d"+
            "\1\u0493\1\uffff\1\u0482\6\uffff\1\u04b3\1\uffff\1\u04b5\1\u04b1"+
            "\1\u04b2\1\u04b4\12\uffff\1\u049e\1\u049f\1\u04a0\10\uffff\1"+
            "\u04a1\1\u04a2\1\u04a3\1\u04a5\1\u04a6\1\u04a7\1\u04a8\1\u04a9"+
            "\1\u04b6\1\u04aa\1\u04ab\1\u04ac\1\u04ad\1\u04b7\1\uffff\1\u04ae"+
            "\1\uffff\1\u04af\1\u04a4\1\u0492\14\uffff\1\u048b\1\u048c\1"+
            "\u048d\u0082\uffff\1\u0488\2\uffff\1\u0490\2\uffff\1\u048f\5"+
            "\uffff\1\u0489\1\u048a\12\uffff\1\u0484\1\u0483\2\uffff\1\u04b8"+
            "\1\uffff\1\u0485\1\uffff\1\u048e\1\uffff\1\u0491\1\u0486\1\u0487",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\20\uffff\1\u04ba",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04eb\4\uffff\1\u04cf\2\uffff\1\u04f4\1\u04d0\3\uffff\1"+
            "\u04d1\1\u04d2\1\u04d3\1\u04d4\1\u04d5\1\u04d6\1\u04d7\1\u04d8"+
            "\1\u04ce\1\uffff\1\u04bf\6\uffff\1\u04ee\1\uffff\1\u04f0\1\u04ec"+
            "\1\u04ed\1\u04ef\12\uffff\1\u04d9\1\u04da\1\u04db\10\uffff\1"+
            "\u04dc\1\u04dd\1\u04de\1\u04e0\1\u04e1\1\u04e2\1\u04e3\1\u04e4"+
            "\1\u04f1\1\u04e5\1\u04e6\1\u04e7\1\u04e8\1\u04f2\1\uffff\1\u04e9"+
            "\1\uffff\1\u04ea\1\u04df\1\u04cd\14\uffff\1\u04c6\1\u04c7\1"+
            "\u04c8\u0082\uffff\1\u04c5\2\uffff\1\u04cb\2\uffff\1\u04ca\5"+
            "\uffff\1\u04bd\1\u04be\12\uffff\1\u04c1\1\u04c0\2\uffff\1\u04f3"+
            "\1\uffff\1\u04c2\1\uffff\1\u04c9\1\uffff\1\u04cc\1\u04c3\1\u04c4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0523\4\uffff\1\u0507\2\uffff\1\u052c\1\u0508\3\uffff\1"+
            "\u0509\1\u050a\1\u050b\1\u050c\1\u050d\1\u050e\1\u050f\1\u0510"+
            "\1\u0506\1\uffff\1\u04f7\6\uffff\1\u0526\1\uffff\1\u0528\1\u0524"+
            "\1\u0525\1\u0527\12\uffff\1\u0511\1\u0512\1\u0513\10\uffff\1"+
            "\u0514\1\u0515\1\u0516\1\u0518\1\u0519\1\u051a\1\u051b\1\u051c"+
            "\1\u0529\1\u051d\1\u051e\1\u051f\1\u0520\1\u052a\1\uffff\1\u0521"+
            "\1\uffff\1\u0522\1\u0517\1\u0505\14\uffff\1\u04fe\1\u04ff\1"+
            "\u0500\u0082\uffff\1\u04fd\2\uffff\1\u0503\2\uffff\1\u0502\5"+
            "\uffff\1\u04f5\1\u04f6\12\uffff\1\u04f9\1\u04f8\2\uffff\1\u052b"+
            "\1\uffff\1\u04fa\1\uffff\1\u0501\1\uffff\1\u0504\1\u04fb\1\u04fc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u054e\4\uffff\1\u0532\3\uffff\1\u0533\3\uffff\1\u0534\1"+
            "\u0535\1\u0536\1\u0537\1\u0538\1\u0539\1\u053a\1\u053b\1\u0531"+
            "\1\u052d\7\uffff\1\u0551\1\uffff\1\u0553\1\u054f\1\u0550\1\u0552"+
            "\12\uffff\1\u053c\1\u053d\1\u053e\10\uffff\1\u053f\1\u0540\1"+
            "\u0541\1\u0543\1\u0544\1\u0545\1\u0546\1\u0547\1\uffff\1\u0548"+
            "\1\u0549\1\u054a\1\u054b\2\uffff\1\u054c\1\uffff\1\u054d\1\u0542"+
            "\1\u0530\u0094\uffff\1\u052e\36\uffff\1\u052f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0569\1\u056a\1\u056b\1\u056c\1\uffff\1\u0567\1\u0566\1"+
            "\u0568\34\uffff\1\u0560\u00bc\uffff\1\u055f\2\uffff\1\u0554"+
            "\1\u0555\5\uffff\1\u0563\1\u0564\1\u0565\1\u0561\1\u0562\1\u055b"+
            "\1\u055c\1\u055d\1\u055e\1\u055a\1\u0558\1\u0559\1\u0556\1\u0557",
            "\1\u0582\1\u0583\1\u0584\1\u0585\1\uffff\1\u057f\1\u057e\1"+
            "\u0581\34\uffff\1\u0578\u00bc\uffff\1\u0577\2\uffff\1\u0580"+
            "\1\u056d\5\uffff\1\u057b\1\u057c\1\u057d\1\u0579\1\u057a\1\u0573"+
            "\1\u0574\1\u0575\1\u0576\1\u0572\1\u0570\1\u0571\1\u056e\1\u056f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u059b\1\u059c\1\u059d\1\u059e\1\uffff\1\u0599\1\u0598\1"+
            "\u059a\34\uffff\1\u0592\u00bc\uffff\1\u0591\2\uffff\1\u0586"+
            "\1\u0587\5\uffff\1\u0595\1\u0596\1\u0597\1\u0593\1\u0594\1\u058d"+
            "\1\u058e\1\u058f\1\u0590\1\u058c\1\u058a\1\u058b\1\u0588\1\u0589",
            "\1\u05b4\1\u05b5\1\u05b6\1\u05b7\1\uffff\1\u05b2\1\u05b1\1"+
            "\u05b3\34\uffff\1\u05ab\u00bc\uffff\1\u05aa\2\uffff\1\u059f"+
            "\1\u05a0\5\uffff\1\u05ae\1\u05af\1\u05b0\1\u05ac\1\u05ad\1\u05a6"+
            "\1\u05a7\1\u05a8\1\u05a9\1\u05a5\1\u05a3\1\u05a4\1\u05a1\1\u05a2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05cd\1\u05ce\1\u05cf\1\u05d0\1\uffff\1\u05cb\1\u05ca\1"+
            "\u05cc\34\uffff\1\u05c4\u00bc\uffff\1\u05c3\2\uffff\1\u05b8"+
            "\1\u05b9\5\uffff\1\u05c7\1\u05c8\1\u05c9\1\u05c5\1\u05c6\1\u05bf"+
            "\1\u05c0\1\u05c1\1\u05c2\1\u05be\1\u05bc\1\u05bd\1\u05ba\1\u05bb",
            "\1\u05e6\1\u05e7\1\u05e8\1\u05e9\1\uffff\1\u05e4\1\u05e3\1"+
            "\u05e5\34\uffff\1\u05dd\u00bc\uffff\1\u05dc\2\uffff\1\u05d1"+
            "\1\u05d2\5\uffff\1\u05e0\1\u05e1\1\u05e2\1\u05de\1\u05df\1\u05d8"+
            "\1\u05d9\1\u05da\1\u05db\1\u05d7\1\u05d5\1\u05d6\1\u05d3\1\u05d4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0600\1\u0601\1\u0602\1\u0603\1\uffff\1\u05fd\1\u05fc\1"+
            "\u05ff\34\uffff\1\u05f6\u00ba\uffff\1\u05fe\1\uffff\1\u05f5"+
            "\2\uffff\1\16\1\u05eb\5\uffff\1\u05f9\1\u05fa\1\u05fb\1\u05f7"+
            "\1\u05f8\1\u05f1\1\u05f2\1\u05f3\1\u05f4\1\u05f0\1\u05ee\1\u05ef"+
            "\1\u05ec\1\u05ed",
            "\1\u0619\1\u061a\1\u061b\1\u061c\1\uffff\1\u0616\1\u0615\1"+
            "\u0618\34\uffff\1\u060f\u00ba\uffff\1\u0617\1\uffff\1\u060e"+
            "\2\uffff\1\16\1\u0604\5\uffff\1\u0612\1\u0613\1\u0614\1\u0610"+
            "\1\u0611\1\u060a\1\u060b\1\u060c\1\u060d\1\u0609\1\u0607\1\u0608"+
            "\1\u0605\1\u0606",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0633\1\u0634\1\u0635\1\u0636\1\uffff\1\u0630\1\u062f\1"+
            "\u0632\34\uffff\1\u0629\u00bc\uffff\1\u0628\2\uffff\1\u0631"+
            "\1\u061e\5\uffff\1\u062c\1\u062d\1\u062e\1\u062a\1\u062b\1\u0624"+
            "\1\u0625\1\u0626\1\u0627\1\u0623\1\u0621\1\u0622\1\u061f\1\u0620",
            "\1\u064c\1\u064d\1\u064e\1\u064f\1\uffff\1\u0649\1\u0648\1"+
            "\u064b\34\uffff\1\u0642\u00bc\uffff\1\u0641\2\uffff\1\u064a"+
            "\1\u0637\5\uffff\1\u0645\1\u0646\1\u0647\1\u0643\1\u0644\1\u063d"+
            "\1\u063e\1\u063f\1\u0640\1\u063c\1\u063a\1\u063b\1\u0638\1\u0639",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0665\1\u0666\1\u0667\1\u0668\1\uffff\1\u0663\1\u0662\1"+
            "\u0664\34\uffff\1\u065c\u00bc\uffff\1\u065b\2\uffff\1\u0650"+
            "\1\u0651\5\uffff\1\u065f\1\u0660\1\u0661\1\u065d\1\u065e\1\u0657"+
            "\1\u0658\1\u0659\1\u065a\1\u0656\1\u0654\1\u0655\1\u0652\1\u0653",
            "\1\u067e\1\u067f\1\u0680\1\u0681\1\uffff\1\u067b\1\u067a\1"+
            "\u067d\34\uffff\1\u0674\u00bc\uffff\1\u0673\2\uffff\1\u067c"+
            "\1\u0669\5\uffff\1\u0677\1\u0678\1\u0679\1\u0675\1\u0676\1\u066f"+
            "\1\u0670\1\u0671\1\u0672\1\u066e\1\u066c\1\u066d\1\u066a\1\u066b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0697\1\u0698\1\u0699\1\u069a\1\uffff\1\u0695\1\u0694\1"+
            "\u0696\34\uffff\1\u068e\u00bc\uffff\1\u068d\2\uffff\1\u0682"+
            "\1\u0683\5\uffff\1\u0691\1\u0692\1\u0693\1\u068f\1\u0690\1\u0689"+
            "\1\u068a\1\u068b\1\u068c\1\u0688\1\u0686\1\u0687\1\u0684\1\u0685",
            "\1\u06b0\1\u06b1\1\u06b2\1\u06b3\1\uffff\1\u06ad\1\u06ac\1"+
            "\u06af\34\uffff\1\u06a6\u00bc\uffff\1\u06a5\2\uffff\1\u06ae"+
            "\1\u069b\5\uffff\1\u06a9\1\u06aa\1\u06ab\1\u06a7\1\u06a8\1\u06a1"+
            "\1\u06a2\1\u06a3\1\u06a4\1\u06a0\1\u069e\1\u069f\1\u069c\1\u069d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06c9\1\u06ca\1\u06cb\1\u06cc\1\uffff\1\u06c6\1\u06c5\1"+
            "\u06c8\34\uffff\1\u06bf\u00ba\uffff\1\u06c7\1\uffff\1\u06be"+
            "\2\uffff\1\16\1\u06b4\5\uffff\1\u06c2\1\u06c3\1\u06c4\1\u06c0"+
            "\1\u06c1\1\u06ba\1\u06bb\1\u06bc\1\u06bd\1\u06b9\1\u06b7\1\u06b8"+
            "\1\u06b5\1\u06b6",
            "\1\u06e3\1\u06e4\1\u06e5\1\u06e6\1\uffff\1\u06e0\1\u06df\1"+
            "\u06e2\34\uffff\1\u06d9\u00ba\uffff\1\u06e1\1\uffff\1\u06d8"+
            "\2\uffff\1\16\1\u06ce\5\uffff\1\u06dc\1\u06dd\1\u06de\1\u06da"+
            "\1\u06db\1\u06d4\1\u06d5\1\u06d6\1\u06d7\1\u06d3\1\u06d1\1\u06d2"+
            "\1\u06cf\1\u06d0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06fe\1\u06ff\1\u0700\1\u0701\1\uffff\1\u06fb\1\u06fa\1"+
            "\u06fd\34\uffff\1\u06f4\u00ba\uffff\1\u06fc\1\uffff\1\u06f3"+
            "\2\uffff\1\16\1\u06e9\5\uffff\1\u06f7\1\u06f8\1\u06f9\1\u06f5"+
            "\1\u06f6\1\u06ef\1\u06f0\1\u06f1\1\u06f2\1\u06ee\1\u06ec\1\u06ed"+
            "\1\u06ea\1\u06eb",
            "\1\u0717\1\u0718\1\u0719\1\u071a\1\uffff\1\u0714\1\u0713\1"+
            "\u0716\34\uffff\1\u070d\u00ba\uffff\1\u0715\1\uffff\1\u070c"+
            "\2\uffff\1\16\1\u0702\5\uffff\1\u0710\1\u0711\1\u0712\1\u070e"+
            "\1\u070f\1\u0708\1\u0709\1\u070a\1\u070b\1\u0707\1\u0705\1\u0706"+
            "\1\u0703\1\u0704",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0733\1\u0734\1\u0735\1\u0736\1\uffff\1\u072f\1\u072e\1"+
            "\u0732\3\uffff\1\u0731\30\uffff\1\u0728\u00ba\uffff\1\u0730"+
            "\1\uffff\1\u0727\2\uffff\1\16\1\u071d\5\uffff\1\u072b\1\u072c"+
            "\1\u072d\1\u0729\1\u072a\1\u0723\1\u0724\1\u0725\1\u0726\1\u0722"+
            "\1\u0720\1\u0721\1\u071e\1\u071f",
            "\1\u074d\1\u074e\1\u074f\1\u0750\1\uffff\1\u0749\1\u0748\1"+
            "\u074c\3\uffff\1\u074b\30\uffff\1\u0742\u00ba\uffff\1\u074a"+
            "\1\uffff\1\u0741\2\uffff\1\16\1\u0737\5\uffff\1\u0745\1\u0746"+
            "\1\u0747\1\u0743\1\u0744\1\u073d\1\u073e\1\u073f\1\u0740\1\u073c"+
            "\1\u073a\1\u073b\1\u0738\1\u0739",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "993:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_0 = input.LA(1);

                         
                        int index133_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_0==MINUS) ) {s = 1;}

                        else if ( ((LA133_0>=BOOLEAN_TRUE && LA133_0<=VALUE_NULL)||LA133_0==NUM_DOUBLE||(LA133_0>=STRING_LITERAL && LA133_0<=QUOTED_STRING_LITERAL)||LA133_0==PLUS||LA133_0==NUM_INT||(LA133_0>=NUM_LONG && LA133_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA133_0==QUESTION) ) {s = 12;}

                        else if ( (LA133_0==LPAREN) ) {s = 13;}

                        else if ( (LA133_0==WINDOW||LA133_0==ESCAPE||LA133_0==EVERY_EXPR||(LA133_0>=MAX && LA133_0<=MIN)||LA133_0==OUTER||(LA133_0>=JOIN && LA133_0<=FULL)||(LA133_0>=EVENTS && LA133_0<=LAST)||(LA133_0>=UNIDIRECTIONAL && LA133_0<=METADATASQL)||(LA133_0>=WEEKDAY && LA133_0<=LW)||LA133_0==SNAPSHOT||(LA133_0>=VARIABLE && LA133_0<=AT)||LA133_0==IDENT||LA133_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA133_0==COUNT) ) {s = 17;}

                        else if ( (LA133_0==SUM) ) {s = 20;}

                        else if ( (LA133_0==AVG) ) {s = 21;}

                        else if ( (LA133_0==COALESCE) ) {s = 24;}

                        else if ( (LA133_0==MEDIAN) ) {s = 25;}

                        else if ( (LA133_0==STDDEV) ) {s = 26;}

                        else if ( (LA133_0==AVEDEV) ) {s = 27;}

                        else if ( (LA133_0==PREVIOUS) ) {s = 38;}

                        else if ( (LA133_0==PRIOR) ) {s = 39;}

                        else if ( (LA133_0==INSTANCEOF) ) {s = 42;}

                        else if ( (LA133_0==CAST) ) {s = 43;}

                        else if ( (LA133_0==EXISTS) ) {s = 52;}

                        else if ( (LA133_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA133_0==LCURLY) ) {s = 54;}

                         
                        input.seek(index133_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA133_154 = input.LA(1);

                         
                        int index133_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_154==ALL) && (synpred3_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA133_154==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA133_154==CASE) && (synpred3_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA133_154==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA133_154==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA133_154==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA133_154==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA133_154==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA133_154==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA133_154==STRING_LITERAL) ) {s = 758;}

                        else if ( (LA133_154==QUOTED_STRING_LITERAL) ) {s = 759;}

                        else if ( (LA133_154==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA133_154==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA133_154==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA133_154==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA133_154==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA133_154==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA133_154==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA133_154==AT) && (synpred3_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA133_154==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA133_154==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA133_154==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA133_154==SUM) && (synpred3_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA133_154==AVG) && (synpred3_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA133_154==MAX) && (synpred3_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA133_154==MIN) && (synpred3_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA133_154==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA133_154==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA133_154==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA133_154==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA133_154==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA133_154==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA133_154==LAST) && (synpred3_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA133_154==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA133_154==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA133_154==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA133_154==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA133_154==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA133_154==SQL) && (synpred3_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA133_154==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA133_154==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA133_154==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA133_154==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA133_154==LW) && (synpred3_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA133_154==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA133_154==CAST) && (synpred3_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA133_154==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA133_154==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA133_154==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA133_154==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA133_154==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA133_154==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA133_154==FULL) && (synpred3_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA133_154==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA133_154==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA133_154==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA133_154==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA133_154==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA133_154==STAR) && (synpred3_EsperEPL2Grammar())) {s = 807;}

                         
                        input.seek(index133_154);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA133_208 = input.LA(1);

                         
                        int index133_208 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_208==ALL) && (synpred3_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA133_208==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA133_208==CASE) && (synpred3_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA133_208==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA133_208==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA133_208==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA133_208==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA133_208==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA133_208==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA133_208==STRING_LITERAL) ) {s = 817;}

                        else if ( (LA133_208==QUOTED_STRING_LITERAL) ) {s = 818;}

                        else if ( (LA133_208==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA133_208==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA133_208==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA133_208==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA133_208==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA133_208==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA133_208==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA133_208==AT) && (synpred3_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA133_208==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA133_208==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA133_208==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA133_208==SUM) && (synpred3_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA133_208==AVG) && (synpred3_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA133_208==MAX) && (synpred3_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA133_208==MIN) && (synpred3_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA133_208==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA133_208==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA133_208==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA133_208==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA133_208==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA133_208==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA133_208==LAST) && (synpred3_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA133_208==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA133_208==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA133_208==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA133_208==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA133_208==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA133_208==SQL) && (synpred3_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA133_208==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA133_208==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA133_208==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA133_208==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA133_208==LW) && (synpred3_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA133_208==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA133_208==CAST) && (synpred3_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA133_208==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA133_208==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA133_208==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA133_208==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA133_208==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA133_208==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA133_208==FULL) && (synpred3_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA133_208==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA133_208==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA133_208==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA133_208==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA133_208==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 865;}

                         
                        input.seek(index133_208);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA133_262 = input.LA(1);

                         
                        int index133_262 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_262==ALL) && (synpred3_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA133_262==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA133_262==CASE) && (synpred3_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA133_262==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA133_262==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA133_262==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA133_262==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA133_262==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA133_262==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA133_262==STRING_LITERAL) ) {s = 875;}

                        else if ( (LA133_262==QUOTED_STRING_LITERAL) ) {s = 876;}

                        else if ( (LA133_262==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA133_262==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA133_262==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA133_262==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA133_262==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA133_262==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA133_262==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA133_262==AT) && (synpred3_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA133_262==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA133_262==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA133_262==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA133_262==SUM) && (synpred3_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA133_262==AVG) && (synpred3_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA133_262==MAX) && (synpred3_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA133_262==MIN) && (synpred3_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA133_262==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA133_262==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA133_262==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA133_262==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA133_262==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA133_262==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA133_262==LAST) && (synpred3_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA133_262==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA133_262==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA133_262==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA133_262==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA133_262==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA133_262==SQL) && (synpred3_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA133_262==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA133_262==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA133_262==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA133_262==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA133_262==LW) && (synpred3_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA133_262==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA133_262==CAST) && (synpred3_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA133_262==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA133_262==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA133_262==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA133_262==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA133_262==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA133_262==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA133_262==FULL) && (synpred3_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA133_262==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA133_262==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA133_262==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA133_262==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA133_262==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 923;}

                         
                        input.seek(index133_262);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA133_316 = input.LA(1);

                         
                        int index133_316 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_316==STRING_LITERAL) ) {s = 924;}

                        else if ( (LA133_316==QUOTED_STRING_LITERAL) ) {s = 925;}

                        else if ( (LA133_316==CASE) && (synpred3_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA133_316==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA133_316==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA133_316==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA133_316==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA133_316==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA133_316==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA133_316==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA133_316==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA133_316==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA133_316==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA133_316==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA133_316==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA133_316==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA133_316==AT) && (synpred3_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA133_316==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA133_316==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA133_316==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA133_316==SUM) && (synpred3_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA133_316==AVG) && (synpred3_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA133_316==MAX) && (synpred3_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA133_316==MIN) && (synpred3_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA133_316==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA133_316==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA133_316==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA133_316==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA133_316==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA133_316==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA133_316==LAST) && (synpred3_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA133_316==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA133_316==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA133_316==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA133_316==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA133_316==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA133_316==SQL) && (synpred3_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA133_316==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA133_316==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA133_316==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA133_316==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA133_316==LW) && (synpred3_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA133_316==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA133_316==CAST) && (synpred3_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA133_316==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA133_316==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA133_316==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA133_316==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA133_316==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA133_316==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA133_316==FULL) && (synpred3_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA133_316==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA133_316==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA133_316==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA133_316==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA133_316==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 979;}

                         
                        input.seek(index133_316);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA133_370 = input.LA(1);

                         
                        int index133_370 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_370==ALL) && (synpred3_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA133_370==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA133_370==CASE) && (synpred3_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA133_370==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA133_370==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA133_370==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA133_370==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA133_370==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA133_370==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA133_370==STRING_LITERAL) ) {s = 989;}

                        else if ( (LA133_370==QUOTED_STRING_LITERAL) ) {s = 990;}

                        else if ( (LA133_370==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA133_370==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA133_370==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA133_370==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA133_370==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA133_370==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA133_370==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA133_370==AT) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA133_370==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA133_370==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA133_370==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA133_370==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA133_370==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA133_370==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA133_370==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA133_370==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA133_370==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA133_370==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA133_370==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA133_370==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA133_370==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA133_370==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA133_370==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA133_370==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA133_370==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA133_370==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA133_370==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA133_370==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA133_370==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA133_370==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA133_370==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA133_370==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA133_370==LW) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA133_370==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA133_370==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA133_370==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA133_370==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA133_370==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA133_370==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA133_370==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA133_370==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA133_370==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA133_370==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA133_370==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA133_370==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA133_370==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA133_370==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                         
                        input.seek(index133_370);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA133_424 = input.LA(1);

                         
                        int index133_424 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_424==STRING_LITERAL) ) {s = 1038;}

                        else if ( (LA133_424==QUOTED_STRING_LITERAL) ) {s = 1039;}

                        else if ( (LA133_424==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA133_424==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA133_424==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA133_424==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA133_424==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA133_424==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA133_424==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA133_424==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA133_424==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA133_424==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA133_424==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA133_424==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA133_424==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA133_424==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA133_424==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA133_424==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA133_424==AT) && (synpred3_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA133_424==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA133_424==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA133_424==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA133_424==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA133_424==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA133_424==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA133_424==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA133_424==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA133_424==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA133_424==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA133_424==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA133_424==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA133_424==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA133_424==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA133_424==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA133_424==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA133_424==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA133_424==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA133_424==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA133_424==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA133_424==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA133_424==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA133_424==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA133_424==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA133_424==LW) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA133_424==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA133_424==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA133_424==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA133_424==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA133_424==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA133_424==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA133_424==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA133_424==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA133_424==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA133_424==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA133_424==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA133_424==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA133_424==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA133_424==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                         
                        input.seek(index133_424);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA133_478 = input.LA(1);

                         
                        int index133_478 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_478==STRING_LITERAL) ) {s = 1096;}

                        else if ( (LA133_478==QUOTED_STRING_LITERAL) ) {s = 1097;}

                        else if ( (LA133_478==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA133_478==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA133_478==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA133_478==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA133_478==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA133_478==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA133_478==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA133_478==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA133_478==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA133_478==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA133_478==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA133_478==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1109;}

                        else if ( (LA133_478==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA133_478==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA133_478==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA133_478==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA133_478==AT) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA133_478==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA133_478==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA133_478==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA133_478==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA133_478==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA133_478==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA133_478==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA133_478==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA133_478==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA133_478==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA133_478==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA133_478==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA133_478==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA133_478==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA133_478==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA133_478==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA133_478==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA133_478==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA133_478==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA133_478==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA133_478==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA133_478==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA133_478==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA133_478==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA133_478==LW) && (synpred3_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA133_478==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA133_478==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA133_478==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA133_478==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA133_478==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA133_478==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA133_478==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA133_478==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA133_478==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA133_478==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA133_478==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA133_478==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA133_478==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA133_478==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                         
                        input.seek(index133_478);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA133_532 = input.LA(1);

                         
                        int index133_532 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_532==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA133_532==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA133_532==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA133_532==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA133_532==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA133_532==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA133_532==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA133_532==STRING_LITERAL) ) {s = 1161;}

                        else if ( (LA133_532==QUOTED_STRING_LITERAL) ) {s = 1162;}

                        else if ( (LA133_532==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA133_532==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA133_532==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA133_532==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA133_532==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA133_532==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA133_532==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA133_532==AT) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA133_532==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA133_532==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA133_532==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA133_532==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA133_532==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA133_532==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA133_532==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA133_532==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA133_532==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA133_532==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA133_532==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA133_532==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA133_532==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA133_532==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA133_532==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA133_532==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA133_532==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA133_532==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA133_532==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA133_532==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA133_532==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA133_532==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA133_532==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA133_532==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA133_532==LW) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA133_532==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA133_532==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA133_532==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1198;}

                        else if ( (LA133_532==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA133_532==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA133_532==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA133_532==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA133_532==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA133_532==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA133_532==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA133_532==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA133_532==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA133_532==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA133_532==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                         
                        input.seek(index133_532);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA133_586 = input.LA(1);

                         
                        int index133_586 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_586==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( ((LA133_586>=STRING_LITERAL && LA133_586<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index133_586);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA133_640 = input.LA(1);

                         
                        int index133_640 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_640==STRING_LITERAL) ) {s = 1213;}

                        else if ( (LA133_640==QUOTED_STRING_LITERAL) ) {s = 1214;}

                        else if ( (LA133_640==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA133_640==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA133_640==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA133_640==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA133_640==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA133_640==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA133_640==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                        else if ( (LA133_640==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA133_640==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA133_640==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA133_640==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA133_640==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA133_640==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA133_640==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA133_640==AT) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                        else if ( (LA133_640==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1230;}

                        else if ( (LA133_640==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1231;}

                        else if ( (LA133_640==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA133_640==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA133_640==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA133_640==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA133_640==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA133_640==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA133_640==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA133_640==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA133_640==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA133_640==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA133_640==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA133_640==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA133_640==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA133_640==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA133_640==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                        else if ( (LA133_640==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA133_640==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA133_640==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA133_640==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA133_640==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA133_640==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA133_640==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA133_640==LW) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA133_640==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA133_640==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA133_640==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA133_640==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA133_640==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA133_640==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                        else if ( (LA133_640==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1261;}

                        else if ( (LA133_640==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA133_640==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA133_640==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA133_640==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA133_640==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA133_640==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA133_640==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                         
                        input.seek(index133_640);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA133_694 = input.LA(1);

                         
                        int index133_694 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_694==STRING_LITERAL) ) {s = 1269;}

                        else if ( (LA133_694==QUOTED_STRING_LITERAL) ) {s = 1270;}

                        else if ( (LA133_694==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA133_694==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA133_694==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA133_694==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA133_694==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA133_694==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA133_694==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA133_694==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA133_694==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA133_694==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA133_694==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA133_694==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                        else if ( (LA133_694==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA133_694==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1284;}

                        else if ( (LA133_694==AT) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA133_694==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA133_694==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA133_694==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA133_694==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA133_694==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA133_694==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                        else if ( (LA133_694==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1292;}

                        else if ( (LA133_694==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1293;}

                        else if ( (LA133_694==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA133_694==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA133_694==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA133_694==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA133_694==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA133_694==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA133_694==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA133_694==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA133_694==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                        else if ( (LA133_694==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1303;}

                        else if ( (LA133_694==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA133_694==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA133_694==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA133_694==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA133_694==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA133_694==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA133_694==LW) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA133_694==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA133_694==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA133_694==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA133_694==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA133_694==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA133_694==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA133_694==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA133_694==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA133_694==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA133_694==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA133_694==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA133_694==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA133_694==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA133_694==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                         
                        input.seek(index133_694);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA133_748 = input.LA(1);

                         
                        int index133_748 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_748==SELECT) ) {s = 1325;}

                        else if ( (LA133_748==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA133_748==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA133_748==AT) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA133_748==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA133_748==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA133_748==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA133_748==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA133_748==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA133_748==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA133_748==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA133_748==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA133_748==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA133_748==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA133_748==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA133_748==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA133_748==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                        else if ( (LA133_748==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA133_748==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                        else if ( (LA133_748==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA133_748==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA133_748==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA133_748==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA133_748==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA133_748==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA133_748==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA133_748==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA133_748==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA133_748==LW) && (synpred3_EsperEPL2Grammar())) {s = 1353;}

                        else if ( (LA133_748==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1354;}

                        else if ( (LA133_748==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1355;}

                        else if ( (LA133_748==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA133_748==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA133_748==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA133_748==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA133_748==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA133_748==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1361;}

                        else if ( (LA133_748==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA133_748==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                         
                        input.seek(index133_748);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA133_758 = input.LA(1);

                         
                        int index133_758 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_758==RPAREN) ) {s = 1364;}

                        else if ( (LA133_758==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA133_758==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                        else if ( (LA133_758==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA133_758==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA133_758==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA133_758==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA133_758==LT) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA133_758==GT) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA133_758==LE) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA133_758==GE) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA133_758==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA133_758==IS) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA133_758==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                        else if ( (LA133_758==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1378;}

                        else if ( (LA133_758==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA133_758==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA133_758==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA133_758==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA133_758==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA133_758==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA133_758==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA133_758==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1386;}

                        else if ( (LA133_758==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA133_758==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                         
                        input.seek(index133_758);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA133_759 = input.LA(1);

                         
                        int index133_759 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_759==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA133_759==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                        else if ( (LA133_759==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1391;}

                        else if ( (LA133_759==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1392;}

                        else if ( (LA133_759==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA133_759==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA133_759==LT) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA133_759==GT) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA133_759==LE) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA133_759==GE) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA133_759==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA133_759==IS) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA133_759==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA133_759==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA133_759==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA133_759==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                        else if ( (LA133_759==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA133_759==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA133_759==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA133_759==RPAREN) ) {s = 1408;}

                        else if ( (LA133_759==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA133_759==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA133_759==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1411;}

                        else if ( (LA133_759==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA133_759==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                         
                        input.seek(index133_759);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA133_817 = input.LA(1);

                         
                        int index133_817 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_817==RPAREN) ) {s = 1414;}

                        else if ( (LA133_817==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                        else if ( (LA133_817==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1416;}

                        else if ( (LA133_817==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1417;}

                        else if ( (LA133_817==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA133_817==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA133_817==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA133_817==LT) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA133_817==GT) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA133_817==LE) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA133_817==GE) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA133_817==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA133_817==IS) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA133_817==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA133_817==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA133_817==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA133_817==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA133_817==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA133_817==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA133_817==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA133_817==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA133_817==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA133_817==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1436;}

                        else if ( (LA133_817==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA133_817==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                         
                        input.seek(index133_817);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA133_818 = input.LA(1);

                         
                        int index133_818 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_818==RPAREN) ) {s = 1439;}

                        else if ( (LA133_818==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA133_818==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                        else if ( (LA133_818==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA133_818==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA133_818==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA133_818==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA133_818==LT) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                        else if ( (LA133_818==GT) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA133_818==LE) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA133_818==GE) && (synpred3_EsperEPL2Grammar())) {s = 1449;}

                        else if ( (LA133_818==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA133_818==IS) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA133_818==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA133_818==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA133_818==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA133_818==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA133_818==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA133_818==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1457;}

                        else if ( (LA133_818==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1458;}

                        else if ( (LA133_818==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA133_818==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA133_818==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1461;}

                        else if ( (LA133_818==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA133_818==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                         
                        input.seek(index133_818);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA133_875 = input.LA(1);

                         
                        int index133_875 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_875==RPAREN) ) {s = 1464;}

                        else if ( (LA133_875==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                        else if ( (LA133_875==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1466;}

                        else if ( (LA133_875==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1467;}

                        else if ( (LA133_875==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA133_875==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA133_875==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA133_875==LT) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA133_875==GT) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA133_875==LE) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA133_875==GE) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA133_875==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA133_875==IS) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA133_875==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                        else if ( (LA133_875==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1478;}

                        else if ( (LA133_875==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1479;}

                        else if ( (LA133_875==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA133_875==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA133_875==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA133_875==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA133_875==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA133_875==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA133_875==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1486;}

                        else if ( (LA133_875==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA133_875==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                         
                        input.seek(index133_875);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA133_876 = input.LA(1);

                         
                        int index133_876 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_876==RPAREN) ) {s = 1489;}

                        else if ( (LA133_876==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA133_876==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                        else if ( (LA133_876==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA133_876==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA133_876==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA133_876==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA133_876==LT) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA133_876==GT) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA133_876==LE) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA133_876==GE) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA133_876==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA133_876==IS) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA133_876==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA133_876==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1503;}

                        else if ( (LA133_876==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA133_876==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA133_876==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA133_876==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA133_876==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1508;}

                        else if ( (LA133_876==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA133_876==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA133_876==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA133_876==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA133_876==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                         
                        input.seek(index133_876);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA133_924 = input.LA(1);

                         
                        int index133_924 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_924==RPAREN) ) {s = 14;}

                        else if ( (LA133_924==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA133_924==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA133_924==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1517;}

                        else if ( (LA133_924==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA133_924==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA133_924==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA133_924==LT) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA133_924==GT) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA133_924==LE) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA133_924==GE) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                        else if ( (LA133_924==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( (LA133_924==IS) && (synpred3_EsperEPL2Grammar())) {s = 1526;}

                        else if ( (LA133_924==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1527;}

                        else if ( (LA133_924==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1528;}

                        else if ( (LA133_924==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1529;}

                        else if ( (LA133_924==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA133_924==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA133_924==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA133_924==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA133_924==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA133_924==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA133_924==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA133_924==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                        else if ( (LA133_924==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( (LA133_924==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1539;}

                         
                        input.seek(index133_924);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA133_925 = input.LA(1);

                         
                        int index133_925 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_925==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1540;}

                        else if ( (LA133_925==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1541;}

                        else if ( (LA133_925==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1542;}

                        else if ( (LA133_925==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1543;}

                        else if ( (LA133_925==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA133_925==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA133_925==LT) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA133_925==GT) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA133_925==LE) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA133_925==GE) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA133_925==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA133_925==IS) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA133_925==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA133_925==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA133_925==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA133_925==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA133_925==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA133_925==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA133_925==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA133_925==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA133_925==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA133_925==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                        else if ( (LA133_925==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA133_925==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1563;}

                        else if ( (LA133_925==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA133_925==RPAREN) ) {s = 14;}

                         
                        input.seek(index133_925);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA133_989 = input.LA(1);

                         
                        int index133_989 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_989==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1566;}

                        else if ( (LA133_989==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA133_989==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                        else if ( (LA133_989==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA133_989==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA133_989==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA133_989==LT) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA133_989==GT) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA133_989==LE) && (synpred3_EsperEPL2Grammar())) {s = 1574;}

                        else if ( (LA133_989==GE) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA133_989==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA133_989==IS) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA133_989==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA133_989==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA133_989==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA133_989==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA133_989==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA133_989==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA133_989==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA133_989==RPAREN) ) {s = 1585;}

                        else if ( (LA133_989==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                        else if ( (LA133_989==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1587;}

                        else if ( (LA133_989==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1588;}

                        else if ( (LA133_989==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA133_989==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                         
                        input.seek(index133_989);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA133_990 = input.LA(1);

                         
                        int index133_990 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_990==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA133_990==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA133_990==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                        else if ( (LA133_990==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA133_990==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA133_990==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA133_990==LT) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA133_990==GT) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA133_990==LE) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA133_990==GE) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                        else if ( (LA133_990==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1601;}

                        else if ( (LA133_990==IS) && (synpred3_EsperEPL2Grammar())) {s = 1602;}

                        else if ( (LA133_990==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA133_990==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA133_990==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA133_990==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA133_990==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA133_990==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA133_990==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA133_990==RPAREN) ) {s = 1610;}

                        else if ( (LA133_990==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA133_990==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA133_990==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1613;}

                        else if ( (LA133_990==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA133_990==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                         
                        input.seek(index133_990);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA133_1038 = input.LA(1);

                         
                        int index133_1038 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_1038==RPAREN) ) {s = 1616;}

                        else if ( (LA133_1038==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA133_1038==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                        else if ( (LA133_1038==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA133_1038==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                        else if ( (LA133_1038==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA133_1038==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA133_1038==LT) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA133_1038==GT) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA133_1038==LE) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA133_1038==GE) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA133_1038==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA133_1038==IS) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA133_1038==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                        else if ( (LA133_1038==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA133_1038==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA133_1038==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA133_1038==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA133_1038==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA133_1038==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA133_1038==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA133_1038==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA133_1038==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1638;}

                        else if ( (LA133_1038==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA133_1038==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                         
                        input.seek(index133_1038);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA133_1039 = input.LA(1);

                         
                        int index133_1039 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_1039==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA133_1039==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA133_1039==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                        else if ( (LA133_1039==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA133_1039==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                        else if ( (LA133_1039==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1646;}

                        else if ( (LA133_1039==LT) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA133_1039==GT) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA133_1039==LE) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA133_1039==GE) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA133_1039==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA133_1039==IS) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA133_1039==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA133_1039==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                        else if ( (LA133_1039==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA133_1039==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA133_1039==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA133_1039==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA133_1039==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA133_1039==RPAREN) ) {s = 1660;}

                        else if ( (LA133_1039==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1661;}

                        else if ( (LA133_1039==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA133_1039==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1663;}

                        else if ( (LA133_1039==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA133_1039==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                         
                        input.seek(index133_1039);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA133_1096 = input.LA(1);

                         
                        int index133_1096 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_1096==RPAREN) ) {s = 1666;}

                        else if ( (LA133_1096==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA133_1096==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                        else if ( (LA133_1096==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA133_1096==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA133_1096==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA133_1096==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA133_1096==LT) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA133_1096==GT) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA133_1096==LE) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA133_1096==GE) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA133_1096==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA133_1096==IS) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA133_1096==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA133_1096==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA133_1096==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA133_1096==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA133_1096==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA133_1096==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA133_1096==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA133_1096==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA133_1096==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                        else if ( (LA133_1096==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1688;}

                        else if ( (LA133_1096==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA133_1096==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                         
                        input.seek(index133_1096);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA133_1097 = input.LA(1);

                         
                        int index133_1097 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_1097==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA133_1097==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA133_1097==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                        else if ( (LA133_1097==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA133_1097==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA133_1097==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA133_1097==LT) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA133_1097==GT) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA133_1097==LE) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA133_1097==GE) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA133_1097==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA133_1097==IS) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA133_1097==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                        else if ( (LA133_1097==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1704;}

                        else if ( (LA133_1097==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA133_1097==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA133_1097==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA133_1097==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA133_1097==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA133_1097==RPAREN) ) {s = 1710;}

                        else if ( (LA133_1097==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA133_1097==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                        else if ( (LA133_1097==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA133_1097==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA133_1097==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                         
                        input.seek(index133_1097);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA133_1161 = input.LA(1);

                         
                        int index133_1161 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_1161==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                        else if ( (LA133_1161==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA133_1161==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA133_1161==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1719;}

                        else if ( (LA133_1161==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA133_1161==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA133_1161==LT) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA133_1161==GT) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA133_1161==LE) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA133_1161==GE) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA133_1161==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA133_1161==IS) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA133_1161==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                        else if ( (LA133_1161==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA133_1161==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA133_1161==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA133_1161==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1732;}

                        else if ( (LA133_1161==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA133_1161==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA133_1161==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA133_1161==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA133_1161==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                        else if ( (LA133_1161==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA133_1161==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA133_1161==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA133_1161==RPAREN) ) {s = 14;}

                         
                        input.seek(index133_1161);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA133_1162 = input.LA(1);

                         
                        int index133_1162 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_1162==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA133_1162==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA133_1162==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA133_1162==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1745;}

                        else if ( (LA133_1162==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA133_1162==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA133_1162==LT) && (synpred3_EsperEPL2Grammar())) {s = 1748;}

                        else if ( (LA133_1162==GT) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA133_1162==LE) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA133_1162==GE) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA133_1162==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA133_1162==IS) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                        else if ( (LA133_1162==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA133_1162==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA133_1162==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA133_1162==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                        else if ( (LA133_1162==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA133_1162==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA133_1162==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA133_1162==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA133_1162==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                        else if ( (LA133_1162==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA133_1162==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA133_1162==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA133_1162==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA133_1162==RPAREN) ) {s = 14;}

                         
                        input.seek(index133_1162);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA133_1213 = input.LA(1);

                         
                        int index133_1213 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_1213==RPAREN) ) {s = 14;}

                        else if ( (LA133_1213==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA133_1213==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA133_1213==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1771;}

                        else if ( (LA133_1213==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA133_1213==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1773;}

                        else if ( (LA133_1213==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA133_1213==LT) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA133_1213==GT) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA133_1213==LE) && (synpred3_EsperEPL2Grammar())) {s = 1777;}

                        else if ( (LA133_1213==GE) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                        else if ( (LA133_1213==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA133_1213==IS) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA133_1213==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA133_1213==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1782;}

                        else if ( (LA133_1213==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1783;}

                        else if ( (LA133_1213==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1784;}

                        else if ( (LA133_1213==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA133_1213==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA133_1213==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                        else if ( (LA133_1213==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA133_1213==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA133_1213==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA133_1213==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA133_1213==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA133_1213==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                         
                        input.seek(index133_1213);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA133_1214 = input.LA(1);

                         
                        int index133_1214 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_1214==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA133_1214==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA133_1214==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA133_1214==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1797;}

                        else if ( (LA133_1214==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1798;}

                        else if ( (LA133_1214==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA133_1214==LT) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA133_1214==GT) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA133_1214==LE) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                        else if ( (LA133_1214==GE) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                        else if ( (LA133_1214==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA133_1214==IS) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA133_1214==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA133_1214==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                        else if ( (LA133_1214==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA133_1214==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA133_1214==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA133_1214==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA133_1214==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                        else if ( (LA133_1214==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1813;}

                        else if ( (LA133_1214==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA133_1214==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA133_1214==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA133_1214==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA133_1214==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA133_1214==RPAREN) ) {s = 14;}

                         
                        input.seek(index133_1214);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA133_1269 = input.LA(1);

                         
                        int index133_1269 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_1269==RPAREN) ) {s = 14;}

                        else if ( (LA133_1269==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA133_1269==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA133_1269==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1823;}

                        else if ( (LA133_1269==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                        else if ( (LA133_1269==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA133_1269==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA133_1269==LT) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                        else if ( (LA133_1269==GT) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                        else if ( (LA133_1269==LE) && (synpred3_EsperEPL2Grammar())) {s = 1829;}

                        else if ( (LA133_1269==GE) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA133_1269==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA133_1269==IS) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA133_1269==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA133_1269==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA133_1269==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA133_1269==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA133_1269==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                        else if ( (LA133_1269==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1838;}

                        else if ( (LA133_1269==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA133_1269==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA133_1269==AS) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA133_1269==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA133_1269==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA133_1269==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA133_1269==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA133_1269==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                         
                        input.seek(index133_1269);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA133_1270 = input.LA(1);

                         
                        int index133_1270 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_1270==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1847;}

                        else if ( (LA133_1270==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1848;}

                        else if ( (LA133_1270==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1849;}

                        else if ( (LA133_1270==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA133_1270==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1851;}

                        else if ( (LA133_1270==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1852;}

                        else if ( (LA133_1270==LT) && (synpred3_EsperEPL2Grammar())) {s = 1853;}

                        else if ( (LA133_1270==GT) && (synpred3_EsperEPL2Grammar())) {s = 1854;}

                        else if ( (LA133_1270==LE) && (synpred3_EsperEPL2Grammar())) {s = 1855;}

                        else if ( (LA133_1270==GE) && (synpred3_EsperEPL2Grammar())) {s = 1856;}

                        else if ( (LA133_1270==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1857;}

                        else if ( (LA133_1270==IS) && (synpred3_EsperEPL2Grammar())) {s = 1858;}

                        else if ( (LA133_1270==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1859;}

                        else if ( (LA133_1270==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1860;}

                        else if ( (LA133_1270==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1861;}

                        else if ( (LA133_1270==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1862;}

                        else if ( (LA133_1270==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1863;}

                        else if ( (LA133_1270==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1864;}

                        else if ( (LA133_1270==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1865;}

                        else if ( (LA133_1270==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1866;}

                        else if ( (LA133_1270==AS) && (synpred3_EsperEPL2Grammar())) {s = 1867;}

                        else if ( (LA133_1270==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1868;}

                        else if ( (LA133_1270==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1869;}

                        else if ( (LA133_1270==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1870;}

                        else if ( (LA133_1270==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1871;}

                        else if ( (LA133_1270==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1872;}

                        else if ( (LA133_1270==RPAREN) ) {s = 14;}

                         
                        input.seek(index133_1270);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA133_1364 = input.LA(1);

                         
                        int index133_1364 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1872;}

                         
                        input.seek(index133_1364);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA133_1408 = input.LA(1);

                         
                        int index133_1408 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1872;}

                         
                        input.seek(index133_1408);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA133_1414 = input.LA(1);

                         
                        int index133_1414 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1872;}

                         
                        input.seek(index133_1414);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA133_1439 = input.LA(1);

                         
                        int index133_1439 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1872;}

                         
                        input.seek(index133_1439);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA133_1464 = input.LA(1);

                         
                        int index133_1464 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1872;}

                         
                        input.seek(index133_1464);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA133_1489 = input.LA(1);

                         
                        int index133_1489 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1872;}

                         
                        input.seek(index133_1489);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA133_1585 = input.LA(1);

                         
                        int index133_1585 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1872;}

                         
                        input.seek(index133_1585);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA133_1610 = input.LA(1);

                         
                        int index133_1610 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1872;}

                         
                        input.seek(index133_1610);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA133_1616 = input.LA(1);

                         
                        int index133_1616 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1872;}

                         
                        input.seek(index133_1616);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA133_1660 = input.LA(1);

                         
                        int index133_1660 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1872;}

                         
                        input.seek(index133_1660);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA133_1666 = input.LA(1);

                         
                        int index133_1666 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1872;}

                         
                        input.seek(index133_1666);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA133_1710 = input.LA(1);

                         
                        int index133_1710 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1872;}

                         
                        input.seek(index133_1710);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA156_eotS =
        "\u0448\uffff";
    static final String DFA156_eofS =
        "\1\uffff\1\104\1\172\6\uffff\1\u00b0\1\u00e6\u00f4\uffff\1\u0218"+
        "\1\u024e\1\u0284\1\u02bb\135\uffff\1\u0324\1\u035a\1\u0390\1\u03c7"+
        "\u02e4\uffff";
    static final String DFA156_minS =
        "\1\5\2\6\6\uffff\2\6\34\uffff\1\5\2\uffff\1\5\62\uffff\1\5\67\uffff"+
        "\1\5\65\uffff\1\5\63\uffff\4\6\42\uffff\2\6\71\uffff\4\6\42\uffff"+
        "\2\6\71\uffff\2\6\73\uffff\1\0\62\uffff\1\0\2\uffff\1\0\63\uffff"+
        "\1\0\65\uffff\1\0\65\uffff\1\0\55\uffff\1\0\7\uffff\1\0\62\uffff"+
        "\1\0\2\uffff\1\0\63\uffff\1\0\65\uffff\1\0\65\uffff\1\0\55\uffff"+
        "\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff";
    static final String DFA156_maxS =
        "\1\u0105\2\u0104\6\uffff\2\u0104\34\uffff\1\u0105\2\uffff\1\u0107"+
        "\62\uffff\1\u0105\67\uffff\1\u0107\65\uffff\1\u0107\63\uffff\4\u0104"+
        "\42\uffff\2\u00fe\71\uffff\4\u0104\42\uffff\2\u00fe\71\uffff\2\u00fe"+
        "\73\uffff\1\0\62\uffff\1\0\2\uffff\1\0\63\uffff\1\0\65\uffff\1\0"+
        "\65\uffff\1\0\55\uffff\1\0\7\uffff\1\0\62\uffff\1\0\2\uffff\1\0"+
        "\63\uffff\1\0\65\uffff\1\0\65\uffff\1\0\55\uffff\1\0\5\uffff\1\0"+
        "\55\uffff\1\0\5\uffff";
    static final String DFA156_acceptS =
        "\3\uffff\6\1\2\uffff\34\1\1\uffff\2\1\1\uffff\62\1\1\uffff\67\1"+
        "\1\uffff\65\1\1\uffff\63\1\4\uffff\42\1\2\uffff\1\2\74\uffff\42"+
        "\1\166\uffff\2\1\1\uffff\62\1\1\uffff\2\1\1\uffff\63\1\1\uffff\65"+
        "\1\1\uffff\65\1\64\uffff\2\1\1\uffff\62\1\1\uffff\2\1\1\uffff\63"+
        "\1\1\uffff\65\1\1\uffff\65\1\150\uffff";
    static final String DFA156_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\34\uffff\1\5\65\uffff\1\6\u00a1\uffff"+
        "\1\7\1\10\1\11\1\12\135\uffff\1\13\1\14\1\15\1\16\u009a\uffff\1"+
        "\17\62\uffff\1\20\2\uffff\1\21\63\uffff\1\22\65\uffff\1\23\65\uffff"+
        "\1\24\55\uffff\1\25\7\uffff\1\26\62\uffff\1\27\2\uffff\1\30\63\uffff"+
        "\1\31\65\uffff\1\32\65\uffff\1\33\55\uffff\1\34\5\uffff\1\35\55"+
        "\uffff\1\36\5\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\41\4\uffff\1\5\3\uffff\1\6\3\uffff\1\7\1\10\1\11\1\12\1"+
            "\13\1\14\1\15\1\16\1\4\10\uffff\1\44\1\uffff\1\46\1\42\1\43"+
            "\1\45\12\uffff\1\17\1\20\1\21\10\uffff\1\22\1\23\1\24\1\26\1"+
            "\27\1\30\1\31\1\32\1\uffff\1\33\1\34\1\35\1\36\2\uffff\1\37"+
            "\1\uffff\1\40\1\25\1\3\u0094\uffff\1\1\36\uffff\1\2",
            "\1\130\1\131\1\132\1\133\1\134\1\76\1\75\1\127\2\uffff\1\110"+
            "\1\111\14\uffff\1\116\1\120\1\115\1\117\1\112\7\uffff\1\67\1"+
            "\uffff\1\77\1\100\4\uffff\1\101\3\uffff\1\105\1\uffff\1\102"+
            "\1\113\1\114\35\uffff\1\126\1\125\1\124\6\uffff\1\103\u0083"+
            "\uffff\1\107\1\uffff\1\66\1\47\1\52\1\106\1\54\1\51\1\122\1"+
            "\121\2\uffff\1\72\1\73\1\74\1\70\1\71\1\62\1\63\1\64\1\65\1"+
            "\61\1\57\1\60\1\55\1\56\1\uffff\1\123\2\uffff\1\53\1\50",
            "\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\164\1\163\1\u008d"+
            "\2\uffff\1\176\1\177\14\uffff\1\u0084\1\u0086\1\u0083\1\u0085"+
            "\1\u0080\7\uffff\1\155\1\uffff\1\165\1\166\4\uffff\1\167\3\uffff"+
            "\1\173\1\uffff\1\170\1\u0081\1\u0082\35\uffff\1\u008c\1\u008b"+
            "\1\u008a\6\uffff\1\171\u0083\uffff\1\175\1\uffff\1\154\1\135"+
            "\1\140\1\174\1\142\1\137\1\u0088\1\u0087\2\uffff\1\160\1\161"+
            "\1\162\1\156\1\157\1\150\1\151\1\152\1\153\1\147\1\145\1\146"+
            "\1\143\1\144\1\uffff\1\u0089\2\uffff\1\141\1\136",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00aa\1\u00a9\1"+
            "\u00c3\2\uffff\1\u00b4\1\u00b5\14\uffff\1\u00ba\1\u00bc\1\u00b9"+
            "\1\u00bb\1\u00b6\7\uffff\1\u00a3\1\uffff\1\u00ab\1\u00ac\4\uffff"+
            "\1\u00ad\3\uffff\1\u00b1\1\uffff\1\u00ae\1\u00b7\1\u00b8\35"+
            "\uffff\1\u00c2\1\u00c1\1\u00c0\6\uffff\1\u00af\u0083\uffff\1"+
            "\u00b3\1\uffff\1\u00a2\1\u0097\1\u0095\1\u00b2\1\u0098\1\u0094"+
            "\1\u00be\1\u00bd\2\uffff\1\u00a6\1\u00a7\1\u00a8\1\u00a4\1\u00a5"+
            "\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u009d\1\u009b\1\u009c\1\u0099"+
            "\1\u009a\1\uffff\1\u00bf\2\uffff\1\u0096\1\u0093",
            "\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00e0\1\u00df\1"+
            "\u00f9\2\uffff\1\u00ea\1\u00eb\14\uffff\1\u00f0\1\u00f2\1\u00ef"+
            "\1\u00f1\1\u00ec\7\uffff\1\u00d9\1\uffff\1\u00e1\1\u00e2\4\uffff"+
            "\1\u00e3\3\uffff\1\u00e7\1\uffff\1\u00e4\1\u00ed\1\u00ee\35"+
            "\uffff\1\u00f8\1\u00f7\1\u00f6\6\uffff\1\u00e5\u0083\uffff\1"+
            "\u00e9\1\uffff\1\u00d8\1\u00cd\1\u00cb\1\u00e8\1\u00ce\1\u00ca"+
            "\1\u00f4\1\u00f3\2\uffff\1\u00dc\1\u00dd\1\u00de\1\u00da\1\u00db"+
            "\1\u00d4\1\u00d5\1\u00d6\1\u00d7\1\u00d3\1\u00d1\1\u00d2\1\u00cf"+
            "\1\u00d0\1\uffff\1\u00f5\2\uffff\1\u00cc\1\u00c9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u011f\4\uffff\1\u0105\3\uffff\1\u0106\3\uffff\1\u0107\1"+
            "\u0108\1\u0100\1\u0101\1\u0109\1\u010a\1\u010b\1\u010c\1\u0104"+
            "\10\uffff\1\u0122\1\uffff\1\u0124\1\u0120\1\u0121\1\u0123\12"+
            "\uffff\1\u010d\1\u010e\1\u010f\10\uffff\1\u0110\1\u0111\1\u0112"+
            "\1\u0114\1\u0115\1\u0116\1\u0117\1\u0118\1\uffff\1\u0119\1\u011a"+
            "\1\u011b\1\u011c\2\uffff\1\u011d\1\uffff\1\u011e\1\u0113\1\u0103"+
            "\u0094\uffff\1\u00ff\36\uffff\1\u0102",
            "",
            "",
            "\1\u0127\4\uffff\1\u0127\2\uffff\2\u0127\3\uffff\11\u0127"+
            "\1\uffff\1\u0127\6\uffff\1\u0127\1\uffff\4\u0127\5\uffff\2\u0127"+
            "\3\uffff\3\u0127\10\uffff\16\u0127\1\uffff\1\u0127\1\uffff\3"+
            "\u0127\14\uffff\3\u0127\u0082\uffff\1\u0127\2\uffff\1\u0127"+
            "\2\uffff\2\u0127\4\uffff\1\u0125\1\u0126\12\uffff\2\u0127\2"+
            "\uffff\1\u0127\1\uffff\1\u0127\1\uffff\1\u0127\1\uffff\3\u0127",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0180\4\uffff\1\u0166\3\uffff\1\u0167\3\uffff\1\u0168\1"+
            "\u0169\1\u0161\1\u0162\1\u016a\1\u016b\1\u016c\1\u016d\1\u0165"+
            "\10\uffff\1\u0183\1\uffff\1\u0185\1\u0181\1\u0182\1\u0184\12"+
            "\uffff\1\u016e\1\u016f\1\u0170\10\uffff\1\u0171\1\u0172\1\u0173"+
            "\1\u0175\1\u0176\1\u0177\1\u0178\1\u0179\1\uffff\1\u017a\1\u017b"+
            "\1\u017c\1\u017d\2\uffff\1\u017e\1\uffff\1\u017f\1\u0174\1\u0164"+
            "\u0094\uffff\1\u0160\36\uffff\1\u0163",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0127\4\uffff\1\u0127\2\uffff\2\u0127\3\uffff\11\u0127"+
            "\1\uffff\1\u0127\6\uffff\1\u0127\1\uffff\4\u0127\5\uffff\2\u0127"+
            "\3\uffff\3\u0127\10\uffff\16\u0127\1\uffff\1\u0127\1\uffff\3"+
            "\u0127\14\uffff\3\u0127\u0082\uffff\1\u0127\2\uffff\1\u0127"+
            "\2\uffff\2\u0127\4\uffff\1\u0186\1\u0187\12\uffff\2\u0127\2"+
            "\uffff\1\u0127\1\uffff\1\u0127\1\uffff\1\u0127\1\uffff\3\u0127",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0127\4\uffff\1\u0127\2\uffff\2\u0127\3\uffff\11\u0127"+
            "\1\uffff\1\u0127\6\uffff\1\u0127\1\uffff\4\u0127\5\uffff\2\u0127"+
            "\3\uffff\3\u0127\10\uffff\16\u0127\1\uffff\1\u0127\1\uffff\3"+
            "\u0127\14\uffff\3\u0127\u0082\uffff\1\u0127\2\uffff\1\u0127"+
            "\2\uffff\2\u0127\4\uffff\1\u01c1\1\u01c2\12\uffff\2\u0127\2"+
            "\uffff\1\u0127\1\uffff\1\u0127\1\uffff\1\u0127\1\uffff\3\u0127",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u022c\1\u022d\1\u022e\1\u022f\1\u0230\1\u0212\1\u0211\1"+
            "\u022b\2\uffff\1\u021c\1\u021d\14\uffff\1\u0222\1\u0224\1\u0221"+
            "\1\u0223\1\u021e\7\uffff\1\u020b\1\uffff\1\u0213\1\u0214\4\uffff"+
            "\1\u0215\3\uffff\1\u0219\1\uffff\1\u0216\1\u021f\1\u0220\35"+
            "\uffff\1\u022a\1\u0229\1\u0228\6\uffff\1\u0217\u0083\uffff\1"+
            "\u021b\1\uffff\1\u020a\1\u0231\1\u01fe\1\u021a\1\u0200\1\u01fd"+
            "\1\u0226\1\u0225\2\uffff\1\u020e\1\u020f\1\u0210\1\u020c\1\u020d"+
            "\1\u0206\1\u0207\1\u0208\1\u0209\1\u0205\1\u0203\1\u0204\1\u0201"+
            "\1\u0202\1\uffff\1\u0227\2\uffff\1\u01ff\1\u01fc",
            "\1\u0262\1\u0263\1\u0264\1\u0265\1\u0266\1\u0248\1\u0247\1"+
            "\u0261\2\uffff\1\u0252\1\u0253\14\uffff\1\u0258\1\u025a\1\u0257"+
            "\1\u0259\1\u0254\7\uffff\1\u0241\1\uffff\1\u0249\1\u024a\4\uffff"+
            "\1\u024b\3\uffff\1\u024f\1\uffff\1\u024c\1\u0255\1\u0256\35"+
            "\uffff\1\u0260\1\u025f\1\u025e\6\uffff\1\u024d\u0083\uffff\1"+
            "\u0251\1\uffff\1\u0240\1\u0267\1\u0234\1\u0250\1\u0236\1\u0233"+
            "\1\u025c\1\u025b\2\uffff\1\u0244\1\u0245\1\u0246\1\u0242\1\u0243"+
            "\1\u023c\1\u023d\1\u023e\1\u023f\1\u023b\1\u0239\1\u023a\1\u0237"+
            "\1\u0238\1\uffff\1\u025d\2\uffff\1\u0235\1\u0232",
            "\1\u0298\1\u0299\1\u029a\1\u029b\1\u029c\1\u027e\1\u027d\1"+
            "\u0297\2\uffff\1\u0288\1\u0289\14\uffff\1\u028e\1\u0290\1\u028d"+
            "\1\u028f\1\u028a\7\uffff\1\u0277\1\uffff\1\u027f\1\u0280\4\uffff"+
            "\1\u0281\3\uffff\1\u0285\1\uffff\1\u0282\1\u028b\1\u028c\35"+
            "\uffff\1\u0296\1\u0295\1\u0294\6\uffff\1\u0283\u0083\uffff\1"+
            "\u0287\1\uffff\1\u0276\1\u029d\1\u0268\1\u0286\1\u026c\1\u026a"+
            "\1\u0292\1\u0291\2\uffff\1\u027a\1\u027b\1\u027c\1\u0278\1\u0279"+
            "\1\u0272\1\u0273\1\u0274\1\u0275\1\u0271\1\u026f\1\u0270\1\u026d"+
            "\1\u026e\1\uffff\1\u0293\2\uffff\1\u026b\1\u0269",
            "\1\u02cf\1\u02d0\1\u02d1\1\u02d2\1\u02d3\1\u02b5\1\u02b4\1"+
            "\u02ce\2\uffff\1\u02bf\1\u02c0\14\uffff\1\u02c5\1\u02c7\1\u02c4"+
            "\1\u02c6\1\u02c1\7\uffff\1\u02ae\1\uffff\1\u02b6\1\u02b7\4\uffff"+
            "\1\u02b8\3\uffff\1\u02bc\1\uffff\1\u02b9\1\u02c2\1\u02c3\35"+
            "\uffff\1\u02cd\1\u02cc\1\u02cb\6\uffff\1\u02ba\u0083\uffff\1"+
            "\u02be\1\uffff\1\u02ad\1\u029e\1\u02a1\1\u02bd\1\u02a3\1\u02a0"+
            "\1\u02c9\1\u02c8\2\uffff\1\u02b1\1\u02b2\1\u02b3\1\u02af\1\u02b0"+
            "\1\u02a9\1\u02aa\1\u02ab\1\u02ac\1\u02a8\1\u02a6\1\u02a7\1\u02a4"+
            "\1\u02a5\1\uffff\1\u02ca\2\uffff\1\u02a2\1\u029f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0127\1\uffff\3\u0127\34\uffff\1\u0127\u00ba\uffff\1\u0127"+
            "\1\uffff\1\u0127\2\uffff\1\u02d4\1\u0127\5\uffff\16\u0127",
            "\4\u0127\1\uffff\3\u0127\34\uffff\1\u0127\u00ba\uffff\1\u0127"+
            "\1\uffff\1\u0127\2\uffff\1\u0302\1\u0127\5\uffff\16\u0127",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0338\1\u0339\1\u033a\1\u033b\1\u033c\1\u031e\1\u031d\1"+
            "\u0337\2\uffff\1\u0328\1\u0329\14\uffff\1\u032e\1\u0330\1\u032d"+
            "\1\u032f\1\u032a\7\uffff\1\u0317\1\uffff\1\u031f\1\u0320\4\uffff"+
            "\1\u0321\3\uffff\1\u0325\1\uffff\1\u0322\1\u032b\1\u032c\35"+
            "\uffff\1\u0336\1\u0335\1\u0334\6\uffff\1\u0323\u0083\uffff\1"+
            "\u0327\1\uffff\1\u0316\1\u033d\1\u030a\1\u0326\1\u030c\1\u0309"+
            "\1\u0332\1\u0331\2\uffff\1\u031a\1\u031b\1\u031c\1\u0318\1\u0319"+
            "\1\u0312\1\u0313\1\u0314\1\u0315\1\u0311\1\u030f\1\u0310\1\u030d"+
            "\1\u030e\1\uffff\1\u0333\2\uffff\1\u030b\1\u0308",
            "\1\u036e\1\u036f\1\u0370\1\u0371\1\u0372\1\u0354\1\u0353\1"+
            "\u036d\2\uffff\1\u035e\1\u035f\14\uffff\1\u0364\1\u0366\1\u0363"+
            "\1\u0365\1\u0360\7\uffff\1\u034d\1\uffff\1\u0355\1\u0356\4\uffff"+
            "\1\u0357\3\uffff\1\u035b\1\uffff\1\u0358\1\u0361\1\u0362\35"+
            "\uffff\1\u036c\1\u036b\1\u036a\6\uffff\1\u0359\u0083\uffff\1"+
            "\u035d\1\uffff\1\u034c\1\u0373\1\u0340\1\u035c\1\u0342\1\u033f"+
            "\1\u0368\1\u0367\2\uffff\1\u0350\1\u0351\1\u0352\1\u034e\1\u034f"+
            "\1\u0348\1\u0349\1\u034a\1\u034b\1\u0347\1\u0345\1\u0346\1\u0343"+
            "\1\u0344\1\uffff\1\u0369\2\uffff\1\u0341\1\u033e",
            "\1\u03a4\1\u03a5\1\u03a6\1\u03a7\1\u03a8\1\u038a\1\u0389\1"+
            "\u03a3\2\uffff\1\u0394\1\u0395\14\uffff\1\u039a\1\u039c\1\u0399"+
            "\1\u039b\1\u0396\7\uffff\1\u0383\1\uffff\1\u038b\1\u038c\4\uffff"+
            "\1\u038d\3\uffff\1\u0391\1\uffff\1\u038e\1\u0397\1\u0398\35"+
            "\uffff\1\u03a2\1\u03a1\1\u03a0\6\uffff\1\u038f\u0083\uffff\1"+
            "\u0393\1\uffff\1\u0382\1\u03a9\1\u0374\1\u0392\1\u0378\1\u0376"+
            "\1\u039e\1\u039d\2\uffff\1\u0386\1\u0387\1\u0388\1\u0384\1\u0385"+
            "\1\u037e\1\u037f\1\u0380\1\u0381\1\u037d\1\u037b\1\u037c\1\u0379"+
            "\1\u037a\1\uffff\1\u039f\2\uffff\1\u0377\1\u0375",
            "\1\u03db\1\u03dc\1\u03dd\1\u03de\1\u03df\1\u03c1\1\u03c0\1"+
            "\u03da\2\uffff\1\u03cb\1\u03cc\14\uffff\1\u03d1\1\u03d3\1\u03d0"+
            "\1\u03d2\1\u03cd\7\uffff\1\u03ba\1\uffff\1\u03c2\1\u03c3\4\uffff"+
            "\1\u03c4\3\uffff\1\u03c8\1\uffff\1\u03c5\1\u03ce\1\u03cf\35"+
            "\uffff\1\u03d9\1\u03d8\1\u03d7\6\uffff\1\u03c6\u0083\uffff\1"+
            "\u03ca\1\uffff\1\u03b9\1\u03aa\1\u03ad\1\u03c9\1\u03af\1\u03ac"+
            "\1\u03d5\1\u03d4\2\uffff\1\u03bd\1\u03be\1\u03bf\1\u03bb\1\u03bc"+
            "\1\u03b5\1\u03b6\1\u03b7\1\u03b8\1\u03b4\1\u03b2\1\u03b3\1\u03b0"+
            "\1\u03b1\1\uffff\1\u03d6\2\uffff\1\u03ae\1\u03ab",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0127\1\uffff\3\u0127\34\uffff\1\u0127\u00ba\uffff\1\u0127"+
            "\1\uffff\1\u0127\2\uffff\1\u03e0\1\u0127\5\uffff\16\u0127",
            "\4\u0127\1\uffff\3\u0127\34\uffff\1\u0127\u00ba\uffff\1\u0127"+
            "\1\uffff\1\u0127\2\uffff\1\u040e\1\u0127\5\uffff\16\u0127",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0127\1\uffff\3\u0127\34\uffff\1\u0127\u00ba\uffff\1\u0127"+
            "\1\uffff\1\u0127\2\uffff\1\u0414\1\u0127\5\uffff\16\u0127",
            "\4\u0127\1\uffff\3\u0127\34\uffff\1\u0127\u00ba\uffff\1\u0127"+
            "\1\uffff\1\u0127\2\uffff\1\u0442\1\u0127\5\uffff\16\u0127",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "1071:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_0 = input.LA(1);

                         
                        int index156_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_0==IDENT) ) {s = 1;}

                        else if ( (LA156_0==TICKED_STRING_LITERAL) ) {s = 2;}

                        else if ( (LA156_0==AT) && (synpred4_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA156_0==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA156_0==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA156_0==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA156_0==SUM) && (synpred4_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA156_0==AVG) && (synpred4_EsperEPL2Grammar())) {s = 8;}

                        else if ( (LA156_0==MAX) ) {s = 9;}

                        else if ( (LA156_0==MIN) ) {s = 10;}

                        else if ( (LA156_0==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA156_0==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA156_0==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA156_0==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA156_0==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA156_0==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA156_0==LAST) && (synpred4_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA156_0==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA156_0==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA156_0==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA156_0==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA156_0==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA156_0==SQL) && (synpred4_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA156_0==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA156_0==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA156_0==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA156_0==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA156_0==LW) && (synpred4_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA156_0==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA156_0==CAST) && (synpred4_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA156_0==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA156_0==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA156_0==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA156_0==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA156_0==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA156_0==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA156_0==FULL) && (synpred4_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA156_0==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 38;}

                         
                        input.seek(index156_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA156_1 = input.LA(1);

                         
                        int index156_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1==DOT) ) {s = 39;}

                        else if ( (LA156_1==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA156_1==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA156_1==LPAREN) ) {s = 42;}

                        else if ( (LA156_1==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA156_1==STAR) && (synpred4_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA156_1==DIV) && (synpred4_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA156_1==MOD) && (synpred4_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA156_1==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA156_1==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA156_1==LOR) && (synpred4_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA156_1==LT) && (synpred4_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA156_1==GT) && (synpred4_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA156_1==LE) && (synpred4_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA156_1==GE) && (synpred4_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA156_1==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA156_1==IS) && (synpred4_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA156_1==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA156_1==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA156_1==BAND) && (synpred4_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA156_1==BOR) && (synpred4_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA156_1==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA156_1==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA156_1==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA156_1==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA156_1==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA156_1==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA156_1==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA156_1==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA156_1==EOF) && (synpred4_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA156_1==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA156_1==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA156_1==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA156_1==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA156_1==AS) && (synpred4_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA156_1==FROM) && (synpred4_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA156_1==ASC) && (synpred4_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA156_1==DESC) && (synpred4_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA156_1==THEN) && (synpred4_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA156_1==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA156_1==END) && (synpred4_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA156_1==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA156_1==COLON) && (synpred4_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA156_1==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA156_1==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA156_1==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA156_1==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA156_1==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA156_1==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA156_1==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA156_1==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA156_1==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA156_1==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 91;}

                        else if ( (LA156_1==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 92;}

                         
                        input.seek(index156_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA156_2 = input.LA(1);

                         
                        int index156_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_2==DOT) ) {s = 93;}

                        else if ( (LA156_2==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA156_2==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA156_2==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA156_2==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA156_2==STAR) && (synpred4_EsperEPL2Grammar())) {s = 98;}

                        else if ( (LA156_2==DIV) && (synpred4_EsperEPL2Grammar())) {s = 99;}

                        else if ( (LA156_2==MOD) && (synpred4_EsperEPL2Grammar())) {s = 100;}

                        else if ( (LA156_2==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA156_2==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 102;}

                        else if ( (LA156_2==LOR) && (synpred4_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA156_2==LT) && (synpred4_EsperEPL2Grammar())) {s = 104;}

                        else if ( (LA156_2==GT) && (synpred4_EsperEPL2Grammar())) {s = 105;}

                        else if ( (LA156_2==LE) && (synpred4_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA156_2==GE) && (synpred4_EsperEPL2Grammar())) {s = 107;}

                        else if ( (LA156_2==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA156_2==IS) && (synpred4_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA156_2==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA156_2==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA156_2==BAND) && (synpred4_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA156_2==BOR) && (synpred4_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA156_2==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA156_2==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA156_2==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA156_2==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA156_2==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA156_2==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA156_2==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA156_2==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA156_2==EOF) && (synpred4_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA156_2==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA156_2==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA156_2==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA156_2==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA156_2==AS) && (synpred4_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA156_2==FROM) && (synpred4_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA156_2==ASC) && (synpred4_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA156_2==DESC) && (synpred4_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA156_2==THEN) && (synpred4_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA156_2==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA156_2==END) && (synpred4_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA156_2==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA156_2==COLON) && (synpred4_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA156_2==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA156_2==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA156_2==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA156_2==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA156_2==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA156_2==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA156_2==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA156_2==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA156_2==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA156_2==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA156_2==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 146;}

                         
                        input.seek(index156_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA156_9 = input.LA(1);

                         
                        int index156_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_9==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA156_9==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA156_9==LPAREN) ) {s = 149;}

                        else if ( (LA156_9==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA156_9==DOT) && (synpred4_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA156_9==STAR) && (synpred4_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA156_9==DIV) && (synpred4_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA156_9==MOD) && (synpred4_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA156_9==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA156_9==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA156_9==LOR) && (synpred4_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA156_9==LT) && (synpred4_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA156_9==GT) && (synpred4_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA156_9==LE) && (synpred4_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA156_9==GE) && (synpred4_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA156_9==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA156_9==IS) && (synpred4_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA156_9==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA156_9==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA156_9==BAND) && (synpred4_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA156_9==BOR) && (synpred4_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA156_9==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA156_9==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA156_9==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA156_9==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA156_9==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA156_9==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA156_9==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA156_9==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA156_9==EOF) && (synpred4_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA156_9==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA156_9==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA156_9==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA156_9==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA156_9==AS) && (synpred4_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA156_9==FROM) && (synpred4_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA156_9==ASC) && (synpred4_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA156_9==DESC) && (synpred4_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA156_9==THEN) && (synpred4_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA156_9==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA156_9==END) && (synpred4_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA156_9==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA156_9==COLON) && (synpred4_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA156_9==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA156_9==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA156_9==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA156_9==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA156_9==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA156_9==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA156_9==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA156_9==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA156_9==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA156_9==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA156_9==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 200;}

                         
                        input.seek(index156_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA156_10 = input.LA(1);

                         
                        int index156_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_10==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA156_10==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA156_10==LPAREN) ) {s = 203;}

                        else if ( (LA156_10==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA156_10==DOT) && (synpred4_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA156_10==STAR) && (synpred4_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA156_10==DIV) && (synpred4_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA156_10==MOD) && (synpred4_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA156_10==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA156_10==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA156_10==LOR) && (synpred4_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA156_10==LT) && (synpred4_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA156_10==GT) && (synpred4_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA156_10==LE) && (synpred4_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA156_10==GE) && (synpred4_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA156_10==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA156_10==IS) && (synpred4_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA156_10==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA156_10==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA156_10==BAND) && (synpred4_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA156_10==BOR) && (synpred4_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA156_10==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA156_10==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA156_10==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA156_10==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA156_10==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA156_10==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA156_10==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA156_10==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA156_10==EOF) && (synpred4_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA156_10==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA156_10==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA156_10==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA156_10==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA156_10==AS) && (synpred4_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA156_10==FROM) && (synpred4_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA156_10==ASC) && (synpred4_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA156_10==DESC) && (synpred4_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA156_10==THEN) && (synpred4_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA156_10==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA156_10==END) && (synpred4_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA156_10==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA156_10==COLON) && (synpred4_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA156_10==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA156_10==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA156_10==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA156_10==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA156_10==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA156_10==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA156_10==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA156_10==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA156_10==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA156_10==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA156_10==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 254;}

                         
                        input.seek(index156_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA156_39 = input.LA(1);

                         
                        int index156_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_39==IDENT) ) {s = 255;}

                        else if ( (LA156_39==MAX) ) {s = 256;}

                        else if ( (LA156_39==MIN) ) {s = 257;}

                        else if ( (LA156_39==TICKED_STRING_LITERAL) ) {s = 258;}

                        else if ( (LA156_39==AT) && (synpred4_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA156_39==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA156_39==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA156_39==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA156_39==SUM) && (synpred4_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA156_39==AVG) && (synpred4_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA156_39==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA156_39==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA156_39==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA156_39==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA156_39==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA156_39==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA156_39==LAST) && (synpred4_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA156_39==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA156_39==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA156_39==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA156_39==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA156_39==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA156_39==SQL) && (synpred4_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA156_39==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA156_39==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA156_39==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA156_39==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA156_39==LW) && (synpred4_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA156_39==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA156_39==CAST) && (synpred4_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA156_39==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA156_39==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA156_39==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA156_39==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 288;}

                        else if ( (LA156_39==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 289;}

                        else if ( (LA156_39==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 290;}

                        else if ( (LA156_39==FULL) && (synpred4_EsperEPL2Grammar())) {s = 291;}

                        else if ( (LA156_39==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 292;}

                         
                        input.seek(index156_39);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA156_93 = input.LA(1);

                         
                        int index156_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_93==IDENT) ) {s = 352;}

                        else if ( (LA156_93==MAX) ) {s = 353;}

                        else if ( (LA156_93==MIN) ) {s = 354;}

                        else if ( (LA156_93==TICKED_STRING_LITERAL) ) {s = 355;}

                        else if ( (LA156_93==AT) && (synpred4_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA156_93==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA156_93==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA156_93==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA156_93==SUM) && (synpred4_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA156_93==AVG) && (synpred4_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA156_93==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA156_93==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA156_93==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA156_93==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA156_93==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA156_93==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA156_93==LAST) && (synpred4_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA156_93==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA156_93==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA156_93==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA156_93==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA156_93==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA156_93==SQL) && (synpred4_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA156_93==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA156_93==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA156_93==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA156_93==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA156_93==LW) && (synpred4_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA156_93==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA156_93==CAST) && (synpred4_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA156_93==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA156_93==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA156_93==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA156_93==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA156_93==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA156_93==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA156_93==FULL) && (synpred4_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA156_93==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 389;}

                         
                        input.seek(index156_93);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA156_255 = input.LA(1);

                         
                        int index156_255 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_255==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 508;}

                        else if ( (LA156_255==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 509;}

                        else if ( (LA156_255==LPAREN) ) {s = 510;}

                        else if ( (LA156_255==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 511;}

                        else if ( (LA156_255==STAR) && (synpred4_EsperEPL2Grammar())) {s = 512;}

                        else if ( (LA156_255==DIV) && (synpred4_EsperEPL2Grammar())) {s = 513;}

                        else if ( (LA156_255==MOD) && (synpred4_EsperEPL2Grammar())) {s = 514;}

                        else if ( (LA156_255==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 515;}

                        else if ( (LA156_255==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 516;}

                        else if ( (LA156_255==LOR) && (synpred4_EsperEPL2Grammar())) {s = 517;}

                        else if ( (LA156_255==LT) && (synpred4_EsperEPL2Grammar())) {s = 518;}

                        else if ( (LA156_255==GT) && (synpred4_EsperEPL2Grammar())) {s = 519;}

                        else if ( (LA156_255==LE) && (synpred4_EsperEPL2Grammar())) {s = 520;}

                        else if ( (LA156_255==GE) && (synpred4_EsperEPL2Grammar())) {s = 521;}

                        else if ( (LA156_255==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 522;}

                        else if ( (LA156_255==IS) && (synpred4_EsperEPL2Grammar())) {s = 523;}

                        else if ( (LA156_255==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 524;}

                        else if ( (LA156_255==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 525;}

                        else if ( (LA156_255==BAND) && (synpred4_EsperEPL2Grammar())) {s = 526;}

                        else if ( (LA156_255==BOR) && (synpred4_EsperEPL2Grammar())) {s = 527;}

                        else if ( (LA156_255==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 528;}

                        else if ( (LA156_255==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 529;}

                        else if ( (LA156_255==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 530;}

                        else if ( (LA156_255==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 531;}

                        else if ( (LA156_255==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 532;}

                        else if ( (LA156_255==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 533;}

                        else if ( (LA156_255==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 534;}

                        else if ( (LA156_255==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 535;}

                        else if ( (LA156_255==EOF) && (synpred4_EsperEPL2Grammar())) {s = 536;}

                        else if ( (LA156_255==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 537;}

                        else if ( (LA156_255==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 538;}

                        else if ( (LA156_255==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 539;}

                        else if ( (LA156_255==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 540;}

                        else if ( (LA156_255==AS) && (synpred4_EsperEPL2Grammar())) {s = 541;}

                        else if ( (LA156_255==FROM) && (synpred4_EsperEPL2Grammar())) {s = 542;}

                        else if ( (LA156_255==ASC) && (synpred4_EsperEPL2Grammar())) {s = 543;}

                        else if ( (LA156_255==DESC) && (synpred4_EsperEPL2Grammar())) {s = 544;}

                        else if ( (LA156_255==THEN) && (synpred4_EsperEPL2Grammar())) {s = 545;}

                        else if ( (LA156_255==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 546;}

                        else if ( (LA156_255==END) && (synpred4_EsperEPL2Grammar())) {s = 547;}

                        else if ( (LA156_255==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 548;}

                        else if ( (LA156_255==COLON) && (synpred4_EsperEPL2Grammar())) {s = 549;}

                        else if ( (LA156_255==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 550;}

                        else if ( (LA156_255==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 551;}

                        else if ( (LA156_255==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 552;}

                        else if ( (LA156_255==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 553;}

                        else if ( (LA156_255==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 554;}

                        else if ( (LA156_255==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 555;}

                        else if ( (LA156_255==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 556;}

                        else if ( (LA156_255==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 557;}

                        else if ( (LA156_255==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 558;}

                        else if ( (LA156_255==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 559;}

                        else if ( (LA156_255==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 560;}

                        else if ( (LA156_255==DOT) ) {s = 561;}

                         
                        input.seek(index156_255);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA156_256 = input.LA(1);

                         
                        int index156_256 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_256==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 562;}

                        else if ( (LA156_256==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 563;}

                        else if ( (LA156_256==LPAREN) ) {s = 564;}

                        else if ( (LA156_256==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 565;}

                        else if ( (LA156_256==STAR) && (synpred4_EsperEPL2Grammar())) {s = 566;}

                        else if ( (LA156_256==DIV) && (synpred4_EsperEPL2Grammar())) {s = 567;}

                        else if ( (LA156_256==MOD) && (synpred4_EsperEPL2Grammar())) {s = 568;}

                        else if ( (LA156_256==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 569;}

                        else if ( (LA156_256==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 570;}

                        else if ( (LA156_256==LOR) && (synpred4_EsperEPL2Grammar())) {s = 571;}

                        else if ( (LA156_256==LT) && (synpred4_EsperEPL2Grammar())) {s = 572;}

                        else if ( (LA156_256==GT) && (synpred4_EsperEPL2Grammar())) {s = 573;}

                        else if ( (LA156_256==LE) && (synpred4_EsperEPL2Grammar())) {s = 574;}

                        else if ( (LA156_256==GE) && (synpred4_EsperEPL2Grammar())) {s = 575;}

                        else if ( (LA156_256==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 576;}

                        else if ( (LA156_256==IS) && (synpred4_EsperEPL2Grammar())) {s = 577;}

                        else if ( (LA156_256==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 578;}

                        else if ( (LA156_256==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 579;}

                        else if ( (LA156_256==BAND) && (synpred4_EsperEPL2Grammar())) {s = 580;}

                        else if ( (LA156_256==BOR) && (synpred4_EsperEPL2Grammar())) {s = 581;}

                        else if ( (LA156_256==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 582;}

                        else if ( (LA156_256==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 583;}

                        else if ( (LA156_256==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 584;}

                        else if ( (LA156_256==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 585;}

                        else if ( (LA156_256==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 586;}

                        else if ( (LA156_256==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 587;}

                        else if ( (LA156_256==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 588;}

                        else if ( (LA156_256==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 589;}

                        else if ( (LA156_256==EOF) && (synpred4_EsperEPL2Grammar())) {s = 590;}

                        else if ( (LA156_256==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 591;}

                        else if ( (LA156_256==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 592;}

                        else if ( (LA156_256==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 593;}

                        else if ( (LA156_256==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 594;}

                        else if ( (LA156_256==AS) && (synpred4_EsperEPL2Grammar())) {s = 595;}

                        else if ( (LA156_256==FROM) && (synpred4_EsperEPL2Grammar())) {s = 596;}

                        else if ( (LA156_256==ASC) && (synpred4_EsperEPL2Grammar())) {s = 597;}

                        else if ( (LA156_256==DESC) && (synpred4_EsperEPL2Grammar())) {s = 598;}

                        else if ( (LA156_256==THEN) && (synpred4_EsperEPL2Grammar())) {s = 599;}

                        else if ( (LA156_256==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 600;}

                        else if ( (LA156_256==END) && (synpred4_EsperEPL2Grammar())) {s = 601;}

                        else if ( (LA156_256==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 602;}

                        else if ( (LA156_256==COLON) && (synpred4_EsperEPL2Grammar())) {s = 603;}

                        else if ( (LA156_256==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 604;}

                        else if ( (LA156_256==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 605;}

                        else if ( (LA156_256==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 606;}

                        else if ( (LA156_256==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 607;}

                        else if ( (LA156_256==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 608;}

                        else if ( (LA156_256==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 609;}

                        else if ( (LA156_256==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 610;}

                        else if ( (LA156_256==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 611;}

                        else if ( (LA156_256==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 612;}

                        else if ( (LA156_256==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 613;}

                        else if ( (LA156_256==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 614;}

                        else if ( (LA156_256==DOT) && (synpred4_EsperEPL2Grammar())) {s = 615;}

                         
                        input.seek(index156_256);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA156_257 = input.LA(1);

                         
                        int index156_257 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_257==LPAREN) ) {s = 616;}

                        else if ( (LA156_257==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 617;}

                        else if ( (LA156_257==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 618;}

                        else if ( (LA156_257==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 619;}

                        else if ( (LA156_257==STAR) && (synpred4_EsperEPL2Grammar())) {s = 620;}

                        else if ( (LA156_257==DIV) && (synpred4_EsperEPL2Grammar())) {s = 621;}

                        else if ( (LA156_257==MOD) && (synpred4_EsperEPL2Grammar())) {s = 622;}

                        else if ( (LA156_257==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 623;}

                        else if ( (LA156_257==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 624;}

                        else if ( (LA156_257==LOR) && (synpred4_EsperEPL2Grammar())) {s = 625;}

                        else if ( (LA156_257==LT) && (synpred4_EsperEPL2Grammar())) {s = 626;}

                        else if ( (LA156_257==GT) && (synpred4_EsperEPL2Grammar())) {s = 627;}

                        else if ( (LA156_257==LE) && (synpred4_EsperEPL2Grammar())) {s = 628;}

                        else if ( (LA156_257==GE) && (synpred4_EsperEPL2Grammar())) {s = 629;}

                        else if ( (LA156_257==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 630;}

                        else if ( (LA156_257==IS) && (synpred4_EsperEPL2Grammar())) {s = 631;}

                        else if ( (LA156_257==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 632;}

                        else if ( (LA156_257==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 633;}

                        else if ( (LA156_257==BAND) && (synpred4_EsperEPL2Grammar())) {s = 634;}

                        else if ( (LA156_257==BOR) && (synpred4_EsperEPL2Grammar())) {s = 635;}

                        else if ( (LA156_257==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 636;}

                        else if ( (LA156_257==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 637;}

                        else if ( (LA156_257==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 638;}

                        else if ( (LA156_257==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 639;}

                        else if ( (LA156_257==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 640;}

                        else if ( (LA156_257==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 641;}

                        else if ( (LA156_257==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 642;}

                        else if ( (LA156_257==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 643;}

                        else if ( (LA156_257==EOF) && (synpred4_EsperEPL2Grammar())) {s = 644;}

                        else if ( (LA156_257==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 645;}

                        else if ( (LA156_257==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 646;}

                        else if ( (LA156_257==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 647;}

                        else if ( (LA156_257==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 648;}

                        else if ( (LA156_257==AS) && (synpred4_EsperEPL2Grammar())) {s = 649;}

                        else if ( (LA156_257==FROM) && (synpred4_EsperEPL2Grammar())) {s = 650;}

                        else if ( (LA156_257==ASC) && (synpred4_EsperEPL2Grammar())) {s = 651;}

                        else if ( (LA156_257==DESC) && (synpred4_EsperEPL2Grammar())) {s = 652;}

                        else if ( (LA156_257==THEN) && (synpred4_EsperEPL2Grammar())) {s = 653;}

                        else if ( (LA156_257==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 654;}

                        else if ( (LA156_257==END) && (synpred4_EsperEPL2Grammar())) {s = 655;}

                        else if ( (LA156_257==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 656;}

                        else if ( (LA156_257==COLON) && (synpred4_EsperEPL2Grammar())) {s = 657;}

                        else if ( (LA156_257==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 658;}

                        else if ( (LA156_257==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 659;}

                        else if ( (LA156_257==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 660;}

                        else if ( (LA156_257==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 661;}

                        else if ( (LA156_257==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 662;}

                        else if ( (LA156_257==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 663;}

                        else if ( (LA156_257==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 664;}

                        else if ( (LA156_257==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 665;}

                        else if ( (LA156_257==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 666;}

                        else if ( (LA156_257==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 667;}

                        else if ( (LA156_257==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 668;}

                        else if ( (LA156_257==DOT) && (synpred4_EsperEPL2Grammar())) {s = 669;}

                         
                        input.seek(index156_257);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA156_258 = input.LA(1);

                         
                        int index156_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_258==DOT) ) {s = 670;}

                        else if ( (LA156_258==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 671;}

                        else if ( (LA156_258==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 672;}

                        else if ( (LA156_258==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 673;}

                        else if ( (LA156_258==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 674;}

                        else if ( (LA156_258==STAR) && (synpred4_EsperEPL2Grammar())) {s = 675;}

                        else if ( (LA156_258==DIV) && (synpred4_EsperEPL2Grammar())) {s = 676;}

                        else if ( (LA156_258==MOD) && (synpred4_EsperEPL2Grammar())) {s = 677;}

                        else if ( (LA156_258==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 678;}

                        else if ( (LA156_258==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 679;}

                        else if ( (LA156_258==LOR) && (synpred4_EsperEPL2Grammar())) {s = 680;}

                        else if ( (LA156_258==LT) && (synpred4_EsperEPL2Grammar())) {s = 681;}

                        else if ( (LA156_258==GT) && (synpred4_EsperEPL2Grammar())) {s = 682;}

                        else if ( (LA156_258==LE) && (synpred4_EsperEPL2Grammar())) {s = 683;}

                        else if ( (LA156_258==GE) && (synpred4_EsperEPL2Grammar())) {s = 684;}

                        else if ( (LA156_258==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 685;}

                        else if ( (LA156_258==IS) && (synpred4_EsperEPL2Grammar())) {s = 686;}

                        else if ( (LA156_258==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 687;}

                        else if ( (LA156_258==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 688;}

                        else if ( (LA156_258==BAND) && (synpred4_EsperEPL2Grammar())) {s = 689;}

                        else if ( (LA156_258==BOR) && (synpred4_EsperEPL2Grammar())) {s = 690;}

                        else if ( (LA156_258==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 691;}

                        else if ( (LA156_258==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 692;}

                        else if ( (LA156_258==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 693;}

                        else if ( (LA156_258==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 694;}

                        else if ( (LA156_258==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 695;}

                        else if ( (LA156_258==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 696;}

                        else if ( (LA156_258==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 697;}

                        else if ( (LA156_258==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 698;}

                        else if ( (LA156_258==EOF) && (synpred4_EsperEPL2Grammar())) {s = 699;}

                        else if ( (LA156_258==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 700;}

                        else if ( (LA156_258==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 701;}

                        else if ( (LA156_258==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 702;}

                        else if ( (LA156_258==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 703;}

                        else if ( (LA156_258==AS) && (synpred4_EsperEPL2Grammar())) {s = 704;}

                        else if ( (LA156_258==FROM) && (synpred4_EsperEPL2Grammar())) {s = 705;}

                        else if ( (LA156_258==ASC) && (synpred4_EsperEPL2Grammar())) {s = 706;}

                        else if ( (LA156_258==DESC) && (synpred4_EsperEPL2Grammar())) {s = 707;}

                        else if ( (LA156_258==THEN) && (synpred4_EsperEPL2Grammar())) {s = 708;}

                        else if ( (LA156_258==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 709;}

                        else if ( (LA156_258==END) && (synpred4_EsperEPL2Grammar())) {s = 710;}

                        else if ( (LA156_258==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 711;}

                        else if ( (LA156_258==COLON) && (synpred4_EsperEPL2Grammar())) {s = 712;}

                        else if ( (LA156_258==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 713;}

                        else if ( (LA156_258==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 714;}

                        else if ( (LA156_258==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 715;}

                        else if ( (LA156_258==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 716;}

                        else if ( (LA156_258==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 717;}

                        else if ( (LA156_258==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 718;}

                        else if ( (LA156_258==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 719;}

                        else if ( (LA156_258==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 720;}

                        else if ( (LA156_258==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 721;}

                        else if ( (LA156_258==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 722;}

                        else if ( (LA156_258==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 723;}

                         
                        input.seek(index156_258);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA156_352 = input.LA(1);

                         
                        int index156_352 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_352==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA156_352==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA156_352==LPAREN) ) {s = 778;}

                        else if ( (LA156_352==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA156_352==STAR) && (synpred4_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA156_352==DIV) && (synpred4_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA156_352==MOD) && (synpred4_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA156_352==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA156_352==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA156_352==LOR) && (synpred4_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA156_352==LT) && (synpred4_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA156_352==GT) && (synpred4_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA156_352==LE) && (synpred4_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA156_352==GE) && (synpred4_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA156_352==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA156_352==IS) && (synpred4_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA156_352==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA156_352==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA156_352==BAND) && (synpred4_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA156_352==BOR) && (synpred4_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA156_352==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA156_352==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA156_352==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA156_352==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA156_352==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA156_352==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA156_352==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA156_352==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA156_352==EOF) && (synpred4_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA156_352==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA156_352==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA156_352==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA156_352==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA156_352==AS) && (synpred4_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA156_352==FROM) && (synpred4_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA156_352==ASC) && (synpred4_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA156_352==DESC) && (synpred4_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA156_352==THEN) && (synpred4_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA156_352==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA156_352==END) && (synpred4_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA156_352==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA156_352==COLON) && (synpred4_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA156_352==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA156_352==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA156_352==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA156_352==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA156_352==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA156_352==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA156_352==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA156_352==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA156_352==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA156_352==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA156_352==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA156_352==DOT) ) {s = 829;}

                         
                        input.seek(index156_352);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA156_353 = input.LA(1);

                         
                        int index156_353 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_353==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA156_353==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA156_353==LPAREN) ) {s = 832;}

                        else if ( (LA156_353==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA156_353==STAR) && (synpred4_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA156_353==DIV) && (synpred4_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA156_353==MOD) && (synpred4_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA156_353==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA156_353==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA156_353==LOR) && (synpred4_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA156_353==LT) && (synpred4_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA156_353==GT) && (synpred4_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA156_353==LE) && (synpred4_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA156_353==GE) && (synpred4_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA156_353==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA156_353==IS) && (synpred4_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA156_353==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA156_353==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA156_353==BAND) && (synpred4_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA156_353==BOR) && (synpred4_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA156_353==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA156_353==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA156_353==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA156_353==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA156_353==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA156_353==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA156_353==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA156_353==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA156_353==EOF) && (synpred4_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA156_353==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA156_353==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA156_353==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA156_353==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA156_353==AS) && (synpred4_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA156_353==FROM) && (synpred4_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA156_353==ASC) && (synpred4_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA156_353==DESC) && (synpred4_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA156_353==THEN) && (synpred4_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA156_353==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA156_353==END) && (synpred4_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA156_353==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA156_353==COLON) && (synpred4_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA156_353==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA156_353==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA156_353==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA156_353==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA156_353==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA156_353==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA156_353==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA156_353==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA156_353==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA156_353==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA156_353==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA156_353==DOT) && (synpred4_EsperEPL2Grammar())) {s = 883;}

                         
                        input.seek(index156_353);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA156_354 = input.LA(1);

                         
                        int index156_354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_354==LPAREN) ) {s = 884;}

                        else if ( (LA156_354==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA156_354==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA156_354==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA156_354==STAR) && (synpred4_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA156_354==DIV) && (synpred4_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA156_354==MOD) && (synpred4_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA156_354==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA156_354==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA156_354==LOR) && (synpred4_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA156_354==LT) && (synpred4_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA156_354==GT) && (synpred4_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA156_354==LE) && (synpred4_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA156_354==GE) && (synpred4_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA156_354==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA156_354==IS) && (synpred4_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA156_354==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA156_354==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA156_354==BAND) && (synpred4_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA156_354==BOR) && (synpred4_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA156_354==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA156_354==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA156_354==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA156_354==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA156_354==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA156_354==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA156_354==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA156_354==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA156_354==EOF) && (synpred4_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA156_354==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA156_354==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA156_354==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA156_354==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA156_354==AS) && (synpred4_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA156_354==FROM) && (synpred4_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA156_354==ASC) && (synpred4_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA156_354==DESC) && (synpred4_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA156_354==THEN) && (synpred4_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA156_354==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA156_354==END) && (synpred4_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA156_354==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA156_354==COLON) && (synpred4_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA156_354==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA156_354==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA156_354==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA156_354==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA156_354==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA156_354==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA156_354==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA156_354==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA156_354==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA156_354==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA156_354==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA156_354==DOT) && (synpred4_EsperEPL2Grammar())) {s = 937;}

                         
                        input.seek(index156_354);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA156_355 = input.LA(1);

                         
                        int index156_355 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_355==DOT) ) {s = 938;}

                        else if ( (LA156_355==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA156_355==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA156_355==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA156_355==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA156_355==STAR) && (synpred4_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA156_355==DIV) && (synpred4_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA156_355==MOD) && (synpred4_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA156_355==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA156_355==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA156_355==LOR) && (synpred4_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA156_355==LT) && (synpred4_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA156_355==GT) && (synpred4_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA156_355==LE) && (synpred4_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA156_355==GE) && (synpred4_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA156_355==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA156_355==IS) && (synpred4_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA156_355==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA156_355==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA156_355==BAND) && (synpred4_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA156_355==BOR) && (synpred4_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA156_355==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA156_355==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA156_355==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA156_355==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA156_355==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA156_355==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA156_355==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA156_355==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA156_355==EOF) && (synpred4_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA156_355==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA156_355==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA156_355==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA156_355==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA156_355==AS) && (synpred4_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA156_355==FROM) && (synpred4_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA156_355==ASC) && (synpred4_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA156_355==DESC) && (synpred4_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA156_355==THEN) && (synpred4_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA156_355==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA156_355==END) && (synpred4_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA156_355==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA156_355==COLON) && (synpred4_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA156_355==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA156_355==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA156_355==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA156_355==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA156_355==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA156_355==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA156_355==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA156_355==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA156_355==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA156_355==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA156_355==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 991;}

                         
                        input.seek(index156_355);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA156_510 = input.LA(1);

                         
                        int index156_510 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_510);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA156_561 = input.LA(1);

                         
                        int index156_561 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_561);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA156_564 = input.LA(1);

                         
                        int index156_564 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_564);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA156_616 = input.LA(1);

                         
                        int index156_616 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_616);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA156_670 = input.LA(1);

                         
                        int index156_670 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_670);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA156_724 = input.LA(1);

                         
                        int index156_724 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_724);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA156_770 = input.LA(1);

                         
                        int index156_770 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_770);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA156_778 = input.LA(1);

                         
                        int index156_778 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_778);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA156_829 = input.LA(1);

                         
                        int index156_829 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_829);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA156_832 = input.LA(1);

                         
                        int index156_832 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_832);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA156_884 = input.LA(1);

                         
                        int index156_884 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_884);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA156_938 = input.LA(1);

                         
                        int index156_938 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_938);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA156_992 = input.LA(1);

                         
                        int index156_992 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_992);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA156_1038 = input.LA(1);

                         
                        int index156_1038 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_1038);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA156_1044 = input.LA(1);

                         
                        int index156_1044 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_1044);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA156_1090 = input.LA(1);

                         
                        int index156_1090 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 991;}

                        else if ( (true) ) {s = 295;}

                         
                        input.seek(index156_1090);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA192_eotS =
        "\u0081\uffff";
    static final String DFA192_eofS =
        "\u0081\uffff";
    static final String DFA192_minS =
        "\1\5\1\uffff\1\6\67\uffff\1\5\106\uffff";
    static final String DFA192_maxS =
        "\1\u0107\1\uffff\1\u0104\67\uffff\1\u0105\106\uffff";
    static final String DFA192_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\126\uffff\1\2\46\uffff";
    static final String DFA192_specialS =
        "\72\uffff\1\0\106\uffff}>";
    static final String[] DFA192_transitionS = {
            "\1\3\4\uffff\1\3\2\uffff\2\3\3\uffff\11\3\1\uffff\1\3\6\uffff"+
            "\1\3\1\uffff\4\3\12\uffff\3\3\10\uffff\16\3\1\uffff\1\3\1\uffff"+
            "\3\3\14\uffff\3\3\u0082\uffff\1\3\2\uffff\1\2\2\uffff\1\3\1"+
            "\uffff\1\1\3\uffff\2\3\12\uffff\2\3\2\uffff\1\3\1\uffff\1\3"+
            "\1\uffff\1\3\1\uffff\3\3",
            "",
            "\4\3\1\uffff\3\3\3\uffff\1\3\20\uffff\1\3\7\uffff\1\3\u00ba"+
            "\uffff\1\3\1\uffff\1\3\1\72\1\3\1\uffff\2\3\4\uffff\16\3\4\uffff"+
            "\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\4\uffff\1\3\3\uffff\1\3\3\uffff\11\3\10\uffff\1\3\1\uffff"+
            "\4\3\12\uffff\3\3\10\uffff\10\3\1\uffff\4\3\2\uffff\1\3\1\uffff"+
            "\3\3\u0094\uffff\1\3\4\uffff\1\132\31\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_eotS);
    static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_eofS);
    static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_minS);
    static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_maxS);
    static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_acceptS);
    static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_specialS);
    static final short[][] DFA192_transition;

    static {
        int numStates = DFA192_transitionS.length;
        DFA192_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA192_transition[i] = DFA.unpackEncodedString(DFA192_transitionS[i]);
        }
    }

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = DFA192_eot;
            this.eof = DFA192_eof;
            this.min = DFA192_min;
            this.max = DFA192_max;
            this.accept = DFA192_accept;
            this.special = DFA192_special;
            this.transition = DFA192_transition;
        }
        public String getDescription() {
            return "1230:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA192_58 = input.LA(1);

                         
                        int index192_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA192_58==STAR) && (synpred5_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA192_58==WINDOW||LA192_58==ESCAPE||LA192_58==EVERY_EXPR||(LA192_58>=SUM && LA192_58<=COUNT)||LA192_58==OUTER||(LA192_58>=JOIN && LA192_58<=FULL)||(LA192_58>=EVENTS && LA192_58<=LAST)||(LA192_58>=UNIDIRECTIONAL && LA192_58<=PRIOR)||(LA192_58>=WEEKDAY && LA192_58<=CAST)||LA192_58==SNAPSHOT||(LA192_58>=VARIABLE && LA192_58<=AT)||LA192_58==IDENT||LA192_58==TICKED_STRING_LITERAL) ) {s = 3;}

                         
                        input.seek(index192_58);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 192, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA202_eotS =
        "\u0225\uffff";
    static final String DFA202_eofS =
        "\u0225\uffff";
    static final String DFA202_minS =
        "\1\5\2\0\6\6\60\uffff\1\u00e5\143\uffff\3\0\47\uffff\3\0\50\uffff"+
        "\3\0\52\uffff\3\0\67\uffff\3\0\40\uffff\3\0\u00a6\uffff";
    static final String DFA202_maxS =
        "\1\u0107\2\0\4\u00fe\1\u0104\1\u00fe\60\uffff\1\u00fd\143\uffff"+
        "\3\0\47\uffff\3\0\50\uffff\3\0\52\uffff\3\0\67\uffff\3\0\40\uffff"+
        "\3\0\u00a6\uffff";
    static final String DFA202_acceptS =
        "\11\uffff\60\4\1\uffff\1\11\44\uffff\1\1\44\uffff\1\2\2\3\1\10"+
        "\25\4\3\uffff\7\4\1\7\10\3\1\5\1\10\25\4\3\uffff\7\4\7\3\1\7\1\5"+
        "\3\3\25\4\3\uffff\7\4\1\7\2\3\1\10\1\5\10\3\1\7\25\4\3\uffff\7\4"+
        "\1\10\3\3\1\5\7\3\1\4\1\7\1\4\1\5\10\3\30\4\3\uffff\7\4\2\3\2\10"+
        "\25\4\3\uffff\7\4\12\3\1\7\1\5\1\6\1\12\u0091\uffff";
    static final String DFA202_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\60\uffff\1\11\143\uffff\1"+
        "\12\1\13\1\14\47\uffff\1\15\1\16\1\17\50\uffff\1\20\1\21\1\22\52"+
        "\uffff\1\23\1\24\1\25\67\uffff\1\26\1\27\1\30\40\uffff\1\31\1\32"+
        "\1\33\u00a6\uffff}>";
    static final String[] DFA202_transitionS = {
            "\1\57\4\uffff\1\25\2\uffff\1\70\1\26\3\uffff\1\27\1\30\1\31"+
            "\1\32\1\33\1\34\1\35\1\36\1\24\1\uffff\1\11\6\uffff\1\62\1\uffff"+
            "\1\64\1\60\1\61\1\63\12\uffff\1\37\1\40\1\1\10\uffff\1\41\1"+
            "\42\1\43\1\45\1\46\1\47\1\50\1\51\1\65\1\52\1\2\1\53\1\54\1"+
            "\66\1\uffff\1\55\1\uffff\1\56\1\44\1\23\14\uffff\1\16\1\17\1"+
            "\20\u0082\uffff\1\6\2\uffff\1\7\2\uffff\1\21\1\uffff\1\71\1"+
            "\72\2\uffff\1\14\1\15\12\uffff\1\13\1\12\2\uffff\1\67\1\uffff"+
            "\1\3\1\uffff\1\10\1\uffff\1\22\1\4\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\uffff\1\u009a\1\u0099\1"+
            "\u00a2\7\uffff\1\u00ad\24\uffff\1\u0093\12\uffff\1\u00a7\3\uffff"+
            "\1\u009b\1\u009c\14\uffff\1\u0087\12\uffff\1\u00af\1\u00ae\1"+
            "\u0086\1\u0085\1\u00ac\1\u00ab\1\u009f\1\u009e\1\u009d\1\u00aa"+
            "\1\u00a9\1\u00a8\u0087\uffff\1\u00a0\1\uffff\1\u0092\2\uffff"+
            "\1\u00a1\1\u0088\2\uffff\1\u00b0\2\uffff\1\u0096\1\u0097\1\u0098"+
            "\1\u0094\1\u0095\1\u008e\1\u008f\1\u0090\1\u0091\1\u008d\1\u008b"+
            "\1\u008c\1\u0089\1\u008a",
            "\1\u00cd\1\u00ce\1\u00cf\1\u00d0\1\uffff\1\u00c4\1\u00c3\1"+
            "\u00cc\7\uffff\1\u00dc\24\uffff\1\u00bd\12\uffff\1\u00d8\3\uffff"+
            "\1\u00c5\1\u00c6\14\uffff\1\u00b1\12\uffff\1\u00d7\1\u00d6\1"+
            "\u00d2\1\u00d1\1\u00db\1\u00da\1\u00c9\1\u00c8\1\u00c7\1\u00d5"+
            "\1\u00d4\1\u00d3\u0087\uffff\1\u00ca\1\uffff\1\u00bc\2\uffff"+
            "\1\u00cb\1\u00b2\2\uffff\1\u00d9\2\uffff\1\u00c0\1\u00c1\1\u00c2"+
            "\1\u00be\1\u00bf\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00b7\1\u00b5"+
            "\1\u00b6\1\u00b3\1\u00b4",
            "\1\u00f8\1\u00f9\1\u00fa\1\u00fb\1\uffff\1\u00ef\1\u00ee\1"+
            "\u00f7\7\uffff\1\u0106\24\uffff\1\u00e8\12\uffff\1\u00fc\3\uffff"+
            "\1\u00f0\1\u00f1\14\uffff\1\u00ff\12\uffff\1\u0108\1\u0107\1"+
            "\u00fe\1\u00fd\1\u0105\1\u0104\1\u00f4\1\u00f3\1\u00f2\1\u0103"+
            "\1\u0102\1\u0101\u0087\uffff\1\u00f5\1\uffff\1\u00e7\2\uffff"+
            "\1\u00f6\1\u00dd\2\uffff\1\u0100\2\uffff\1\u00eb\1\u00ec\1\u00ed"+
            "\1\u00e9\1\u00ea\1\u00e3\1\u00e4\1\u00e5\1\u00e6\1\u00e2\1\u00e0"+
            "\1\u00e1\1\u00de\1\u00df",
            "\1\u0125\1\u0126\1\u0127\1\u0128\1\uffff\1\u011c\1\u011b\1"+
            "\u0124\7\uffff\1\u012c\24\uffff\1\u0115\12\uffff\1\u0109\3\uffff"+
            "\1\u011d\1\u011e\14\uffff\1\u0129\12\uffff\1\u0134\1\u0133\1"+
            "\u012f\1\u012e\1\u012b\1\u012a\1\u0121\1\u0120\1\u011f\1\u0132"+
            "\1\u0131\1\u0130\u0087\uffff\1\u0122\1\uffff\1\u0114\2\uffff"+
            "\1\u0123\1\u010a\2\uffff\1\u012d\2\uffff\1\u0118\1\u0119\1\u011a"+
            "\1\u0116\1\u0117\1\u0110\1\u0111\1\u0112\1\u0113\1\u010f\1\u010d"+
            "\1\u010e\1\u010b\1\u010c",
            "\1\u015f\1\u0160\1\u0161\1\u0162\1\uffff\1\u0156\1\u0155\1"+
            "\u015e\7\uffff\1\u0140\24\uffff\1\u014f\12\uffff\1\u0136\3\uffff"+
            "\1\u0157\1\u0158\14\uffff\1\u0165\12\uffff\1\u0164\1\u0163\1"+
            "\u013a\1\u0139\1\u013f\1\u013e\1\u015b\1\u015a\1\u0159\1\u013d"+
            "\1\u013c\1\u013b\u0087\uffff\1\u015c\1\uffff\1\u014e\1\u0135"+
            "\1\u0137\1\u015d\1\u0144\1\u0142\1\uffff\1\u0138\2\uffff\1\u0152"+
            "\1\u0153\1\u0154\1\u0150\1\u0151\1\u014a\1\u014b\1\u014c\1\u014d"+
            "\1\u0149\1\u0147\1\u0148\1\u0145\1\u0146\4\uffff\1\u0143\1\u0141",
            "\1\u0182\1\u0183\1\u0184\1\u0185\1\uffff\1\u0179\1\u0178\1"+
            "\u0181\7\uffff\1\u018f\24\uffff\1\u0172\12\uffff\1\u0190\3\uffff"+
            "\1\u017a\1\u017b\14\uffff\1\u0166\12\uffff\1\u018c\1\u018b\1"+
            "\u0187\1\u0186\1\u018e\1\u018d\1\u017e\1\u017d\1\u017c\1\u018a"+
            "\1\u0189\1\u0188\u0087\uffff\1\u017f\1\uffff\1\u0171\2\uffff"+
            "\1\u0180\1\u0167\2\uffff\1\u0191\2\uffff\1\u0175\1\u0176\1\u0177"+
            "\1\u0173\1\u0174\1\u016d\1\u016e\1\u016f\1\u0170\1\u016c\1\u016a"+
            "\1\u016b\1\u0168\1\u0169",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0193\4\uffff\1\u0193\22\uffff\1\u0192",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA202_eot = DFA.unpackEncodedString(DFA202_eotS);
    static final short[] DFA202_eof = DFA.unpackEncodedString(DFA202_eofS);
    static final char[] DFA202_min = DFA.unpackEncodedStringToUnsignedChars(DFA202_minS);
    static final char[] DFA202_max = DFA.unpackEncodedStringToUnsignedChars(DFA202_maxS);
    static final short[] DFA202_accept = DFA.unpackEncodedString(DFA202_acceptS);
    static final short[] DFA202_special = DFA.unpackEncodedString(DFA202_specialS);
    static final short[][] DFA202_transition;

    static {
        int numStates = DFA202_transitionS.length;
        DFA202_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA202_transition[i] = DFA.unpackEncodedString(DFA202_transitionS[i]);
        }
    }

    class DFA202 extends DFA {

        public DFA202(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 202;
            this.eot = DFA202_eot;
            this.eof = DFA202_eof;
            this.min = DFA202_min;
            this.max = DFA202_max;
            this.accept = DFA202_accept;
            this.special = DFA202_special;
            this.transition = DFA202_transition;
        }
        public String getDescription() {
            return "1282:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA202_0 = input.LA(1);

                         
                        int index202_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA202_0==LAST) ) {s = 1;}

                        else if ( (LA202_0==LW) ) {s = 2;}

                        else if ( (LA202_0==NUM_INT) ) {s = 3;}

                        else if ( (LA202_0==NUM_LONG) ) {s = 4;}

                        else if ( (LA202_0==NUM_FLOAT) ) {s = 5;}

                        else if ( (LA202_0==NUM_DOUBLE) ) {s = 6;}

                        else if ( (LA202_0==IDENT) ) {s = 7;}

                        else if ( (LA202_0==QUESTION) ) {s = 8;}

                        else if ( (LA202_0==CASE) && (synpred9_EsperEPL2Grammar())) {s = 9;}

                        else if ( (LA202_0==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 10;}

                        else if ( (LA202_0==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA202_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA202_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA202_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA202_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA202_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA202_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA202_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA202_0==AT) && (synpred9_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA202_0==COUNT) && (synpred9_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA202_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA202_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA202_0==SUM) && (synpred9_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA202_0==AVG) && (synpred9_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA202_0==MAX) && (synpred9_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA202_0==MIN) && (synpred9_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA202_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA202_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA202_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA202_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA202_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA202_0==FIRST) && (synpred9_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA202_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA202_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA202_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA202_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA202_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA202_0==SQL) && (synpred9_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA202_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA202_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA202_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA202_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA202_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA202_0==CAST) && (synpred9_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA202_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA202_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA202_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA202_0==LEFT) && (synpred9_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA202_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA202_0==OUTER) && (synpred9_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA202_0==FULL) && (synpred9_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA202_0==JOIN) && (synpred9_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA202_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA202_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA202_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA202_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA202_0==STAR) ) {s = 57;}

                        else if ( (LA202_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {s = 58;}

                         
                        input.seek(index202_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA202_1 = input.LA(1);

                         
                        int index202_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_EsperEPL2Grammar()) ) {s = 95;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 56;}

                         
                        input.seek(index202_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA202_2 = input.LA(1);

                         
                        int index202_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 132;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 56;}

                         
                        input.seek(index202_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA202_3 = input.LA(1);

                         
                        int index202_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA202_3==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA202_3==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA202_3==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA202_3==STAR) && (synpred9_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA202_3==DIV) && (synpred9_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA202_3==MOD) && (synpred9_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA202_3==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA202_3==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA202_3==LOR) && (synpred9_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA202_3==LT) && (synpred9_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA202_3==GT) && (synpred9_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA202_3==LE) && (synpred9_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA202_3==GE) && (synpred9_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA202_3==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA202_3==IS) && (synpred9_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA202_3==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA202_3==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA202_3==BAND) && (synpred9_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA202_3==BOR) && (synpred9_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA202_3==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA202_3==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA202_3==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA202_3==ASC) && (synpred9_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA202_3==DESC) && (synpred9_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA202_3==TIMEPERIOD_SECONDS) ) {s = 157;}

                        else if ( (LA202_3==TIMEPERIOD_SECOND) ) {s = 158;}

                        else if ( (LA202_3==TIMEPERIOD_SEC) ) {s = 159;}

                        else if ( (LA202_3==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA202_3==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA202_3==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA202_3==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA202_3==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA202_3==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA202_3==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA202_3==LAST) && (synpred12_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA202_3==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA202_3==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA202_3==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA202_3==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA202_3==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA202_3==MIN) && (synpred8_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA202_3==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA202_3==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA202_3==COLON) && (synpred10_EsperEPL2Grammar())) {s = 176;}

                         
                        input.seek(index202_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA202_4 = input.LA(1);

                         
                        int index202_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA202_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA202_4==STAR) && (synpred9_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA202_4==DIV) && (synpred9_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA202_4==MOD) && (synpred9_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA202_4==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA202_4==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA202_4==LOR) && (synpred9_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA202_4==LT) && (synpred9_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA202_4==GT) && (synpred9_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA202_4==LE) && (synpred9_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA202_4==GE) && (synpred9_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA202_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA202_4==IS) && (synpred9_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA202_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA202_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA202_4==BAND) && (synpred9_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA202_4==BOR) && (synpred9_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA202_4==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA202_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA202_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA202_4==ASC) && (synpred9_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA202_4==DESC) && (synpred9_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA202_4==TIMEPERIOD_SECONDS) ) {s = 199;}

                        else if ( (LA202_4==TIMEPERIOD_SECOND) ) {s = 200;}

                        else if ( (LA202_4==TIMEPERIOD_SEC) ) {s = 201;}

                        else if ( (LA202_4==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA202_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA202_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA202_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA202_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA202_4==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA202_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA202_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA202_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA202_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA202_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA202_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA202_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA202_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA202_4==LAST) && (synpred12_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA202_4==COLON) && (synpred10_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA202_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA202_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA202_4==MIN) && (synpred8_EsperEPL2Grammar())) {s = 220;}

                         
                        input.seek(index202_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA202_5 = input.LA(1);

                         
                        int index202_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA202_5==STAR) && (synpred9_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA202_5==DIV) && (synpred9_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA202_5==MOD) && (synpred9_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA202_5==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA202_5==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA202_5==LOR) && (synpred9_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA202_5==LT) && (synpred9_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA202_5==GT) && (synpred9_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA202_5==LE) && (synpred9_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA202_5==GE) && (synpred9_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA202_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA202_5==IS) && (synpred9_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA202_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA202_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA202_5==BAND) && (synpred9_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA202_5==BOR) && (synpred9_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA202_5==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA202_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA202_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA202_5==ASC) && (synpred9_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA202_5==DESC) && (synpred9_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA202_5==TIMEPERIOD_SECONDS) ) {s = 242;}

                        else if ( (LA202_5==TIMEPERIOD_SECOND) ) {s = 243;}

                        else if ( (LA202_5==TIMEPERIOD_SEC) ) {s = 244;}

                        else if ( (LA202_5==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA202_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA202_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA202_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA202_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA202_5==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA202_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA202_5==LAST) && (synpred12_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA202_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA202_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA202_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA202_5==COLON) && (synpred10_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA202_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA202_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA202_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA202_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA202_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA202_5==MIN) && (synpred8_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA202_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA202_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 264;}

                         
                        input.seek(index202_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA202_6 = input.LA(1);

                         
                        int index202_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA202_6==LAST) && (synpred12_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA202_6==STAR) && (synpred9_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA202_6==DIV) && (synpred9_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA202_6==MOD) && (synpred9_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA202_6==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA202_6==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA202_6==LOR) && (synpred9_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA202_6==LT) && (synpred9_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA202_6==GT) && (synpred9_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA202_6==LE) && (synpred9_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA202_6==GE) && (synpred9_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA202_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA202_6==IS) && (synpred9_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA202_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA202_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA202_6==BAND) && (synpred9_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA202_6==BOR) && (synpred9_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA202_6==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA202_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA202_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA202_6==ASC) && (synpred9_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA202_6==DESC) && (synpred9_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA202_6==TIMEPERIOD_SECONDS) ) {s = 287;}

                        else if ( (LA202_6==TIMEPERIOD_SECOND) ) {s = 288;}

                        else if ( (LA202_6==TIMEPERIOD_SEC) ) {s = 289;}

                        else if ( (LA202_6==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 290;}

                        else if ( (LA202_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 291;}

                        else if ( (LA202_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 292;}

                        else if ( (LA202_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 293;}

                        else if ( (LA202_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA202_6==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA202_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA202_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA202_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA202_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA202_6==MIN) && (synpred8_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA202_6==COLON) && (synpred10_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA202_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA202_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA202_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA202_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA202_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA202_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA202_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 308;}

                         
                        input.seek(index202_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA202_7 = input.LA(1);

                         
                        int index202_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA202_7==DOT) && (synpred9_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA202_7==LAST) && (synpred12_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA202_7==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA202_7==COLON) && (synpred10_EsperEPL2Grammar())) {s = 312;}

                        else if ( (LA202_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA202_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 314;}

                        else if ( (LA202_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 315;}

                        else if ( (LA202_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 316;}

                        else if ( (LA202_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 317;}

                        else if ( (LA202_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 318;}

                        else if ( (LA202_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA202_7==MIN) && (synpred8_EsperEPL2Grammar())) {s = 320;}

                        else if ( (LA202_7==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA202_7==LBRACK) && (synpred9_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA202_7==QUESTION) && (synpred9_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA202_7==STAR) && (synpred9_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA202_7==DIV) && (synpred9_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA202_7==MOD) && (synpred9_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA202_7==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA202_7==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA202_7==LOR) && (synpred9_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA202_7==LT) && (synpred9_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA202_7==GT) && (synpred9_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA202_7==LE) && (synpred9_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA202_7==GE) && (synpred9_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA202_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA202_7==IS) && (synpred9_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA202_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA202_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA202_7==BAND) && (synpred9_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA202_7==BOR) && (synpred9_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA202_7==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 340;}

                        else if ( (LA202_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 341;}

                        else if ( (LA202_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA202_7==ASC) && (synpred9_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA202_7==DESC) && (synpred9_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA202_7==TIMEPERIOD_SECONDS) ) {s = 345;}

                        else if ( (LA202_7==TIMEPERIOD_SECOND) ) {s = 346;}

                        else if ( (LA202_7==TIMEPERIOD_SEC) ) {s = 347;}

                        else if ( (LA202_7==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA202_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA202_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA202_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA202_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA202_7==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA202_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA202_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA202_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA202_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 357;}

                         
                        input.seek(index202_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA202_8 = input.LA(1);

                         
                        int index202_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA202_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA202_8==STAR) && (synpred9_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA202_8==DIV) && (synpred9_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA202_8==MOD) && (synpred9_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA202_8==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA202_8==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA202_8==LOR) && (synpred9_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA202_8==LT) && (synpred9_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA202_8==GT) && (synpred9_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA202_8==LE) && (synpred9_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA202_8==GE) && (synpred9_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA202_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA202_8==IS) && (synpred9_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA202_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA202_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA202_8==BAND) && (synpred9_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA202_8==BOR) && (synpred9_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA202_8==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA202_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA202_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA202_8==ASC) && (synpred9_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA202_8==DESC) && (synpred9_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA202_8==TIMEPERIOD_SECONDS) ) {s = 380;}

                        else if ( (LA202_8==TIMEPERIOD_SECOND) ) {s = 381;}

                        else if ( (LA202_8==TIMEPERIOD_SEC) ) {s = 382;}

                        else if ( (LA202_8==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA202_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA202_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA202_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA202_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA202_8==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA202_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA202_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA202_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA202_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA202_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA202_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA202_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA202_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA202_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA202_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA202_8==MIN) && (synpred8_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA202_8==LAST) && (synpred12_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA202_8==COLON) && (synpred10_EsperEPL2Grammar())) {s = 401;}

                         
                        input.seek(index202_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA202_57 = input.LA(1);

                         
                        int index202_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA202_57==DIV) && (synpred11_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA202_57==COMMA||LA202_57==RPAREN) ) {s = 403;}

                         
                        input.seek(index202_57);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA202_157 = input.LA(1);

                         
                        int index202_157 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_157);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA202_158 = input.LA(1);

                         
                        int index202_158 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_158);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA202_159 = input.LA(1);

                         
                        int index202_159 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_159);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA202_199 = input.LA(1);

                         
                        int index202_199 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_199);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA202_200 = input.LA(1);

                         
                        int index202_200 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_200);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA202_201 = input.LA(1);

                         
                        int index202_201 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_201);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA202_242 = input.LA(1);

                         
                        int index202_242 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_242);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA202_243 = input.LA(1);

                         
                        int index202_243 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_243);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA202_244 = input.LA(1);

                         
                        int index202_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_244);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA202_287 = input.LA(1);

                         
                        int index202_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_287);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA202_288 = input.LA(1);

                         
                        int index202_288 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_288);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA202_289 = input.LA(1);

                         
                        int index202_289 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_289);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA202_345 = input.LA(1);

                         
                        int index202_345 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_345);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA202_346 = input.LA(1);

                         
                        int index202_346 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_346);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA202_347 = input.LA(1);

                         
                        int index202_347 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_347);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA202_380 = input.LA(1);

                         
                        int index202_380 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_380);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA202_381 = input.LA(1);

                         
                        int index202_381 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_381);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA202_382 = input.LA(1);

                         
                        int index202_382 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 389;}

                         
                        input.seek(index202_382);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 202, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA216_eotS =
        "\u018d\uffff";
    static final String DFA216_eofS =
        "\1\47\4\uffff\1\1\34\uffff\2\1\1\uffff\2\1\u0166\uffff";
    static final String DFA216_minS =
        "\1\5\4\uffff\1\6\34\uffff\2\6\1\uffff\2\6\u0166\uffff";
    static final String DFA216_maxS =
        "\1\u0105\4\uffff\1\u0104\34\uffff\2\u0104\1\uffff\1\u0104\1\u0105"+
        "\u0166\uffff";
    static final String DFA216_acceptS =
        "\1\uffff\1\1\45\uffff\1\2\u0165\uffff";
    static final String DFA216_specialS =
        "\u018d\uffff}>";
    static final String[] DFA216_transitionS = {
            "\1\1\4\47\1\5\3\47\1\1\1\uffff\2\47\11\1\3\uffff\5\47\1\1\1"+
            "\47\1\46\1\42\1\43\1\45\1\uffff\1\47\1\uffff\2\47\4\uffff\1"+
            "\47\3\1\1\47\1\uffff\3\47\3\uffff\10\1\1\uffff\4\1\2\uffff\1"+
            "\1\1\uffff\3\1\6\uffff\3\47\6\uffff\1\47\u0083\uffff\1\47\1"+
            "\1\10\47\2\uffff\16\47\1\uffff\1\47\2\uffff\2\47\1\1",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\35\uffff\3\1\6\uffff"+
            "\1\1\u0083\uffff\1\1\1\uffff\10\1\2\47\16\1\1\uffff\1\1\2\uffff"+
            "\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\35\uffff\3\1\6\uffff"+
            "\1\1\u0083\uffff\1\1\1\uffff\10\1\2\uffff\16\1\1\uffff\1\1\2"+
            "\uffff\2\1",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\35\uffff\3\1\6\uffff"+
            "\1\1\u0083\uffff\1\1\1\uffff\10\1\2\uffff\16\1\1\uffff\1\1\2"+
            "\uffff\2\1",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\35\uffff\3\1\6\uffff"+
            "\1\1\u0083\uffff\1\1\1\uffff\10\1\2\uffff\16\1\1\uffff\1\1\2"+
            "\uffff\2\1",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff\2\47\25\uffff"+
            "\3\1\6\uffff\1\1\u0083\uffff\1\1\1\47\10\1\2\uffff\16\1\1\uffff"+
            "\1\1\2\uffff\2\1\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA216_eot = DFA.unpackEncodedString(DFA216_eotS);
    static final short[] DFA216_eof = DFA.unpackEncodedString(DFA216_eofS);
    static final char[] DFA216_min = DFA.unpackEncodedStringToUnsignedChars(DFA216_minS);
    static final char[] DFA216_max = DFA.unpackEncodedStringToUnsignedChars(DFA216_maxS);
    static final short[] DFA216_accept = DFA.unpackEncodedString(DFA216_acceptS);
    static final short[] DFA216_special = DFA.unpackEncodedString(DFA216_specialS);
    static final short[][] DFA216_transition;

    static {
        int numStates = DFA216_transitionS.length;
        DFA216_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA216_transition[i] = DFA.unpackEncodedString(DFA216_transitionS[i]);
        }
    }

    class DFA216 extends DFA {

        public DFA216(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 216;
            this.eot = DFA216_eot;
            this.eof = DFA216_eof;
            this.min = DFA216_min;
            this.max = DFA216_max;
            this.accept = DFA216_accept;
            this.special = DFA216_special;
            this.transition = DFA216_transition;
        }
        public String getDescription() {
            return "1379:24: (ipi2= keywordAllowedIdent )?";
        }
    }
 

    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1408 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000124000000000L,0x0000000020000020L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1413 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1431 = new BitSet(new long[]{0x0040020008000010L,0x0000000800000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1437 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1467 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1497 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x9801844800000000L,0x00000000200000C2L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1557 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x9801844800000000L,0x00000000200000E2L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1611 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1617 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1644 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1669 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x9801800800000000L,0x00000000200000C2L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1710 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x9801804800000000L,0x00000000200000E2L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum1767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum1790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum1801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum1814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum1822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum1842 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x9801802800000000L,0x00000000200000C3L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum1848 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x9801800800000000L,0x00000000200000C2L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum1857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum1861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum1890 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x9801806800000000L,0x00000000200000E3L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum1893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum1896 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x9801804800000000L,0x00000000200000E2L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum1898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum1905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum1909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression1941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression1946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression1951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression1956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression1961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr1974 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr1977 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr1983 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_selectClause_in_selectExpr1986 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr1990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr1993 = new BitSet(new long[]{0x0104300000010002L,0x0000000200000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr1998 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2001 = new BitSet(new long[]{0x0104300000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2008 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2011 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2014 = new BitSet(new long[]{0x0104200000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2021 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2024 = new BitSet(new long[]{0x0104000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2031 = new BitSet(new long[]{0x0030800080004000L,0x0000000000022000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2034 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2041 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2044 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2047 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000C2L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onExpr2075 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onExpr2079 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_AS_in_onExpr2083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2087 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2093 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2105 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2108 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2173 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2178 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2186 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2233 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2235 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2241 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2243 = new BitSet(new long[]{0x0100300400010002L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2247 = new BitSet(new long[]{0x0100300000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2253 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2255 = new BitSet(new long[]{0x0100300000000002L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2264 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2266 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2268 = new BitSet(new long[]{0x0100200000000002L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2275 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2277 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2284 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2286 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2341 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2343 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr2347 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr2349 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr2354 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr2356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert2387 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert2392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert2398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2440 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2444 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2449 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2498 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_IDENT_in_onSetAssignment2525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2527 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2559 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2600 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr2606 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x0000034000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2611 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x0000034000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2616 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x0000034000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr2625 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000024000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr2629 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000024000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr2633 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000024000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr2648 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr2663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_createWindowColumnList_in_createWindowExpr2665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr2667 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr2684 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr2687 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_createWindowExpr2689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter2776 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003A7BFL,0x0000000000000000L,0x9801884800000000L,0x00000000200000E2L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter2779 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter2781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter2786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr2799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr2801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2809 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr2812 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_createVariableExpr2814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList2857 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_createWindowColumnList2860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList2862 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement2892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement2896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList2934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList2937 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003A7BFL,0x0000000000000000L,0x9801884800000000L,0x00000000200000E2L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList2939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement2968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement2980 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement2983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement2987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3008 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3053 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3059 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3067 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_insertIntoColumnList_in_insertIntoExpr3070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoColumnList3104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList3106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_COMMA_in_insertIntoColumnList3109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList3111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoColumnList3115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause3150 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause3153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause3157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin3171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin3174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3188 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3191 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin3234 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin3238 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin3242 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin3245 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin3266 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin3280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin3282 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin3284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent3349 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3352 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent3355 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3358 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair3375 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause3400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause3436 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause3442 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause3448 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_selectionList_in_selectClause3452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList3482 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement3511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement3527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement3532 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement3535 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement3539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector3597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector3599 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector3602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression3636 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression3640 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression3644 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression3648 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3656 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3661 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression3668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3672 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3678 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression3685 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression3692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression3696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression3753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression3755 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000124000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression3757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression3759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression3792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression3794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression3798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression3800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression3805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression3815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression3820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression3831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression3882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression3884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression3886 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression3889 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018E4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression3891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression3894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression3947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression3949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression3953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression3955 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98019E4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression3957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression3960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr3999 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr4002 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_groupByListExpr4004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr4039 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr4042 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr4044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement4069 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement4074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement4078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause4116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputLimit4154 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit4158 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit4162 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit4166 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit4193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit4215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit4224 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit4230 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit4236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit4259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit4261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit4275 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_outputLimit4277 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit4280 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit4282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit4411 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit4417 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit4424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000C2L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit4430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000C2L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit4436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit4442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet4494 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98019A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4498 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98019A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4502 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98019A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4506 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98019A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4510 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98019A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4515 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98019A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet4521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause4551 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_whenClause4554 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause4556 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_whenClause4559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause4572 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_elseClause4575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression4588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression4602 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression4605 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression4608 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression4611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression4622 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_caseExpression4624 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression4626 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression4629 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression4632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression4656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression4667 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression4672 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression4674 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression4706 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression4711 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression4713 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression4745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x000E000000000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression4750 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression4753 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression4756 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression4760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x000E000000000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression4775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression4781 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression4784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression4797 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0030008000000000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression4810 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression4828 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression4842 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression4844 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression4858 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression4872 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression4902 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0030008000000000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression4919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression4925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression4931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression4937 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018E4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression4939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression4942 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0030008000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression4947 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0030008000000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5075 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x03C0000000000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression5107 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression5111 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression5115 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression5119 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5143 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x03C0000000000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression5160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression5166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression5172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression5178 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018E4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression5180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression5183 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x03C0000000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression5188 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x03C0000000000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression5284 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression5311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000120000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression5323 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression5329 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression5332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000642000000000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression5354 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression5357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000240000000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression5383 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression5385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000242000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression5411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression5417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression5540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression5542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression5588 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression5590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression5640 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5642 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression5645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression5647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression5699 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery5763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr5788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr5794 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr5796 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr5800 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr5802 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression5843 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression5848 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression5851 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression5855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression5869 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x6000080000000000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression5874 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression5877 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression5880 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression5884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x6000080000000000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression5899 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression5901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression5914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression5919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression5924 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_unaryExpression5927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression5929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression5935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression5947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression5953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression5958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression5963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression5980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression6002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression6024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression6026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr6059 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr6065 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr6068 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr6075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr6078 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr6086 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr6089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr6098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr6122 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr6127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr6129 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr6132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr6134 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr6141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr6145 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr6151 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr6158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr6162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression6202 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EBL});
    public static final BitSet FOLLOW_expression_in_arrayExpression6205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression6208 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_arrayExpression6210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression6217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc6240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6243 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6247 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6252 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc6264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6267 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6271 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6276 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc6288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6291 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6303 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6308 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc6323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc6340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6343 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6347 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6352 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc6364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6367 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6371 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6376 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc6388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6391 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6395 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6400 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc6412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6415 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6420 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6426 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc6439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6442 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6447 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc6450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc6458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc6464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6466 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc6469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc6481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6484 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc6492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc6498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc6508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6511 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6514 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_AS_in_builtinFunc6522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc6526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc6534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6537 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc6540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc6548 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc6571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc6576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc6580 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_maxFunc6583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc6586 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_maxFunc6589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc6592 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_maxFunc6595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc6602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction6621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction6626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction6639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction6641 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction6645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction6647 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018E4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction6650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction6654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_funcIdent6684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent6691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent6703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs6721 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs6726 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs6730 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs6733 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs6736 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList6750 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList6752 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000009C003AFFFL,0x0000000000000000L,0x9801824800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList6755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression6783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression6795 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression6800 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000124000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression6802 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_andExpression_in_orExpression6841 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression6846 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000124000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_andExpression_in_orExpression6848 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression6880 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression6885 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000124000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression6887 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression6922 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000124000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression6926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression6931 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000124000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression6933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression6998 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000124000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression7004 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000124000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression7010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression7012 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000124000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression7018 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000124000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression7027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList7142 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList7144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList7147 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList7149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList7153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom7176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix7191 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix7197 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000124000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix7199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix7201 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix7207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_guardExpression_in_guardPostFix7209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression7251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression7255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression7270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression7272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression7277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression7283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression7286 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98019E4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression7288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression7291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression7340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COLON_in_guardExpression7342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression7345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardExpression7347 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98019E4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardExpression7351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardExpression7355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange7369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000610000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange7416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange7442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000210800000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange7538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange7594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange7605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression7790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression7792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression7801 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000120000000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression7812 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018E4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression7814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression7817 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression7829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression7874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression7877 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic7907 = new BitSet(new long[]{0xC03801E80FFC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic7910 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic7912 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic7914 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic7918 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic7921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic7923 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic7928 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic7930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic7934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList7984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList7987 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList7990 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement8016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement8032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement8037 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement8040 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement8044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector8088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector8090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector8092 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector8095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector8099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression8146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression8148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression8157 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000120000000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression8168 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018E4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression8170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression8173 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression8185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier8240 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier8259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier8263 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy8308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy8343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy8347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList8389 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList8392 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98018A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expression_in_expressionList8395 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList8423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList8426 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000009C003AFFFL,0x0000000000000000L,0x98019A4800000000L,0x00000000200000EAL});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList8429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime8455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime8466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime8477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime8488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime8499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime8511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime8522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime8534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime8546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime8551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable8562 = new BitSet(new long[]{0x0600000000000002L,0x0000000007000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable8567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable8571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable8575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable8579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable8583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar8640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand8660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand8673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand8685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand8687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_number_in_frequencyOperand8690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand8694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand8696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand8745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand8749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand8751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand8754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_number_in_rangeOperand8757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand8761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand8763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator8877 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator8881 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator8883 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator8886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator8934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator8938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator8940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator8943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList8990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800084800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList8992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList8995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800084800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList8997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList9001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter9023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter9029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter9034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty9050 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty9053 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty9055 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic9081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000120000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic9090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic9094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic9096 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic9101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic9115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic9120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic9126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic9129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic9134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic9148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent9271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent9283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent9285 = new BitSet(new long[]{0xC03801E807FC4422L,0x000000000003A7BFL,0x0000000000000000L,0x0000004000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent9289 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent9328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent9337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent9344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent9351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent9358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent9369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent9376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent9383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent9390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent9397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent9404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent9411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent9418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent9425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent9432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent9439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent9446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent9453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent9460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent9467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent9474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent9481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent9488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent9495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent9502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent9509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent9516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent9523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent9530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent9537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent9544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent9551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent9560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent9567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent9574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent9581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent9588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent9595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent9616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent9625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod9648 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_hourPart_in_timePeriod9650 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_minutePart_in_timePeriod9653 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9656 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod9665 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_minutePart_in_timePeriod9667 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9670 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod9679 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9681 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800004800000000L,0x00000000000000CAL});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart9736 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart9740 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_substitution_in_dayPart9742 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart9746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart9750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart9799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart9803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_substitution_in_hourPart9805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart9809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart9813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart9862 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart9866 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_substitution_in_minutePart9868 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart9872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart9876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart9880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart9930 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart9934 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart9936 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart9940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart9944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart9948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart9998 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart10002 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart10004 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart10008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart10012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart10016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number10071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number10088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number10105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number10122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution10143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant10162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant10169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant10182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant10202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant10222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant10244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000800000000L,0x00000000000000C2L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant10250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000800000000L,0x00000000000000C2L});
    public static final BitSet FOLLOW_number_in_numberconstant10254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant10283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant10299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar4210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar5941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar6616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar8027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar8450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar8461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar8472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar8483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar8494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar8506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar8517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar8528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar8541 = new BitSet(new long[]{0x0000000000000002L});

}